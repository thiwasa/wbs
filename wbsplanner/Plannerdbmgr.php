<?php

// データベース通信クラス
class Plannerdbmgr {

  /**
   * 通信設定
   * @return PDO
   */
  private static function dbPDO() {
    // データベース通信設定
    $dsn = 'mysql:dbname=wsdb;host=localhost;charset=utf8';
    // $dsn = 'mysql:dbname=wsdb;host=192.168.1.201;charset=utf8';
    $user = 'user1';
    $password = getenv('WSDBPass');
    $dbh = new PDO($dsn, $user, $password, array(
      PDO::ATTR_EMULATE_PREPARES => false,
      PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
    ));
    return $dbh;
  }

  /**
   * データ取得の最大値セット
   * 設定ファイルで設定するべきであるが、定義がないのでPHPにて設定クラスを設けた
   */
  private static function setDataLimit() {
    $row = 10000;
    return $row;
  }

  // 空文字の場合、文字列の代わりにNullをバインドする
  private static function bindNullableStr($i, $key, $sth) {
    $sth->bindValue($i, ($key === ''|| $key === null) ? null : $key, ($key === ''|| $key === null) ? PDO::PARAM_NULL : PDO::PARAM_STR);
    return;
  }

  // デフォルト値をセットする
  private static function bindDefaultValue($i, $key, $defValue, $sth) {
    if (!isset($key)) {
      $sth->bindValue($i, $defValue, PDO::PARAM_STR);
    } else {
      $sth->bindValue($i, $key, PDO::PARAM_STR);
    }
  }

  // 空文字の場合、文字列の代わりにNullをバインドする
  private static function bindNullableInt($i, $key, $sth) {
    $sth->bindValue($i, ($key === ''|| $key === null) ? null : $key, ($key === ''|| $key === null) ? PDO::PARAM_NULL : PDO::PARAM_INT);
    return;
  }

  // 空文字または「未定」の場合、文字列の代わりにNullをバインドする
  private static function bindNullableDte($i, $key, $sth) {
    $sth->bindValue($i, (trim($key) === '' || trim($key) === '未定' || $key === null) ? null : trim($key), (trim($key) === '' || trim($key) === '未定' || $key === null) ? PDO::PARAM_NULL : PDO::PARAM_STR);
    return;
  }

  // マスタ更新時SQL作成
  private static function makeUpdateSQL($tbl, $cols) {
    $str = 'UPDATE ' . $tbl . ' SET ';
    $isFirstCol = true;
    foreach ($cols as $col) {
      $str .= ($isFirstCol === false ? ',' : '') . '`' . $col->field . '`'
        . '=:' . $col->field;
      $isFirstCol = false;
    }
    $isFirstCol = true;
    foreach ($cols as $col) {
      if ($col->pk === 'PRI') {
        $str .= ($isFirstCol === false ? ' AND ' : ' WHERE ') . '`' . $col->field . '`'
          . '=:U' . $col->field;
        $isFirstCol = false;
      }
    }
    return $str;
  }

  // マスタ更新または挿入SQL作成
  private static function makeUpsertSQL($tbl, $cols) {
    $str = 'INSERT INTO ' . $tbl . ' (';
    $isFirstCol = true;
    foreach ($cols as $col) {
      $str .= ($isFirstCol === false ? ',' : '') . '`' . $col->field . '`';
      $isFirstCol = false;
    }
    $str .= ') VALUES (';
    $isFirstCol = true;
    foreach ($cols as $col) {
      $str .= ($isFirstCol === false ? ',' : '') . ':' . $col->field;
      $isFirstCol = false;
    }
    $str .= ') ON DUPLICATE KEY UPDATE ';
    $isFirstCol = true;
    foreach ($cols as $col) {
      $str .= ($isFirstCol === false ? ',' : '') . '`' . $col->field . '`=:U' . $col->field;
      $isFirstCol = false;
    }
    return $str;
  }

  // テーブル行挿入SQL作成
  private static function makeInsertSQL($tbl, $cols) {
    $str = 'INSERT INTO ' . $tbl . ' (';
    $isFirstCol = true;
    foreach ($cols as $col) {
      $str .= ($isFirstCol === false ? ',' : '') . '`' . $col->field . '`';
      $isFirstCol = false;
    }
    $str .= ') VALUES (';
    $isFirstCol = true;
    foreach ($cols as $col) {
      $str .= ($isFirstCol === false ? ',' : '') . ':' . $col->field;
      $isFirstCol = false;
    }
    $str .= ')';
    return $str;
  }


  // マスタ削除時SQL作成
  private static function makeDeleteSQL($tbl, $cols) {
    $str = 'DELETE FROM ' . $tbl . '';
    $isFirstCol = true;
    foreach ($cols as $col) {
      if ($col->pk === 'PRI') {
        $str .= ($isFirstCol === false ? ' AND ' : ' WHERE ') . '`' . $col->field . '`=:' . $col->field;
        $isFirstCol = false;
      }
    }
    return $str;
  }

  // ヘッダ削除時用の明細行全削除SQL作成
  private static function makeDeleteAllDetailsSQL($tbl, $cols) {
    $str = 'DELETE FROM ' . $tbl . '';
    $isFirstCol = true;
    foreach ($cols as $col) {
      if ($col->pk === 'PRI' && $col->isHeaderPK === true) {
        $str .= ($isFirstCol === false ? ' AND ' : ' WHERE ') . '`' . $col->field . '`=:' . $col->field;
        $isFirstCol = false;
      }
    }
    return $str;
  }

  // 主キー前回値の有無確認
  private static function hasPrevPK($cols, $key) {
    $prevPKAvailable = true;
    foreach ($cols as $col) {
      if ($col->pk === 'PRI') {
        if (!isset($key[$col->field . '_PREVVAL'])) {
          $prevPKAvailable = false;
          break;
        }
      }
    }
    return $prevPKAvailable;
  }

  // 納品データ前回値の有無確認
  private static function hasBeforeValue($cols, $key) {
    $prevBFAvailable = true;
    foreach ($cols as $col) {
      if ($cols->field === 'sd_qty_delivery') {
        if (!isset($key[$col->field . '_BEFORE'])) {
          $prevBFAvailable = false;
          break;
        }
      }
      if ($cols->field === 'sd_delivery_price') {
        if (!isset($key[$col->field . '_BEFORE'])) {
          $prevBFAvailable = false;
          break;
        }
      }
      // if ($col->pk === 'PRI') {
      //   if (!isset($key[$col->field . '_BEFORE'])) {
      //     $prevBFAvailable = false;
      //     break;
      //   }
      // }
    }
    return $prevBFAvailable;
  }


  // マスタ更新時キー代入
  private static function bindUpsertKeys($sth, $cols, $key) {
    error_reporting(E_ALL & ~E_NOTICE);
    foreach ($cols as $col) {
      //$prevfield = $col->pk === 'PRI' ? (isset($key[$col->field . '_PREVVAL']) ? $col->field . '_PREVVAL' : $col->field) : $col->field;
      $field = $col->field;
      $isNullable = $col->nullable === 'YES' || $col->extra === 'auto_increment';
      switch (preg_replace('/[^a-z]/', '', $col->type)) {
        case 'varchar':
          if ($isNullable) {
            self::bindNullableStr(':' . $field, $key[$field], $sth);
            self::bindNullableStr(':U' . $field, $key[$field], $sth);
          } else {
            $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
            $sth->bindValue(':U' . $field, $key[$field], PDO::PARAM_STR);
          }
          break;
        case 'int':
          if ($isNullable) {
            self::bindNullableInt(':' . $field, $key[$field], $sth);
            self::bindNullableInt(':U' . $field, $key[$field], $sth);
          } else {
            $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_INT);
            $sth->bindValue(':U' . $field, $key[$field], PDO::PARAM_INT);
          }
          break;
        case 'date':
          if ($isNullable) {
            self::bindNullableDte(':' . $field, $key[$field], $sth);
            self::bindNullableDte(':U' . $field, $key[$field], $sth);
          } else {
            $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
            $sth->bindValue(':U' . $field, $key[$field], PDO::PARAM_STR);
          }
          break;
        default:
          if ($isNullable) {
            self::bindNullableStr(':' . $field, $key[$field], $sth);
            self::bindNullableStr(':U' . $field, $key[$field], $sth);
          } else {
            $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
            $sth->bindValue(':U' . $field, $key[$field], PDO::PARAM_STR);
          }
          break;
      }
    }
  }

  private static function bindInsertKeys($sth, $cols, $key) {
    error_reporting(E_ALL & ~E_NOTICE);
    foreach ($cols as $col) {
      $prevfield = $col->pk === 'PRI' ?(isset($key[$col->field . '_PREVVAL']) ? $col->field . '_PREVVAL' : $col->field) : $col->field;
      $field = $col->field;
      $isNullable = $col->nullable === 'YES' || $col->extra === 'auto_increment';
      $defValue = $col->default;
      switch (preg_replace('/[^a-z]/', '', $col->type)) {
        case 'varchar':
          if ($isNullable) {
            // self::bindNullableStr(':' . $field, $key[$field], $sth);
            self::bindDefaultValue(':' . $field, $key[$field], $defValue, $sth);
          } else {
            $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
          }
          break;
        case 'int':
          if ($isNullable) {
            // self::bindNullableInt(':' . $field, $key[$field], $sth);
            self::bindDefaultValue(':' . $field, $key[$field], $defValue, $sth);
          } else {
            $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_INT);
          }
          break;
        case 'date':
          if ($isNullable) {
            // self::bindNullableDte(':' . $field, $key[$field], $sth);
            self::bindDefaultValue(':' . $field, $key[$field], $defValue, $sth);
          } else {
            $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
          }
          break;
        default:
          if ($isNullable) {
            // self::bindNullableStr(':' . $field, $key[$field], $sth);
            self::bindDefaultValue(':' . $field, $key[$field], $defValue, $sth);
          } else {
            $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
          }
          break; 
      }
    }
  }

  // マスタ更新時キー代入(主キー前回値の指定必須)
  private static function bindUpdateKeys($sth, $cols, $key) {
    error_reporting(E_ALL & ~E_NOTICE);
    foreach ($cols as $col) {
      $isPK = ($col->pk === 'PRI');
      $prevfield = $col->field . '_PREVVAL';
      $field = $col->field;
      $isNullable = $col->nullable === 'YES' || $col->extra === 'auto_increment';
      switch (preg_replace('/[^a-z]/', '', $col->type)) {
        case 'varchar':
          if ($isNullable) {
            self::bindNullableStr(':' . $field, $key[$field], $sth);
            if ($isPK) { self::bindNullableStr(':U' . $field, $key[$prevfield], $sth); }
          } else {
            $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
            if ($isPK) { $sth->bindValue(':U' . $field, $key[$prevfield], PDO::PARAM_STR); }
          }
          break;
        case 'int':
          if ($isNullable) {
            self::bindNullableInt(':' . $field, $key[$field], $sth);
            if ($isPK) { self::bindNullableInt(':U' . $field, $key[$prevfield], $sth); }
          } else {
            $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_INT);
            if ($isPK) { $sth->bindValue(':U' . $field, $key[$prevfield], PDO::PARAM_INT); }
          }
          break;
        case 'date':
          if ($isNullable) {
            self::bindNullableDte(':' . $field, $key[$field], $sth);
            if ($isPK) { self::bindNullableDte(':U' . $field, $key[$prevfield], $sth); }
          } else {
            $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
            if ($isPK) { $sth->bindValue(':U' . $field, $key[$prevfield], PDO::PARAM_STR); }
          }
          break;
        default:
          if ($isNullable) {
            self::bindNullableStr(':' . $field, $key[$field], $sth);
            if ($isPK) { self::bindNullableStr(':U' . $field, $key[$prevfield], $sth); }
          } else {
            $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
            if ($isPK) { $sth->bindValue(':U' . $field, $key[$prevfield], PDO::PARAM_STR); }
          }
          break;
      }
    }
  }

  
  // private static function bindValueToInsertKeys($sth, $cols, $key) {
  //   error_reporting(E_ALL & ~E_NOTICE);
  //   foreach ($cols as $col) {
  //     $prevfield = $col->pk === 'PRI' ?(isset($key[$col->field . '_PREVVAL']) ? $col->field . '_PREVVAL' : $col->field) : $col->field;
  //     $field = $col->field;
  //     $isNullable = $col->nullable === 'YES' || $col->extra === 'auto_increment';
  //     $defValue = $col->default;
  //     switch (preg_replace('/[^a-z]/', '', $col->type)) {
  //       case 'varchar':
  //         if ($isNullable) {
  //           // self::bindNullableStr(':' . $field, $key[$field], $sth);
  //           self::bindDefaultValue(':' . $field, $key[$field], $defValue, $sth);
  //         } else {
  //           $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
  //         }
  //         break;
  //       case 'int':
  //         if ($isNullable) {
  //           // self::bindNullableInt(':' . $field, $key[$field], $sth);
  //           self::bindDefaultValue(':' . $field, $key[$field], $defValue, $sth);
  //         } else {
  //           $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_INT);
  //         }
  //         break;
  //       case 'date':
  //         if ($isNullable) {
  //           // self::bindNullableDte(':' . $field, $key[$field], $sth);
  //           self::bindDefaultValue(':' . $field, $key[$field], $defValue, $sth);
  //         } else {
  //           $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
  //         }
  //         break;
  //       default:
  //         if ($isNullable) {
  //           // self::bindNullableStr(':' . $field, $key[$field], $sth);
  //           self::bindDefaultValue(':' . $field, $key[$field], $defValue, $sth);
  //         } else {
  //           $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
  //         }
  //         break; 
  //     }
  //   }
  // }


  /**
   * DBのDefault値を利用してデータバインドする
   */
  private static function bindValueToUpdate($sth, $cols, $key) {
    foreach ($cols as $col) {
      $isPK = ($col->pk === 'PRI');
      $prevfield = $col->field . '_PREVVAL';
      $field = $col->field;
      $isNullable = $col->nullable === 'YES' || $col->extra === 'auto_increment';
      $defValue = $col->default;
      switch (preg_replace('/[^a-z]/', '', $col->type)) {
        case 'varchar':
          self::bindDefaultValue(':' . $field, $key[$field], $defValue, $sth);
          // $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
          if ($isPK) {
            self::bindDefaultValue(':U' . $field, $key[$field], $defValue, $sth);
            // $sth->bindValue(':U' . $field, $key[$field], PDO::PARAM_STR); 
          }
          break;
        case 'decimal':
          self::bindDefaultValue(':' . $field, $key[$field], $defValue, $sth);
          // $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
          if ($isPK) {
            self::bindDefaultValue(':U' . $field, $key[$field], $defValue, $sth);
            // $sth->bindValue(':U' . $field, $key[$field], PDO::PARAM_STR); 
          }
          break;
        case 'int':
          self::bindDefaultValue(':' . $field, $key[$field], $defValue, $sth);
          // $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_INT);
          if ($isPK) {
            self::bindDefaultValue(':U' . $field, $key[$field], $defValue, $sth);
            // $sth->bindValue(':U' . $field, $key[$field], PDO::PARAM_INT); 
          }
          break;
        default:
          self::bindDefaultValue(':' . $field, $key[$field], $defValue, $sth);
          // $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
          if ($isPK) {
            self::bindDefaultValue(':U' . $field, $key[$field], $defValue, $sth);
            // $sth->bindValue(':U' . $field, $key[$field], PDO::PARAM_STR); 
          }
          break;
      }
    }
  }

  // マスタ削除時キー代入
  // 削除対象とする行の主キーには、前回値を使用する。前回の主キーが指定されていなければ削除しない
  private static function bindDeleteKeys($sth, $cols, $key, $usePrevKey) {
    error_reporting(E_ALL & ~E_NOTICE);
    foreach ($cols as $col) {
      if ($col->pk === 'PRI') {
        $prifield = $usePrevKey ? ($col->field . '_PREVVAL') : $col->field;
        $field = $col->field;
        $isNullable = $col->nullable === 'YES';
        switch (preg_replace('/[^a-z]/', '', $col->type)) {
          case 'varchar':
            if ($isNullable) {
              self::bindNullableStr(':' . $field, $key[$prifield], $sth);
            } else {
              $sth->bindValue(':' . $field, $key[$prifield], PDO::PARAM_STR);
            }
            break;
          case 'int':
            if ($isNullable) {
              self::bindNullableInt(':' . $field, $key[$prifield], $sth);
            } else {
              $sth->bindValue(':' . $field, $key[$prifield], PDO::PARAM_INT);
            }
            break;
          case 'date':
            if ($isNullable) {
              self::bindNullableDte(':' . $field, $key[$prifield], $sth);
            } else {
              $sth->bindValue(':' . $field, $key[$prifield], PDO::PARAM_STR);
            }
            break;
          default:
            if ($isNullable) {
              self::bindNullableStr(':' . $field, $key[$prifield], $sth);
            } else {
              $sth->bindValue(':' . $field, $key[$prifield], PDO::PARAM_STR);
            }
            break;
        }
      }
    }
  }

  // マスタ明細行削除時キー代入
  private static function bindDeleteAllDetailsKeys($sth, $cols, $key, $usePrevKey) {
    error_reporting(E_ALL & ~E_NOTICE);
    foreach ($cols as $col) {
      if ($col->pk === 'PRI' && $col->isHeaderPK === true) {
        $prifield = $usePrevKey ? ($col->field . '_PREVVAL') : $col->field;
        $field = $col->field;
        $isNullable = $col->nullable === 'YES';
        switch (preg_replace('/[^a-z]/', '', $col->type)) {
          case 'varchar':
            if ($isNullable) {
              self::bindNullableStr(':' . $field, $key[$field], $sth);
            } else {
              $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
            }
            break;
          case 'int':
            if ($isNullable) {
              self::bindNullableInt(':' . $field, $key[$field], $sth);
            } else {
              $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_INT);
            }
            break;
          case 'date':
            if ($isNullable) {
              self::bindNullableDte(':' . $field, $key[$field], $sth);
            } else {
              $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
            }
            break;
          default:
            if ($isNullable) {
              self::bindNullableStr(':' . $field, $key[$field], $sth);
            } else {
              $sth->bindValue(':' . $field, $key[$field], PDO::PARAM_STR);
            }
            break;
        }
      }
    }
  }

  // クライアント側から送られた情報を記録する
  public static function reportMsg($str) {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('INSERT INTO `debugmsg` (`dbg_msg`) VALUES (:dbg_msg)');
      $sth->bindValue(':dbg_msg', $str, PDO::PARAM_STR);
      $sth->execute();
    } catch (Exception $e) {
      throw $e;
    }
    return;
  }


  /**
   * 引当する在庫があるか確認
   * 出荷画面でのリアルタイム更新用
   */
  public static function checkShippingAssign($dC) {
    $dbh = self::dbPDO();
    try { 
      // 出荷引当テーブルにデータがあるか確認
      $sth = $dbh->prepare('
      SELECT sas_quantity FROM shippingassign
      WHERE sas_belong_cd = :BELONGCD AND 
      sas_estimate_no = :ESTNO AND 
      sas_statement_sub_no = :STNO AND 
      sas_estimate_sub_no = :ESTSUBNO AND 
      sas_shipment_sub_no = :SHIPNO
      ;');
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':ESTNO', $dC['s_estimate_no'], PDO::PARAM_STR);
      $sth->bindValue(':STNO', $dC['s_serial_no'], PDO::PARAM_STR);
      $sth->bindValue(':ESTSUBNO', $dC['sd_estimate_sub_no'], PDO::PARAM_STR);
      $sth->bindValue(':SHIPNO', $dC['sd_shipment_sub_no'], PDO::PARAM_STR);
      $sth->execute();
      $confirmData = $sth->fetchAll(PDO::FETCH_ASSOC);

      $sth = $dbh->prepare('
      SELECT sas_quantity FROM shippingassign
      WHERE sas_belong_cd = :BELONGCD AND 
      sas_estimate_no = :ESTNO AND 
      sas_statement_sub_no = "0000" AND 
      sas_estimate_sub_no = :ESTSUBNO AND 
      sas_shipment_sub_no = :SHIPNO
      ;');
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':ESTNO', $dC['s_estimate_no'], PDO::PARAM_STR);
      $sth->bindValue(':ESTSUBNO', $dC['sd_estimate_sub_no'], PDO::PARAM_STR);
      $sth->bindValue(':SHIPNO', $dC['sd_shipment_sub_no'], PDO::PARAM_STR);
      $sth->execute();
      $planData = $sth->fetchAll(PDO::FETCH_ASSOC);
      
      $result = json_encode($confirmData[0]['sas_quantity'] + $planData[0]['sas_quantity']);
      echo $result;
      
      
    } catch (exception $e) {
      throw $e;
    }
    return;
  }

  // 製造計画を読込する
  public static function readProdplans() {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('
      SELECT pd.*, 
      pd.pd_p_cd AS productcd,
      pd.pd_ed_sub_01 AS sub01,
      pd.pd_ed_sub_02 AS sub02,
      pd.pd_ed_sub_03 AS sub03,
      pd.pd_ed_sub_04 AS sub04,
      pd.pd_ed_sub_05 AS sub05,
      pd.pd_ed_sub_06 AS sub06,
      pd.pd_ed_sub_08 AS sub08,
      pd.pd_ed_sub_09 AS sub09,
      pd.pd_ed_sub_10 AS sub10,
      pd.pd_ed_sub_11 AS sub11,
      pd.pd_ed_sub_12 AS sub12,
      pd.pd_ed_sub_13 AS sub13,
      p.p_name AS pd_p_name,
      ar.ar_cd,
      ar.ar_name,
      C_CUSTOMER_NAME AS pd_e_customer_name,
      e_estimate_date AS pd_e_estimate_date,
      e_shipplan_date AS pd_e_shipplan_date,
      "" AS pd_p_name_supple_01, "" AS pd_p_name_supple_02,
      w.w_name as pd_place_name,
      pd.pd_disp_order,
      /*IF(SUBSTR(pd.pd_disp_order, 3, 1) = 0, "", SUBSTR(pd.pd_disp_order, 3, 1)) AS pd_group_order, */     
      cd30.pd_plan_interval AS pd_process_cd_30,
      cd40.pd_plan_interval AS pd_process_cd_40,
      cd50.pd_plan_interval AS pd_process_cd_50,
      cd80.pd_plan_interval AS pd_process_cd_80,
      IF(pd.pd_leaf_no = "" OR pd.pd_leaf_no IS NULL, "0", "1") AS pd_leaf_create_flg,
      p.p_type,
      p.p_name AS productname,
      ed_customer_p_name AS customerpname
      FROM prodplans AS pd 
      LEFT JOIN (SELECT * FROM prodplans WHERE pd_prod_plan_sub_no = "000" AND pd_process_cd = "30") AS cd30 ON cd30.pd_prod_plan_no = pd.pd_prod_plan_no
      LEFT JOIN (SELECT * FROM prodplans WHERE pd_prod_plan_sub_no = "000" AND pd_process_cd = "40") AS cd40 ON cd40.pd_prod_plan_no = pd.pd_prod_plan_no
      LEFT JOIN (SELECT * FROM prodplans WHERE pd_prod_plan_sub_no = "000" AND pd_process_cd = "50") AS cd50 ON cd50.pd_prod_plan_no = pd.pd_prod_plan_no
      LEFT JOIN (SELECT * FROM prodplans WHERE pd_prod_plan_sub_no = "000" AND pd_process_cd = "80") AS cd80 ON cd80.pd_prod_plan_no = pd.pd_prod_plan_no      
      LEFT JOIN estimatedetails AS ed ON ed.ed_belong_cd = pd.pd_belong_cd AND ed.ed_estimate_no  = pd.pd_e_estimate_no AND ed.ed_estimate_sub_no = pd.pd_e_estimate_sub_no 
      LEFT JOIN estimate AS e ON e.e_belong_cd = pd.pd_belong_cd AND e.e_estimate_no = pd.pd_e_estimate_no
      LEFT JOIN customer ON pd.pd_e_customer_cd = C_CUSTOMER_CD
      LEFT JOIN warehouse AS w ON w.w_cd = pd.pd_place_cd
      LEFT JOIN arrangement AS ar ON ar.ar_belong_cd = pd.pd_belong_cd AND ar.ar_sub_cd = pd.pd_par_cd 
      LEFT JOIN parrangement AS par ON par.par_belong_cd = pd.pd_belong_cd AND par.par_cd = pd.pd_ar_cd
      LEFT JOIN product AS p ON p.p_belong_cd = pd.pd_belong_cd AND p.p_cd = pd.pd_p_cd
      WHERE pd.pd_prod_plan_sub_no <> "000" AND pd.pd_process_cd = "00"
      ORDER BY pd.pd_prod_plan_no DESC, pd.pd_prod_plan_sub_no ASC
      LIMIT
      ' . self::setDataLimit() . ';');
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      $temp = [];
      $results = [];
      foreach ($result as $rec) {
        $rec['sub04'] = self::convertStrRoundDownToNumber($rec['sub04']);
        $rec['sub05'] = self::convertStrRoundDownToNumber($rec['sub05']);
        $rec['sub08'] = self::convertStrRoundDownToNumber($rec['sub08']);
        $rec['sub09'] = self::convertStrRoundDownToNumber($rec['sub09']);

        $temp = BookMaker::makeArrayProductSpec($rec);
        $rec['pd_p_name_supple_01'] = $temp[1];
        $rec['pd_p_name_supple_02'] = $temp[2];
        array_push($results, $rec);
      }

      echo json_encode($results);
    } catch (Exception $e) {
      throw $e;
    }
    return;
  }

  /** 
   * 金網情報取得用
   */
  public static function searchProdPlans($dat) {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('SELECT pd.*,
      p.p_cd, p.p_name,
      pd_e_shipper_cd AS pp_shipment_cd,
      pd_e_delivery_cd AS pp_delivery_cd,
      c1.CP_POST_NAME AS pw_e_shipper_name,
      c2.CP_POST_NAME AS pw_e_delivery_name,
      0 AS pp_cam,
      p2.p_name AS pp_material_name_01,
      p2.p_cd AS pp_material_cd_01,
      m1.m_name AS pp_raw_material_01,
      pd_material_unit_cost AS pp_sum_plan_cost,
      round(pd_ed_sub_08 * pd_ed_sub_09 / 1000000, 2) AS pw_dimension,
      ec.ec_material_unit_cost AS pp_material_cost,
      u_name AS pp_unit,
      IF(pd_ed_sub_01=pd_ed_sub_02, round(w1.wm_weight * m.m_s_gravity, 2), 
      round((w1.wm_weight * m.m_s_gravity + w2.wm_weight * m.m_s_gravity)/2,2)) AS pp_unit_weight,
      round(((CAST(pd_ed_sub_08 AS SIGNED)/10*CAST(pd_ed_sub_09 AS SIGNED)/10)/10000 * 
      CAST(pd_ed_quantity AS SIGNED)),2) AS pw_calc_dimension,
      2 AS pw_side_num,
      SUBSTR(pd_disp_order, 3,1) AS pw_group_sign
      FROM prodplans AS pd 
      LEFT JOIN estimatedetails AS ed ON ed.ed_belong_cd = pd.pd_belong_cd AND ed.ed_estimate_no  = pd.pd_e_estimate_no AND ed.ed_estimate_sub_no = pd.pd_e_estimate_sub_no 
      LEFT JOIN estimate AS e ON e.e_belong_cd = pd.pd_belong_cd AND e.e_estimate_no = pd.pd_e_estimate_no
      LEFT JOIN estimate_calc AS ec ON ec.ec_belong_cd = pd.pd_belong_cd AND ec.ec_estimate_no  = pd.pd_e_estimate_no AND ec.ec_estimatecalc_no > 0
      LEFT JOIN projects AS pj ON pj.id = pd.pd_proj_cd
      LEFT JOIN warehouse AS w ON w.w_cd = pd.pd_place_cd
      LEFT JOIN arrangement AS ar ON ar.ar_belong_cd = pd.pd_belong_cd AND ar.ar_cd = pd.pd_ar_cd 
      /*LEFT JOIN manufacture AS mn ON mn.mn_belong_cd = pd.pd_belong_cd AND mn.mn_cd = pd.pd_mn_cd*/
      LEFT JOIN product AS p ON p.p_belong_cd = pd.pd_belong_cd AND p.p_cd = pd.pd_p_cd
      LEFT JOIN product AS p2 ON p.p_belong_cd = p2.p_belong_cd AND p2.p_cd = p.p_raw_material_cd
      LEFT JOIN unit AS u ON u.u_belong_cd = p.p_belong_cd AND u.u_cd = p.p_unit_tran
      LEFT JOIN material AS m1 ON m1.m_belong_cd = p2.p_belong_cd AND m1.m_cd = SUBSTR(p2.p_cd, 1 ,3)
      LEFT JOIN weight AS w1 ON w1.wm_belong_cd = ed.ed_belong_cd AND w1.wm_cd = SUBSTR(ed.ed_p_cd, 4,1) AND w1.wm_dia = ed.ed_sub_01 
      AND w1.wm_type_mesh = IF(ed.ed_sub_03 IS NULL OR ed.ed_sub_03="", "0", "1") AND w1.wm_mesh = ed.ed_sub_04 AND w1.wm_unit_cd = IF(ed.ed_sub_06="mm","mm","mesh")
      LEFT JOIN weight AS w2 ON w2.wm_belong_cd = ed.ed_belong_cd AND w2.wm_cd = SUBSTR(ed.ed_p_cd, 4,1) AND w2.wm_dia = ed.ed_sub_02  
      AND w2.wm_type_mesh = IF(ed.ed_sub_03 IS NULL OR ed.ed_sub_03="", "0", "1") AND w2.wm_mesh = ed.ed_sub_05   AND w2.wm_unit_cd = IF(ed.ed_sub_06="mm","mm","mesh")
      LEFT JOIN material AS m ON m.m_belong_cd = pd.pd_belong_cd AND m.m_cd = LEFT(pd.pd_p_cd,3) 
      LEFT JOIN customerpost AS c1 ON c1.CP_CUSTOMER_CD = pd.pd_e_customer_cd AND   c1.CP_POST_CD = pd.pd_e_shipper_cd
      LEFT JOIN customerpost AS c2 ON c1.CP_CUSTOMER_CD = pd.pd_e_customer_cd AND   c2.CP_POST_CD = pd.pd_e_delivery_cd
      WHERE pd.pd_belong_cd = :BELONGCD AND pd.pd_prod_plan_no = :PLANNO
      ');
      $sth->bindValue(':BELONGCD', $dat[0]['pd_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue(':PLANNO', $dat[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
      echo $result;
    } catch (Exception $e) {
      throw $e;
    }
  }

  // 出荷計画を読込する
  public static function readShipplans() {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('SELECT SPD.*, SP.*,
        CASE WHEN MAX(l.l_id) IS NULL THEN 0 ELSE 1 END AS leaf_issued
        FROM shipplandetails AS SPD
        LEFT JOIN shipplans AS SP ON SP.sp_id = SPD.spd_shipplan_id
        LEFT JOIN leafship AS l ON l.l_spd_shipplan_id = SPD.spd_shipplan_id
          AND l.l_spd_row = SPD.spd_row
          GROUP BY SPD.spd_shipplan_id, SPD.spd_row
          ORDER BY SPD.spd_shipplan_id DESC, SPD.spd_row ASC
      LIMIT ' . self::setDataLimit() . ';');
      $sth->execute();
      $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
      echo $result;
    } catch (Exception $e) {
      throw $e;
    }
    return;
  }

  // 見積明細を読込する
  public static function readED() {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('
      SELECT e.*, ed.*, p.*, 
      C_CUSTOMER_NAME AS e_customer_name,
      CC.CC_CHARGE_NAME AS e_customer_sales_name,
      IF(e_remarks LIKE "STONE%" OR e_remarks LIKE "Takenaka Wire Cloth Co,.Ltd%" OR e_remarks LIKE "竹中金網 株式会社%", TRIM(CAST(substring(CAST(e_remarks AS BINARY), 1,30) AS char)), "") AS e_logo_01,
      IF(e_remarks LIKE "STONE%" OR e_remarks LIKE "Takenaka Wire Cloth Co,.Ltd%" OR e_remarks LIKE "竹中金網 株式会社%", "", TRIM(CAST(substring(CAST(e_remarks AS BINARY), 1, 30) AS char))) AS e_logo_02,
      TRIM(CAST(substring(CAST(e_remarks AS BINARY), 31) AS char)) AS e_remark_01,
      LEFT(ed.ed_sub_07, 1) AS calcno,
      IF(ed_desired_delivery_date IS NULL OR ed_desired_delivery_date = "", e_desired_delivery_date, ed_desired_delivery_date) AS ed_desired_delivery_date,
      IF(e.e_estimate_date <> "", "1", "0") AS e_estimate_sign,
      ed.ed_type_02 AS e_delivery_timing,
      ed.ed_type_07 AS ed_type_moed,
      IF(ed.ed_deliv_create_date IS NOT NULL, "1", "0") AS ed_statement_sign,
      p.p_name AS ed_p_name,
      p.p_name AS productname,
      ed_sub_01 AS sub01,
      ed_sub_02 AS sub02,
      ed_sub_03 AS sub03,
      ed_sub_04 AS sub04,
      ed_sub_05 AS sub05,
      ed_sub_06 AS sub06,
      ed_sub_07 AS sub07,
      ed_sub_08 AS sub08,
      ed_sub_09 AS sub09,
      ed_sub_10 AS sub10,
      ed_sub_11 AS sub11,
      ed_sub_12 AS sub12,
      ed_sub_13 AS sub13,
      ed_sub_num_03 AS wireno,
      ar_name,
      ed_customer_p_name AS customerpname,
      IF(ed.ed_sub_num_03 > 0, TRUNCATE(ed.ed_sub_num_03, 0), "") AS pd_ed_wire_no,
      IF(ed.ed_sub_num_03 > 0, TRUNCATE(ed.ed_sub_num_03, 0), "") AS ed_sub_num_03,
      IF (ed.ed_sub_03 = "P", "P", " ") AS ed_sub_03_str,
      shipper.CP_POST_NAME AS e_shipper_name,
      delivery.CP_POST_NAME AS e_delivery_name
      FROM estimatedetails AS ed
      LEFT JOIN estimate AS e ON e.e_belong_cd = ed.ed_belong_cd AND e.e_estimate_no = ed.ed_estimate_no
      LEFT JOIN product AS p ON p.p_belong_cd = ed.ed_belong_cd AND p.p_cd = ed.ed_p_cd 
      LEFT JOIN CUSTOMER AS C ON e.e_customer_cd = C.C_CUSTOMER_CD
      LEFT JOIN customercharge AS CC ON e.e_customer_cd = CC.CC_CUSTOMER_ID AND e.e_customer_cd = CC.CC_CUSTOMER_CD AND e.e_customer_post_cd = CC_POST_CD AND e.e_customer_charge_cd = CC.CC_CHARGE_CD
      LEFT JOIN arrangement AS ar ON  ar.ar_belong_cd = ed.ed_belong_cd AND ar.ar_sub_cd = ed.ed_parrangement_cd
      LEFT JOIN customerpost AS shipper ON e.e_customer_cd = shipper.CP_CUSTOMER_ID AND e.e_customer_cd = shipper.CP_CUSTOMER_ID AND e.e_shipper_cd = shipper.CP_POST_CD
      LEFT JOIN customerpost AS delivery ON e.e_customer_cd = delivery.CP_CUSTOMER_ID AND e.e_customer_cd = delivery.CP_CUSTOMER_ID AND e.e_delivery_cd = delivery.CP_POST_CD
      WHERE e_type_continue = "0"
      ORDER BY e.e_estimate_no DESC, ed.ed_estimate_sub_no ASC 
      LIMIT ' . self::setDataLimit() . ';');
      $sth->execute();
      $edList = $sth->fetchAll(PDO::FETCH_ASSOC);

      // $sth = $dbh->prepare('SELECT * FROM statementdetails;');
      // $sth->execute();
      // $sdList = $sth->fetchAll(PDO::FETCH_ASSOC);

      $results = [];
      foreach($edList as $edRecord) {
        $dat = BookMaker::makeArrayProductSpec($edRecord);
        $edRecord['sd_p_name_supple_01'] = $dat[1];
        $edRecord['sd_p_name_supple_02'] = $dat[2];
        array_push($results, $edRecord);
      }
      echo json_encode($results);

    } catch (Exception $e) {
      throw $e;
    }
    return;
  }

  // 見積明細を無制限で読込する
  public static function readUnlimitedED() {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('
      SELECT e.*, ed.*, p.*, 
      C_CUSTOMER_NAME AS e_customer_name,
      CC.CC_CHARGE_NAME AS e_customer_sales_name,
      IF(e_remarks LIKE "STONE%" OR e_remarks LIKE "Takenaka Wire Cloth Co,.Ltd%" OR e_remarks LIKE "竹中金網 株式会社%", TRIM(CAST(substring(CAST(e_remarks AS BINARY), 1,30) AS char)), "") AS e_logo_01,
      IF(e_remarks LIKE "STONE%" OR e_remarks LIKE "Takenaka Wire Cloth Co,.Ltd%" OR e_remarks LIKE "竹中金網 株式会社%", "", TRIM(CAST(substring(CAST(e_remarks AS BINARY), 1, 30) AS char))) AS e_logo_02,
      TRIM(CAST(substring(CAST(e_remarks AS BINARY), 31) AS char)) AS e_remark_01,
      LEFT(ed.ed_sub_07, 1) AS calcno,
      IF(ed_desired_delivery_date IS NULL OR ed_desired_delivery_date = "", e_desired_delivery_date, ed_desired_delivery_date) AS ed_desired_delivery_date,
      IF(e.e_estimate_date <> "", "1", "0") AS e_estimate_sign,
      ed.ed_type_02 AS e_delivery_timing,
      ed.ed_type_07 AS ed_type_moed,
      IF(ed.ed_deliv_create_date IS NOT NULL, "1", "0") AS ed_statement_sign,
      p.p_name AS ed_p_name,
      p.p_name AS productname,
      ed_sub_01 AS sub01,
      ed_sub_02 AS sub02,
      ed_sub_03 AS sub03,
      ed_sub_04 AS sub04,
      ed_sub_05 AS sub05,
      ed_sub_06 AS sub06,
      ed_sub_07 AS sub07,
      ed_sub_08 AS sub08,
      ed_sub_09 AS sub09,
      ed_sub_10 AS sub10,
      ed_sub_11 AS sub11,
      ed_sub_12 AS sub12,
      ed_sub_13 AS sub13,
      ed_sub_num_03 AS wireno,
      ar_name,
      ed_customer_p_name AS customerpname,
      IF(ed.ed_sub_num_03 > 0, TRUNCATE(ed.ed_sub_num_03, 0), "") AS pd_ed_wire_no,
      IF(ed.ed_sub_num_03 > 0, TRUNCATE(ed.ed_sub_num_03, 0), "") AS ed_sub_num_03,
      IF (ed.ed_sub_03 = "P", "P", " ") AS ed_sub_03_str,
      shipper.CP_POST_NAME AS e_shipper_name,
      delivery.CP_POST_NAME AS e_delivery_name
      FROM estimatedetails AS ed
      LEFT JOIN estimate AS e ON e.e_belong_cd = ed.ed_belong_cd AND e.e_estimate_no = ed.ed_estimate_no
      LEFT JOIN product AS p ON p.p_belong_cd = ed.ed_belong_cd AND p.p_cd = ed.ed_p_cd 
      LEFT JOIN CUSTOMER AS C ON e.e_customer_cd = C.C_CUSTOMER_CD
      LEFT JOIN customercharge AS CC ON e.e_customer_cd = CC.CC_CUSTOMER_ID AND e.e_customer_cd = CC.CC_CUSTOMER_CD AND e.e_customer_post_cd = CC_POST_CD AND e.e_customer_charge_cd = CC.CC_CHARGE_CD
      LEFT JOIN arrangement AS ar ON  ar.ar_belong_cd = ed.ed_belong_cd AND ar.ar_sub_cd = ed.ed_parrangement_cd
      LEFT JOIN customerpost AS shipper ON e.e_customer_cd = shipper.CP_CUSTOMER_ID AND e.e_customer_cd = shipper.CP_CUSTOMER_ID AND e.e_shipper_cd = shipper.CP_POST_CD
      LEFT JOIN customerpost AS delivery ON e.e_customer_cd = delivery.CP_CUSTOMER_ID AND e.e_customer_cd = delivery.CP_CUSTOMER_ID AND e.e_delivery_cd = delivery.CP_POST_CD
      WHERE e_type_continue = "0"
      ORDER BY e.e_estimate_no DESC, ed.ed_estimate_sub_no ASC 
      ;');
      $sth->execute();
      $edList = $sth->fetchAll(PDO::FETCH_ASSOC);

      $results = [];
      foreach($edList as $edRecord) {
        $dat = BookMaker::makeArrayProductSpec($edRecord);
        $edRecord['sd_p_name_supple_01'] = $dat[1];
        $edRecord['sd_p_name_supple_02'] = $dat[2];
        array_push($results, $edRecord);
      }
      echo json_encode($results);

    } catch (Exception $e) {
      throw $e;
    }
    return;
  }

  // 材料注文書を読込する
  public static function readMOD() {
    $dbh = self::dbPDO();
    try {
      // emoed_type_02で入庫フラグとしていたが、登録されていないケースがあったため、stockplanと結合してデータを確認するように変更した。また、品番26…の物は金銭移動なので、stockplanにはデータインサートされないため除く。
      $sth = $dbh->prepare('
        SELECT moed.*, moed_unit_eval AS moed_zaiko_tani,
        moed_unit_price,
        IF(moed_type_02 = "1" AND moed.moed_product_cd NOT LIKE ("26%"), "1", "0") AS moed_receive_sign,
        IF(moed_accept_date = "", "0", "1") AS moed_accept_sign,
        IF(moed_payment_no = "", "未", moed_payment_no) AS moed_payment_no,
        IF(moed_order_date = "", "0", "1") AS moed_order_sign,
        ed_ship_status_sign AS moed_ship_status_sign,
        c.c_customer_name AS moed_customer_name,
        p.p_name AS moed_product_name,
        us.user_name AS moed_salesman_name,
        us2.user_name AS moed_update_name,
        "" AS wireno,
        "" AS customerpname,
        moed_product_name AS productname,
        moed_product_name AS p_name,
        moed_sub_01 AS sub01,
        moed_sub_02 AS sub02,
        moed_sub_03 AS sub03,
        moed_sub_04 AS sub04,
        moed_sub_05 AS sub05,
        moed_sub_06 AS sub06,
        moed_sub_07 AS sub07,
        moed_sub_08 AS sub08,
        moed_sub_09 AS sub09,
        moed_sub_10 AS sub10,
        moed_sub_11 AS sub11,
        moed_sub_12 AS sub12,
        moed_sub_13 AS sub13,
        p.p_type,
        ar_name
        FROM morderestimate AS moed
        LEFT JOIN estimatedetails AS ed ON ed.ed_estimate_no = moed.moed_refer_no AND ed.ed_estimate_sub_no = moed.moed_refer_sub_no
        LEFT JOIN customer AS c ON c.C_CUSTOMER_CD = moed.moed_customer_cd
        LEFT JOIN product AS p ON p.p_cd = moed.moed_product_cd
        LEFT JOIN user AS us ON us.user_cd = moed.moed_salesman_cd
        LEFT JOIN user AS us2 ON us2.user_cd = moed.moed_update_cd
        LEFT JOIN arrangement AS ar ON ar.ar_sub_cd = moed.moed_parrangement_cd
        LEFT JOIN stockplan AS sp ON sp.sp_report_no = moed.moed_order_no AND sp.sp_sub_no_01 = moed.moed_sub_no AND sp.sp_sub_no_02 = moed.moed_accept_sub_no
        WHERE CAST(moed_buy_type AS SIGNED) < 3 AND moed_type_continue = "0" 
        ORDER BY moed_order_no DESC, moed_sub_no ASC, moed_accept_sub_no ASC
        LIMIT ' . self::setDataLimit() . ';');
      $sth->execute();
      $modList = $sth->fetchAll(PDO::FETCH_ASSOC);

      $results = [];
      foreach($modList as $moedRecord) {
        // sub08が数値でも数値でなくても規格文字列作成を同様手法で作成。sub10,sub11については、半角スペースで間をとって結合
        $dat = BookMaker::makeArrayProductSpec($moedRecord);
        $moedRecord['moed_p_name_supple_01'] = $dat[1];
        $moedRecord['moed_p_name_supple_02'] = $dat[2];
        array_push($results, $moedRecord);
      }

      echo json_encode($results);
    } catch (Exception $e) {
      throw $e;
    }
    return;
  }

  // 材料注文書を無制限に読込する
  public static function readUnlimitedMOD() {
    $dbh = self::dbPDO();
    try {
      // emoed_type_02で入庫フラグとしていたが、登録されていないケースがあったため、stockplanと結合してデータを確認するように変更した。また、品番26…の物は金銭移動なので、stockplanにはデータインサートされないため除く。
      $sth = $dbh->prepare('
        SELECT moed.*, moed_unit_eval AS moed_zaiko_tani,
        moed_unit_price,
        IF(moed_type_02 = "1" AND moed.moed_product_cd NOT LIKE ("26%"), "1", "0") AS moed_receive_sign,
        IF(moed_accept_date = "", "0", "1") AS moed_accept_sign,
        IF(moed_payment_no = "", "未", moed_payment_no) AS moed_payment_no,
        IF(moed_order_date = "", "0", "1") AS moed_order_sign,
        ed_ship_status_sign AS moed_ship_status_sign,
        c.c_customer_name AS moed_customer_name,
        p.p_name AS moed_product_name,
        us.user_name AS moed_salesman_name,
        us2.user_name AS moed_update_name,
        "" AS wireno,
        "" AS customerpname,
        moed_product_name AS productname,
        moed_product_name AS p_name,
        moed_sub_01 AS sub01,
        moed_sub_02 AS sub02,
        moed_sub_03 AS sub03,
        moed_sub_04 AS sub04,
        moed_sub_05 AS sub05,
        moed_sub_06 AS sub06,
        moed_sub_07 AS sub07,
        moed_sub_08 AS sub08,
        moed_sub_09 AS sub09,
        moed_sub_10 AS sub10,
        moed_sub_11 AS sub11,
        moed_sub_12 AS sub12,
        moed_sub_13 AS sub13,
        p.p_type,
        ar_name
        FROM morderestimate AS moed
        LEFT JOIN estimatedetails AS ed ON ed.ed_estimate_no = moed.moed_refer_no AND ed.ed_estimate_sub_no = moed.moed_refer_sub_no
        LEFT JOIN customer AS c ON c.C_CUSTOMER_CD = moed.moed_customer_cd
        LEFT JOIN product AS p ON p.p_cd = moed.moed_product_cd
        LEFT JOIN user AS us ON us.user_cd = moed.moed_salesman_cd
        LEFT JOIN user AS us2 ON us2.user_cd = moed.moed_update_cd
        LEFT JOIN arrangement AS ar ON ar.ar_sub_cd = moed.moed_parrangement_cd
        LEFT JOIN stockplan AS sp ON sp.sp_report_no = moed.moed_order_no AND sp.sp_sub_no_01 = moed.moed_sub_no AND sp.sp_sub_no_02 = moed.moed_accept_sub_no
        WHERE CAST(moed_buy_type AS SIGNED) < 3 AND moed_type_continue = "0" 
        ORDER BY moed_order_no DESC, moed_sub_no ASC, moed_accept_sub_no ASC
        ;');
      $sth->execute();
      $modList = $sth->fetchAll(PDO::FETCH_ASSOC);

      $results = [];
      foreach($modList as $moedRecord) {
        // sub08が数値でも数値でなくても規格文字列作成を同様手法で作成。sub10,sub11については、半角スペースで間をとって結合
        $dat = BookMaker::makeArrayProductSpec($moedRecord);
        $moedRecord['moed_p_name_supple_01'] = $dat[1];
        $moedRecord['moed_p_name_supple_02'] = $dat[2];
        array_push($results, $moedRecord);
      }

      echo json_encode($results);
    } catch (Exception $e) {
      throw $e;
    }
    return;
  }

  // 外注注文書を読込する
  public static function readOOD() {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('
        SELECT moed.*,
        IF(moed_accept_date IS NULL OR moed_accept_date = "", "0", "1") AS moed_accept_sign,
        IF(moed_payment_no IS NULL OR moed_payment_no = "", "未", moed_payment_no) AS moed_payment_no,
        IF(moed_sub_num_03 > 0, TRUNCATE(moed_sub_num_03, 0), "") AS moed_sub_num_03,
        IF(moed_order_date <> "", "1", "0") AS moed_order_sign,
        IF(moed_type_02 = "" OR moed_type_02 = "0", "0", moed_type_02) AS moed_receive_sign,
        c.c_customer_name AS moed_customer_name,
        us.user_name AS moed_salesman_name,
        us2.user_name AS moed_update_name,
        "" AS wireno,
        "" AS customerpname,
        moed_product_name AS productname,
        moed_product_name AS p_name,
        moed_sub_01 AS sub01,
        moed_sub_02 AS sub02,
        moed_sub_03 AS sub03,
        moed_sub_04 AS sub04,
        moed_sub_05 AS sub05,
        moed_sub_06 AS sub06,
        moed_sub_07 AS sub07,
        moed_sub_08 AS sub08,
        moed_sub_09 AS sub09,
        moed_sub_10 AS sub10,
        moed_sub_11 AS sub11,
        moed_sub_12 AS sub12,
        moed_sub_13 AS sub13,
        p.p_type,
        ar.ar_name
        FROM morderestimate AS moed
        LEFT JOIN customer AS c ON c.C_CUSTOMER_CD = moed.moed_customer_cd
        LEFT JOIN product AS p ON p.p_cd = moed.moed_product_cd
        LEFT JOIN unit AS u ON u.u_cd = p.p_unit_tran
        LEFT JOIN unit AS u2 ON u2.u_cd = p.p_unit_eval
        LEFT JOIN user AS us ON us.user_cd = moed.moed_salesman_cd
        LEFT JOIN user AS us2 ON us2.user_cd = moed.moed_update_cd
        LEFT JOIN arrangement AS ar ON ar.ar_sub_cd = moed.moed_parrangement_cd
        WHERE CAST(moed_buy_type AS SIGNED) >= 3 AND moed.moed_type_continue = "0" 
        ORDER BY moed_order_no DESC, moed_sub_no ASC, moed_accept_sub_no ASC
        LIMIT ' . self::setDataLimit() . ';');
      $sth->execute();
      $modList = $sth->fetchAll(PDO::FETCH_ASSOC);

      $results = [];
      foreach($modList as $moedRecord) {
        if (!is_numeric($moedRecord['moed_sub_09'])) {         
          $moedRecord['moed_p_name_supple_01'] = '';
          $moedRecord['moed_p_name_supple_02'] = '';
        } else {
          $dat = BookMaker::makeArrayProductSpec($moedRecord);
          $moedRecord['moed_p_name_supple_01'] = $dat[1];
          $moedRecord['moed_p_name_supple_02'] = $dat[2];
        }
        array_push($results, $moedRecord);
      }
      echo json_encode($results);
    } catch (Exception $e) {
      throw $e;
    }
    return;
  }

  // 製作指示書(旧)を読込する
  public static function readL() {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('SELECT
        *
        /* ,CONCAT(
          --L_CUSTOMER_ID,
          L_CUSTOMER_CD,
          L_CUSTOMER_POST_ID,
          L_ESTIMATE_DATE,
          -- L_SALESMAN_ID,
          L_SALESMAN_CD,
          L_ESTIMATE_SEQ_NO,
          L_ESTIMATE_VER) AS L_ID */
      FROM leaflist
      ORDER BY l_leaf_no DESC LIMIT 10000');
      $sth->execute();
      $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
      echo $result;
    } catch (Exception $e) {
      throw $e;
    }
    return;
  }

  // 製作指示書(製造リーフ)を読込する
  public static function readLP() {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('SELECT lp.*, pd.*, ed.* FROM leafProd AS lp 
      LEFT JOIN prodplans AS pd ON pd.pd_belong_cd = lp.l_belong_cd AND pd.pd_prod_plan_no = lp.l_prod_plan_no AND pd.pd_prod_plan_sub_no = lp.l_prod_plan_sub_no
      LEFT JOIN estimatedetails AS ed ON ed.ed_belong_cd = lp.l_belong_cd AND ed.ed_estimate_no = lp.l_estimate_no AND ed.ed_estimate_sub_no = lp.l_estimate_sub_no
      OREDER BY lp.l_leaf_no DESC
      ');
      // $sth = $dbh->prepare('SELECT LP.*, PP.*, PPD.*, ED.* FROM leafprod AS LP
      // LEFT JOIN prodplans AS PP
      //   ON PP.pp_id = LP.l_ppd_prodplan_id
      // LEFT JOIN prodplandetails AS PPD
      //   ON PPD.ppd_prodplan_id = LP.l_ppd_prodplan_id
      //   AND PPD.ppd_row = LP.l_ppd_row
      // LEFT JOIN estimatedetails AS ED
      //   ON ED.ED_CUSTOMER_ID = PPD.ppd_ed_customer_id AND ED.ED_CUSTOMER_CD = PPD.ppd_ed_customer_cd
      //   AND ED.ED_CUSTOMER_POST_ID = PPD.ppd_ed_customer_post_id AND ED.ED_ESTIMATE_DATE = PPD.ppd_ed_estimate_date
      //   AND ED.ED_SALESMAN_ID = PPD.ppd_ed_salesman_id AND ED.ED_SALESMAN_CD = PPD.ppd_ed_salesman_cd
      //   AND ED.ED_ESTIMATE_SEQ_NO = PPD.ppd_ed_estimate_seq_no AND ED.ED_ESTIMATE_VER = PPD.ppd_ed_estimate_ver
      //   AND ED.ED_ESTIMATE_DETAILS_NO = PPD.ppd_ed_estimate_details_no
      // ORDER BY LP.l_id DESC');
      $sth->execute();
      $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
      echo $result;
    } catch (Exception $e) {
      throw $e;
    }
    return;
  }

  // /**
  //  * 製造計画データ読込。見積画面から読込用
  //  */
  // public static function readProdplansRecord($dat) {
  //   $result = array();
  //   $dbh = self::dbPDO();
  //   try {
  //     for ($i = 0; $i < count($dat); $i++) {
  //       $sth = $dbh->prepare('SELECT * FROM prodplans AS pd 
  //       LEFT JOIN estimatedetails AS ed ON ed.ed_belong_cd = pd.pd_belong_cd AND ed.ed_estimate_no  = pd.pd_e_estimate_no AND ed.ed_estimate_sub_no = pd.pd_e_estimate_sub_no 
  //       LEFT JOIN estimate AS e ON e.e_belong_cd = pd.pd_belong_cd AND e.e_estimate_no = pd.pd_e_estimate_no
  //       LEFT JOIN warehouse AS w ON w.w_cd = pd.pd_place_cd
  //       LEFT JOIN projects AS pj ON pj.id = pd.pd_proj_cd
  //       LEFT JOIN arrangement AS ar ON ar.ar_belong_cd = pd.pd_belong_cd AND ar.ar_cd = pd.pd_ar_cd 
  //       LEFT JOIN manufacture AS mn ON mn.mn_belong_cd = pd.pd_belong_cd AND mn.mn_cd = pd.pd_mn_cd
  //       LEFT JOIN product AS p ON p.p_belong_cd = pd.pd_belong_cd AND p.p_cd = pd.pd_p_cd
  //       WHERE pd.pd_e_estimate_no = :ESTNO AND pd.pd_e_estimate_sub_no = :SUBNO
  //       ');
  //       $sth->bindValue(':ESTNO', $dat['ed_estimate_no'], PDO::PARAM_STR);
  //       $sth->bindValue(':SUBNO', $dat['ed_estimate_sub_no'], PDO::PARAM_STR);
  //       $sth->execute();
  //       $result += json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
  //     }
  //     echo $result;
  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }
  

  // 納品書を読込する
  public static function readSD() {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('
      SELECT 
            s_estimate_no,
            s_serial_no,
            s_customer_cd,
            s_customer_post_cd,
            s_customer_charge_cd,
            s_salesman_cd,
            s_estimate_date,
            s_desired_delivery_date,
            s_repeat_estimate_no,
            s_customer_order_no,
            s_shipper_cd,
            s_stay_cd,
            s_delivery_cd,
            s_tc_short_name,
            s_title,
            s_valid_month,
            s_remarks,
            s_packing_num,
            s_shipping_plan_date,
            s_shipping_date,
            s_sales_sign,
            s_print,
            sd_belong_cd,
            sd_e_estimate_no,
            sd_statement_sub_no,
            sd_estimate_sub_no,
            sd_shipment_sub_no,
            sd_p_cd,
            sd_p_name_supple,
            sd_estimate_quantity,
            sd_unit_price,
            sd_price,
            sd_cost,
            sd_desired_delivery_date,
            sd_customer_order_no,
            sd_customer_p_name,
            sd_delivery_cd,
            sd_detail_remarks,
            sd_shipment_date,
            sd_qty_delivery,
            sd_delivery_price,
            sd_tax,
            (sd_tax / sd_delivery_price) * 100 AS sd_tax_rate,
            sd_deliv_create_date,
            sd_bill_create_date,
            sd_remarks,
            sd_location,
            sd_packing_group,
            sd_packing_cd,
            sd_packing_size,
            sd_packing_num,
            sd_unit_tran,
            sd_unit_tran AS sd_unit_tran_02,
            sd_type_subject,
            sd_parrangement_cd,
            sd_p_name,
            sd_packing_content,
            sd.sd_bill_close_date AS s_bill_close_date,
            sd.sd_payment_close_date AS s_payment_plan_date,
            s.s_shipping_plan_date AS s_shipment_plan_date,
            c.c_customer_name AS s_customer_name,
            us.USER_NAME AS s_salesman_name,
            cp1.CP_POST_NAME AS s_shipper_name, 
            cp2.CP_POST_NAME AS s_stay_name, 
            cp3.CP_POST_NAME AS s_delivery_name,
            ed_ship_status_sign,
            ed_delivery_sign,
            ed_bill_sign,
            ed_payment_sign,
            ed.ed_ar_cd AS sd_ar_cd,
            TRIM(CAST(substring(CAST(e_remarks AS BINARY), 1,30) AS char)) AS s_logo, 
            IF(sas.sas_quantity IS NULL, 0, sas.sas_quantity) AS sd_allocate_num
            FROM statementdetails AS sd 
            LEFT JOIN statement AS s ON s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
            LEFT JOIN CUSTOMER AS c ON c.c_customer_cd = s.s_customer_cd
            LEFT JOIN USER AS us ON us.user_cd = s.s_salesman_cd 
            LEFT JOIN CUSTOMERPOST AS cp1 ON s.s_customer_cd = cp1.CP_CUSTOMER_CD AND s.s_shipper_cd = cp1.CP_POST_CD
            LEFT JOIN CUSTOMERPOST AS cp2 ON s.s_customer_cd = cp2.CP_CUSTOMER_CD AND s.s_stay_cd = cp2.CP_POST_CD 
            LEFT JOIN CUSTOMERPOST AS cp3 ON s.s_customer_cd = cp3.CP_CUSTOMER_CD AND s.s_delivery_cd = cp3.CP_POST_CD
            LEFT JOIN estimate AS e ON e.e_estimate_no  = sd.sd_e_estimate_no 
            LEFT JOIN estimatedetails AS ed ON sd.sd_e_estimate_no = ed.ed_estimate_no AND sd.sd_estimate_sub_no = ed.ed_estimate_sub_no AND sd.sd_shipment_sub_no = ed.ed_shipment_sub_no
            LEFT JOIN shippingassign AS sas ON sas.sas_estimate_no = sd.sd_e_estimate_no AND sas.sas_statement_sub_no = sd.sd_statement_sub_no AND sas.sas_estimate_sub_no = sd.sd_estimate_sub_no AND sas.sas_shipment_sub_no = sd.sd_shipment_sub_no
            WHERE s_type_continue = "0" 
            ORDER BY sd_e_estimate_no DESC, sd_statement_sub_no DESC, sd_estimate_sub_no  ASC, sd_shipment_sub_no ASC
      LIMIT ' . self::setDataLimit() . ';');
      $sth->execute();
      $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
      echo $result;
    } catch (Exception $e) {
      // $dbh->rollBack();
      throw $e;
    }
    return;
  }

  // 請求書を読込する
  public static function readBD() {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('
      SELECT
          b.*,
          bd.*, 
          s.*,
          sd.*,
          p.p_name AS bd_product_name, 
          c.C_CUSTOMER_NAME AS b_customer_name, 
          us.USER_NAME AS bd_salesman_name, 
          cp1.CP_POST_NAME AS s_shipper_name, 
          cp2.CP_POST_NAME AS s_stay_name, 
          cp3.CP_POST_NAME AS s_delivery_name, 
          t.t_rate AS bd_tax_rate,
          sd.sd_p_cd AS bd_p_cd,
          IF(bd_payment_sign >= 1, bd_payment_close_date, "") AS bd_payment_date,
          IF(C_PAYMENT_WAY2 IS NULL, "0", C_PAYMENT_WAY2) AS bd_cus_payment_cll
      FROM billdetails AS bd 
      LEFT JOIN bill AS b ON b.b_belong_Cd = bd.bd_belong_cd 
        AND b.b_customer_cd = bd.bd_customer_cd 
        AND b.b_bill_no = bd.bd_bill_no
      LEFT JOIN statementdetails AS sd ON bd.bd_belong_cd = sd.sd_belong_cd 
        AND bd.bd_estimate_no = sd.sd_e_estimate_no 
        AND bd.bd_st_details_no = sd.sd_statement_sub_no 
        AND bd.bd_ed_details_no = sd.sd_estimate_sub_no 
        AND bd.bd_shipment_div = sd.sd_shipment_sub_no
      LEFT JOIN statement AS s ON bd.bd_belong_cd = s.s_belong_cd
        AND bd.bd_estimate_no = s.s_estimate_no
        AND bd.bd_st_details_no = s.s_serial_no
      LEFT JOIN estimatedetails AS ed ON bd.bd_belong_cd = ed.ed_belong_cd
        AND bd.bd_estimate_no = ed.ed_estimate_no
        AND bd.bd_ed_details_no = ed.ed_estimate_sub_no
        AND bd.bd_shipment_div = ed.ed_shipment_sub_no
      LEFT JOIN customer AS c ON c.c_customer_cd = b.b_customer_cd
      LEFT JOIN product AS p ON p.p_belong_cd = ed.ed_belong_cd
        AND p.p_cd = ed.ed_p_cd
      LEFT JOIN tax AS t ON t.t_cd = p.p_tax_rate_cd
      LEFT JOIN user AS us ON bd.bd_salesman_cd = us.USER_CD
      LEFT JOIN CUSTOMERPOST AS cp1 ON s.s_customer_cd = cp1.CP_CUSTOMER_CD 
        AND s.s_shipper_cd = cp1.CP_POST_CD
      LEFT JOIN CUSTOMERPOST AS cp2 ON s.s_customer_cd = cp2.CP_CUSTOMER_CD 
        AND s.s_stay_cd = cp2.CP_POST_CD 
      LEFT JOIN CUSTOMERPOST AS cp3 ON s.s_customer_cd = cp3.CP_CUSTOMER_CD 
        AND s.s_delivery_cd = cp3.CP_POST_CD
      WHERE bd.bd_dell_sign = "0" AND b.b_type_continue = "0" 
      ORDER BY bd.bd_bill_no DESC, bd_customer_cd ASC, bd_estimate_no ASC, bd_st_details_no ASC, bd_ed_details_no ASC, bd_shipment_div ASC, bd_payment_div ASC
      LIMIT ' . self::setDataLimit() . ';');
        
      $sth->execute();
      $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
      echo $result;
    } catch (Exception $e) {
      throw $e;
    }
    return;
  }

  /**
   * 入出庫データ読込
   */
  public static function readST() {
    $stockData = [];
    $dbh = self::dbPDO();
    try {
      // // 次回の確定年月をhousecompanyから取得
      // $sth = $dbh->prepare('
      // SELECT 
      //   H_ACCONTING_MONTH, 
      //   STR_TO_DATE(CONCAT(H_ACCONTING_MONTH, "01"), "%Y%m%d") + INTERVAL 1 MONTH,
      //   DATE_FORMAT(STR_TO_DATE(CONCAT(H_ACCONTING_MONTH, "01"), "%Y%m%d") + INTERVAL 1 MONTH, "%y%m") AS nextmonth
      // FROM housecompany
      // ;');
      // $sth->execute();
      // $housecompany = $sth->fetchAll(PDO::FETCH_ASSOC);

      // 先月分以降を表示
      $lastDate = (new DateTime('-1 month'))->format('Ymd');
      $treatMonth = substr($lastDate, 2, 4);


      // 出荷
      $sth = $dbh->prepare('
        SELECT 
          stc.stc_month,
          CONCAT("20",
                  SUBSTRING(stc_month, 1, 2),
                  "/",
                  SUBSTRING(stc_month, 3, 2)) AS stc_yearmonth,
          "" AS ed_estimate_no,
          stc.stc_arrange_type,
          IF(sd.sd_e_estimate_no IS NULL, "出荷取消", pay.py_name) AS stc_arrange_name,
          stc.stc_report_no,
          stc.stc_sub_no_01,
          stc.stc_sub_no_02,
          stc.stc_update_cnt,
          stc.stc_report_date,
          stc.stc_target_id,
          c.C_CUSTOMER_NAME AS stc_target_name,
          stc.stc_place_cd,
          wh.w_name AS stc_place_name,
          stc.stc_customer_post_cd,
          cp.CP_POST_NAME AS stc_customer_post_name,
          stc.stc_product_cd,
          CONCAT(SUBSTRING_INDEX(p.p_name, "_", 1), " ", IF(ar.ar_name="なし" OR ar.ar_name IS NULL, "", ar.ar_name)) AS stc_product_name,
          sd.sd_p_name_supple AS stc_product_supple,
          stc.stc_qty_trans,
          stc.stc_unit_tran,
          stc.stc_price_trans,
          stc.stc_cost_eva_qty,
          stc.stc_inventory_type,
          stc.stc_recv_type,
          stc.stc_expence_type,
          stc.stc_cost_type,
          stc.stc_unit_price,
          stc.stc_type_01,
          stc.stc_type_02,
          stc.stc_type_03,
          stc.stc_type_04,
          stc.stc_type_05,
          stc.stc_update_at,
          stc.stc_update_time,
          stc.stc_update_cd,
          u.user_name AS stc_update_name,
          ed.ed_p_cd,
          p.p_name,
          ed.ed_sub_01 AS sub01, 
          ed.ed_sub_02 AS sub02, 
          ed.ed_sub_03 AS sub03, 
          ed.ed_sub_04 AS sub04, 
          ed.ed_sub_05 AS sub05, 
          ed.ed_sub_06 AS sub06, 
          ed.ed_sub_07 AS sub07, 
          ed.ed_sub_08 AS sub08, 
          ed.ed_sub_09 AS sub09, 
          ed.ed_sub_10 AS sub10, 
          ed.ed_sub_11 AS sub11, 
          ed.ed_sub_12 AS sub12, 
          ed.ed_sub_13 AS sub13, 
          ed.ed_sub_num_03 AS wireno
      FROM
      stock AS stc
          LEFT JOIN
      user AS u ON stc.stc_update_cd = u.user_id
          AND stc.stc_update_cd = u.user_cd
          LEFT JOIN
      statementdetails AS sd ON stc.stc_belong_cd = sd.sd_belong_cd
          AND stc.stc_report_no = sd.sd_e_estimate_no
          AND stc.stc_sub_no_01 = sd.sd_statement_sub_no
          AND stc.stc_sub_no_02 = sd.sd_estimate_sub_no
          AND stc.stc_sub_no_03 = sd.sd_shipment_sub_no
          LEFT JOIN
      statement AS s ON sd.sd_belong_cd = s.s_belong_cd
          AND sd.sd_e_estimate_no = s.s_estimate_no
          AND sd.sd_statement_sub_no = s.s_serial_no
          LEFT JOIN
      estimatedetails AS ed ON stc.stc_belong_cd = ed.ed_belong_cd
          AND stc.stc_report_no = ed.ed_estimate_no
          AND stc.stc_sub_no_02 = ed.ed_estimate_sub_no
          LEFT JOIN
      estimate AS e ON stc.stc_belong_cd = e.e_belong_cd
          AND stc.stc_report_no = e.e_estimate_no
          LEFT JOIN
      payment AS pay ON stc.stc_arrange_type = pay.py_cd
          LEFT JOIN
      warehouse AS wh ON stc.stc_place_cd = wh.w_cd
          LEFT JOIN
      product AS p ON ed.ed_p_cd = p.p_cd
          LEFT JOIN
      arrangement AS ar ON ed.ed_belong_cd = ar.ar_belong_cd
          AND ed.ed_parrangement_cd = ar.ar_sub_cd
          LEFT JOIN
      customer AS c ON e.e_customer_cd = c.c_customer_cd
          LEFT JOIN
      customerpost AS cp ON e.e_customer_cd = cp.cp_customer_cd
          AND e.e_customer_cd = cp.cp_customer_id
          AND e.e_customer_post_cd = cp.CP_POST_CD
      WHERE stc_month >= :MONTH AND stc_product_cd NOT LIKE "26%" AND 
      stc_arrange_type IN ("510" , "511", "519") AND ed.ed_ar_cd = "3"
      ;');
      $sth->bindValue(':MONTH', $treatMonth, PDO::PARAM_STR);
      // $sth->bindValue(':MONTH', $housecompany[0]['nextmonth'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      $temp = [];
      $arItem = [];
      foreach($result as $rec) {
        $temp = BookMaker::makeArrayProductSpec($rec);
        $rec['stc_product_supple'] = $temp[1] . ' ' . $temp[2];
        array_push($stockData, $rec);
      }


      // 入庫データ
      $sth = $dbh->prepare('
      SELECT 
        stc.stc_month,
        CONCAT("20",
                SUBSTRING(stc_month, 1, 2),
                "/",
                SUBSTRING(stc_month, 3, 2)) AS stc_yearmonth,
        "" AS ed_estimate_no,
        stc.stc_arrange_type,
        IF(moed.moed_order_no IS NULL, "発注取消",pay.py_name) AS stc_arrange_name,
        stc.stc_report_no,
        stc.stc_sub_no_01,
        stc.stc_sub_no_02,
        stc.stc_update_cnt,
        stc.stc_report_date,
        stc.stc_target_id,
        c.C_CUSTOMER_NAME AS stc_target_name,
        stc.stc_place_cd,
        wh.w_name AS stc_place_name,
        stc.stc_product_cd,
        CONCAT(SUBSTRING_INDEX(p.p_name, "_", 1),
                " ",
                IF(ar.ar_name = "なし",
                    "",
                    ar.ar_name)) AS stc_product_name,
        "" AS stc_product_supple,
        stc.stc_qty_trans,
        stc.stc_unit_tran,
        stc.stc_price_trans,
        stc.stc_cost_eva_qty,
        stc.stc_inventory_type,
        stc.stc_recv_type,
        stc.stc_expence_type,
        stc.stc_cost_type,
        stc.stc_unit_price,
        stc.stc_type_01,
        stc.stc_type_02,
        stc.stc_type_03,
        stc.stc_type_04,
        stc.stc_type_05,
        stc.stc_update_at,
        stc.stc_update_time,
        stc.stc_update_cd,
        u.user_name AS stc_update_name,
        moed.moed_product_cd,
        p.p_name,
        moed.moed_sub_01 AS sub01,
        moed.moed_sub_02 AS sub02,
        moed.moed_sub_03 AS sub03,
        moed.moed_sub_04 AS sub04,
        moed.moed_sub_05 AS sub05,
        moed.moed_sub_06 AS sub06,
        moed.moed_sub_07 AS sub07,
        moed.moed_sub_08 AS sub08,
        moed.moed_sub_09 AS sub09,
        moed.moed_sub_10 AS sub10,
        moed.moed_sub_11 AS sub11,
        moed.moed_sub_12 AS sub12,
        moed.moed_sub_13 AS sub13,
        moed.moed_sub_num_03 AS wireno
    FROM
        stock AS stc
            LEFT JOIN
        user AS u ON stc.stc_update_cd = u.user_id
            AND stc.stc_update_cd = u.user_cd
            LEFT JOIN
        payment AS pay ON stc.stc_arrange_type = pay.py_cd
            LEFT JOIN
        warehouse AS wh ON stc.stc_place_cd = wh.w_cd
            LEFT JOIN
        morderestimate AS moed ON moed.moed_order_no = stc.stc_report_no
            AND moed.moed_sub_no = stc.stc_sub_no_01
            AND moed.moed_accept_sub_no = stc.stc_sub_no_02
            LEFT JOIN
        product AS p ON moed.moed_product_cd = p.p_cd
            LEFT JOIN
        arrangement AS ar ON moed.moed_belong_cd = ar.ar_belong_cd
            AND moed.moed_parrangement_cd = ar.ar_sub_cd
            LEFT JOIN
        customer AS c ON moed.moed_customer_cd = c.c_customer_cd
      WHERE
        stc_month >= :MONTH
            AND stc_arrange_type IN ("110" , "111", "119")
            AND moed.moed_inventory_type = "1"
      ;');
      $sth->bindValue(':MONTH', $treatMonth, PDO::PARAM_STR);
      // $sth->bindValue(':MONTH', $housecompany[0]['nextmonth'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);


      $temp = [];
      $arItem = [];
      foreach($result as $rec) {
        $temp = BookMaker::makeArrayProductSpec($rec);
        $rec['stc_product_supple'] = $temp[1] . ' ' . $temp[2];
        array_push($stockData, $rec);
      }
  

      // 製造出来高
      // 中間品は現状無視するようなSQLとしているが、中間品を在庫として扱うのであれば、prodplansテーブルの工程コード(stc_sub_no_02)を連結項目に指定すれば、段階毎のデータが得られる。だが、これだと同じ製品の経過を複数回、在庫としてカウントしてしまうため、その製品の集計時点での最終工程のみをカウントさせるようにする必要がある。
      $sth = $dbh->prepare('
      SELECT 
        stc.stc_month,
        CONCAT("20",
                SUBSTRING(stc_month, 1, 2),
                "/",
                SUBSTRING(stc_month, 3, 2)) AS stc_yearmonth,
        prod.pd_e_estimate_no AS ed_estimate_no,
        stc.stc_arrange_type,
        IF(prod.pd_prod_plan_no IS NULL, "製造指示取消", pay.py_name) AS stc_arrange_name,
        stc.stc_report_no,
        stc.stc_sub_no_01,
        stc.stc_sub_no_02,
        stc.stc_update_cnt,
        stc.stc_report_date,
        stc.stc_target_id,
        prod.pd_prod_plan_no AS stc_target_name,
        stc.stc_place_cd,
        wh.w_name AS stc_place_name,
        stc.stc_product_cd,
        CONCAT(SUBSTRING_INDEX(p.p_name, "_", 1),
                " ",
                IF(ar.ar_name = "なし" OR ar.ar_name IS NULL,
                    "",
                    ar.ar_name)) AS stc_product_name,
        "" AS stc_product_supple,
        stc.stc_qty_trans,
        stc.stc_unit_tran,
        stc.stc_price_trans,
        stc.stc_cost_eva_qty,
        stc.stc_inventory_type,
        stc.stc_recv_type,
        stc.stc_expence_type,
        stc.stc_cost_type,
        stc.stc_unit_price,
        stc.stc_type_01,
        stc.stc_type_02,
        stc.stc_type_03,
        stc.stc_type_04,
        stc.stc_type_05,
        stc.stc_update_at,
        stc.stc_update_time,
        stc.stc_update_cd,
        u.user_name AS stc_update_name,
        prod.pd_prod_plan_no,
        p.p_name,
        stc.stc_sub_01 AS sub01,
        stc.stc_sub_02 AS sub02,
        stc.stc_sub_03 AS sub03,
        stc.stc_sub_04 AS sub04,
        stc.stc_sub_05 AS sub05,
        stc.stc_sub_06 AS sub06,
        "" AS sub07,
        stc.stc_sub_08 AS sub08,
        stc.stc_sub_09 AS sub09,
        stc.stc_sub_10 AS sub10,
        stc.stc_sub_11 AS sub11,
        stc.stc_sub_12 AS sub12,
        stc.stc_sub_13 AS sub13,
        prod.pd_wire AS wireno
        FROM
        stock AS stc
            LEFT JOIN
        user AS u ON stc.stc_update_cd = u.user_id
            AND stc.stc_update_cd = u.user_cd
            LEFT JOIN
        payment AS pay ON stc.stc_arrange_type = pay.py_cd
            LEFT JOIN
        warehouse AS wh ON stc.stc_place_cd = wh.w_cd
            LEFT JOIN
            (SELECT 
            pd_prod_plan_no, pd_e_estimate_no, pd_prod_plan_sub_no, pd_wire
        FROM
            prodplans
        WHERE
            pd_process_cd = "00" AND pd_prod_plan_sub_no <> "000") AS prod  ON  stc.stc_report_no = prod.pd_prod_plan_no AND stc.stc_sub_no_01 = prod.pd_prod_plan_sub_no AND stc.stc_sub_no_02 = "00"
            LEFT JOIN
        product AS p ON stc.stc_product_cd = p.p_cd
            LEFT JOIN
        arrangement AS ar ON stc.stc_parrangement_cd = ar.ar_sub_cd
        WHERE
        stc_month >= :MONTH /*AND pd.pd_e_estimate_no IS NOT NULL*/
            AND stc_arrange_type = "210"
      ;');
      $sth->bindValue(':MONTH', $treatMonth, PDO::PARAM_STR);
      // $sth->bindValue(':MONTH', $housecompany[0]['nextmonth'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      $temp = [];
      $arItem = [];
      foreach($result as $rec) {
        $temp = BookMaker::makeArrayProductSpec($rec);
        $rec['stc_product_supple'] = $temp[1] . ' ' . $temp[2];
        array_push($stockData, $rec);
      }


      $sth = $dbh->prepare('
      SELECT 
        stc.stc_month,
        CONCAT("20",
                SUBSTRING(stc_month, 1, 2),
                "/",
                SUBSTRING(stc_month, 3, 2)) AS stc_yearmonth,
        prod.pd_e_estimate_no AS ed_estimate_no,
        stc.stc_arrange_type,
        IF(prod.prodplanno IS NULL, "製造指示取消", pay.py_name) AS stc_arrange_name,
        stc.stc_report_no,
        stc.stc_sub_no_01,
        stc.stc_sub_no_02,
        stc.stc_update_cnt,
        stc.stc_report_date,
        stc.stc_target_id,
        prod.prodplanno AS stc_target_name,
        stc.stc_place_cd,
        wh.w_name AS stc_place_name,
        stc.stc_product_cd,
        CONCAT(SUBSTRING_INDEX(p.p_name, "_", 1),
                " ",
                IF(ar.ar_name = "なし" OR ar.ar_name IS NULL,
                    "",
                    ar.ar_name)) AS stc_product_name,
        "" AS stc_product_supple,
        stc.stc_qty_trans,
        stc.stc_unit_tran,
        stc.stc_price_trans,
        stc.stc_cost_eva_qty,
        stc.stc_inventory_type,
        stc.stc_recv_type,
        stc.stc_expence_type,
        stc.stc_cost_type,
        stc.stc_unit_price,
        stc.stc_type_01,
        stc.stc_type_02,
        stc.stc_type_03,
        stc.stc_type_04,
        stc.stc_type_05,
        stc.stc_update_at,
        stc.stc_update_time,
        stc.stc_update_cd,
        u.user_name AS stc_update_name,
        prod.prodplanno AS pd_prod_plan_no,
        p.p_name,
        stc.stc_sub_01 AS sub01,
        stc.stc_sub_02 AS sub02,
        stc.stc_sub_03 AS sub03,
        stc.stc_sub_04 AS sub04,
        stc.stc_sub_05 AS sub05,
        stc.stc_sub_06 AS sub06,
        "" AS sub07,
        stc.stc_sub_08 AS sub08,
        stc.stc_sub_09 AS sub09,
        stc.stc_sub_10 AS sub10,
        stc.stc_sub_11 AS sub11,
        stc.stc_sub_12 AS sub12,
        stc.stc_sub_13 AS sub13,
        "" AS wireno
        FROM
        stock AS stc
            LEFT JOIN
        user AS u ON stc.stc_update_cd = u.user_id
            AND stc.stc_update_cd = u.user_cd
            LEFT JOIN
        payment AS pay ON stc.stc_arrange_type = pay.py_cd
            LEFT JOIN
        warehouse AS wh ON stc.stc_place_cd = wh.w_cd
            LEFT JOIN
            (SELECT DISTINCT
            (pd_prod_plan_no) AS prodplanno, pd_e_estimate_no
        FROM
            prodplans
        WHERE
            pd_process_cd = "00" AND pd_prod_plan_sub_no <> "000") AS prod 
            ON stc.stc_report_no = prod.prodplanno
                LEFT JOIN
        product AS p ON stc.stc_product_cd = p.p_cd
            LEFT JOIN
        arrangement AS ar ON stc.stc_parrangement_cd = ar.ar_sub_cd

        WHERE
        stc_month >= :MONTH /*AND pd.pd_e_estimate_no IS NOT NULL*/
            AND stc_arrange_type = "610"
      ;');
      $sth->bindValue(':MONTH', $treatMonth, PDO::PARAM_STR);
      // $sth->bindValue(':MONTH', $housecompany[0]['nextmonth'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      $temp = [];
      foreach($result as $rec) {
        $temp = BookMaker::makeArrayProductSpec($rec);
        $rec['stc_product_supple'] = $temp[1] . ' ' . $temp[2];
        array_push($stockData, $rec);
      }
 

      // 在庫入出庫
      $sth = $dbh->prepare('
        SELECT 
          stc.stc_month,
          CONCAT("20",
                  SUBSTRING(stc_month, 1, 2),
                  "/",
                  SUBSTRING(stc_month, 3, 2)) AS stc_yearmonth,
          stc.stc_arrange_type,
          pay.py_name AS stc_arrange_name,
          stc.stc_report_no,
          stc.stc_sub_no_01,
          stc.stc_sub_no_02,
          stc.stc_update_cnt,
          stc.stc_report_date,
          stc.stc_target_id,
          wh2.w_name AS stc_target_name,
          stc.stc_place_cd,
          wh.w_name AS stc_place_name,
          stc.stc_product_cd,
          CONCAT(SUBSTRING_INDEX(p.p_name, "_", 1),
                  " ",
                  IF(ar.ar_name = "なし",
                      "",
                      ar.ar_name)) AS stc_product_name,
          "" AS stc_product_supple,
          stc.stc_qty_trans,
          stc.stc_unit_tran,
          stc.stc_price_trans,
          stc.stc_cost_eva_qty,
          stc.stc_inventory_type,
          stc.stc_recv_type,
          stc.stc_expence_type,
          stc.stc_cost_type,
          stc.stc_unit_price,
          stc.stc_type_01,
          stc.stc_type_02,
          stc.stc_type_03,
          stc.stc_type_04,
          stc.stc_type_05,
          stc.stc_update_at,
          stc.stc_update_time,
          stc.stc_update_cd,
          u.user_name AS stc_update_name,
          p.p_name,
          stc.stc_sub_01 AS sub01,
          stc.stc_sub_02 AS sub02,
          stc.stc_sub_03 AS sub03,
          stc.stc_sub_04 AS sub04,
          stc.stc_sub_05 AS sub05,
          stc.stc_sub_06 AS sub06,
          stc.stc_sub_07 AS sub07,
          stc.stc_sub_08 AS sub08,
          stc.stc_sub_09 AS sub09,
          stc.stc_sub_10 AS sub10,
          stc.stc_sub_11 AS sub11,
          stc.stc_sub_12 AS sub12,
          stc.stc_sub_13 AS sub13,
          "" AS wireno
        FROM
          stock AS stc
              LEFT JOIN
          user AS u ON stc.stc_update_cd = u.user_id
              AND stc.stc_update_cd = u.user_cd
              LEFT JOIN
          payment AS pay ON stc.stc_arrange_type = pay.py_cd
              LEFT JOIN
          warehouse AS wh ON stc.stc_place_cd = wh.w_cd 
              LEFT JOIN
          warehouse AS wh2 ON stc.stc_target_id = wh2.w_cd 
              LEFT JOIN
          product AS p ON stc.stc_product_cd = p.p_cd
              LEFT JOIN
          arrangement AS ar ON stc.stc_parrangement_cd = ar.ar_sub_cd
        WHERE
          stc_month >= :MONTH
              AND stc_arrange_type IN ("219", " 619", "410" , "810")
      ;');
      $sth->bindValue(':MONTH', $treatMonth, PDO::PARAM_STR);
      // $sth->bindValue(':MONTH', $housecompany[0]['nextmonth'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      $temp = [];
      $arItem = [];
      foreach($result as $rec) {
        $temp = BookMaker::makeArrayProductSpec($rec);
        $rec['stc_product_supple'] = $temp[1] . ' ' . $temp[2];
        array_push($stockData, $rec);
      }

      // 連想配列のソート
      array_multisort(array_column($stockData, 'stc_report_date'), SORT_DESC, $stockData);

      echo json_encode($stockData);
    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 在庫集計用ビュー作成
   */
  private static function createStockView($dbh, $strMonth) {
    try {
      /***
       * レコード毎の最終数量を算出
       */
      // 発注データ×入出庫データ
      $sth = $dbh->prepare('drop view if exists viewontimemorder;');
      $sth->execute();

      $sth = $dbh->prepare('
      CREATE VIEW viewontimemorder AS
        SELECT 
            stc_month,
            stc_arrange_type,
            stc_report_no,
            stc_sub_no_01,
            stc_sub_no_02,
            stc_sub_no_03,
            stc_sub_no_04,
          stc_place_cd AS placecd,
          stc_product_cd AS productcd,
          stc_parrangement_cd AS parrangementcd,
          stc_type_subject AS subjectcd,
          stc_sub_01 AS sub01,
          stc_sub_02 AS sub02,
          stc_sub_03 AS sub03,
          stc_sub_04 AS sub04,
          stc_sub_05 AS sub05,
          stc_sub_06 AS sub06,
          IF(stc_sub_07 IS NULL, "", stc_sub_07) AS sub07,
          IF(stc_sub_08 IS NULL, "", stc_sub_08) AS sub08,
          IF(stc_sub_09 IS NULL, "", stc_sub_09) AS sub09,
          IF(stc_sub_10 IS NULL, "", stc_sub_10) AS sub10,
          IF(stc_sub_11 IS NULL, "", stc_sub_11) AS sub11,
          IF(stc_sub_12 IS NULL, "", stc_sub_12) AS sub12,
          IF(stc_sub_13 IS NULL, "", stc_sub_13) AS sub13,
          "" AS remarks,
          stc_type_04 AS lotno,
          CONCAT(moed_customer_cd, moed_manufacture_cd) AS makercd,
          stc_report_date AS transferdate,
          stc_report_date AS updatedate,
          SUM(stc_qty_trans) AS qty,
          stc_unit_tran AS unitname,
          stc_unit_price AS costprice,
          moed_unit_price AS unitprice,
          moed_money AS thistimecostprice,
          stc_type_05 AS typemanufacture
        FROM
            stock
                LEFT JOIN
            morderestimate ON moed_order_no = stc_report_no
                AND moed_sub_no = stc_sub_no_01
                AND moed_accept_sub_no = stc_sub_no_02
        WHERE stc_arrange_type IN ("110" , "111", "119") 
              AND stc_month >= "' . $strMonth . '"
              AND LEFT(stc_product_cd, 2) <> "26" AND (stc_inventory_type = "1" OR stc_inventory_type = "")
        GROUP BY stc_arrange_type, stc_report_no, stc_sub_no_01, stc_sub_no_02, stc_sub_no_03, stc_sub_no_04, stc_product_cd, stc_sub_01, stc_sub_02, stc_sub_03, stc_sub_04, stc_sub_05, stc_sub_06, stc_sub_07, stc_sub_08, stc_sub_10, stc_sub_09, stc_sub_11, stc_sub_12, stc_sub_13
        ORDER BY productcd;
      ;');
      $sth->execute();

      // 受注データ×入出庫データ
      $sth = $dbh->prepare('drop view if exists viewontimeed;');
      $sth->execute();

      $sth = $dbh->prepare('
      CREATE VIEW viewontimeed AS
        SELECT 
            stc_month,
            stc_arrange_type,
            stc_report_no,
            stc_sub_no_01,
            stc_sub_no_02,
            stc_sub_no_03,
            stc_sub_no_04,
          stc_place_cd AS placecd,
          stc_product_cd AS productcd,
          stc_parrangement_cd AS parrangementcd,
          stc_type_subject AS subjectcd,
          stc_sub_01 AS sub01,
          stc_sub_02 AS sub02,
          stc_sub_03 AS sub03,
          stc_sub_04 AS sub04,
          stc_sub_05 AS sub05,
          stc_sub_06 AS sub06,
          IF(stc_sub_07 IS NULL, "", stc_sub_07) AS sub07,
          IF(stc_sub_08 IS NULL, "", stc_sub_08) AS sub08,
          IF(stc_sub_09 IS NULL, "", stc_sub_09) AS sub09,
          IF(stc_sub_10 IS NULL, "", stc_sub_10) AS sub10,
          IF(stc_sub_11 IS NULL, "", stc_sub_11) AS sub11,
          IF(stc_sub_12 IS NULL, "", stc_sub_12) AS sub12,
          IF(stc_sub_13 IS NULL, "", stc_sub_13) AS sub13,
          "" AS remarks,
          stc_type_04 AS lotno,
          "" AS makercd,
          stc_report_date AS transferdate,
          stc_report_date AS updatedate,
          SUM(stc_qty_trans) AS qty,
          stc_unit_tran AS unitname,
            stc_unit_price AS costprice,
            ed_cost / ed_quantity AS unitprice,
            ed_cost AS thistimecostprice,
          stc_type_05 AS typemanufacture
        FROM
            stock
                LEFT JOIN
            estimatedetails ON ed_estimate_no = stc_report_no
        AND ed_estimate_sub_no = stc_sub_no_02
        AND ed_shipment_sub_no = stc_sub_no_03

        WHERE stc_arrange_type IN ("510", "511", "519") AND stc_product_cd NOT LIKE "26%" 
          AND stc_month >= "' . $strMonth . '" 
          AND LEFT(stc_product_cd, 2) <> "26" AND (stc_inventory_type = "1" OR stc_inventory_type = "")
        GROUP BY stc_arrange_type, stc_report_no, stc_sub_no_01, stc_sub_no_02, stc_sub_no_03, stc_sub_no_04, stc_product_cd, stc_sub_01, stc_sub_02, stc_sub_03, stc_sub_04, stc_sub_05, stc_sub_06, stc_sub_07, stc_sub_08, stc_sub_10, stc_sub_09, stc_sub_11, stc_sub_12, stc_sub_13
        ORDER BY productcd;
      ;');
      $sth->execute();

      // 在庫調整×入出庫データ
      $sth = $dbh->prepare('drop view if exists viewontimeadjuststock;');
      $sth->execute();

      $sth = $dbh->prepare('
      CREATE VIEW viewontimeadjuststock AS
        SELECT 
            stc_month,
            stc_arrange_type,
            stc_report_no,
            stc_sub_no_01,
            stc_sub_no_02,
            stc_sub_no_03,
            stc_sub_no_04,
          stc_place_cd AS placecd,
          stc_product_cd AS productcd,
          stc_parrangement_cd AS parrangementcd,
          stc_type_subject AS subjectcd,
          stc_sub_01 AS sub01,
          stc_sub_02 AS sub02,
          stc_sub_03 AS sub03,
          stc_sub_04 AS sub04,
          stc_sub_05 AS sub05,
          stc_sub_06 AS sub06,
          IF(stc_sub_07 IS NULL, "", stc_sub_07) AS sub07,
          IF(stc_sub_08 IS NULL, "", stc_sub_08) AS sub08,
          IF(stc_sub_09 IS NULL, "", stc_sub_09) AS sub09,
          IF(stc_sub_10 IS NULL, "", stc_sub_10) AS sub10,
          IF(stc_sub_11 IS NULL, "", stc_sub_11) AS sub11,
          IF(stc_sub_12 IS NULL, "", stc_sub_12) AS sub12,
          IF(stc_sub_13 IS NULL, "", stc_sub_13) AS sub13,
          "" AS remarks,
          stc_type_04 AS lotno,
          stc_maker_cd AS makercd,
          stc_report_date AS transferdate,
          stc_report_date AS updatedate,
          SUM(stc_qty_trans) AS qty,
          stc_unit_tran AS unitname,
          stc_unit_price AS costprice,
          stc_unit_price / stc_qty_trans AS unitprice,
          stc_unit_price AS thistimecostprice,
          stc_type_05 AS typemanufacture
        FROM
            stock
        WHERE stc_arrange_type IN ("210", "211", "219", "410", "610", "611", "619", "810", "910")
          AND stc_month >= "' . $strMonth . '"
          AND LEFT(stc_product_cd, 2) <> "26" AND (stc_inventory_type = "1" OR stc_inventory_type = "")
        GROUP BY stc_arrange_type, stc_report_no, stc_sub_no_01, stc_sub_no_02, stc_sub_no_03, stc_sub_no_04, stc_product_cd, stc_sub_01, stc_sub_02, stc_sub_03, stc_sub_04, stc_sub_05, stc_sub_06, stc_sub_07, stc_sub_08, stc_sub_10, stc_sub_09, stc_sub_11, stc_sub_12, stc_sub_13
        ORDER BY productcd;
      ;');
      $sth->execute();

      // 棚卸〆後の増加&減少分
      $sth = $dbh->prepare('drop view if exists viewontimestockdetail;');
      $sth->execute();
      $sth = $dbh->prepare('
      CREATE VIEW viewontimestockdetail AS
      SELECT * 
      FROM (
      SELECT * FROM viewontimemorder
      UNION ALL 
      SELECT * FROM viewontimeed
      UNION ALL
      SELECT * FROM viewontimeadjuststock) AS temp
      ;');
      $sth->execute();

      /***
       * 現在の在庫集計データ
       */
      $sth = $dbh->prepare('drop view if exists viewontimestorage;');
      $sth->execute();

      $sth = $dbh->prepare("
      CREATE VIEW viewontimestorage AS
        SELECT 
          temp.*,
          w_name AS placename,
          ar_name AS parrangementname,
          p_name AS productname,
          innum - outnum AS qty
        FROM
            (SELECT 
          sr_w_cd AS placecd,
          sr_p_cd AS productcd,
          sr_parrangement_cd AS parrangementcd,
          sr_type_subject AS subjectcd,
          sr_sub_01 AS sub01,
          sr_sub_02 AS sub02,
          sr_sub_03 AS sub03,
          sr_sub_04 AS sub04,
          sr_sub_05 AS sub05,
          sr_sub_06 AS sub06,
          IF(sr_sub_07 IS NULL, '', sr_sub_07) AS sub07,
          sr_sub_08 AS sub08,
          sr_sub_09 AS sub09,
          sr_sub_10 AS sub10,
          sr_sub_11 AS sub11,
          sr_sub_12 AS sub12,
          sr_sub_13 AS sub13,
          sr_remarks AS remarks,
          sr_sub_14 AS lotno,
          sr_transfer_date AS transferdate,
          sr_update_at AS updatedate,
          sr_unit_cd AS unitname,
          IF(sr_maker_cd IS NULL, '', sr_maker_cd) AS makercd,
            sr_price_eval AS costprice,
            sr_fix_price_eval AS unitprice,
            0 AS thistimecostprice,    
            sr_quantity AS innum,
            0 AS outnum,
            0 AS returningnum,
          sr_type_material AS typemanufacture
        FROM
            storage 
        UNION ALL
        (
        SELECT 
          placecd,
          productcd,
          parrangementcd,
          subjectcd,
          sub01,
          sub02,
          sub03,
          sub04,
          sub05,
          sub06,
          sub07,
          sub08,
          sub09,
          sub10,
          sub11,
          sub12,
          sub13,
          remarks,
          lotno,
          transferdate,
          updatedate,
          unitname,
          makercd,
            costprice,
            unitprice,
            thistimecostprice,    
          SUM(IF(stc_arrange_type = '110'
            OR stc_arrange_type = '111'
            OR stc_arrange_type = '210'
            OR stc_arrange_type = '211'
            OR stc_arrange_type = '219'
            OR stc_arrange_type = '410', qty, 0)) AS innum,
          SUM(IF(stc_arrange_type = '510'
            OR stc_arrange_type = '511'
            OR stc_arrange_type = '610'
            OR stc_arrange_type = '611'
            OR stc_arrange_type = '619'
            OR stc_arrange_type = '810'
            OR stc_arrange_type = '910', qty, 0)) AS outnum,
          SUM(IF(stc_arrange_type = '119'
            OR stc_arrange_type = '519', qty, 0)) AS returningnum,
          typemanufacture
        FROM
          viewontimestockdetail
        GROUP BY placecd, productcd, sub01, sub02, sub03, sub04, sub05, sub06, sub08, sub09, sub10, sub11, sub12, sub13, lotno, unitname, subjectcd, parrangementcd
        ORDER BY  productcd, placecd, sub01, sub12, sub05, parrangementcd, unitname, subjectcd)) AS temp
        LEFT JOIN warehouse ON placecd = w_cd AND w_belong_cd = '001'
        LEFT JOIN product ON productcd = p_cd AND p_belong_cd = '001'
        LEFT JOIN arrangement AS ar ON parrangementcd = ar_sub_cd AND ar_belong_cd = '001'
      ;");
      $sth->execute();


    } catch (Exception $e) {
      throw $e;
    }
    
  }


  private static function createStorageView($dbh) {
    $strSQL = '';

    try {
    $sth = $dbh->prepare('drop view if exists viewontimestorage;');
    $sth->execute();

    $strSQL = '
      CREATE VIEW viewontimestorage AS
        SELECT 
          sr_w_cd AS placecd,
          sr_p_cd AS productcd,
          sr_sub_cd AS subcd,
          sr_sub_01 AS sub01,
          sr_sub_02 AS sub02,
          sr_sub_03 AS sub03,
          sr_sub_04 AS sub04,
          sr_sub_05 AS sub05,
          sr_sub_06 AS sub06,
          sr_sub_07 AS sub07,
          sr_sub_08 AS sub08,
          sr_sub_09 AS sub09,
          sr_sub_10 AS sub10,
          sr_sub_11 AS sub11,
          sr_sub_12 AS sub12,
          sr_sub_13 AS sub13,
          sr_sub_14 AS lotno,
          sr_transfer_date AS transferdate,
          sr_prev_quantity,
          sr_prev_quantity_eval,
          sr_prev_price_eval,
          sr_quantity AS qty,
          sr_unit_cd AS unitname,
          sr_price_eval AS costprice,
          sr_dimension AS dimension,
          sr_weight AS weight,
          sr_fix_price_eval AS unitprice,
          sr_remarks AS remarks,
          sr_update_at AS updatedate,
          sr_type_subject AS subjectcd,
          sr_parrangement_cd AS parrangementcd,
          sr_maker_cd AS makercd,
          sr_type_material AS typemanufacture,
          sr_customer_cd AS customercd,
          w_name AS placename,
          ar_name AS parrangementname,
          p_name AS productname
        FROM storage
      LEFT JOIN warehouse ON sr_w_cd = w_cd AND w_belong_cd = "' . $_SESSION['companycd'] . '"' . 
      'LEFT JOIN product ON sr_p_cd = p_cd AND p_belong_cd = "' . $_SESSION['companycd'] . '"
      LEFT JOIN arrangement AS ar ON sr_parrangement_cd = ar_sub_cd AND ar_belong_cd = "' . $_SESSION['companycd'] . '";';

      $sth = $dbh->prepare($strSQL);
      $sth->execute();
    } catch (Exception $e) {
      throw $e;
    }
  }



  /***
   * 在庫入出庫を集計したビュー
   */
  private static function createServeStock($dbh) {
    $sth = $dbh->prepare('drop view if exists viewplanstorage;');
    $sth->execute();
    $sth = $dbh->prepare("
    CREATE VIEW viewplanstorage AS
      SELECT
        sp_place_cd AS placecd,
        sp_product_cd AS productcd,
        sp_parrangement_cd AS parrangementcd,
        sp_type_subject AS subjectcd,
        sp_sub_01 AS sub01,
        sp_sub_02 AS sub02,
        sp_sub_03 AS sub03,
        sp_sub_04 AS sub04,
        sp_sub_05 AS sub05,
        sp_sub_06 AS sub06,
        IF(sp_sub_07 IS NULL, '', sp_sub_07) AS sub07,
        IF(sp_sub_08 IS NULL, '', sp_sub_08) AS sub08,
        IF(sp_sub_09 IS NULL, '', sp_sub_09) AS sub09,
        IF(sp_sub_10 IS NULL, '', sp_sub_10) AS sub10,
        IF(sp_sub_11 IS NULL, '', sp_sub_11) AS sub11,
        IF(sp_sub_12 IS NULL, '', sp_sub_12) AS sub12,
        IF(sp_sub_13 IS NULL, '', sp_sub_13) AS sub13,
        sp_type_04 AS lotno,
        SUM(IF(sp_arrange_type = '110' OR sp_arrange_type = '210', sp_qty_trans, 0)) AS inplannum,
        SUM(IF(sp_arrange_type = '510' OR sp_arrange_type = '610', sp_qty_trans, 0)) AS outplannum,
        sp_target_id AS targetcd,
        C_CUSTOMER_NAME AS customername
      FROM stockplan
      LEFT JOIN warehouse ON w_belong_cd = '001' AND w_cd = sp_place_cd
      LEFT JOIN product ON p_belong_cd = '001' AND p_cd =  sp_product_cd
      LEFT JOIN arrangement ON ar_belong_cd = '001' AND ar_sub_cd = sp_parrangement_cd  
      LEFT JOIN customer ON c_customer_cd = sp_target_id
      WHERE sp_arrange_type IN ('110', '210', '510', '610') 
      GROUP BY sp_place_cd, sp_product_cd, sp_sub_01, sp_sub_02, sp_sub_03, sp_sub_04, sp_sub_05, sp_sub_06, sp_sub_08, sp_sub_09, sp_sub_10, sp_sub_11, sp_sub_12, sp_sub_13, sp_type_04, sp_unit_tran, sp_type_subject, sp_parrangement_cd
    ");
    $sth->execute();
  }

  /***
   * 顧客引当用在庫ビュー作成
   */
  private static function createServeCustomer($dbh) {
    $sth = $dbh->prepare('drop view if exists viewservecustomer;');
    $sth->execute();
    $sth = $dbh->prepare("
    CREATE VIEW viewservecustomer AS
      SELECT
        sp_place_cd AS placecd,
        w_name AS placename,
        sp_product_cd AS productcd,
        p_name AS productname,
        sp_parrangement_cd AS parrangementcd,
        ar_name AS parrangementname,
        sp_type_subject AS subjectcd,
        sp_sub_01 AS sub01,
        sp_sub_02 AS sub02,
        sp_sub_03 AS sub03,
        sp_sub_04 AS sub04,
        sp_sub_05 AS sub05,
        sp_sub_06 AS sub06,
        IF(sp_sub_07 IS NULL, '', sp_sub_07) AS sub07,
        IF(sp_sub_08 IS NULL, '', sp_sub_08) AS sub08,
        IF(sp_sub_09 IS NULL, '', sp_sub_09) AS sub09,
        IF(sp_sub_10 IS NULL, '', sp_sub_10) AS sub10,
        IF(sp_sub_11 IS NULL, '', sp_sub_11) AS sub11,
        IF(sp_sub_12 IS NULL, '', sp_sub_12) AS sub12,
        IF(sp_sub_13 IS NULL, '', sp_sub_13) AS sub13,
        sp_type_04 AS lotno,
        SUM(sp_qty_trans) AS servenum,
        sp_unit_tran AS unitname,
        sp_target_id AS targetcd,
        C_CUSTOMER_NAME AS customername
      FROM stockplan
      LEFT JOIN warehouse ON w_belong_cd = '001' AND w_cd = sp_place_cd
      LEFT JOIN product ON p_belong_cd = '001' AND p_cd =  sp_product_cd
      LEFT JOIN arrangement ON ar_belong_cd = '001' AND ar_sub_cd = sp_parrangement_cd      
      LEFT JOIN customer ON c_customer_cd = sp_target_id
      LEFT JOIN estimatedetails AS ed ON ed_estimate_no = sp_report_no AND ed_estimate_sub_no = sp_sub_no_01 AND ed_shipment_sub_no = sp_sub_no_02
      WHERE sp_arrange_type = '510'  AND (LEFT(sp_report_no, 1) = 'P' OR ed.ed_ship_status_sign < 2 ) AND sp_target_id <> '' AND sp_target_id <> 'x01'
      GROUP BY sp_place_cd, sp_product_cd, sp_sub_01, sp_sub_02, sp_sub_03, sp_sub_04, sp_sub_05, sp_sub_06, sp_sub_08, sp_sub_09, sp_sub_10, sp_sub_11, sp_sub_12, sp_sub_13, sp_type_04, sp_unit_tran, sp_type_subject, sp_parrangement_cd, sp_target_id;
    ");
    $sth->execute();
    // x01の客先は、削除レコード用に用意された客先のため、上記のような条件として入っている。
    // 見積データの削除機能修正時、stockplanテーブルのレコード削除も動作確認しておくこと。
  }


  /***
   * 在庫リスト取得
   * $type: 大分類別
   */
  public static function readStockView($category, $mode) {
    // $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      $resultStock = new stdClass();

      // // 次回の確定年月をhousecompanyから取得
      // $sth = $dbh->prepare('
      // SELECT 
      //   H_ACCONTING_MONTH, 
      //   STR_TO_DATE(CONCAT(H_ACCONTING_MONTH, "01"), "%Y%m%d") + INTERVAL 1 MONTH,
      //   DATE_FORMAT(STR_TO_DATE(CONCAT(H_ACCONTING_MONTH, "01"), "%Y%m%d") + INTERVAL 1 MONTH, "%y%m") AS nextmonth
      // FROM housecompany
      // ;');
      // $sth->execute();
      // $housecompany = $sth->fetchAll(PDO::FETCH_ASSOC);

      if ($mode === 'CREATE') {
        // self::createStockView($dbh, $housecompany[0]['nextmonth']);
        self::createStorageView($dbh);
        // self::createServeStock($dbh);
        // self::createServeCustomer($dbh);
      }

      // 引当在庫
      self::getServeStockData($dbh, $resultStock);
      
      // クリンプ在庫
      self::getCrimpData($dbh, $resultStock);

      // 織網
      self::getWeaveData($dbh, $resultStock);
      
      // 溶接
      self::getWeldData($dbh, $resultStock);
    
      // 線材
      self::getWireData($dbh, $resultStock);

      // 材料在庫
      self::getMaterialStockData($dbh, $resultStock );

      echo json_encode($resultStock);
    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 引当有りのクリンプ在庫データ取得
   */
  private static function getServeStockData($dbh, $resultStock) {
    try {

      $ryokiInfo = self::getRyokiInfo($dbh);
      $strSQL = '';
      $strSQLBase = '';
      $strSQLGroupBy = '';

      // $strSQL = 'SELECT *, 
      //   "" AS psupple
      // FROM viewservecustomer 
      // WHERE /*(lotno <> "" AND lotno <> 0) AND*/ targetcd IN (';
      $strSQLBase = '
      SELECT
        placecd, 
        placename, 
        productcd, 
        productname,
        sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13,
        CASE WHEN ar_sub_cd = "001" THEN "" ELSE ar_name END AS parrangementname, 
        CONCAT("φ", sub01, "×", CASE WHEN sub04 = FLOOR(sub04) THEN FLOOR(sub04) ELSE sub04 END, sub06) AS psupple, 
        lotno, 
        qty AS sumqty, 
        unitname, 
        remarks, 
        updatedate, 
        transferdate, 
        parrangementcd,
        customercd, 
        C2.C_CUSTOMER_NAME AS customername,
        makercd, 
        IF(CP.CP_POST_NAME <> "", CP.CP_POST_NAME, IF(C.C_CUSTOMER_NAME <> "", C.C_CUSTOMER_NAME, "")) AS makername 
      FROM viewontimestorage
      LEFT JOIN customer AS C ON left(makercd,3) = C.C_CUSTOMER_CD
      LEFT JOIN customerpost AS CP ON left(makercd,3) = CP.CP_CUSTOMER_CD AND substring(makercd,4,3) = CP.CP_POST_CD
      LEFT JOIN customer AS C2 ON customercd = C2.C_CUSTOMER_CD
      LEFT JOIN arrangement ON parrangementcd = ar_sub_cd 
      WHERE customercd <> "" AND customercd 
      ';
      $strSQL = $strSQLBase . ' IN (';

      foreach ($ryokiInfo as $record) {
        $strSQL .= '?, ';
      }
      $strSQL = mb_substr($strSQL, 0, - 2);
      $strSQL .= ') ';

      $strSQLGroupBy = '
      ORDER BY customercd, sub01, sub06 desc, sub04, cast(sub08 as decimal(5,1)), placecd, qty, lotno
      ;';
      $strSQL .= $strSQLGroupBy;

      $sth = $dbh->prepare($strSQL);
      $i = 0;
      foreach ($ryokiInfo as $record) {
        $sth->bindValue($i + 1, $record['C_CUSTOMER_CD'], PDO::PARAM_STR);
        $i++;
      }
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $temp = [];
      $arItem = [];
      foreach($rslt as $rec) {
        $temp = BookMaker::makeArrayProductSpec($rec);
        $rec['psupple'] = $temp[1];
        array_push($arItem, $rec);
      }
      $resultStock->CRRSVRYOKI = $arItem;

      // リョーキ以外
      // $strSQL = 'SELECT *, "" AS psupple  FROM viewservecustomer
      // WHERE /*(lotno <> "" AND lotno <> 0) AND*/ targetcd NOT IN (';
      $strSQL = $strSQLBase . ' NOT IN (';

      foreach($ryokiInfo as $record) {
        $strSQL .= '?, ';
      }
      $strSQL = mb_substr($strSQL, 0, - 2);
      $strSQL .= ') ';

      $strSQL .= $strSQLGroupBy;

      $sth = $dbh->prepare($strSQL);

      $i = 0;
      foreach($ryokiInfo as $record) {
        $sth->bindValue($i + 1, $record['C_CUSTOMER_CD'], PDO::PARAM_STR);
        $i++;
      }
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $temp = [];
      $arItem = [];
      foreach($rslt as $rec) {
        $temp = BookMaker::makeArrayProductSpec($rec);
        $rec['psupple'] = $temp[1];
        // $arItem[$rec['pcd'] . $rec['placecd'] . $rec['lotno']] = $rec;
        array_push($arItem, $rec);
      }
      $resultStock->CRRSVSHT = $arItem;


    } catch (Exception $e) {
      throw $e;
    }
  }

  /***
   * クリンプ在庫
   */
  private static function getCrimpData($dbh, $resultStock) {
    try {
      $strSQLRoll = '
        SELECT 
            placecd,
            placename,
            productcd,
            productname,
            lotno,
            parrangementcd,
            unitname,
            sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09,  sub10, sub11, sub12, sub13, 
            CONCAT("φ", sub01, "×", CASE WHEN sub04 = FLOOR(sub04) THEN FLOOR(sub04) ELSE sub04 END, sub06) AS psupple,
            makercd,
            SUM(qty) AS sumqty,
            remarks,
            customercd,
            IF(typemanufacture = "D" AND sub09 = 15000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS domestic15,
            IF(typemanufacture = "O" AND sub09 = 15000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS overseas15,
            IF(typemanufacture = "" AND sub09 = 15000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS unknown15,
            IF(typemanufacture = "D" AND sub09 = 20000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS domestic20,
            IF(typemanufacture = "O" AND sub09 = 20000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS overseas20,
            IF(typemanufacture = "" AND sub09 = 20000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS unknown20, 
            makercd, IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername 
        FROM
            viewontimestorage
        LEFT JOIN 
            customer ON left(makercd,3) = C_CUSTOMER_CD
        LEFT JOIN 
            customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
        WHERE productcd = :PCD AND (sub09 = 15000 OR sub09 = 20000) AND sub08 = 1000 AND qty > 0 AND (customercd = "" or customercd is null) 
        GROUP BY sub01, sub04, sub06, sub09, placecd, productcd, parrangementcd, unitname 
        ORDER BY sub01, sub06 desc, sub04, unitname, parrangementcd, placecd
      ';
  
      // SUS　本管理 **************************************************************************************
      $sth = $dbh->prepare($strSQLRoll);
      $sth->bindValue(':PCD', '01001001', PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);
      
      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['domestic15'] = self::convertStrRoundDownToNumber($rslt[$i]['domestic15']);
        $rslt[$i]['overseas15'] = self::convertStrRoundDownToNumber($rslt[$i]['overseas15']);
        $rslt[$i]['unknown15'] = self::convertStrRoundDownToNumber($rslt[$i]['unknown15']);
        $rslt[$i]['domestic20'] = self::convertStrRoundDownToNumber($rslt[$i]['domestic20']);
        $rslt[$i]['overseas20'] = self::convertStrRoundDownToNumber($rslt[$i]['overseas20']);
        $rslt[$i]['unknown20'] = self::convertStrRoundDownToNumber($rslt[$i]['unknown20']);
      }

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
      }
      $resultStock->CR15MSUS = $arItem;

      $strSQLRoll = '
        SELECT 
            placecd,
            placename,
            productcd,
            productname,
            lotno,
            parrangementcd,
            unitname,
            sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09,  sub10, sub11, sub12, sub13, 
            CONCAT("φ", sub01, "×", CASE WHEN sub04 = FLOOR(sub04) THEN FLOOR(sub04) ELSE sub04 END, sub06) AS psupple,
            makercd,
            SUM(qty) AS sumqty,
            remarks,
            customercd,
            IF(typemanufacture = "D" AND sub08 = 910 AND sub09 = 15000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS domestic15_910,
            IF(typemanufacture = "O" AND sub08 = 910 AND sub09 = 15000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS overseas15_910,
            IF(typemanufacture = "" AND sub08 = 910 AND sub09 = 15000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS unknown15_910,
            IF(typemanufacture = "D" AND sub08 = 1000 AND sub09 = 15000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS domestic15_1000,
            IF(typemanufacture = "O" AND sub08 = 1000 AND sub09 = 15000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS overseas15_1000,
            IF(typemanufacture = "" AND sub08 = 1000 AND sub09 = 15000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS unknown15_1000,
            IF(typemanufacture = "D" AND sub08 = 1000 AND sub09 = 20000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS domestic20,
            IF(typemanufacture = "O" AND sub08 = 1000 AND sub09 = 20000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS overseas20,
            IF(typemanufacture = "" AND sub08 = 1000 AND sub09 = 20000, IF(SUM(qty) = 0, "", SUM(qty)), "") AS unknown20, 
            makercd, IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername 
        FROM
            viewontimestorage
        LEFT JOIN 
            customer ON left(makercd,3) = C_CUSTOMER_CD
        LEFT JOIN 
            customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
        WHERE productcd = :PCD AND (sub09 = 15000 OR sub09 = 20000) AND (sub08 = 910 OR sub08 = 1000) AND qty > 0 AND (customercd = "" or customercd is null) 
        GROUP BY sub01, sub04, sub06, sub08, sub09, placecd, productcd, parrangementcd, unitname 
        ORDER BY sub01, sub06 desc, sub04, unitname, parrangementcd, placecd
      ';
  
      // 亜鉛　本管理 **************************************************************************************
      $sth = $dbh->prepare($strSQLRoll);
      $sth->bindValue(':PCD', '01020001', PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['domestic15_910'] = self::convertStrRoundDownToNumber($rslt[$i]['domestic15_910']);
        $rslt[$i]['overseas15_910'] = self::convertStrRoundDownToNumber($rslt[$i]['overseas15_910']);
        $rslt[$i]['unknown15_910'] = self::convertStrRoundDownToNumber($rslt[$i]['unknown15_910']);
        $rslt[$i]['domestic15_1000'] = self::convertStrRoundDownToNumber($rslt[$i]['domestic15_1000']);
        $rslt[$i]['overseas15_1000'] = self::convertStrRoundDownToNumber($rslt[$i]['overseas15_1000']);
        $rslt[$i]['unknown15_1000'] = self::convertStrRoundDownToNumber($rslt[$i]['unknown15_1000']);
        $rslt[$i]['domestic20'] = self::convertStrRoundDownToNumber($rslt[$i]['domestic20']);
        $rslt[$i]['overseas20'] = self::convertStrRoundDownToNumber($rslt[$i]['overseas20']);
        $rslt[$i]['unknown20'] = self::convertStrRoundDownToNumber($rslt[$i]['unknown20']);
      }

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
      }
      $resultStock->CR15MZN = $arItem;

      /************************************************************************************************************
       * 切売クリンプ
       */
      $strSQL = '
      SELECT 
          placecd,
          placename,
          productcd,
          productname,
          sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13,
          CONCAT("φ", sub01, "×", CASE WHEN sub04 = FLOOR(sub04) THEN FLOOR(sub04) ELSE sub04 END, sub06) AS psupple,
          lotno,
          makercd,
          qty AS sumqty,
          unitname,
          remarks,
          customercd,
          updatedate,
          transferdate,
          parrangementcd,
          makercd, IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername 
      FROM
          viewontimestorage
      LEFT JOIN 
          customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN 
          customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE productcd = :PCD AND sub01 = :SUB01 AND unitname = :UNIT AND (customercd = "" or customercd is null) 
      ORDER BY sub01, sub06 desc, sub04, cast(sub08 as decimal(5,1)), placecd, qty, lotno ';
      
      // 切売1.2
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PCD', '01001001', PDO::PARAM_STR);
      $sth->bindValue(':SUB01', '1.2', PDO::PARAM_STR);
      $sth->bindValue(':UNIT', 'm', PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);
            
      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sub09'] = self::convertStrRoundDownToNumber($rslt[$i]['sub09']);
        $rslt[$i]['sub10'] = self::convertStrRoundDownToNumber($rslt[$i]['sub10']);
        $rslt[$i]['sub11'] = self::convertStrRoundDownToNumber($rslt[$i]['sub11']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $arItem = [];
      foreach($rslt as $rec) { 
        array_push($arItem, $rec);
      }
      $resultStock->CRSUS12 = $arItem;


      // 切売1.6
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PCD', '01001001', PDO::PARAM_STR);
      $sth->bindValue(':SUB01', '1.6', PDO::PARAM_STR);
      $sth->bindValue(':UNIT', 'm', PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sub09'] = self::convertStrRoundDownToNumber($rslt[$i]['sub09']);
        $rslt[$i]['sub10'] = self::convertStrRoundDownToNumber($rslt[$i]['sub10']);
        $rslt[$i]['sub11'] = self::convertStrRoundDownToNumber($rslt[$i]['sub11']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
      }
      $resultStock->CRSUS16 = $arItem;

      // 切売1.9
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PCD', '01001001', PDO::PARAM_STR);
      $sth->bindValue(':SUB01', '1.9', PDO::PARAM_STR);
      $sth->bindValue(':UNIT', 'm', PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sub09'] = self::convertStrRoundDownToNumber($rslt[$i]['sub09']);
        $rslt[$i]['sub10'] = self::convertStrRoundDownToNumber($rslt[$i]['sub10']);
        $rslt[$i]['sub11'] = self::convertStrRoundDownToNumber($rslt[$i]['sub11']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
      }
      $resultStock->CRSUS19 = $arItem;

      
      // 切売2.0
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PCD', '01001001', PDO::PARAM_STR);
      $sth->bindValue(':SUB01', '2.0', PDO::PARAM_STR);
      $sth->bindValue(':UNIT', 'm', PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sub09'] = self::convertStrRoundDownToNumber($rslt[$i]['sub09']);
        $rslt[$i]['sub10'] = self::convertStrRoundDownToNumber($rslt[$i]['sub10']);
        $rslt[$i]['sub11'] = self::convertStrRoundDownToNumber($rslt[$i]['sub11']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
      }
      $resultStock->CRSUS20 = $arItem;


      /*************************************************************************************
       * 切売1.5
       */
      $strSQL = '
      SELECT 
          placecd,
          placename,
          productcd,
          productname,
          sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13,
          CONCAT("φ", sub01, "×", CASE WHEN sub04 = FLOOR(sub04) THEN FLOOR(sub04) ELSE sub04 END, sub06) AS psupple,
          lotno,
          makercd,
          qty AS sumqty,
          unitname,
          remarks,
          customercd,
          updatedate,
          transferdate,
          parrangementcd,
          makercd, IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername 
      FROM
          viewontimestorage
      LEFT JOIN 
          customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN 
          customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE productcd = :PCD AND (sub01 = :SUB01 AND sub04 = :SUB04 AND sub01 = sub02 AND sub04 = sub05) AND unitname = :UNIT AND (customercd = "" or customercd is null) 
      ORDER BY sub01, sub06 desc, sub04, cast(sub08 as decimal(5,1)), placecd, qty, lotno;';
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PCD', '01001001', PDO::PARAM_STR);
      $sth->bindValue(':SUB01', '1.5', PDO::PARAM_STR);
      $sth->bindValue(':SUB04', '10', PDO::PARAM_STR);
      $sth->bindValue(':UNIT', 'm', PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sub09'] = self::convertStrRoundDownToNumber($rslt[$i]['sub09']);
        $rslt[$i]['sub10'] = self::convertStrRoundDownToNumber($rslt[$i]['sub10']);
        $rslt[$i]['sub11'] = self::convertStrRoundDownToNumber($rslt[$i]['sub11']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
      }
      $resultStock->CRSUS1510 = $arItem;

      // 1.5×15
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PCD', '01001001', PDO::PARAM_STR);
      $sth->bindValue(':SUB01', '1.5', PDO::PARAM_STR);
      $sth->bindValue(':SUB04', '15', PDO::PARAM_STR);
      $sth->bindValue(':UNIT', 'm', PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sub09'] = self::convertStrRoundDownToNumber($rslt[$i]['sub09']);
        $rslt[$i]['sub10'] = self::convertStrRoundDownToNumber($rslt[$i]['sub10']);
        $rslt[$i]['sub11'] = self::convertStrRoundDownToNumber($rslt[$i]['sub11']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $arItem = [];
      foreach($rslt as $rec) { 
        array_push($arItem, $rec);
      }
      $resultStock->CRSUS1515 = $arItem;

      // 上記以外の1,5
      $strSQL = '
      SELECT 
          placecd,
          placename,
          productcd,
          productname,
          sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13,
          CONCAT("φ", sub01, "×", CASE WHEN sub04 = FLOOR(sub04) THEN FLOOR(sub04) ELSE sub04 END, sub06) AS psupple,
          lotno,
          makercd,
          qty AS sumqty,
          unitname,
          remarks,
          customercd,
          updatedate,
          transferdate,
          parrangementcd,
          makercd, IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername 
      FROM
          viewontimestorage
      LEFT JOIN 
          customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN 
          customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE productcd = :PCD AND sub01 = :SUB01 AND (sub04 < :SUB04 OR sub04 > :SUB042 OR (sub04 > :SUB043 AND sub04 < :SUB044)) 
          AND sub01 = sub02 AND sub04 = sub05 AND unitname = :UNIT AND (customercd = "" or customercd is null) 
      ORDER BY sub01, sub06 desc, sub04, cast(sub08 as decimal(5,1)), placecd, qty, lotno ';
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PCD', '01001001', PDO::PARAM_STR);
      $sth->bindValue(':SUB01', '1.5', PDO::PARAM_STR);
      $sth->bindValue(':SUB04', '10', PDO::PARAM_STR);
      $sth->bindValue(':SUB042', '15', PDO::PARAM_STR);
      $sth->bindValue(':SUB043', '10', PDO::PARAM_STR);
      $sth->bindValue(':SUB044', '15', PDO::PARAM_STR);
      $sth->bindValue(':UNIT', 'm', PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sub09'] = self::convertStrRoundDownToNumber($rslt[$i]['sub09']);
        $rslt[$i]['sub10'] = self::convertStrRoundDownToNumber($rslt[$i]['sub10']);
        $rslt[$i]['sub11'] = self::convertStrRoundDownToNumber($rslt[$i]['sub11']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
      }
      $resultStock->CRSUS15 = $arItem;

      /*****************************************************************************
       * 切売用0.8
       */
      $strSQL = '
      SELECT 
          placecd,
          placename,
          productcd,
          productname,
          sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13,
          CONCAT("φ", sub01, "×", CASE WHEN sub04 = FLOOR(sub04) THEN FLOOR(sub04) ELSE sub04 END, sub06) AS psupple,
          lotno,
          makercd,
          qty AS sumqty,
          unitname,
          remarks,
          customercd, 
          updatedate,
          transferdate,
          parrangementcd,
          makercd, IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername 
      FROM
          viewontimestorage
      LEFT JOIN 
          customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN 
          customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE productcd = :PCD AND (sub01 = :SUB01 OR sub01 = :SUB012 ) AND  sub01 = sub02 AND sub04 = sub05 AND unitname = :UNIT AND (customercd = "" or customercd is null) 
      ORDER BY sub01, sub06 desc, sub04, cast(sub08 as decimal(5,1)), placecd, qty, lotno ';
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PCD', '01001001', PDO::PARAM_STR);
      $sth->bindValue(':SUB01', '0.8', PDO::PARAM_STR);
      $sth->bindValue(':SUB012', '1.0', PDO::PARAM_STR);
      $sth->bindValue(':UNIT', 'm', PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sub09'] = self::convertStrRoundDownToNumber($rslt[$i]['sub09']);
        $rslt[$i]['sub10'] = self::convertStrRoundDownToNumber($rslt[$i]['sub10']);
        $rslt[$i]['sub11'] = self::convertStrRoundDownToNumber($rslt[$i]['sub11']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
      }
      $resultStock->CRSUS08 = $arItem;

      /*****************************************************************************
       * 切売用2.3~3.2
       */
      $strSQL = '
      SELECT 
          placecd,
          placename,
          productcd,
          productname,
          sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13,
          CONCAT("φ", sub01, "×", CASE WHEN sub04 = FLOOR(sub04) THEN FLOOR(sub04) ELSE sub04 END, sub06) AS psupple,
          lotno,
          makercd,
          qty AS sumqty,
          unitname,
          remarks,
          customercd,
          updatedate,
          transferdate,
          parrangementcd,
          makercd, IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername 
      FROM
          viewontimestorage
      LEFT JOIN 
          customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN 
          customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE productcd = :PCD AND (sub01 >= :SUB01 AND sub01 <= :SUB012 ) AND  sub01 = sub02 AND sub04 = sub05 AND unitname = :UNIT AND (customercd = "" or customercd is null) 
      ORDER BY sub01, sub06 desc, sub04, cast(sub08 as decimal(5,1)), placecd, qty, lotno ';
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PCD', '01001001', PDO::PARAM_STR);
      $sth->bindValue(':SUB01', '2.3', PDO::PARAM_INT);
      $sth->bindValue(':SUB012', '3.2', PDO::PARAM_INT);
      $sth->bindValue(':UNIT', 'm', PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sub09'] = self::convertStrRoundDownToNumber($rslt[$i]['sub09']);
        $rslt[$i]['sub10'] = self::convertStrRoundDownToNumber($rslt[$i]['sub10']);
        $rslt[$i]['sub11'] = self::convertStrRoundDownToNumber($rslt[$i]['sub11']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
      }
      $resultStock->CRSUS23 = $arItem;

      /*********************************************************************************
       * 切売　階層が001以外(つまりSUS304以外)
       */
      $strSQL = '
      SELECT 
          placecd,
          placename,
          productcd,
          productname,
          sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13,
          CONCAT("φ", sub01, "×", CASE WHEN sub04 = FLOOR(sub04) THEN FLOOR(sub04) ELSE sub04 END, sub06) AS psupple,
          lotno,
          makercd,
          qty AS sumqty,
          unitname,
          remarks,
          customercd,
          updatedate,
          transferdate,
          parrangementcd,
          makercd, IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername 
      FROM
          viewontimestorage
      LEFT JOIN 
          customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN 
          customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE productcd = :PCD  AND unitname = :UNIT AND (customercd = "" or customercd is null) 
      ORDER BY sub01, sub06 desc, sub04, cast(sub08 as decimal(5,1)), placecd, qty, lotno;';
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PCD', '01007001', PDO::PARAM_STR);
      $sth->bindValue(':UNIT', 'm', PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sub09'] = self::convertStrRoundDownToNumber($rslt[$i]['sub09']);
        $rslt[$i]['sub10'] = self::convertStrRoundDownToNumber($rslt[$i]['sub10']);
        $rslt[$i]['sub11'] = self::convertStrRoundDownToNumber($rslt[$i]['sub11']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
      }
      $resultStock->CR316L = $arItem;

      // 切売　亜鉛
      $strSQL = '
      SELECT 
          placecd,
          placename,
          productcd,
          productname,
          sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13,
          CONCAT("φ", sub01, "×", CASE WHEN sub04 = FLOOR(sub04) THEN FLOOR(sub04) ELSE sub04 END, sub06) AS psupple,
          lotno,
          makercd,
          qty AS sumqty,
          unitname,
          remarks,
          customercd,
          updatedate,
          transferdate,
          parrangementcd,
          makercd, IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername 
      FROM
          viewontimestorage
      LEFT JOIN 
          customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN 
          customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE productcd = :PCD AND unitname = :UNIT AND (customercd = "" or customercd is null) 
      ORDER BY sub01, sub06 desc, sub04, cast(sub08 as decimal(5,1)), placecd, qty, lotno;';
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PCD', '01020001', PDO::PARAM_STR);
      $sth->bindValue(':UNIT', 'm', PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sub09'] = self::convertStrRoundDownToNumber($rslt[$i]['sub09']);
        $rslt[$i]['sub10'] = self::convertStrRoundDownToNumber($rslt[$i]['sub10']);
        $rslt[$i]['sub11'] = self::convertStrRoundDownToNumber($rslt[$i]['sub11']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
      }
      $resultStock->CRZN = $arItem;

      
      /***************************************************************************************************
       * シート保管品
       */
      $strSQL = '
      SELECT 
          placecd,
          placename,
          productcd,
          productname,
          sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub09, sub10, sub11, sub12, sub13,
          CASE 
            WHEN sub08 = 0 AND sub09 = 0 THEN ""
            WHEN sub08 = 0 THEN CASE WHEN sub09 = FLOOR(sub09) THEN CONCAT("", FLOOR(sub09)) ELSE CONCAT("", sub09) END
            WHEN sub09 = 0 THEN CASE WHEN sub08 = FLOOR(sub08) THEN CONCAT(FLOOR(sub08), "") ELSE CONCAT(sub08, "") END
            ELSE CONCAT(CASE WHEN sub08 = FLOOR(sub08) THEN FLOOR(sub08) ELSE sub08 END, "x", CASE WHEN sub09 = FLOOR(sub09) THEN FLOOR(sub09) ELSE sub09 END) 
          END AS sub08, 
          CONCAT("φ", sub01, "×", CASE WHEN sub04 = FLOOR(sub04) THEN FLOOR(sub04) ELSE sub04 END, sub06) AS psupple,
          lotno,
          makercd,
          qty AS sumqty,
          unitname,
          remarks,
          customercd, 
          updatedate,
          transferdate,
          parrangementcd,
          makercd, IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername 
      FROM
          viewontimestorage
      LEFT JOIN 
          customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN 
          customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE productcd = :PCD AND unitname = :UNIT AND (customercd = "" or customercd is null) 
      ORDER BY sub01, sub06 desc, sub04, placecd, qty, lotno ';

      // SUS304クリンプシート
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PCD', '01001001', PDO::PARAM_STR);
      $sth->bindValue(':UNIT', '枚', PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sub09'] = self::convertStrRoundDownToNumber($rslt[$i]['sub09']);
        $rslt[$i]['sub10'] = self::convertStrRoundDownToNumber($rslt[$i]['sub10']);
        $rslt[$i]['sub11'] = self::convertStrRoundDownToNumber($rslt[$i]['sub11']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
      }
      $resultStock->CRSHTSUS = $arItem;

      // 平織
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PCD', '01001002', PDO::PARAM_STR);
      $sth->bindValue(':UNIT', '枚', PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sub09'] = self::convertStrRoundDownToNumber($rslt[$i]['sub09']);
        $rslt[$i]['sub10'] = self::convertStrRoundDownToNumber($rslt[$i]['sub10']);
        $rslt[$i]['sub11'] = self::convertStrRoundDownToNumber($rslt[$i]['sub11']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
      }
      $resultStock->CRSHTPLAIN = $arItem;

      // その他シート
      $strSQL = '
      SELECT 
          placecd,
          placename,
          productcd,
          productname,
          sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub09, sub10, sub11, sub12, sub13,
          CASE 
            WHEN sub08 = 0 AND sub09 = 0 THEN ""
            WHEN sub08 = 0 THEN CASE WHEN sub09 = FLOOR(sub09) THEN CONCAT("", FLOOR(sub09)) ELSE CONCAT("", sub09) END
            WHEN sub09 = 0 THEN CASE WHEN sub08 = FLOOR(sub08) THEN CONCAT(FLOOR(sub08), "") ELSE CONCAT(sub08, "") END
            ELSE CONCAT(CASE WHEN sub08 = FLOOR(sub08) THEN FLOOR(sub08) ELSE sub08 END, "x", CASE WHEN sub09 = FLOOR(sub09) THEN FLOOR(sub09) ELSE sub09 END) 
          END AS sub08, 
          CONCAT("φ", sub01, "×", CASE WHEN sub04 = FLOOR(sub04) THEN FLOOR(sub04) ELSE sub04 END, sub06) AS psupple,
          lotno,
          makercd,
          qty AS sumqty,
          unitname,
          remarks,
          customercd,
          updatedate,
          transferdate,
          parrangementcd,
          makercd, IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername 
      FROM
          viewontimestorage
      LEFT JOIN 
          customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN 
          customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      LEFT JOIN 
          stockplan ON sp_product_cd = productcd AND sp_sub_01 = sub01 AND sp_sub_02 = sub02 AND sp_sub_04 = sub04 AND sp_sub_05 = sub05 AND sp_sub_06 = sub06           
      WHERE SUBSTRING(productcd, 1, 2) = "01" 
          AND not ((productcd = "01001001" OR productcd = "01020001") AND (sub09 = 15000 OR sub09 = 20000) AND sub08 = 1000) 
          AND not (productcd = "01001001" AND (sub01 = "1.2" OR sub01 = "1.6" OR sub01 = "1.9" OR sub01 = "2.0") AND unitname = "m") 
          AND not (productcd = "01001001" AND (sub01 = "0.8" OR sub01 = "1.0" OR (sub01 >= "2.3" AND sub01 <= "3.2" )) AND unitname = "m") 
          AND not (productcd = "01001001" AND sub01 = "1.5" AND (sub04 <= "10" OR sub04 >= "15" OR (sub04 >= "10" AND sub04 <= "15")) AND unitname = "m") 
          AND not ((productcd = "01007001" OR productcd = "01020001") AND unitname = "m") 
          AND not ((productcd = "01001001" OR productcd = "01001002") AND unitname = "枚") 
          AND (customercd = "" or customercd is null) 
      GROUP BY sub01, sub04, sub06, sub08, sub09, placecd, parrangementcd, unitname
      ORDER BY sub01, sub06 desc, sub04, cast(sub08 as decimal(5,1)), placecd, qty, lotno ';
      $sth = $dbh->prepare($strSQL);
      // $sth->bindValue(':CAT01CD', '01', PDO::PARAM_STR);
      // $sth->bindValue(':CAT02CD1', '01001001', PDO::PARAM_STR);
      // $sth->bindValue(':CAT02CD2', '01020001', PDO::PARAM_STR);
      // $sth->bindValue(':SUB09', '15000', PDO::PARAM_STR);
      // $sth->bindValue(':SUB091', '20000', PDO::PARAM_STR);
      // $sth->bindValue(':SUB08', '1000', PDO::PARAM_STR);
      // $sth->bindValue(':CAT02CD3', '01001001', PDO::PARAM_STR);
      // $sth->bindValue(':SUB01', '1.2', PDO::PARAM_STR);
      // $sth->bindValue(':SUB011', '1.6', PDO::PARAM_STR);
      // $sth->bindValue(':SUB012', '1.9', PDO::PARAM_STR);
      // $sth->bindValue(':SUB013', '2.0', PDO::PARAM_STR);
      // $sth->bindValue(':UNIT', 'm', PDO::PARAM_STR);
      // $sth->bindValue(':CAT02CD4', '01001001', PDO::PARAM_STR);
      // $sth->bindValue(':SUB014', '0.8', PDO::PARAM_STR);
      // $sth->bindValue(':SUB015', '1.0', PDO::PARAM_STR);
      // $sth->bindValue(':SUB016', '2.3', PDO::PARAM_STR);
      // $sth->bindValue(':SUB017', '3.2', PDO::PARAM_STR);
      // $sth->bindValue(':UNIT1', 'm', PDO::PARAM_STR);
      // $sth->bindValue(':CAT02CD5', '01001001', PDO::PARAM_STR);
      // $sth->bindValue(':SUB018', '1.5', PDO::PARAM_STR);
      // $sth->bindValue(':SUB04', '10', PDO::PARAM_STR);
      // $sth->bindValue(':SUB041', '15', PDO::PARAM_STR);
      // $sth->bindValue(':SUB042', '10', PDO::PARAM_STR);
      // $sth->bindValue(':SUB043', '15', PDO::PARAM_STR);
      // $sth->bindValue(':UNIT2', 'm', PDO::PARAM_STR);
      // $sth->bindValue(':CAT02CD6', '01007001', PDO::PARAM_STR);
      // $sth->bindValue(':CAT02CD7', '01020001', PDO::PARAM_STR);
      // $sth->bindValue(':UNIT3', 'm', PDO::PARAM_STR);
      // $sth->bindValue(':CAT02CD8', '01001001', PDO::PARAM_STR);
      // $sth->bindValue(':CAT02CD9', '01001002', PDO::PARAM_STR);
      // $sth->bindValue(':UNIT4', '枚', PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($rslt); $i++) {
        $rslt[$i]['sub08'] = self::convertStrRoundDownToNumber($rslt[$i]['sub08']);
        $rslt[$i]['sub09'] = self::convertStrRoundDownToNumber($rslt[$i]['sub09']);
        $rslt[$i]['sub10'] = self::convertStrRoundDownToNumber($rslt[$i]['sub10']);
        $rslt[$i]['sub11'] = self::convertStrRoundDownToNumber($rslt[$i]['sub11']);
        $rslt[$i]['sumqty'] = self::convertStrRoundDownToNumber($rslt[$i]['sumqty']);
      }
      
      $arItem = [];
      foreach($rslt as $rec) {     
        array_push($arItem, $rec);
      }
      $resultStock->CRSHTOTHER = $arItem;

    } catch (Exception $e) {
      throw $e;
    }
  }

  /***
   * 織網金網
   */
  private static function getWeaveData($dbh, $resultStock) {
    try {
      $strSQL = 'SELECT *,
      SUBSTRING_INDEX(productname, "_", -1) AS psupplestring,
      IF(INSTR(case when mod(cast(sub08 as decimal(5,1)), 1) = 0 then truncate(sub08, 0) else sub08 end, "×") + INSTR(parrangementname, "円切") > 0, sub08, 
        CONCAT(case when mod(cast(sub08 as decimal(5,1)), 1) = 0 then truncate(sub08, 0) else sub08 end, "×", case when mod(cast(sub09 as decimal(5,1)), 1) = 0 then truncate(sub09, 0) else sub09 end)) AS dimensions,
      FLOOR(qty) AS sumqty
       FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 5) = :CAT02CD AND unitname = :UNIT AND placename LIKE :PLACENAME AND (customercd = "" or customercd is null) 
      ORDER BY cast(SUBSTRING_INDEX(SUBSTRING_INDEX(productname, "mesh", 1), "×", -1) as decimal(5,1)), SUBSTRING(productcd, 7, 3), psupplestring, sub08, qty, placecd;';
      // テクノSUS304 
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT02CD',  "02001", PDO::PARAM_STR);
      $sth->bindValue(':UNIT',  "m", PDO::PARAM_STR);
      $sth->bindValue(':PLACENAME',  "%テクノ%", PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
        // $arItem[$rec['productcd'] . $rec['placecd']] = $rec;
      }
      $resultStock->WVSUS304 = $arItem;

      // テクノSUS316
      $strSQL = 'SELECT *,
      SUBSTRING_INDEX(productname, "_", -1) AS psupplestring,
      IF(INSTR(case when mod(cast(sub08 as decimal(5,1)), 1) = 0 then truncate(sub08, 0) else sub08 end, "×") + INSTR(parrangementname, "円切") > 0, sub08, 
        CONCAT(case when mod(cast(sub08 as decimal(5,1)), 1) = 0 then truncate(sub08, 0) else sub08 end, "×", case when mod(cast(sub09 as decimal(5,1)), 1) = 0 then truncate(sub09, 0) else sub09 end)) AS dimensions,
      FLOOR(qty) AS sumqty
       FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 2) = :CAT01CD AND SUBSTRING(productcd, 3, 3) IN ( :CAT02CD1 , :CAT02CD2 ) AND unitname = :UNIT AND placename LIKE :PLACENAME AND (customercd = "" or customercd is null) 
      ORDER BY cast(SUBSTRING_INDEX(SUBSTRING_INDEX(productname, "mesh", 1), "×", -1) as decimal(5,1)), SUBSTRING(productcd, 3, 3), SUBSTRING(productcd, 7, 3), psupplestring, sub08, qty, placecd;';
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT01CD',  "02", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD1',  "006", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD2',  "007", PDO::PARAM_STR);
      $sth->bindValue(':UNIT',  "m", PDO::PARAM_STR);
      $sth->bindValue(':PLACENAME',  "%テクノ%", PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
        // $arItem[$rec['productcd'] . $rec['placecd']] = $rec;
      }
      $resultStock->WVSUS316 = $arItem;

      // テクノ亜鉛・真鍮・その他
      $strSQL = 'SELECT *,
      SUBSTRING_INDEX(productname, "_", -1) AS psupplestring,
      IF(INSTR(case when mod(cast(sub08 as decimal(5,1)), 1) = 0 then truncate(sub08, 0) else sub08 end, "×") + INSTR(parrangementname, "円切") > 0, sub08, 
        CONCAT(case when mod(cast(sub08 as decimal(5,1)), 1) = 0 then truncate(sub08, 0) else sub08 end, "×", case when mod(cast(sub09 as decimal(5,1)), 1) = 0 then truncate(sub09, 0) else sub09 end)) AS dimensions,
      FLOOR(qty) AS sumqty
       FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 2) = :CAT01CD AND (SUBSTRING(productcd, 3, 3) IN ( :CAT02CD1 , :CAT02CD2 , :CAT02CD3 , :CAT02CD4 ) OR SUBSTRING(productcd, 3, 3) > :CAT02CD5 ) AND unitname = :UNIT AND placename LIKE :PLACENAME AND (customercd = "" or customercd is null) 
      ORDER BY cast(SUBSTRING_INDEX(SUBSTRING_INDEX(productname, "mesh", 1), "×", -1) as decimal(5,1)), SUBSTRING(productcd, 3, 3), SUBSTRING(productcd, 7, 3), psupplestring, sub08, qty, placecd;';
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT01CD',  "02", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD1',  "002", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD2',  "003", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD3',  "004", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD4',  "005", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD5',  "008", PDO::PARAM_STR);
      $sth->bindValue(':UNIT',  "m", PDO::PARAM_STR);
      $sth->bindValue(':PLACENAME',  "%テクノ%", PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
        // $arItem[$rec['productcd'] . $rec['placecd']] = $rec;
      }
      $resultStock->WVZN = $arItem;
      
      // 亀甲網
      $strSQL = 'SELECT *,
      SUBSTRING_INDEX(productname, "_", -1) AS psupplestring,
      IF(INSTR(case when mod(cast(sub08 as decimal(5,1)), 1) = 0 then truncate(sub08, 0) else sub08 end, "×") + INSTR(parrangementname, "円切") > 0, sub08, 
        CONCAT(case when mod(cast(sub08 as decimal(5,1)), 1) = 0 then truncate(sub08, 0) else sub08 end, "×", case when mod(cast(sub09 as decimal(6,1)), 1) = 0 then truncate(sub09, 0) else sub09 end)) AS dimensions,
      FLOOR(qty) AS sumqty
       FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 2) = :CAT01CD AND (customercd = "" or customercd is null) 
      ORDER BY SUBSTRING(productcd, 3, 3), SUBSTRING(productcd, 7, 3), psupplestring, sub08, qty, placecd;';
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT01CD',  "04", PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
        // $arItem[$rec['productcd'] . $rec['placecd']] = $rec;
      }
      $resultStock->WVHEX = $arItem;
      
      // 織網半端品→シート保管品
      $strSQL = 'SELECT *,
      SUBSTRING_INDEX(productname, "_", -1) AS psupplestring,
      IF(INSTR(case when mod(cast(sub08 as decimal(5,1)), 1) = 0 then truncate(sub08, 0) else sub08 end, "×") + INSTR(parrangementname, "円切") > 0, sub08, 
        CONCAT(case when mod(cast(sub08 as decimal(5,1)), 1) = 0 then truncate(sub08, 0) else sub08 end, "×", case when mod(cast(sub09 as decimal(5,1)), 1) = 0 then truncate(sub09, 0) else sub09 end)) AS dimensions,
      FLOOR(qty) AS sumqty
       FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 2) = :CAT01CD AND unitname = :UNIT AND (customercd = "" or customercd is null) 
      ORDER BY cast(SUBSTRING_INDEX(SUBSTRING_INDEX(productname, "mesh", 1), "×", -1) as decimal(5,1)), SUBSTRING(productcd, 3, 3), SUBSTRING(productcd, 7, 3), psupplestring, sub08, qty, placecd;';
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT01CD',  "02", PDO::PARAM_STR);
      $sth->bindValue(':UNIT', "枚", PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
        // $arItem[$rec['productcd'] . $rec['placecd']] = $rec;
      }
      $resultStock->WVSHT = $arItem;   

      // 織網その他 排他(※2023/7/3：ハンパに統合したため、抽出しない)
      $strSQL = 'SELECT *,
      SUBSTRING_INDEX(productname, "_", -1) AS psupplestring,
      IF(INSTR(case when mod(cast(sub08 as decimal(5,1)), 1) = 0 then truncate(sub08, 0) else sub08 end, "×") + INSTR(parrangementname, "円切") > 0, sub08, 
        CONCAT(case when mod(cast(sub08 as decimal(5,1)), 1) = 0 then truncate(sub08, 0) else sub08 end, "×", case when mod(cast(sub09 as decimal(5,1)), 1) = 0 then truncate(sub09, 0) else sub09 end)) AS dimensions,
      FLOOR(qty) AS sumqty
       FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 2) = :CAT01CD AND placename NOT LIKE :PLACENAME AND (customercd = "" or customercd is null) 
      ORDER BY cast(SUBSTRING_INDEX(SUBSTRING_INDEX(productname, "mesh", 1), "×", -1) as decimal(5,1)), SUBSTRING(productcd, 3, 3), SUBSTRING(productcd, 7, 3), psupplestring, sub08, qty, placecd;';
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT01CD',  "02", PDO::PARAM_STR);
      $sth->bindValue(':PLACENAME', "%テクノ%", PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
        // $arItem[$rec['productcd'] . $rec['placecd']] = $rec;
      }
      $resultStock->WVOTH = $arItem;

    } catch (Exception $e) {
      throw $e;
    }
  }

  /****
   * 溶接 
   */
  private static function getWeldData($dbh, $resultStock) {
    try {
      // SUS溶接金網
      $strSQL = 'SELECT 
          *, SUBSTRING_INDEX(productname, "_", -1) AS psupplestring,
          CASE
            WHEN sub08 IS NULL OR sub08 = "" OR sub08 = 0 THEN
                CASE WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN ""
			    ELSE CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END
                END
            WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN
                CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END
            ELSE
                CONCAT(CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END, "×", CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END)
          END AS dimensions, 
          SUBSTRING_INDEX(SUBSTRING_INDEX(productname, "_", -1), "×", 1) AS diameter,
          IF(INSTR(SUBSTRING_INDEX(productname, "_", -1), "P") > 0, 1, 0) AS pitchtype,
          IF(INSTR(SUBSTRING_INDEX(productname, "_", -1), "P") > 0, 
            SUBSTRING_INDEX(productname, "P", -1), 
            REPLACE(SUBSTRING_INDEX(productname, "×", -1), "m/s", ""))+0 AS pitch, FLOOR(qty) AS sumqty
      FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 2) = :CAT01CD AND SUBSTRING(productcd, 3, 3) = :CAT02CD AND (customercd = "" or customercd is null) 
      ORDER BY diameter, pitchtype DESC, pitch, sub08+0, qty, placecd;';

      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT01CD', "03", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD', "001", PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
        // $arItem[$rec['productcd'] . $rec['placecd']] = $rec;
      }
      $resultStock->WDSUS = $arItem;

      // 鉄溶接金網
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT01CD', "03", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD', "015", PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
        // $arItem[$rec['pcd'] . $rec['placecd']] = $rec;
      }
      $resultStock->WDFE = $arItem;
      
      // その他溶接金網
      $strSQL = 'SELECT *,
        CASE
          WHEN sub08 IS NULL OR sub08 = "" OR sub08 = 0 THEN
              CASE WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN ""
			  ELSE CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END
              END
          WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN
              CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END
          ELSE
              CONCAT(CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END, "×", CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END)
        END AS dimensions, 
        SUBSTRING_INDEX(SUBSTRING_INDEX(productname, "_", - 1), "×", 1) AS diameter,
        IF(INSTR(SUBSTRING_INDEX(productname, "_", - 1), "P") > 0, 1, 0) AS pitchtype,
        IF(INSTR(SUBSTRING_INDEX(productname, "_", - 1), "P") > 0, SUBSTRING_INDEX(productname, "P", -1), 
          REPLACE(SUBSTRING_INDEX(productname, "_", - 1), "m/s", ""))+0 AS pitch, FLOOR(qty) AS sumqty
      FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 2) = :CAT01CD AND ((SUBSTRING(productcd, 3, 3) > :CAT02CD1 AND SUBSTRING(productcd, 3, 3) < :CAT02CD2) OR SUBSTRING(productcd, 3, 3) > :CAT02CD3 ) AND (customercd = "" or customercd is null) 
      ORDER BY diameter, pitchtype DESC, pitch, sub08+0, qty, placecd;';

      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT01CD', "03", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD1', "001", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD2', "015", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD3', "015", PDO::PARAM_STR);
      $sth->execute();

      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        array_push($arItem, $rec);
        // $arItem[$rec['productcd'] . $rec['placecd']] = $rec;
      }
      $resultStock->WDOTH = $arItem;

    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 線材在庫
   */
  private static function getWireData($dbh, $resultStock) {
    try {
      // 品名CD先頭18=大分類CDが線材　を意味する
      $strSQL = 'SELECT viewontimestorage.*, 
      IF(INSTR(productname, "#") > 0, CONCAT("#", SUBSTRING_INDEX(productname, "#", -1)), CONCAT("φ", SUBSTRING_INDEX(productname, "φ", -1))) AS diameter, 
      IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername, 
      SUM(qty) AS sumqty,
      FORMAT(CASE WHEN SUM(case when costprice = 0 then 0 else qty end) = 0 THEN 0 ELSE SUM(case when costprice = 0 then 0 else costprice end) / SUM(case when costprice = 0 then 0 else qty end) END, 0) AS avgunitprice, 
      FORMAT(SUM(costprice), 0) AS sumprice
       FROM viewontimestorage 
      LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE LEFT(productcd, 2) = "18" AND SUBSTR(productcd, 3, 6) = :CAT02CD AND (customercd = "" or customercd is null) 
      GROUP BY productcd, /*sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13, lotno, */makercd  
      ORDER BY productcd, unitname;';

      /**********************************************************************************************************
       * 単一条件のもの
       */
      // 304W1
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT02CD', "001002", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRSUS304W1 = $arItem;

      // 304W2
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT02CD', "001003", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRSUS304W2 = $arItem;

      // 309SW1
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT02CD', "004002", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRSUS309W1 = $arItem;

      // 309SW2
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT02CD', "004003", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRSUS309W2 = $arItem;

      // 310SW1
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT02CD', "005002", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRSUS310W1 = $arItem;

      // 310SW2
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT02CD', "005003", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRSUS310W2 = $arItem;

      /*****************************************************************************
       * さらに上位階層を指定する在庫
       */
      $strSQLCat02 = 'SELECT viewontimestorage.*,
      IF(INSTR(productname, "#") > 0, CONCAT("#", SUBSTRING_INDEX(productname, "#", -1)), CONCAT("φ", SUBSTRING_INDEX(productname, "φ", -1))) AS diameter, 
      IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername, 
      SUM(qty) AS sumqty,
      FORMAT(CASE WHEN SUM(case when costprice = 0 then 0 else qty end) = 0 THEN 0 ELSE SUM(case when costprice = 0 then 0 else costprice end) / SUM(case when costprice = 0 then 0 else qty end) END, 0) AS avgunitprice, 
      FORMAT(SUM(costprice), 0) AS sumprice
      FROM viewontimestorage 
      LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE LEFT(productcd, 2) = "18" AND SUBSTR(productcd, 3, 3) = :CAT02CD AND (customercd = "" or customercd is null) 
      GROUP BY productcd, /*sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13, lotno,*/ makercd 
      ORDER BY productcd, unitname;';

      // 亜鉛2種
      $sth = $dbh->prepare($strSQLCat02);
      $sth->bindValue(':CAT02CD', "021", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRZN2 = $arItem;

      // 鉄
      $sth = $dbh->prepare($strSQLCat02);
      $sth->bindValue(':CAT02CD', "017", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRFE = $arItem;


      /*******************************************************************************************************
       * 複数条件のもの　316、316L、各種平線
       *  */ 
      // 316
      $strSQLMultiCat2 = 'SELECT viewontimestorage.*,
      IF(INSTR(productname, "#") > 0, CONCAT("#", SUBSTRING_INDEX(productname, "#", -1)), CONCAT("φ", SUBSTRING_INDEX(productname, "φ", -1))) AS diameter, 
      IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername, 
      SUM(qty) AS sumqty,
      FORMAT(CASE WHEN SUM(case when costprice = 0 then 0 else qty end) = 0 THEN 0 ELSE SUM(case when costprice = 0 then 0 else costprice end) / SUM(case when costprice = 0 then 0 else qty end) END, 0) AS avgunitprice, 
      FORMAT(SUM(costprice), 0) AS sumprice
      FROM viewontimestorage 
      LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE LEFT(productcd, 2) = "18" AND SUBSTR(productcd, 3, 3) IN (:CAT02CD1, :CAT02CD2) AND (customercd = "" or customercd is null) 
      GROUP BY productcd, /*sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13, lotno,*/ makercd
      ORDER BY productcd;';
      $sth = $dbh->prepare($strSQLMultiCat2);
      $sth->bindValue(':CAT02CD1', "006", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD2', "007", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRSUS316 = $arItem;
      
      // 平線
      $strSQLMultiCat3 = 'SELECT viewontimestorage.*,
      CONCAT("t", SUBSTRING_INDEX(productname, "t", -1)) AS diameter, 
      IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername, 
      SUM(qty) AS sumqty,
      FORMAT(CASE WHEN SUM(case when costprice = 0 then 0 else qty end) = 0 THEN 0 ELSE SUM(case when costprice = 0 then 0 else costprice end) / SUM(case when costprice = 0 then 0 else qty end) END, 0) AS avgunitprice, 
      FORMAT(SUM(costprice), 0) AS sumprice
      FROM viewontimestorage 
      LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      LEFT JOIN productcategory ON prc_cat_01_cd = LEFT(productcd, 2) AND prc_cat_02_cd = SUBSTR(productcd, 3, 3) AND prc_cat_03_cd = SUBSTR(productcd, 6, 3)
      WHERE LEFT(productcd, 2) = "18" AND prc_name LIKE "%平線%" AND (customercd = "" or customercd is null) 
      GROUP BY productcd, /*sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13, lotno,*/ makercd
      ORDER BY productcd;';
      $sth = $dbh->prepare($strSQLMultiCat3);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRFLAT = $arItem;


      /*********************************************************************************************
       * 上記リストの排他的条件の場合
       */
      // 階層②で002,003,008以上でかつ、名称にSUSを含むCDを抽出
      $strLayer02SUS = '
      SELECT prc_cat_02_cd FROM productcategory 
      WHERE prc_cd = "2" AND prc_cat_01_cd = "18" 
      AND (prc_cat_02_cd = "002" OR prc_cat_02_cd =  "003" OR prc_cat_02_cd >= "008")
      AND prc_name LIKE "%SUS%"; 
      ';
      $sth = $dbh->prepare($strLayer02SUS);
      $rsltLayer02SUS = $sth->fetchAll(PDO::FETCH_ASSOC);
      
      // SUSその他
      $strSQLMulti = '
      SELECT viewontimestorage.*,
        IF(INSTR(productname, "#") > 0, CONCAT("#", SUBSTRING_INDEX(productname, "#", -1)), CONCAT("φ", SUBSTRING_INDEX(productname, "φ", -1))) AS diameter, 
        IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername, 
        SUM(qty) AS sumqty,
        FORMAT(CASE WHEN SUM(case when costprice = 0 then 0 else qty end) = 0 THEN 0 ELSE SUM(case when costprice = 0 then 0 else costprice end) / SUM(case when costprice = 0 then 0 else qty end) END, 0) AS avgunitprice, 
        FORMAT(SUM(costprice), 0) AS sumprice
      FROM viewontimestorage 
      LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE SUBSTRING(productcd, 1, 2) = "18" AND (customercd = "" or customercd is null) AND productname LIKE "%SUS%" 
      AND SUBSTRING(productcd, 3, 3) IN (
        SELECT prc_cat_02_cd FROM productcategory 
        WHERE prc_cd = "2" AND prc_cat_01_cd = "18" 
        AND (prc_cat_02_cd = "002" OR prc_cat_02_cd =  "003" OR prc_cat_02_cd >= "008")
      )
      GROUP BY productcd, /*sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13, lotno,*/ makercd 
      ORDER BY productcd, unitname
      ;';
      $sth = $dbh->prepare($strSQLMulti);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRSUSOTH = $arItem;

      //アロイ・アルミ
      $sth = $dbh->prepare('
      SELECT viewontimestorage.*,
        IF(INSTR(productname, "#") > 0, CONCAT("#", SUBSTRING_INDEX(productname, "#", -1)), CONCAT("φ", SUBSTRING_INDEX(productname, "φ", -1))) AS diameter, 
        IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername, 
        SUM(qty) AS sumqty,
        FORMAT(CASE WHEN SUM(case when costprice = 0 then 0 else qty end) = 0 THEN 0 ELSE SUM(case when costprice = 0 then 0 else costprice end) / SUM(case when costprice = 0 then 0 else qty end) END, 0) AS avgunitprice, 
        FORMAT(SUM(costprice), 0) AS sumprice
      FROM viewontimestorage 
      LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE SUBSTRING(productcd, 1, 2) = "18" AND (customercd = "" or customercd is null) 
      AND SUBSTRING(productcd, 3, 3) IN (
        SELECT prc_cat_02_cd FROM productcategory 
        WHERE prc_cd = "2" AND prc_cat_01_cd = "18" 
        AND (prc_name LIKE "%アロイ%" OR prc_name LIKE "%アルミ%" OR prc_name LIKE "%ｱﾛｲ%" OR prc_name LIKE "%ｱﾙﾐ%" ) )
      GROUP BY productcd, /*sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13, lotno,*/ makercd 
      ORDER BY productcd, unitname
      ;');
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRAL = $arItem;

      // 銅・チタン・真鍮
      $sth = $dbh->prepare('
      SELECT viewontimestorage.*,
        IF(INSTR(productname, "#") > 0, CONCAT("#", SUBSTRING_INDEX(productname, "#", -1)), CONCAT("φ", SUBSTRING_INDEX(productname, "φ", -1))) AS diameter, 
        IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername, 
        SUM(qty) AS sumqty,
        FORMAT(CASE WHEN SUM(case when costprice = 0 then 0 else qty end) = 0 THEN 0 ELSE SUM(case when costprice = 0 then 0 else costprice end) / SUM(case when costprice = 0 then 0 else qty end) END, 0) AS avgunitprice, 
        FORMAT(SUM(costprice), 0) AS sumprice
      FROM viewontimestorage 
      LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE SUBSTRING(productcd, 1, 2) = "18" AND (customercd = "" or customercd is null) 
      AND SUBSTRING(productcd, 3, 3) IN (
        SELECT prc_cat_02_cd FROM productcategory 
        WHERE prc_cd = "2" AND prc_cat_01_cd = "18" 
        AND (prc_name LIKE "%銅%" OR prc_name LIKE "%チタン%"  OR prc_name LIKE "%真鍮%"  OR prc_name LIKE "%ﾁﾀﾝ%") )
      GROUP BY productcd, /*sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13, lotno,*/ makercd 
      ORDER BY productcd, unitname
      ;');
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRCU = $arItem;

      // 亜鉛3種以上
      $strSQLMulti = 'SELECT viewontimestorage.*,
      IF(INSTR(productname, "#") > 0, CONCAT("#", SUBSTRING_INDEX(productname, "#", -1)), 
      IF(INSTR(productname, "φ") > 0, CONCAT("φ", SUBSTRING_INDEX(productname, "φ", -1)), productname)) AS diameter, 
      IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername, 
      SUM(qty) AS sumqty,
      FORMAT(CASE WHEN SUM(case when costprice = 0 then 0 else qty end) = 0 THEN 0 ELSE SUM(case when costprice = 0 then 0 else costprice end) / SUM(case when costprice = 0 then 0 else qty end) END, 0) AS avgunitprice, 
      FORMAT(SUM(costprice), 0) AS sumprice
      FROM viewontimestorage
      LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE SUBSTRING(productcd, 1, 2) = "18" AND (customercd = "" or customercd is null) 
        AND (SUBSTRING(productcd, 3, 3) < "021" OR SUBSTRING(productcd, 3, 3) > "021") 
        AND SUBSTRING(productcd, 3, 3) IN (SELECT prc_cat_02_cd FROM productcategory WHERE prc_cd = "2" AND prc_cat_01_cd = "18"  AND (SUBSTRING(productcd, 3, 3) < "021" OR SUBSTRING(productcd, 3, 3) > "021") AND prc_name LIKE "%亜鉛%")
      GROUP BY productcd, /*sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13, lotno,*/ makercd 
      ORDER BY productcd;';
      $sth = $dbh->prepare($strSQLMulti);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRZN3 = $arItem;

      // 硬鋼線
      $strSQLMulti = 'SELECT viewontimestorage.*,
      IF(INSTR(productname, "#") > 0, CONCAT("#", SUBSTRING_INDEX(productname, "#", -1)), CONCAT("φ", SUBSTRING_INDEX(productname, "φ", -1))) AS diameter, 
      IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername, 
      SUM(qty) AS sumqty,
      FORMAT(CASE WHEN SUM(case when costprice = 0 then 0 else qty end) = 0 THEN 0 ELSE SUM(case when costprice = 0 then 0 else costprice end) / SUM(case when costprice = 0 then 0 else qty end) END, 0) AS avgunitprice, 
      FORMAT(SUM(costprice), 0) AS sumprice
      FROM viewontimestorage
      LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE SUBSTRING(productcd, 1, 2) = "18" AND (customercd = "" or customercd is null) 
        AND SUBSTRING(productcd, 3, 3) IN (SELECT prc_cat_02_cd FROM productcategory WHERE prc_cd = "2" AND prc_cat_01_cd = "18" AND prc_name LIKE :PNAME)
      GROUP BY productcd, /*sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13, lotno,*/ makercd 
      ORDER BY productcd;';
      $sth = $dbh->prepare($strSQLMulti);
      $sth->bindValue(':PNAME', "%硬鋼線%", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRHSTEEL = $arItem;

      // ビニール被覆線
      $strSQLMulti = 'SELECT viewontimestorage.*,
      IF(INSTR(productname, "#") > 0, CONCAT("#", SUBSTRING_INDEX(productname, "#", -1)), CONCAT("φ", SUBSTRING_INDEX(productname, "φ", -1))) AS diameter, 
      IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername, 
      SUM(qty) AS sumqty,
      FORMAT(CASE WHEN SUM(case when costprice = 0 then 0 else qty end) = 0 THEN 0 ELSE SUM(case when costprice = 0 then 0 else costprice end) / SUM(case when costprice = 0 then 0 else qty end) END, 0) AS avgunitprice, 
      FORMAT(SUM(costprice), 0) AS sumprice
      FROM viewontimestorage
      LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE SUBSTRING(productcd, 1, 2) = "18" AND (customercd = "" or customercd is null) 
        AND SUBSTRING(productcd, 3, 3) IN (SELECT prc_cat_02_cd FROM productcategory WHERE prc_cd = "2" AND prc_cat_01_cd = "18" AND (prc_name LIKE :PNAME OR prc_name LIKE :PNAME2))
      GROUP BY productcd, /*sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13, lotno,*/ makercd 
      ORDER BY productcd;';
      $sth = $dbh->prepare($strSQLMulti);
      $sth->bindValue(':PNAME', "%ビニール被覆線%", PDO::PARAM_STR);
      $sth->bindValue(':PNAME2', "%ﾋﾞﾆｰﾙ被覆線%", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRVINYL = $arItem;
      
      // 上記以外  　相当重いはずなので、何らかの調整必要と思われる
      $strSQLMulti = '
      SELECT viewontimestorage.*,
      IF(INSTR(productname, "#") > 0, CONCAT("#", SUBSTRING_INDEX(productname, "#", -1)), 
      IF(INSTR(productname, "φ") > 0, CONCAT("φ", SUBSTRING_INDEX(productname, "φ", -1)), productname)) AS diameter, 
      IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername, 
      SUM(qty) AS sumqty,
      FORMAT(CASE WHEN SUM(case when costprice = 0 then 0 else qty end) = 0 THEN 0 ELSE SUM(case when costprice = 0 then 0 else costprice end) / SUM(case when costprice = 0 then 0 else qty end) END, 0) AS avgunitprice, 
      FORMAT(SUM(costprice), 0) AS sumprice
      FROM viewontimestorage 
      LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD
      LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD
      WHERE
      SUBSTRING(productcd, 1, 2) = "18" AND (customercd = "" or customercd is null) 
          AND SUBSTRING(productcd, 3, 3) IN (
          SELECT 
              prc_cat_02_cd
          FROM
              productcategory
          WHERE
              prc_cd = "2" AND prc_cat_01_cd = "18" 
              AND ((prc_cat_02_cd >= "010" AND prc_cat_02_cd < "017" ) OR (prc_cat_02_cd >= "018" AND prc_cat_02_cd < "021" ) OR prc_cat_02_cd > "021")
        AND (prc_name NOT LIKE "%硬鋼線%")
              AND (prc_name NOT LIKE "%SUS%")
              AND (prc_name NOT LIKE "%亜鉛%")
              AND (prc_name NOT LIKE "%ビニール被覆線%")
              AND (prc_name NOT LIKE "%ﾋﾞﾆｰﾙ被覆線%")
              AND (prc_name NOT LIKE "%アロイ%" AND prc_name NOT LIKE "%ｱﾛｲ%")
              AND (prc_name NOT LIKE "%アルミ%" AND prc_name NOT LIKE "%ｱﾙﾐ%")
              AND (prc_name NOT LIKE "%銅%")
              AND (prc_name NOT LIKE "%チタン%" AND prc_name NOT LIKE "%ﾁﾀﾝ%")
              AND (prc_name NOT LIKE "%真鍮%"))
      GROUP BY productcd, /*sub01, sub02, sub03, sub04, sub05, sub06, sub07, sub08, sub09, sub10, sub11, sub12, sub13, lotno,*/ makercd 
      ORDER BY productcd
      ;';
      $sth = $dbh->prepare($strSQLMulti);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WROTH = $arItem;

      /***
       * ステンレスとその他材料の価格一覧表
       */
      $sth = $dbh->prepare('
      SELECT 
          *
      FROM
          ((SELECT 
          productcd,
                  productname,
                  IF(makercd = "" OR ISNULL(makercd), "0000000", makercd) AS makercd,
                  cat2.prc_name AS material,
                  IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername,
                  REPLACE(productname, cat.prc_short_name, "") AS diameter,
                  cat.prc_name AS property,
                  0 AS estimatedprice,
                  SUM(qty) AS sumqty, 
                  unitname, 
                  FORMAT(SUM(costprice), 0) AS sumprice, 
                  FORMAT(CASE WHEN SUM(case when costprice = 0 then 0 else qty end) = 0 THEN 0 ELSE SUM(case when costprice = 0 then 0 else costprice end) / SUM(case when costprice = 0 then 0 else qty end) END, 0) AS avgunitprice, 
                  "U" AS typematerial
          FROM
              viewontimestorage
          LEFT JOIN productcategory AS cat ON cat.prc_belong_cd = "001"
              AND cat.prc_cd = "3"
              AND cat.prc_cat_01_cd = "18"
              AND SUBSTRING(productcd, 3, 3) = cat.prc_cat_02_cd
              AND SUBSTRING(productcd, 6, 3) = cat.prc_cat_03_cd
          LEFT JOIN productcategory AS cat2 ON cat2.prc_belong_cd = "001"
              AND cat2.prc_cd = "2"
              AND cat2.prc_cat_01_cd = "18"
              AND SUBSTRING(productcd, 3, 3) = cat2.prc_cat_02_cd
              AND cat2.prc_cat_03_cd = "000"
		      LEFT JOIN customer ON C_CUSTOMER_CD = LEFT(makercd, 3) 
              AND C_CUSTOMER_ID = LEFT(makercd, 3) 
		      LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD 
              AND substring(makercd,4,3) = CP_POST_CD 
          WHERE
              LEFT(productcd, 2) = "18" AND (customercd = "" or customercd is null) 
                  AND LEFT(productcd, 5) IN (SELECT 
                      CONCAT(prc_cat_01_cd, prc_cat_02_cd)
                  FROM
                      productcategory
                  WHERE
                      prc_belong_cd = "001" AND prc_cd = "2"
                          AND prc_cat_01_cd = "18"
                          AND prc_name LIKE "SUS%")
          GROUP BY productcd , makercd) UNION ALL (SELECT 
              prp_p_cd AS productcd,
                  prp_name AS productname,
                  prp_maker_cd AS makercd,
                  cat2.prc_name AS material,
                  "" AS makername,
                  REPLACE(prp_name, cat.prc_short_name, "") AS diameter,
                  cat.prc_name AS property,
                  FORMAT(prp_estimate_price, 0) AS estimatedprice,
                  0 AS sumqty, 
                  "" AS unitname, 
                  0 AS sumprice, 
                  0 AS avgunitprice,
                  prp_type_material AS typematerial
          FROM
              productprice
          LEFT JOIN productcategory AS cat ON cat.prc_belong_cd = "001"
              AND cat.prc_cd = "3"
              AND cat.prc_cat_01_cd = "18"
              AND SUBSTRING(prp_p_cd, 3, 3) = cat.prc_cat_02_cd
              AND SUBSTRING(prp_p_cd, 6, 3) = cat.prc_cat_03_cd
          LEFT JOIN productcategory AS cat2 ON cat2.prc_belong_cd = "001"
              AND cat2.prc_cd = "2"
              AND cat2.prc_cat_01_cd = "18"
              AND SUBSTRING(prp_p_cd, 3, 3) = cat2.prc_cat_02_cd
          LEFT JOIN CUSTOMER ON C_CUSTOMER_CD = LEFT(prp_maker_cd, 3)
              AND C_CUSTOMER_ID = LEFT(prp_maker_cd, 3)
          LEFT JOIN CUSTOMERPOST ON CP_CUSTOMER_ID = C_CUSTOMER_ID
              AND CP_CUSTOMER_CD = C_CUSTOMER_CD
              AND CP_POST_CD = prp_maker_cd
          WHERE
              SUBSTRING(prp_p_cd, 1, 2) = "18"
                  AND LEFT(prp_p_cd, 5) IN (SELECT 
                      CONCAT(prc_cat_01_cd, prc_cat_02_cd)
                  FROM
                      productcategory
                  WHERE
                      prc_name LIKE "SUS%"))) AS temp
      GROUP BY productcd , makercd
      ORDER BY productcd
      ;');
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRMSUS = $arItem;

      $sth = $dbh->prepare('
      SELECT 
          *
      FROM
          ((SELECT 
          productcd,
                  productname,
                  IF(makercd = "" OR ISNULL(makercd), "0000000", makercd) AS makercd,
                  cat2.prc_name AS material,
                  IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, ""))  AS makername,
                  REPLACE(productname, cat.prc_short_name, "") AS diameter,
                  cat.prc_name AS property,
                  0 AS estimatedprice,
                  SUM(qty) AS sumqty, 
                  unitname, 
                  FORMAT(SUM(costprice), 0) AS sumprice, 
                  FORMAT(CASE WHEN SUM(case when costprice = 0 then 0 else qty end) = 0 THEN 0 ELSE SUM(case when costprice = 0 then 0 else costprice end) / SUM(case when costprice = 0 then 0 else qty end) END, 0) AS avgunitprice, 
                  "U" AS typematerial
          FROM
              viewontimestorage
          LEFT JOIN productcategory AS cat ON cat.prc_belong_cd = "001"
              AND cat.prc_cd = "3"
              AND cat.prc_cat_01_cd = "18"
              AND SUBSTRING(productcd, 3, 3) = cat.prc_cat_02_cd
              AND SUBSTRING(productcd, 6, 3) = cat.prc_cat_03_cd
          LEFT JOIN productcategory AS cat2 ON cat2.prc_belong_cd = "001"
              AND cat2.prc_cd = "2"
              AND cat2.prc_cat_01_cd = "18"
              AND SUBSTRING(productcd, 3, 3) = cat2.prc_cat_02_cd
              AND cat2.prc_cat_03_cd = "000"
		      LEFT JOIN customer ON C_CUSTOMER_CD = LEFT(makercd, 3) 
              AND C_CUSTOMER_ID = LEFT(makercd, 3) 
		      LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD 
              AND substring(makercd,4,3) = CP_POST_CD 
          WHERE
              LEFT(productcd, 2) = "18" AND (customercd = "" or customercd is null) 
                  AND LEFT(productcd, 5) IN (SELECT 
                      CONCAT(prc_cat_01_cd, prc_cat_02_cd)
                  FROM
                      productcategory
                  WHERE
                      prc_belong_cd = "001" AND prc_cd = "2"
                          AND prc_cat_01_cd = "18"
                          AND prc_name NOT LIKE "SUS%")
          GROUP BY productcd , makercd) UNION ALL (SELECT 
              prp_p_cd AS productcd,
                  prp_name AS productname,
                  prp_maker_cd AS makercd,
                  cat2.prc_name AS material,
                  "" AS makername,
                  REPLACE(prp_name, cat.prc_short_name, "") AS diameter,
                  cat.prc_name AS property,
                  prp_estimate_price AS estimatedprice,
                  0 AS sumqty, 
                  "" AS unitname, 
                  0 AS sumprice, 
                  0 AS avgunitprice,
                  prp_type_material AS typematerial
          FROM
              productprice
          LEFT JOIN productcategory AS cat ON cat.prc_belong_cd = "001"
              AND cat.prc_cd = "3"
              AND cat.prc_cat_01_cd = "18"
              AND SUBSTRING(prp_p_cd, 3, 3) = cat.prc_cat_02_cd
              AND SUBSTRING(prp_p_cd, 6, 3) = cat.prc_cat_03_cd
          LEFT JOIN productcategory AS cat2 ON cat2.prc_belong_cd = "001"
              AND cat2.prc_cd = "2"
              AND cat2.prc_cat_01_cd = "18"
              AND SUBSTRING(prp_p_cd, 3, 3) = cat2.prc_cat_02_cd
          LEFT JOIN CUSTOMER ON C_CUSTOMER_CD = LEFT(prp_maker_cd, 3)
              AND C_CUSTOMER_ID = LEFT(prp_maker_cd, 3)
          LEFT JOIN CUSTOMERPOST ON CP_CUSTOMER_ID = C_CUSTOMER_ID
              AND CP_CUSTOMER_CD = C_CUSTOMER_CD
              AND CP_POST_CD = prp_maker_cd
          WHERE
              SUBSTRING(prp_p_cd, 1, 2) = "18"
                  AND LEFT(prp_p_cd, 5) IN (SELECT 
                      CONCAT(prc_cat_01_cd, prc_cat_02_cd)
                  FROM
                      productcategory
                  WHERE
                      prc_belong_cd = "001" AND prc_cd = "2"
                          AND prc_cat_01_cd = "18"
                          AND prc_name NOT LIKE "SUS%"))) AS temp
      GROUP BY productcd , makercd
      ORDER BY productcd
      ;');
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->WRMOTH = $arItem;

    } catch (Exception $e) {
      throw $e;  
    }
  }


  /***
   * 材料在庫
   */
  private static function getMaterialStockData($dbh, $resultStock) {
    try {
      /************************************************************************************
       * 大分類で2分類が該当
       */
      $strSQL = 'SELECT *,
      SUM(qty) AS sumqty,
      CASE
        WHEN sub08 IS NULL OR sub08 = "" OR sub08 = 0 THEN
            CASE WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN ""
			ELSE CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END
            END
        WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN
            CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END
        ELSE
            CONCAT(CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END, "×", CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END)
      END AS dimensions 
      FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 2) IN ( :CAT01CD1 , :CAT01CD2 ) AND (customercd = "" or customercd is null) 
      GROUP BY productcd, sub08, sub09, unitname
      ORDER BY productcd, sub08, sub09, qty, placecd;';

      // その他材料
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT01CD1', "20", PDO::PARAM_STR);
      $sth->bindValue(':CAT01CD2', "23", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $temp = [];
      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        // $temp = BookMaker::makeArrayProductSpec($rec);
        // $rec['dimensions'] = $temp[2];
        array_push($arItem, $rec);
      }
      $resultStock->MTOTH = $arItem;

      // パンチング・エキスパンド 旧来のデータはsub08とsub09にデータが分割されているため、データとしては異なる製品になっているが、実際は同じ製品のデータも混在する。
      $strSQL = 'SELECT *,
      SUM(qty) AS sumqty,
      CASE
        WHEN sub08 IS NULL OR sub08 = "" OR sub08 = 0 THEN
            CASE WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN ""
			ELSE CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END
            END
        WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN
            CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END
        ELSE
            CONCAT(CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END, "×", CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END)
      END AS dimensions 
      FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 2) IN ( :CAT01CD1 , :CAT01CD2 ) AND (customercd = "" or customercd is null) 
      GROUP BY productcd, sub08, unitname
      ORDER BY productcd, sub08, sub09, qty, placecd;';
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CAT01CD1', "05", PDO::PARAM_STR);
      $sth->bindValue(':CAT01CD2', "06", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $temp = [];
      $arItem = [];
      foreach($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        // 2023/6/12 「仕入LotNo（sub10）」「製鋼番号（sub11）」が寸法に入らないように空値にする
        $rec['sub10'] = '';
        $rec['sub11'] = '';
        // $temp = BookMaker::makeArrayProductSpec($rec);
        // $rec['dimensions'] = $temp[2];
        array_push($arItem, $rec);
      }
      $resultStock->MTPUNCH = $arItem;

      /****************************************************************************************
       * 単一
       */
      // 金型プレート
      $strSQLOneCategory = 'SELECT *,
      SUM(qty) AS sumqty,
      CASE
        WHEN sub08 IS NULL OR sub08 = "" OR sub08 = 0 THEN
            CASE WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN ""
			ELSE CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END
            END
        WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN
            CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END
        ELSE
            CONCAT(CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END, "×", CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END)
      END AS dimensions 
      FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 2) = :CAT01CD1 AND (customercd = "" or customercd is null) 
      GROUP BY productcd, sub08, unitname
      ORDER BY productcd, unitname, sub08,  qty, placecd;';
      $sth = $dbh->prepare($strSQLOneCategory);
      $sth->bindValue(':CAT01CD1', "21", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $arItem = [];
      foreach ($rslt as $rec) {
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);
        array_push($arItem, $rec);
      }
      $resultStock->MTPLATE = $arItem;

      // カゴ枠
      $sth = $dbh->prepare($strSQLOneCategory);
      $sth->bindValue(':CAT01CD1', "22", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $temp = [];
      $arItem = [];
      foreach ($rslt as $rec) {
        // $temp = BookMaker::makeArrayProductSpec($rec);
        // $rec['dimensions'] = $temp[2];
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);       
        array_push($arItem, $rec);
      }
      $resultStock->MTBASKET = $arItem;

      /***
       * 大分類19 
       */
      // 鉄
      $strSQLMetalMaterial = 'SELECT *,
      SUM(qty) AS sumqty,
      CASE
        WHEN sub08 IS NULL OR sub08 = "" OR sub08 = 0 THEN
            CASE WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN ""
			ELSE CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END
            END
        WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN
            CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END
        ELSE
            CONCAT(CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END, "×", CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END)
      END AS dimensions 
      FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 2) = :CAT01CD1 AND SUBSTRING(productcd, 3, 3) = :CAT02CD1 AND (customercd = "" or customercd is null) 
      GROUP BY productcd, sub08, unitname
      ORDER BY productcd, unitname;';
      $sth = $dbh->prepare($strSQLMetalMaterial);
      $sth->bindValue(':CAT01CD1', '19', PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD1', '015', PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $temp = [];
      $arItem = [];
      foreach ($rslt as $rec) {
        // $temp = BookMaker::makeArrayProductSpec($rec);
        // $rec['dimensions'] = $temp[2];
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);       
        array_push($arItem, $rec);
      }
      $resultStock->MTFE = $arItem;

      // 板材
      $strSQLOneCategory = 'SELECT *,
      SUM(qty) AS sumqty,
      CASE
        WHEN sub08 IS NULL OR sub08 = "" OR sub08 = 0 THEN
            CASE WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN ""
			ELSE CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END
            END
        WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN
            CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END
        ELSE
            CONCAT(CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END, "×", CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END)
      END AS dimensions 
      FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 2) = :CAT01CD1 AND SUBSTRING(productcd, 3, 3) <> :CAT02CD1  AND productname LIKE :PNAME AND (customercd = "" or customercd is null) 
      GROUP BY productcd, sub08, unitname
      ORDER BY productcd, sub08, sub09, qty, placecd;';
      $sth = $dbh->prepare($strSQLOneCategory);
      $sth->bindValue(':CAT01CD1', '19', PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD1', '015', PDO::PARAM_STR);
      $sth->bindValue(':PNAME', "%板%", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $temp = [];
      $arItem = [];
      foreach ($rslt as $rec) {
        // $temp = BookMaker::makeArrayProductSpec($rec);
        // $rec['dimensions'] = $temp[2];
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);       
        array_push($arItem, $rec);
      }
      $resultStock->MTBOARD = $arItem;

      // フラットバー
      $strSQLMetalMaterial = 'SELECT *,
      SUM(qty) AS sumqty,
      CASE
        WHEN sub08 IS NULL OR sub08 = "" OR sub08 = 0 THEN
            CASE WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN ""
			ELSE CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END
            END
        WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN
            CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END
        ELSE
            CONCAT(CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END, "×", CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END)
      END AS dimensions 
      FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 2) = :CAT01CD1 AND SUBSTRING(productcd, 3, 3) <> :CAT02CD1 AND productname LIKE :PNAME AND (customercd = "" or customercd is null) 
      GROUP BY productcd, sub08, unitname
      ORDER BY productcd, unitname, sub08, sub09, qty, placecd';
      $sth = $dbh->prepare($strSQLMetalMaterial);
      $sth->bindValue(':CAT01CD1', "19", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD1', "015", PDO::PARAM_STR);
      $sth->bindValue(':PNAME', "%ﾌﾗｯﾄﾊﾞｰ%", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $temp = [];
      $arItem = [];
      foreach ($rslt as $rec) {
        // $temp = BookMaker::makeArrayProductSpec($rec);
        // $rec['dimensions'] = $temp[2];        
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);       
        array_push($arItem, $rec);
      }
      $resultStock->MTFLATBAR = $arItem;

      // 丸鋼
      $sth = $dbh->prepare($strSQLMetalMaterial);
      $sth->bindValue(':CAT01CD1', "19", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD1', "015", PDO::PARAM_STR);
      $sth->bindValue(':PNAME', "%丸鋼%", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $temp = [];
      $arItem = [];
      foreach ($rslt as $rec) {
        // 2023/6/12 「仕入LotNo（sub10）」「製鋼番号（sub11）」が寸法に入らないように空値にする
        $rec['sub10'] = '';
        $rec['sub11'] = '';
        // $temp = BookMaker::makeArrayProductSpec($rec);
        // $rec['dimensions'] = $temp[2];        
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);       
        array_push($arItem, $rec);
      }
      $resultStock->MTROUND = $arItem;
      
      // アングル
      $strSQLMetalMaterial = 'SELECT *,
      SUM(qty) AS sumqty,
      CASE
        WHEN sub08 IS NULL OR sub08 = "" OR sub08 = 0 THEN
            CASE WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN ""
			ELSE CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END
            END
        WHEN sub09 IS NULL OR sub09 = "" OR sub09 = 0 THEN
            CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END
        ELSE
            CONCAT(CASE WHEN MOD(CAST(sub08 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub08, 0) ELSE sub08 END, "×", CASE WHEN MOD(CAST(sub09 AS DECIMAL(5,1)), 1) = 0 THEN TRUNCATE(sub09, 0) ELSE sub09 END)
      END AS dimensions 
      FROM viewontimestorage
      WHERE SUBSTRING(productcd, 1, 2) = :CAT01CD1 AND SUBSTRING(productcd, 3, 3) <> :CAT02CD1 
        AND productname NOT LIKE :PNAME AND productname NOT LIKE :PNAME2 AND productname NOT LIKE :PNAME3 AND (customercd = "" or customercd is null) 
      ORDER BY productcd;';
      $sth = $dbh->prepare($strSQLMetalMaterial);
      $sth->bindValue(':CAT01CD1', "19", PDO::PARAM_STR);
      $sth->bindValue(':CAT02CD1', "015", PDO::PARAM_STR);
      $sth->bindValue(':PNAME', "%丸鋼%", PDO::PARAM_STR);
      $sth->bindValue(':PNAME2', "%ﾌﾗｯﾄﾊﾞｰ%", PDO::PARAM_STR);
      $sth->bindValue(':PNAME3', "%板%", PDO::PARAM_STR);
      $sth->execute();
      $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

      $temp = [];
      $arItem = [];
      foreach ($rslt as $rec) {        
        // $temp = BookMaker::makeArrayProductSpec($rec);
        // $rec['dimensions'] = $temp[2];        
        $rec['sumqty'] = self::convertStrRoundDownToNumber($rec['sumqty']);       
        array_push($arItem, $rec);
      }
      $resultStock->MTANGLE = $arItem;

    } catch (Exception $e) {
      throw $e;
    }
  }

  public static function drillCrimpData($diglevel) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('drop view if exists realstorage;');
      $sth->execute();
      $sth = $dbh->prepare("
          CREATE VIEW realstorage AS
        SELECT 
            placecd,
            placename,
            productcd,
            pname,
            parrangementcd,
            parrangementname,
            subjectcd,
            (CASE
                WHEN subjectcd = '1' THEN '製品'
                WHEN subjectcd = '2' THEN 'リセール品'
                WHEN subjectcd = '3' THEN '半製品'
                WHEN subjectcd = '4' THEN '原材料品'
                WHEN subjectcd = '5' THEN '包装資材'
                WHEN subjectcd = '6' THEN 'リセール加工品'
                WHEN subjectcd = '7' THEN '経費'
                ELSE '該当なし'
            END) AS typesubject,
            sub01,
            sub02,
            sub12,
            sub13,
            sub03,
            sub04,
            sub05,
            sub06,
            sub07,
            sub08,
            sub09,
            sub10,
            sub11,
            lotno,
            remarks,
            transferdate,
            updatedate,
            qty,
            unitname,
            SUM(plannumin) AS plannumin,
            SUM(plannumout) AS plannumout,
            qty + SUM(plannumin) - SUM(plannumout) AS remainnum,
            evalprice,
            makercd
        FROM
            (SELECT 
                sr_w_cd AS placecd,
                    IF(w.w_name IS NULL, '該当場所なし', w.w_name) AS placename,
                    sr_p_cd AS productcd,
                    p.p_name AS pname,
                    sr_parrangement_cd AS parrangementcd,
                    ar.ar_name AS parrangementname,
                    sr_type_subject AS subjectcd,
                    sr_sub_01 AS sub01,
                    sr_sub_02 AS sub02,
                    sr_sub_03 AS sub03,
                    sr_sub_04 AS sub04,
                    sr_sub_05 AS sub05,
                    sr_sub_06 AS sub06,
                    IF(sr_sub_07 IS NULL, '', sr_sub_07) AS sub07,
                    sr_sub_08 AS sub08,
                    sr_sub_09 AS sub09,
                    sr_sub_10 AS sub10,
                    sr_sub_11 AS sub11,
                    sr_sub_12 AS sub12,
                    sr_sub_13 AS sub13,
                    sr_remarks AS remarks,
                    sr_sub_14 AS lotno,
                    sr_transfer_date AS transferdate,
                    sr_update_at AS updatedate,
                    sr_quantity AS qty,
                    sr_unit_cd AS unitname,
                    0 AS plannumin,
                    0 AS plannumout,
                    0 AS remainnum,
                    sr_price_eval AS evalprice,
                    IF(sr_maker_cd IS NULL, '', sr_maker_cd) AS makercd
            FROM
                storage AS sr
            LEFT JOIN warehouse AS w ON w.w_cd = sr.sr_w_cd
            LEFT JOIN product AS p ON p.p_cd = sr.sr_p_cd
            LEFT JOIN arrangement AS ar ON ar.ar_sub_cd = sr.sr_parrangement_cd UNION (SELECT 
                stc_place_cd AS placecd,
                    IF(w2.w_name IS NULL, '該当場所なし', w2.w_name) AS placename,
                    stc_product_cd AS productcd,
                    p2.p_name AS pname,
                    stc_parrangement_cd AS parrangementcd,
                    ar2.ar_name AS parrangementname,
                    stc_type_subject AS subjectcd,
                    stc_sub_01 AS sub01,
                    stc_sub_02 AS sub02,
                    stc_sub_03 AS sub03,
                    stc_sub_04 AS sub04,
                    stc_sub_05 AS sub05,
                    stc_sub_06 AS sub06,
                    IF(stc_sub_07 IS NULL, '', stc_sub_07) AS sub07,
                    IF(stc_sub_08 IS NULL, '', stc_sub_08) AS sub08,
                    IF(stc_sub_09 IS NULL, '', stc_sub_09) AS sub09,
                    IF(stc_sub_10 IS NULL, '', stc_sub_10) AS sub10,
                    IF(stc_sub_11 IS NULL, '', stc_sub_11) AS sub11,
                    IF(stc_sub_12 IS NULL, '', stc_sub_12) AS sub12,
                    IF(stc_sub_13 IS NULL, '', stc_sub_13) AS sub13,
                    '' AS remarks,
                    stc_type_04 AS lotno,
                    '' AS transferdate,
                    stc_report_date AS updatedate,
                    0 AS qty,
                    stc_unit_tran AS unitname,
                    IF(stc_arrange_type = '110'
                        OR stc_arrange_type = '111'
                        OR stc_arrange_type = '519'
                        OR stc_arrange_type LIKE '21%'
                        OR stc_arrange_type LIKE '41%', SUM(stc_qty_trans), 0) AS plannumin,
                    IF(stc_arrange_type = '510'
                        OR stc_arrange_type = '511'
                        OR stc_arrange_type = '119'
                        OR stc_arrange_type LIKE '61%'
                        OR stc_arrange_type LIKE '81%', SUM(stc_qty_trans), 0) AS plannumout,
                    0 AS remainnum,
                    stc_unit_price AS evalprice,
                    IF(stc_maker_cd IS NULL, '', stc_maker_cd) AS makercd
            FROM
                stock AS stc
            LEFT JOIN warehouse AS w2 ON w2.w_cd = stc.stc_place_cd
            LEFT JOIN product AS p2 ON p2.p_cd = stc.stc_product_cd
            LEFT JOIN arrangement AS ar2 ON ar2.ar_sub_cd = stc.stc_parrangement_cd
            LEFT JOIN morderestimate AS moed ON moed.moed_order_no = stc_report_no
                AND moed.moed_sub_no = stc_sub_no_01
                AND moed.moed_accept_sub_no = stc_sub_no_02
            WHERE
                CAST(stc_month AS SIGNED) >= 2203
                    AND (stc_arrange_type LIKE '11%'
                    OR stc_arrange_type LIKE '21%'
                    OR stc_arrange_type LIKE '41%'
                    OR stc_arrange_type LIKE '51%'
                    OR stc_arrange_type LIKE '61%'
                    OR stc_arrange_type LIKE '81%'
                    OR stc_arrange_type LIKE '91%')
                    AND (stc_inventory_type = '1'
                    OR stc_inventory_type = '')
                    AND (stc_product_cd NOT LIKE '26%')
                    AND (moed_refer_no = ''
                    OR moed_refer_no IS NULL)
            GROUP BY stc_place_cd , stc_arrange_type , stc_product_cd , stc_sub_01 , stc_sub_02 , stc_sub_03 , stc_sub_04 , stc_sub_05 , stc_sub_06 , stc_sub_07 , stc_sub_08 , stc_sub_09 , stc_sub_10 , stc_sub_11 , stc_sub_12 , stc_sub_13 , stc_type_04 , stc_unit_tran , stc_type_subject , stc_parrangement_cd)) AS temp
        GROUP BY placecd , productcd , sub01 , sub02 , sub03 , sub04 , sub05 , sub06 , sub07 , sub08 , sub09 , sub10 , sub11 , sub12 , sub13 , lotno , unitname , typesubject , parrangementname;
      ");
      $sth->execute();

      $sth = $dbh->prepare('
      SELECT *,COUNT(productcd),
      "" AS material, 
      "test" AS psupple,
      COUNT(productcd) AS domestics15
      FROM realstorage
      WHERE unitname = "本"
      GROUP BY sub01, sub04, placecd, productcd,parrangementcd, unitname 
      ;');
      $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
      echo $result;
    } catch (Exception $e) {
      throw $e;
    }
  }


  /**
   * 入出庫予定データ読込
   */
  public static function readSTPlan() {
    $stockPlanData = [];
    $dbh = self::dbPDO();
    try {
      // 出荷データ
      $sth = $dbh->prepare('
      SELECT 
          "" AS stc_month,
          "" AS stc_yearmonth,
          "" AS ed_estimate_no,
          stp.sp_arrange_type AS stc_arrange_type,
          pay.py_name AS stc_arrange_name,
          stp.sp_report_no AS stc_report_no,
          stp.sp_sub_no_01 AS stc_sub_no_01,
          stp.sp_sub_no_02 AS stc_sub_no_02, 
          stp.sp_update_cnt AS stc_update_cnt,
          stp.sp_report_date AS stc_report_date,
          stp.sp_target_id AS stc_target_id,
          c.C_CUSTOMER_NAME AS stc_target_name,
          stp.sp_place_cd AS stc_place_cd,
          wh.w_name AS stc_place_name,
          stp.sp_customer_post_cd AS stc_customer_post_cd,
          cp.CP_POST_NAME AS stc_customer_post_name,
          stp.sp_product_cd AS stc_product_cd,
          CONCAT(SUBSTRING_INDEX(p.p_name, "_", 1),
                  " ",
                  IF(ar.ar_name = "なし" OR ar.ar_name IS NULL,
                      "",
                      ar.ar_name)) AS stc_product_name,
          "" AS stc_product_supple,
          stp.sp_qty_trans AS stc_qty_trans,
          stp.sp_unit_tran AS stc_unit_tran,
          stp.sp_price_trans AS stc_price_trans,
          stp.sp_cost_eva_qty AS stc_cost_eva_qty,
          stp.sp_inventory_type AS stc_inventory_type,
          stp.sp_recv_type AS stc_recv_type,
          stp.sp_expence_type AS stc_expence_type,
          stp.sp_cost_type AS stc_cost_type,
          stp.sp_unit_price AS stc_unit_price,
          stp.sp_type_01 AS stc_type_01,
          stp.sp_type_02 AS stc_type_02,
          stp.sp_type_03 AS stc_type_03,
          stp.sp_type_04 AS stc_type_04,
          stp.sp_type_05 AS stc_type_05,
          stp.sp_update_at AS stc_update_at,
          stp.sp_update_time AS stc_update_time,
          stp.sp_update_cd AS stc_update_cd,
          u.user_name AS stc_update_name,
          IF(ed.ed_p_cd IS NULL, stp.sp_product_cd, ed.ed_p_cd) AS productcd,
          p.p_name,
          p.p_type,
          p.p_name AS productname,
          stp.sp_sub_01 AS sub01,
          stp.sp_sub_02 AS sub02,
          stp.sp_sub_03 AS sub03,
          stp.sp_sub_04 AS sub04,
          stp.sp_sub_05 AS sub05,
          stp.sp_sub_06 AS sub06,
          stp.sp_sub_07 AS sub07,
          stp.sp_sub_08 AS sub08,
          stp.sp_sub_09 AS sub09,
          stp.sp_sub_10 AS sub10,
          stp.sp_sub_11 AS sub11,
          stp.sp_sub_12 AS sub12,
          stp.sp_sub_13 AS sub13,
          ed.ed_sub_num_03 AS wireno,
          IF(ed.ed_unit_tran IS NULL, stp.sp_unit_tran, ed.ed_unit_tran) AS unittran2,
          ed.ed_customer_p_name AS customerpname,
          stp.sp_parrangement_cd AS stc_parrangement_cd,
          ar.ar_name
      FROM
          stockplan AS stp
              LEFT JOIN
          user AS u ON stp.sp_update_cd = u.user_id
              AND stp.sp_update_cd = u.user_cd
              LEFT JOIN
              (select * from estimatedetails where ed_ar_cd = "3") AS ed ON stp.sp_belong_cd = ed.ed_belong_cd 
              AND stp.sp_report_no = ed.ed_estimate_no
              AND stp.sp_sub_no_01 = ed.ed_estimate_sub_no
              AND stp.sp_sub_no_02 = ed.ed_shipment_sub_no
              LEFT JOIN
          estimate AS e ON stp.sp_belong_cd = e.e_belong_cd
              AND stp.sp_report_no = e.e_estimate_no
              LEFT JOIN
          payment AS pay ON stp.sp_arrange_type = pay.py_cd
              LEFT JOIN
          warehouse AS wh ON stp.sp_place_cd = wh.w_cd
              LEFT JOIN
          product AS p ON p.p_belong_cd = "001" AND  stp.sp_product_cd = p.p_cd
              LEFT JOIN
          arrangement AS ar ON ed.ed_belong_cd = ar.ar_belong_cd
              AND ed.ed_parrangement_cd = ar.ar_sub_cd
              LEFT JOIN
          customer AS c ON e.e_customer_cd = c.c_customer_cd
              LEFT JOIN
          customerpost AS cp ON e.e_customer_cd = cp.cp_customer_cd
              AND e.e_customer_cd = cp.cp_customer_id
              AND e.e_customer_post_cd = cp.CP_POST_CD
      WHERE stp.sp_type_01 = "0" AND  (stp.sp_arrange_type = "510" OR  stp.sp_arrange_type = "515") AND
      sp_target_id IS NOT NULL AND sp_product_cd NOT LIKE "26%"
      ;');
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($result); $i++) {
        $ar = BookMaker::makeArrayProductSpec($result[$i]);
        $result[$i]['stc_product_supple'] = $ar[1] . ' ' . $ar[2];
        array_push($stockPlanData, $result[$i]);
      }

      // 入庫予定
      $sth = $dbh->prepare('
        SELECT 
          "" AS stc_month,
          "" AS stc_yearmonth,
          "" AS ed_estimate_no,
          stp.sp_arrange_type AS stc_arrange_type,
          pay.py_name AS stc_arrange_name,
          stp.sp_report_no AS stc_report_no,
          stp.sp_sub_no_01 AS stc_sub_no_01,
          stp.sp_sub_no_02 AS stc_sub_no_02,
          stp.sp_update_cnt AS stc_update_cnt,
          stp.sp_report_date AS stc_report_date,
          stp.sp_target_id AS stc_target_id,
          c.C_CUSTOMER_NAME AS stc_target_name,
          stp.sp_place_cd AS stc_place_cd,
          wh.w_name AS stc_place_name,
          "" AS stc_customer_post_cd,
          "" AS stc_customer_post_name,
          stp.sp_product_cd AS stc_product_cd,
          CONCAT(SUBSTRING_INDEX(p.p_name, "_", 1),
                  " ",
                  IF(ar.ar_name = "なし"
                          OR ar.ar_name IS NULL,
                      "",
                      ar.ar_name)) AS stc_product_name,
          "" AS stc_product_supple,
          stp.sp_qty_trans AS stc_qty_trans,
          stp.sp_unit_tran AS stc_unit_tran,
          stp.sp_price_trans AS stc_price_trans,
          stp.sp_cost_eva_qty AS stc_cost_eva_qty,
          stp.sp_inventory_type AS stc_inventory_type,
          stp.sp_recv_type AS stc_recv_type,
          stp.sp_expence_type AS stc_expence_type,
          stp.sp_cost_type AS stc_cost_type,
          stp.sp_unit_price AS stc_unit_price,
          stp.sp_type_01 AS stc_type_01,
          stp.sp_type_02 AS stc_type_02,
          stp.sp_type_03 AS stc_type_03,
          stp.sp_type_04 AS stc_type_04,
          stp.sp_type_05 AS stc_type_05,
          stp.sp_update_at AS stc_update_at,
          stp.sp_update_time AS stc_update_time,
          stp.sp_update_cd AS stc_update_cd,
          u.user_name AS stc_update_name,          
          moed.moed_product_cd AS productcd,
          p.p_name,
          p.p_type,
          p.p_name AS productname,
          moed.moed_sub_01 AS sub01,
          moed.moed_sub_02 AS sub02,
          moed.moed_sub_03 AS sub03,
          moed.moed_sub_04 AS sub04,
          moed.moed_sub_05 AS sub05,
          moed.moed_sub_06 AS sub06,
          moed.moed_sub_07 AS sub07,
          moed.moed_sub_08 AS sub08,
          moed.moed_sub_09 AS sub09,
          moed.moed_sub_10 AS sub10,
          moed.moed_sub_11 AS sub11,
          moed.moed_sub_12 AS sub12,
          moed.moed_sub_13 AS sub13,
          moed.moed_sub_num_03 AS wireno,
          moed_unit_tran AS unittran2,
          ed.ed_customer_p_name AS customerpname,
          stp.sp_parrangement_cd AS stc_parrangement_cd,
          ar.ar_name
      FROM
          stockplan AS stp
              LEFT JOIN
          user AS u ON stp.sp_update_cd = u.user_id
              AND stp.sp_update_cd = u.user_cd
              LEFT JOIN
          payment AS pay ON stp.sp_arrange_type = pay.py_cd
              LEFT JOIN
          warehouse AS wh ON stp.sp_place_cd = wh.w_cd
              LEFT JOIN
          morderestimate AS moed ON stp.sp_belong_cd = moed.moed_belong_cd
              AND stp.sp_report_no = moed.moed_order_no
              AND stp.sp_sub_no_01 = moed.moed_sub_no
              AND stp.sp_sub_no_02 = moed.moed_accept_sub_no
              LEFT JOIN
          product AS p ON moed.moed_product_cd = p.p_cd
              LEFT JOIN
          arrangement AS ar ON moed.moed_belong_cd = ar.ar_belong_cd
              AND moed.moed_parrangement_cd = ar.ar_sub_cd
              LEFT JOIN
          customer AS c ON moed.moed_customer_cd = c.c_customer_cd
              LEFT JOIN
          estimatedetails AS ed ON stp.sp_belong_cd = ed.ed_belong_cd
              AND stp.sp_report_no = ed.ed_estimate_no
              AND stp.sp_sub_no_01 = ed.ed_estimate_sub_no
              AND stp.sp_sub_no_02 = ed.ed_shipment_sub_no
      WHERE
          stp.sp_type_01 = "0"
              AND stp.sp_arrange_type = "110"
              AND moed.moed_inventory_type = "1"
      ');
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($result); $i++) {
        $ar = BookMaker::makeArrayProductSpec($result[$i]);
        $result[$i]['stc_product_supple'] = $ar[1] . ' ' . $ar[2];
        array_push($stockPlanData, $result[$i]);
      }    

      // 製造出来高(増加)と製造原料(減少)　=> 製造指示に対する引当で初期レコードは作成される
      $sth = $dbh->prepare('
      SELECT 
          "" AS stc_month,
          "" AS stc_yearmonth,
          /*ed.ed_estimate_no AS ed_estimate_no,*/
          IF(pd.pd_e_estimate_no IS NULL, pd2.pd_e_estimate_no, pd.pd_e_estimate_no) AS ed_estimate_no,
          stp.sp_arrange_type AS stc_arrange_type,
          pay.py_name AS stc_arrange_name,
          stp.sp_report_no AS stc_report_no,
          stp.sp_sub_no_01 AS stc_sub_no_01,
          stp.sp_sub_no_02 AS stc_sub_no_02,
          stp.sp_update_cnt AS stc_update_cnt,
          stp.sp_report_date AS stc_report_date,
          stp.sp_target_id AS stc_target_id,
          stp.sp_target_id AS stc_target_name,
          stp.sp_place_cd AS stc_place_cd,
          wh.w_name AS stc_place_name,
          "" AS stc_customer_post_cd,
          "" AS stc_customer_post_name,
          stp.sp_product_cd AS stc_product_cd,
          CONCAT(SUBSTRING_INDEX(p.p_name, "_", 1),
                  " ",
                  IF(ar.ar_name = "なし"
                          OR ar.ar_name IS NULL,
                      "",
                      ar.ar_name)) AS stc_product_name,
          "" AS stc_product_supple,
          stp.sp_qty_trans AS stc_qty_trans,
          stp.sp_unit_tran AS stc_unit_tran,
          stp.sp_price_trans AS stc_price_trans,
          stp.sp_cost_eva_qty AS stc_cost_eva_qty,
          stp.sp_inventory_type AS stc_inventory_type,
          stp.sp_recv_type AS stc_recv_type,
          stp.sp_expence_type AS stc_expence_type,
          stp.sp_cost_type AS stc_cost_type,
          stp.sp_unit_price AS stc_unit_price,
          stp.sp_type_01 AS stc_type_01,
          stp.sp_type_02 AS stc_type_02,
          stp.sp_type_03 AS stc_type_03,
          stp.sp_type_04 AS stc_type_04,
          stp.sp_type_05 AS stc_type_05,
          stp.sp_update_at AS stc_update_at,
          stp.sp_update_time AS stc_update_time,
          stp.sp_update_cd AS stc_update_cd,
          u.user_name AS stc_update_name,
          stp.sp_product_cd AS productcd,
          p.p_name,
          p.p_type,
          p.p_name AS productname,
          stp.sp_sub_01 AS sub01,
          stp.sp_sub_02 AS sub02,
          stp.sp_sub_03 AS sub03,
          stp.sp_sub_04 AS sub04,
          stp.sp_sub_05 AS sub05,
          stp.sp_sub_06 AS sub06,
          stp.sp_sub_07 AS sub07,
          stp.sp_sub_08 AS sub08,
          stp.sp_sub_09 AS sub09,
          stp.sp_sub_10 AS sub10,
          stp.sp_sub_11 AS sub11,
          stp.sp_sub_12 AS sub12,
          stp.sp_sub_13 AS sub13,
          "" AS wireno,
          stp.sp_unit_tran AS unittran2,
          ed.ed_customer_p_name AS customerpname,
          stp.sp_parrangement_cd AS stc_parrangement_cd,
          ar.ar_name
      FROM
          stockplan AS stp
              LEFT JOIN
          user AS u ON stp.sp_update_cd = u.user_id
              AND stp.sp_update_cd = u.user_cd
              LEFT JOIN
          payment AS pay ON pay.py_belong_cd = "001" AND  stp.sp_arrange_type = pay.py_cd
              LEFT JOIN
          warehouse AS wh ON wh.w_belong_cd = "001" AND stp.sp_place_cd = wh.w_cd
              LEFT JOIN
          product AS p ON   p.p_belong_cd = "001" AND stp.sp_product_cd = p.p_cd
              LEFT JOIN
          arrangement AS ar ON ar.ar_belong_cd = "001" AND   stp.sp_parrangement_cd = ar.ar_sub_cd
              LEFT JOIN
          prodplans AS pd ON stp.sp_belong_cd = pd.pd_belong_cd AND stp.sp_report_no = pd.pd_prod_plan_no AND stp.sp_sub_no_01 = pd.pd_prod_plan_sub_no AND "00" = pd.pd_process_cd
              LEFT JOIN
          (SELECT DISTINCT
              (pd_prod_plan_no) AS prodno, pd_e_estimate_no
          FROM
              prodplans
          WHERE
              pd_process_cd = "00" AND pd_prod_plan_sub_no = "001") AS pd2 ON stp.sp_report_no = pd2.prodno
              AND stp.sp_sub_no_01 = "00"
              AND stp.sp_arrange_type = "610"
              LEFT JOIN
          estimatedetails AS ed ON pd.pd_belong_cd = ed.ed_belong_cd
              AND pd.pd_e_estimate_no = ed.ed_estimate_no
              AND pd.pd_e_estimate_sub_no = ed.ed_estimate_sub_no
      WHERE
          stp.sp_type_01 = "0"
            AND stp.sp_arrange_type IN ("210", "211", "610", "611");
      ');
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($result); $i++) {
        $ar = BookMaker::makeArrayProductSpec($result[$i]);
        $result[$i]['stc_product_supple'] = $ar[1] . ' ' . $ar[2];
        array_push($stockPlanData, $result[$i]);
      }    

      // 連想配列のソート
      array_multisort(array_column($stockPlanData, 'stc_report_date'), SORT_DESC, $stockPlanData);

      echo json_encode($stockPlanData);
    } catch (Exception $e) {
      throw $e;
    }
  }

  // マスタ情報を読込する
  public static function readMaster() {
    $dbh = self::dbPDO();
    try {
      $result = new stdClass();
      // 各マスタを取得し、主キーによる連想配列として返す
      // $sth = $dbh->prepare('SELECT * FROM customer;');
      // $sth->execute();
      // $rec_customers = array();
      // while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
      //   $rec_customers[$data['C_CUSTOMER_CD']] = $data;
      // }
      // $result->customers = $rec_customers;
      $sth = $dbh->prepare('SELECT USER_CD, USER_NAME, POSITION_SIGN FROM user  WHERE USER_TYPE_CONTINUE = "0" ORDER BY CONVERT(USER_CD,signed);');
      $sth->execute();
      $rec_user = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_user[$data['USER_CD']] = $data;
      }
      $result->user = $rec_user;
      $sth = $dbh->prepare('SELECT *, REPLACE(C_ADDRESS_01, "　", "") AS C_ADDRESS_01  FROM customer WHERE C_TYPE_CONTINUE = "0" ORDER BY C_CUSTOMER_CD ASC;');
      $sth->execute();
      $rec_customer = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_customer[$data['C_CUSTOMER_CD']] = $data;
      }
      $result->customer = $rec_customer;
      $sth = $dbh->prepare('SELECT *, REPLACE(CP_ADDRESS_01, "　", "") AS CP_ADDRESS_01 FROM customerpost WHERE CP_TYPE_CONTINUE = "0" ORDER BY CP_CUSTOMER_CD,CP_POST_CD ASC;');
      $sth->execute();
      $rec_customerpost = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_customerpost[$data['CP_CUSTOMER_CD'].'-'.$data['CP_POST_CD']] = $data;
      }
      $result->customerpost = $rec_customerpost;
      $sth = $dbh->prepare('SELECT * FROM customercharge WHERE CC_TYPE_CONTINUE = "0";');
      $sth->execute();
      $rec_customercharge = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_customercharge[$data['CC_CUSTOMER_CD'].'-'.$data['CC_POST_CD'].'-'.$data['CC_CHARGE_CD']] = $data;
      }
      $result->customercharge = $rec_customercharge;
      $sth = $dbh->prepare('SELECT * FROM material;');
      $sth->execute();
      $rec_material = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_material[$data['m_belong_cd'] . "-" . $data['m_cd']] = $data;
      }
      $result->material = $rec_material;
      $sth = $dbh->prepare('SELECT * FROM process;');
      $sth->execute();
      $rec_process = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_process[$data['pc_belong_cd'] . "-" . $data['pc_cd']] = $data;
      }
      $result->process = $rec_process;
      $sth = $dbh->prepare('SELECT * FROM permissions;');
      $sth->execute();
      $rec_permissions = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_permissions[$data['PERMISSION_ID']] = $data;
      }
      $result->permissions = $rec_permissions;
      $sth = $dbh->prepare('SELECT * FROM housecompany;');
      $sth->execute();
      $rec_housecompany = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_housecompany[$data['H_COMPANY_CD']] = $data;
      }
      $result->housecompany = $rec_housecompany;

      $sth = $dbh->prepare('
      SELECT 
        prc1.prc_cat_01_cd,
        IF(ISNULL(prc2.prc_cat_02_cd), "", prc2.prc_cat_02_cd) AS prc_cat_02_cd,
        IF(ISNULL(prc3.prc_cat_03_cd), "", prc3.prc_cat_03_cd) AS prc_cat_03_cd,
        IF(prc1.prc_name = "", "", prc1.prc_name) AS prc_cat_01_name,
        IF(prc2.prc_name = "", "", prc2.prc_name) AS prc_cat_02_name,
        IF(prc3.prc_name = "", "", prc3.prc_name) AS prc_cat_03_name,
        IF(LENGTH(p_cd) = 11, RIGHT(p_cd, 3), "")  AS prc_cat_04_cd,
        IF(LENGTH(p_cd) = 11, SUBSTRING(p.p_name, char_length(prc3.prc_short_name) + 1), "") AS prc_cat_04_name,
        p.p_cd, p.p_name, p.p_unit_eval, p.p_unit_tran, p.p_type, p.p_belong_cd, p_type_subject, p_type_cost,
        p_standard_cost,
        p_purchase_price
      FROM product AS p
        LEFT JOIN productcategory AS prc1 ON prc1.prc_belong_cd = p.p_belong_cd AND prc1.prc_cd = "1" AND prc1.prc_cat_01_cd = LEFT(p.p_cd, 2)
        LEFT JOIN productcategory AS prc2 ON prc2.prc_belong_cd = p.p_belong_cd AND prc2.prc_cd = "2" AND prc2.prc_cat_01_cd = LEFT(p.p_cd, 2) AND prc2.prc_cat_02_cd = SUBSTR(p.p_cd, 3, 3)
        LEFT JOIN productcategory AS prc3 ON prc3.prc_belong_cd = p.p_belong_cd AND prc3.prc_cd = "3" AND prc3.prc_cat_01_cd = LEFT(p.p_cd, 2) AND prc3.prc_cat_02_cd = SUBSTR(p.p_cd, 3, 3) AND prc3.prc_cat_03_cd = SUBSTR(p.p_cd, 6, 3)
      ORDER BY prc1.prc_cat_01_cd,prc1.prc_cat_02_cd,prc1.prc_cat_03_cd, p.p_cd
      ;');
      $sth->execute();
      $rec_product = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_product[$data['p_belong_cd'] . "-" . $data['p_cd']] = $data;
      }
      $result->product = $rec_product;

      $sth = $dbh->prepare('SELECT * FROM bom');
      $sth->execute();
      $rec_bom = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_bom[$data['b_p_cd'] .'-'. $data['b_proc_num'] .'-'. $data['b_lot_qty'] .'-'. $data['b_qty']] = $data;
      }
      $result->bom = $rec_bom;
      $sth = $dbh->prepare('SELECT * FROM bom_assignable_to');
      $sth->execute();
      $rec_bom_assignable_to = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_bom_assignable_to[$data['b_parent_id'] - $data['members_id'] - $data['bas_rank']] = $data;
      }
      $result->bom_assignable_to = $rec_bom_assignable_to;
      
      //$sth = $dbh->prepare('SELECT *, id AS prj_id FROM projects AS projects');
      $sth = $dbh->prepare('WITH RECURSIVE cte AS
      (
        SELECT id AS prj_id, name, start_plan, finish_plan, parent_id
        ,0 AS depth, CAST(id AS CHAR(256)) AS dir
        FROM projects
        UNION ALL
        SELECT p.id AS prj_id, p.name, p.start_plan, p.finish_plan, p.parent_id
        ,cte.depth + 1 AS depth, CONCAT(cte.dir,\'/\',p.id) AS dir
        FROM projects AS p
        INNER JOIN cte ON p.parent_id = cte.prj_id
      )
      SELECT cte.* FROM cte WHERE cte.depth=(SELECT MAX(depth) FROM cte AS c2 WHERE c2.prj_id=cte.prj_id) ORDER BY dir');
      $sth->execute();
      $rec_projects = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_projects[$data['prj_id']] = $data;
      }
      $result->projects = $rec_projects;
      
      $sth = $dbh->prepare('SELECT
        id AS mem_id,
        name,
        roles_id,
        ignore_cal
        FROM members');
      $sth->execute();
      $rec_members = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_members[$data['mem_id']] = $data;
      }
      $result->members = $rec_members;
      // $sth = $dbh->prepare('SELECT * FROM storages');
      // $sth->execute();
      // $rec_storages = array();
      // while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
      //   $rec_storages[$data['sto_id']] = $data;
      // }
      // $result->storages = $rec_storages;
      $sth = $dbh->prepare('SELECT * FROM warehouse');
      $sth->execute();
      $rec_warehouse = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_warehouse[$data['w_belong_cd'] . "-" . $data['w_cd']] = $data;
      }
      $result->warehouse = $rec_warehouse;

      $sth = $dbh->prepare('SELECT * FROM storereasons');
      $sth->execute();
      $rec_storereasons = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_storereasons[$data['sre_id']] = $data;
      }
      $result->storereasons = $rec_storereasons;

      // 使用頻度の高い「枚」を上位にあげるためにDESCでソート
      $sth = $dbh->prepare('SELECT * FROM unit ORDER BY cast(u_row_order as signed);');
      $sth->execute();
      $rec_unit = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_unit[$data['u_belong_cd'] . "-" . $data['u_cd']] = $data;
      }
      $result->unit = $rec_unit;
      // ここから追加
      $sth = $dbh->prepare('SELECT * FROM tax;');
      $sth->execute();
      $rec_tax = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_tax[$data['t_belong_cd'] . "-" . $data['t_cd']] = $data;
      }
      $result->tax = $rec_tax;
      $sth = $dbh->prepare('SELECT *, CAST(wm_dia AS signed)*0.1 AS wm_dia_num, CAST(wm_mesh AS signed)*0.1 AS wm_mesh_num FROM weight;');
      $sth->execute();
      $rec_weight = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_weight[$data['wm_belong_cd'] . "-" . $data['wm_cd'] . "-" . $data['wm_dia'] . "-" . $data['wm_type_mesh'] . "-" . $data['wm_mesh'] . "-" . $data['wm_unit_cd']] = $data;
      }
      $result->weight = $rec_weight;
      $sth = $dbh->prepare('SELECT * FROM inspection;');
      $sth->execute();
      $rec_inspection = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_inspection[$data['ins_belong_cd'] . "-" . $data['ins_cd'] . "-" . $data['ins_quantity'] ] = $data;
      }
      $result->inspection = $rec_inspection;
      $sth = $dbh->prepare('SELECT * FROM inspectionview;');
      $sth->execute();
      $rec_inspectionview = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_inspectionview[$data['inv_belong_cd'] . "-" . $data['inv_type'] . "-" . $data['inv_pattern'] . "-" . $data['inv_row_num']] = $data;
      }
      $result->inspectionview = $rec_inspectionview;
      $sth = $dbh->prepare('SELECT * FROM storage;');
      $sth->execute();
      $rec_storage = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_storage[$data['sr_cd']] = $data;
      }
      $result->storage = $rec_storage;
      $sth = $dbh->prepare('SELECT * FROM payment;');
      $sth->execute();
      $rec_payment = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_payment[$data['py_belong_cd'] . "-" . $data['py_cd']] = $data;
      }
      $result->payment = $rec_payment;

      $sth = $dbh->prepare('SELECT * FROM arrangement;');
      $sth->execute();
      $rec_arrangement = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_arrangement[$data['ar_belong_cd'] . "-" . $data['ar_sub_cd']] = $data;
      }
      $result->arrangement = $rec_arrangement;

      $sth = $dbh->prepare('SELECT * FROM gari;');
      $sth->execute();
      $rec_gari = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_gari[$data['g_belong_cd'] . "-" . $data['g_cd']] = $data;
      }
      $result->gari = $rec_gari;
      $sth = $dbh->prepare('SELECT * FROM weave;');
      $sth->execute();
      $rec_weave = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_weave[$data['wv_belong_cd'] . "-" . $data['wv_cd']] = $data;
      }
      $result->weave = $rec_weave;
      $sth = $dbh->prepare('SELECT * FROM cam;');
      $sth->execute();
      $rec_cam = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_cam[$data['cam_belong_cd'] . "-" . $data['cam_cd'] . "-" . $data['cam_upper_lim']] = $data;
      }
      $result->cam = $rec_cam;
      $sth = $dbh->prepare('SELECT * FROM mold;');
      $sth->execute();
      $rec_mold = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_mold[$data['ml_belong_cd'] . "-" . $data['ml_cd']] = $data;
      }
      $result->mold = $rec_mold;
      $sth = $dbh->prepare('SELECT
        *, id AS wctrl_id 
        FROM wbsctrl');
      $sth->execute();
      $rec_wbsctrl = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_wbsctrl[$data['wctrl_id']] = $data;
      }
      $result->wbsctrl = $rec_wbsctrl;
      $sth = $dbh->prepare('SELECT * FROM parrangement;');
      $sth->execute();
      $rec_parrangement = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_parrangement[$data['par_belong_cd'] . "-" . $data['par_cd']] = $data;
      }
      $result->parrangement = $rec_parrangement;

      $sth = $dbh->prepare('
      SELECT mn.*, pr.pc_name AS mn_name FROM manufacture AS mn
      LEFT JOIN process AS pr ON mn_cd = pc_cd;');
      $sth->execute();
      $rec_manufacture = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_manufacture[$data['mn_belong_cd'] . "-" . $data['mn_cd'] . '-' . $data['mn_content_cd']] = $data;
      }
      $result->manufacture = $rec_manufacture;

      $sth = $dbh->prepare('SELECT * FROM inspectionitem;');
      $sth->execute();
      $rec_inspectionitem = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_inspectionitem[$data['ini_belong_cd'] . "-" . $data['ini_cd']] = $data;
      }
      $result->inspectionitem = $rec_inspectionitem;

      $sth = $dbh->prepare('SELECT * FROM wire;');
      $sth->execute();
      $rec_wire = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_wire[$data['wi_belong_cd'] . "-" . $data['wi_cd']] = $data;
      }
      $result->wire = $rec_wire;

      $sth = $dbh->prepare('SELECT * FROM transportcompany;');
      $sth->execute();
      $rec_transportcompany = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_transportcompany[$data['tc_belong_cd'] . "-" . $data['tc_short_name']] = $data;
      }
      $result->transportcompany = $rec_transportcompany;

      $sth = $dbh->prepare('SELECT * FROM currency;');
      $sth->execute();
      $rec_currency = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_currency[$data['cu_belong_cd'] . "-" . $data['cu_cd']] = $data;
      }
      $result->currency = $rec_currency;

      $sth = $dbh->prepare('SELECT * FROM packing;');
      $sth->execute();
      $rec_packing = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_packing[$data['pkg_belong_cd'] . "-" . $data['pkg_cd']] = $data;
      }
      $result->packing = $rec_packing;

      $sth = $dbh->prepare('SELECT * FROM productcategory;');
      $sth->execute();
      $rec_productcategory = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_productcategory[$data['prc_belong_cd'] . "-" . $data['prc_cd'] . "-" . $data['prc_cat_01_cd'] . "-" . $data['prc_cat_02_cd'] . "-" . $data['prc_cat_03_cd']] = $data;
      }
      $result->productcategory = $rec_productcategory;

      $sth = $dbh->prepare('
      SELECT *, p_name, w_name, IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, "")) AS makername 
      FROM storage 
      LEFT JOIN product AS p ON p.p_cd = sr_p_cd
      LEFT JOIN warehouse AS w ON w.w_cd = sr_w_cd
      LEFT JOIN customer ON left(sr_maker_cd,3) = C_CUSTOMER_CD 
      LEFT JOIN customerpost ON left(sr_maker_cd,3) = CP_CUSTOMER_CD AND substring(sr_maker_cd,4,3) = CP_POST_CD 
      ;');
      $sth->execute();
      $rec_storage = array();
      while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
        $rec_storage[$data['sr_belong_cd'] . "-" . $data['sr_w_cd'] . "-" . $data['sr_p_cd'] . "-" . $data['sr_sub_cd'] . "-" . $data['sr_type_subject'] . "-" . $data['sr_parrangement_cd']] = $data;
      }
      $result->storage = $rec_storage;

    //   echo json_encode($result);
    // } catch (Exception $e) {
    //   throw $e;
    // }
    // return;
    // try {
    //   $result = new stdClass();
    //   // 各マスタを取得し、主キーによる連想配列として返す
      echo json_encode($result);
    } catch (Exception $e) {
      throw $e;
    }
    return;
  } 

  // 線番マスタ
  public static function searchWireMaster($dat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('SELECT *, IF(wi_lower < :DIA AND wi_upper > :DIA, "true", "false") AS result 
      FROM Wire WHERE wi_cd = :DIANO
      ;');
      $sth->bindValue(':DIA', $dat['wireDia'], PDO::PARAM_STR);
      $sth->bindValue(':DIA', $dat['wireDia'], PDO::PARAM_STR);
      $sth->bindValue(':DIANO', $dat['wireno'], PDO::PARAM_STR);
      $sth->execute();
      $resp['results'] = $sth->fetchAll(PDO::FETCH_ASSOC);
    } catch (Exception $e){
      $resp['msg'] = self::getDBErrorMsg($dbh);
      $resp['succeed'] = false;
    }
  }


  /***
   * 使用予定数を画面上に表示(在庫画面表示用)
   */
  public static function getActiveRowReserveNum($stockPage, $dat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      
      $strSQL = '
      SELECT SUM(sp_qty_trans) AS plannum FROM stockplan
      WHERE (sp_arrange_type = "510" or sp_arrange_type = "515" or sp_arrange_type = "610" or sp_arrange_type = "611") 
      AND sp_place_cd = :PLACECD
      AND sp_product_cd = :PCD
      AND sp_sub_01 = :SUB01
      AND sp_sub_02 = :SUB02
      AND sp_sub_03 = :SUB03
      AND sp_sub_04 = :SUB04
      AND sp_sub_05 = :SUB05
      AND sp_sub_06 = :SUB06
      AND sp_sub_08 = :SUB08
      AND sp_unit_tran = :UNIT
      AND sp_parrangement_cd = :PARCD
      AND sp_type_04 = :LOTNO '; 

      if (substr($stockPage) === 'CR15MSUS' || substr($stockPage) === 'CR15MZN') {
        // クリンプ　巻物の場合のみsub09の指定が必要
        $strSQL .= ' AND sp_sub_09 = :SUB09 ';
        $strSQL .= 'GROUP BY sp_arrange_type, sp_place_cd, sp_product_cd, sp_sub_01, sp_sub_02, sp_sub_03, sp_sub_04, sp_sub_05, sp_sub_06, sp_sub_08, sp_sub_09, sp_unit_tran, sp_parrangement_cd, sp_type_04
        ;';
      } else {
        $strSQL .= 'GROUP BY sp_arrange_type, sp_place_cd, sp_product_cd, sp_sub_01, sp_sub_02, sp_sub_03, sp_sub_04, sp_sub_05, sp_sub_06, sp_sub_08, sp_unit_tran, sp_parrangement_cd, sp_type_04
        ;';
      }

      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PLACECD', $dat['placecd'], PDO::PARAM_STR);
      $sth->bindValue(':PCD', $dat['productcd'], PDO::PARAM_STR);
      $sth->bindValue(':SUB01', $dat['sub01'], PDO::PARAM_INT);
      $sth->bindValue(':SUB02', $dat['sub02'], PDO::PARAM_INT);
      $sth->bindValue(':SUB03', $dat['sub03'], PDO::PARAM_STR);
      $sth->bindValue(':SUB04', $dat['sub04'], PDO::PARAM_INT);
      $sth->bindValue(':SUB05', $dat['sub05'], PDO::PARAM_INT);
      $sth->bindValue(':SUB06', $dat['sub06'], PDO::PARAM_STR);
      $sth->bindValue(':SUB08', $dat['sub08'], PDO::PARAM_STR);
      // 2023/2/8　sub10~sub13まで検索条件に含めない
      // $sth->bindValue(':SUB10', $dat['sub10'], PDO::PARAM_STR);
      // $sth->bindValue(':SUB11', $dat['sub11'], PDO::PARAM_STR);
      // $sth->bindValue(':SUB12', $dat['sub12'], PDO::PARAM_STR);
      // $sth->bindValue(':SUB13', $dat['sub13'], PDO::PARAM_STR);
      // self::checkNotSet($dat['sub12']) ? 0 : $dat['sub12']
      $sth->bindValue(':UNIT', $dat['unitname'], PDO::PARAM_STR);
      $sth->bindValue(':PARCD', $dat['parrangementcd'], PDO::PARAM_STR);
      $sth->bindValue(':LOTNO', $dat['lotno'], PDO::PARAM_STR);
      if (substr($stockPage) === 'pgCR15MSUS' || substr($stockPage) === 'pgCR15MZN') {        
        $sth->bindValue(':SUB09', $dat['sub09'], PDO::PARAM_STR);
      }
      $sth->execute();      
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      echo json_encode($result);
      return;

    } catch (Exception $e){
      $resp['msg'] = self::getDBErrorMsg($dbh);
      $resp['succeed'] = false;
      echo json_encode($resp);
      return;
    }
  }


  /***
   * クリンプ引当数表示
   */
  private static function searchCrimpReserved($stockPage, $dat, $dbh) {
    try {
      $strSQL = '
      SELECT SUM(stc_qty_trans) AS plannum FROM stockplan
      WHERE sp_arrange_type = "510"
      AND sp_place_cd = :PLACECD
      AND sp_product_cd = :PCD
      AND sp_sub_01 = :SUB01
      AND sp_sub_02 = :SUB02
      AND sp_sub_03 = :SUB03
      AND sp_sub_04 = :SUB04
      AND sp_sub_05 = :SUB05
      AND sp_sub_06 = :SUB06
      AND sp_sub_08 = :SUB08
      AND sp_sub_09 = :SUB09
      AND sp_sub_10 = :SUB10
      AND sp_sub_11 = :SUB11
      AND sp_sub_12 = :SUB12
      AND sp_sub_13 = :SUB13
      AND sp_unit_tran = :UNIT
      AND sp_parrangement_cd = :PARCD
      AND sp_type_04 = :LOTNO
      AND substring(sp_report_no, 1) = "P" 
      GROUP BY sp_arrange_type, sp_place_cd, sp_product_cd, sp_sub_01, sp_sub_02, sp_sub_03, sp_sub_04, sp_sub_05, sp_sub_06, sp_sub_08, sp_sub_09, sp_sub_10, sp_sub_11, sp_sub_12, sp_sub_13, sp_unit_tran, sp_parrangement_cd, sp_type_04
      ;';
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':PLACECD', $dat['placecd'], PDO::PARAM_STR);
      $sth->bindValue(':PCD', $dat['pcd'], PDO::PARAM_STR);
      // $sth->bindValue(':SUBJECTCD', $dat['placecd'], PDO::PARAM_STR);
      $sth->bindValue(':SUB01', $dat['sub01'], PDO::PARAM_INT);
      $sth->bindValue(':SUB02', $dat['sub02'], PDO::PARAM_INT);
      $sth->bindValue(':SUB03', $dat['sub03'], PDO::PARAM_STR);
      $sth->bindValue(':SUB04', $dat['sub04'], PDO::PARAM_INT);
      $sth->bindValue(':SUB05', $dat['sub05'], PDO::PARAM_INT);
      $sth->bindValue(':SUB06', $dat['sub06'], PDO::PARAM_STR);
      $sth->bindValue(':SUB08', $dat['sub08'], PDO::PARAM_STR);
      $sth->bindValue(':SUB09', $dat['sub09'], PDO::PARAM_STR);
      $sth->bindValue(':SUB10', $dat['sub10'], PDO::PARAM_STR);
      $sth->bindValue(':SUB11', $dat['sub11'], PDO::PARAM_STR);
      $sth->bindValue(':SUB12', $dat['sub12'], PDO::PARAM_STR);
      $sth->bindValue(':SUB13', $dat['sub13'], PDO::PARAM_STR);
      $sth->bindValue(':UNIT', $dat['unitname'], PDO::PARAM_STR);
      $sth->bindValue(':PARCD', $dat['parrangementcd'], PDO::PARAM_STR);
      $sth->bindValue(':LOTNO', $dat['lotno'], PDO::PARAM_STR);
      $sth->execute();      
      return $sth->fetchAll(PDO::FETCH_ASSOC);
      
    } catch (Exception $e) {
      throw $e;
    }
  }


  // // 製品マスタ検索
  // public function existDrawingNo($Id) {
  //   $resp = array('succeed' => true, 'msg' => '');
  //   $dbh = self::dbPDO();
  //   try {
  //     $dbh->beginTransaction();
  //     $sth = $dbh->prepare(
  //       'SELECT * FROM products WHERE p_drawing = :DRAWINGNO;'
  //     );
  //     $sth->bindValue(':DRAWINGNO', $Id, PDO::PARAM_STR);
  //     $resp['results'] = $sth->fetchAll(PDO::FETCH_ASSOC);
  //     $dbh->commit();
  //   } catch (Exception $e) {
  //     $dbh->rollBack();
  //     $resp['msg'] = self::getDBErrorMsg($dbh);
  //     $resp['succeed'] = false;
  //   }
  //   if ($resp['results'] !== '') {
  //     return true;
  //   } else {
  //     return false;
  //   }
  //   // echo json_encode($resp);
  // }

  /***
   * 見積書update前にデータが存在するか確認
   */
  public static function existEstimate($estimateNo) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('
      SELECT e_estimate_no FROM estimate
      WHERE e_estimate_no = :ESTNO
      ;');
      $sth->bindValue(':ESTNO', $estimateNo, PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($result) > 0) {
        // ある
        echo $resp;
      } else {
        $resp['succeed'] = false;
        echo $resp;
      }
      return;
    } catch (Exception $e) {
      $resp['msg'] = self::getDBErrorMsg($dbh);
      $resp['succeed'] = false;
      echo $resp;      
      return;
    }
  }

  
  /** 加工内容詳細取得 */
  public static function readManufactureDetail($sdat) {
    // $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    $str = '';
    try {
      // もし加工内容データが既存だったらそちらを開く
      $sth = $dbh->prepare('
      SELECT *,
      ppr_prod_plan_no AS planno,
      ppr_proc_cd AS processcd,
      ppr_mn_content_cd AS contentno,
      ppr_mn_content_name AS contentname,
      ppr_details AS details
       FROM prodplansproc
      WHERE ppr_prod_plan_no = :PRODPLANNO 
      ;');
      $sth->bindValue('PRODPLANNO', $sdat[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();
      $result1 = $sth->fetchAll(PDO::FETCH_ASSOC);
      if (count($result1) > 0) {
        // 該当データがあった場合はそちらの最新データを表示する
        echo json_encode($result1);
        return;
      } 
      // データがない場合は、マスタのデフォルトデータを表示する
      // 加工区分により、加工内容の初期セットが異なる
      $str = 'SELECT *,:PLANNO AS planno, mn_cd AS processcd, mn_content_cd AS contentno, mn_content_name AS contentname,  mn_content_init AS details FROM manufacture';
      if ($sdat[0]['pd_ar_cd'] === '1') {
        $str .= 'WHERE mn_cd_01 = "1";';
      } else if ($sdat[0]['pd_ar_cd'] === '2') {
        $str .= 'WHERE mn_cd_02 = "1";';
      } else if ($sdat[0]['pd_ar_cd'] === '3') {
        $str .= 'WHERE mn_cd_03 = "1";';
      }
      $sth = $dbh->prepare($str);
      $sth->bindValue(':PLANNO', $sdat[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      echo json_encode($result);
    } catch (Exception $e) {
      throw $e;
      // $resp['msg'] = self::getDBErrorMsg($dbh);
      // $resp['succeed'] = false;      
      // echo json_encode($resp);  
    }
  }


  // 社員マスタを更新する
  public static function updateUser($sdat) {
    $columns = [
      (object) [ 'field' => 'USER_ID', 'type' => 'varchar', 'nullable' => 'NO', 'pk' => 'PRI', ],
      (object) [ 'field' => 'USER_CD', 'type' => 'varchar', 'nullable' => 'NO', 'pk' => 'PRI', ],
      (object) [ 'field' => 'USER_NAME', 'type' => 'varchar', 'nullable' => 'NO', 'pk' => '', ],
      (object) [ 'field' => 'POSITION_SIGN', 'type' => 'varchar', 'nullable' => 'YES', 'pk' => '', ],
    ];
    foreach ($sdat as $key => $key) {
      $sdat[$key]['USER_ID'] = $sdat[$key]['USER_CD'] . '  ';
      $sdat[$key]['USER_ID_PREVVAL'] = $sdat[$key]['USER_CD_PREVVAL'] . '  ';
    }
    self::editMasterDB('user', $columns, $sdat);
  }

  // 客先マスタを更新する
  public static function updateCustomer($sdat) {
    $columns = self::getColumnDefs('customer');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['C_CUSTOMER_ID'] = $sdat[$key]['C_CUSTOMER_CD'] . '  ';
      $sdat[$key]['C_CUSTOMER_ID_PREVVAL'] = $sdat[$key]['C_CUSTOMER_CD_PREVVAL'] . '  ';
      $sdat[$key]['C_SALESMAN_ID'] = $sdat[$key]['C_SALESMAN_CD'] . '  ';
      if ($sdat[$key]['C_INVOICE_SIGN'] === null || $sdat[$key]['C_INVOICE_SIGN'] === '') {
        $sdat[$key]['C_INVOICE_SIGN'] = 0;
      }
      if ($sdat[$key]['C_INVOICE_NECESSITY_SIGN'] === null || $sdat[$key]['C_INVOICE_NECESSITY_SIGN'] === '') {
        $sdat[$key]['C_INVOICE_NECESSITY_SIGN'] = 0;
      }
      if ($sdat[$key]['C_INVOICE_TAX_SUM'] === null || $sdat[$key]['C_INVOICE_TAX_SUM'] === '') {
        $sdat[$key]['C_INVOICE_TAX_SUM'] = 0;
      }
      if ($sdat[$key]['C_INVOICE_TAX_CAL'] === null || $sdat[$key]['C_INVOICE_TAX_CAL'] === '') {
        $sdat[$key]['C_INVOICE_TAX_CAL'] = 0;
      }
      $sdat[$key]['C_UPDATE_AT'] = self::currentDate();
      $sdat[$key]['C_UPDATE_CD'] = $_SESSION['usercd'];
    }
    self::editMasterDB('customer', $columns, $sdat);
  }

  // 客先部署マスタを更新する
  public static function updateCustomerpost($sdat) {
    $columns = self::getColumnDefs('customerpost');
    $str = '';
    $LENGTH_ADD_01 = 4;
    $LENGTH_ADD_02 = 12;
    $LENGTH_ADD_03 = 16;

    foreach ($sdat as $key => $key) {
      $sdat[$key]['CP_CUSTOMER_ID'] = $sdat[$key]['CP_CUSTOMER_CD'];
      $sdat[$key]['CP_CUSTOMER_ID_PREVVAL'] = $sdat[$key]['CP_CUSTOMER_CD_PREVVAL'];

      // 使用していないがNOTNULLなので空文字で固定
      $sdat[$key]['CP_QUOTATION_TYPE'] = '';

      // 住所1はスペースで都道府県、市区町村を区切る
      if (strpos($sdat[$key]['CP_ADDRESS_01'], '　') !== false ) {
        // スペースあったら、分割
        $arr = explode('　', $sdat[$key]['CP_ADDRESS_01']);

        $str = $arr[0] ? self::mbPadding($arr[0], $LENGTH_ADD_01, '　') : '';
        $str .= $arr[1] ? self::mbPadding($arr[1], $LENGTH_ADD_02, '　') : '';
        $str .= $arr[2] ? self::mbPadding($arr[2], $LENGTH_ADD_03, '　') : '';
      } else {
        // 無かったらそのまま記載
        $str = $sdat[$key]['CP_ADDRESS_01'];
      }
      $sdat[$key]['CP_ADDRESS_01'] = $str;

      // その他表示していない値 
      $sdat[$key]['CP_POST_SIGN_TYPE'] = '';
      $sdat[$key]['CP_FAX'] = '';
      $sdat[$key]['CP_TYPE_CONTINUE'] = '0';
      $sdat[$key]['CP_UPDATE_AT'] = self::currentDate();
      $sdat[$key]['CP_UPDATE_CD'] = $_SESSION['usercd'];
    }
    self::editMasterDB('customerpost', $columns, $sdat);
  }

  // 客先担当者マスタを更新する
  public static function updateCustomercharge($sdat) {
    $columns = self::getColumnDefs('customercharge');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['CC_CUSTOMER_ID'] = $sdat[$key]['CC_CUSTOMER_CD'] . '  ';
      $sdat[$key]['CC_CUSTOMER_ID_PREVVAL'] = $sdat[$key]['CC_CUSTOMER_CD_PREVVAL'] . '  ';
    }
    self::editMasterDB('customercharge', $columns, $sdat);
  }

  // 材料マスタを更新する
  public static function updateMaterial($sdat) {
    $columns = self::getColumnDefs('material');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['m_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['m_update_at'] = self::currentDate();
      $sdat[$key]['m_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('material', $columns, $sdat);
  }

  // 工程マスタを更新する
  public static function updateProcess($sdat) {
    $columns = self::getColumnDefs('process');
    foreach ($sdat as $key => $key) {
      // $sdat[$key]['PROCESS_ID'] = $sdat[$key]['PROCESS_CD'] . '  ';
      // $sdat[$key]['PROCESS_ID_PREVVAL'] = $sdat[$key]['PROCESS_CD_PREVVAL'] . '  ';
      $sdat[$key]['pc_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['pc_update_at'] = self::currentDate();
      $sdat[$key]['pc_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('process', $columns, $sdat);
  }

  // 権限マスタを更新する
  public static function updatePermissions($sdat) {
    $columns = [
      (object) [ 'field' => 'PERMISSION_ID', 'type' => 'varchar', 'nullable' => 'NO', 'pk' => 'PRI', ],
      (object) [ 'field' => 'PERMISSION_NAME', 'type' => 'varchar', 'nullable' => 'YES', 'pk' => '', ],
      (object) [ 'field' => 'PERMISSION_CONTROL_TABLE', 'type' => 'varchar', 'nullable' => 'YES', 'pk' => '', ],
    ];
    self::editMasterDB('permissions', $columns, $sdat);
  }

  // 自社マスタを更新する
  public static function updateHousecompany($sdat) {
    $columns = self::getColumnDefs('housecompany');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['H_COMPANY_ID'] = $sdat[$key]['H_COMPANY_CD'] . '  ';
      $sdat[$key]['H_COMPANY_ID_PREVVAL'] = $sdat[$key]['H_COMPANY_CD_PREVVAL'] . '  ';
      $sdat[$key]['H_MAIN_COMPANY_ID'] = $sdat[$key]['H_MAIN_COMPANY_CD'] . '  ';
      $sdat[$key]['H_SALESMAN_ID'] = $sdat[$key]['H_SALESMAN_CD'] . '  ';
    }
    self::editMasterDB('housecompany', $columns, $sdat);
  }

  // 製品マスタを更新する
  public static function updateProduct($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    $result = true;
    $rslt = [];
    $categoryLevel = '1'; // Default　大分類
    
    $columns = self::getColumnDefs('product');
    $columns2 = self::getColumnDefs('productcategory');
    
    $dbh->beginTransaction();
    try {
      // 固定項目
      $updateCD = $_SESSION['usercd'];
      $updateDate = self::currentDate();
      $companyCD = $_SESSION['companycd'];
      $typeContinue = '0';
      
      foreach ($sdat as $record) {

        // 大分類のみのデータ追加は不可
        if ($record['prc_cat_01_cd'] && !$record['prc_cat_02_cd'] && !$record['prc_cat_03_cd']) {
          $resp['msg'] = '大分類のみのデータは登録出来ません。';
          $resp['succeed'] = false;
          echo json_encode($resp);
          return; 
        }

        // 既存コードはupdateしない
        $sth = $dbh->prepare('SELECT * FROM product WHERE p_cd = :PCD;');
        $sth->bindValue(':PCD', $record['p_cd'], PDO::PARAM_STR);
        $sth->execute();
        $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (count($rslt) > 0) {
          // 既存データ
          $resp['msg'] = '既存データは更新出来ません。';
          $resp['succeed'] = false;
          echo json_encode($resp);
          return; 
        }

        if (!self::checkNotSet($record['prc_cat_04_cd'])) {
          // 品名コード
          $categoryLevel = '3';
        } else if (!self::checkNotSet($record['prc_cat_03_cd'])) {
          // 小分類
          $categoryLevel = '3';
        } else if (!self::checkNotSet($record['prc_cat_02_cd'])) {
          // 中分類
          $categoryLevel = '2';
          $record['prc_cat_03_cd'] = '000';
        } else {
          // 大分類
          $categoryLevel = '1';
          $record['prc_cat_02_cd'] = '000';
          $record['prc_cat_03_cd'] = '000';
        } 

        // 品名分類マスタ登録　分類それぞれのマスタデータ登録
        for ($i = 0; $i < $categoryLevel; $i++) {
          $tempRec = [];
          $updateResult = false;

          // 必須
          $tempRec['prc_belong_cd'] = $companyCD;
          $tempRec['prc_update_at'] = $updateDate;
          $tempRec['prc_update_cd'] = $updateCD;
          $tempRec['prc_type_continue'] = $typeContinue;
          $tempRec['prc_cd'] = (string)($i + 1);
          $tempRec['prc_name'] = $record['prc_cat_' . sprintf('%02d', $i + 1) . '_name'];
          // webにおいては、short_nameは、nameカラムをそのまま用いる=>基本的に新規登録は中分類以降。
          if ($i === 0) {
            // 大分類
            $tempRec['prc_cat_01_cd'] = $record['prc_cat_01_cd'];
            $tempRec['prc_cat_02_cd'] = '000';
            $tempRec['prc_cat_03_cd'] = '000';
            // $tempRec['prc_short_name'] = $record['prc_cat_01_name'];
            $updateResult = self::editMasterDataPCategory($columns2, $tempRec, $dbh);
          } else if ($i === 1) {
            // 中分類
            $tempRec['prc_cat_01_cd'] = $record['prc_cat_01_cd'];
            $tempRec['prc_cat_02_cd'] = $record['prc_cat_02_cd'];
            $tempRec['prc_cat_03_cd'] = '000';
            $tempRec['prc_cat_01_name'] = $record['prc_cat_01_name'];
            $tempRec['prc_cat_02_name'] = $record['prc_cat_02_name'];
            // $tempRec['prc_cat_03_name'] = $record['prc_cat_03_name'];
            // $tempRec['prc_short_name'] = $record['prc_cat_01_name'] . ' ' . $record['prc_cat_02_name'];
            $updateResult = self::editMasterDataPCategory($columns2, $tempRec, $dbh);
          } else if ($i === 2) {
            // 小分類
            $tempRec['prc_cat_01_cd'] = $record['prc_cat_01_cd'];
            $tempRec['prc_cat_02_cd'] = $record['prc_cat_02_cd'];
            $tempRec['prc_cat_03_cd'] = $record['prc_cat_03_cd'];
            $tempRec['prc_cat_01_name'] = $record['prc_cat_01_name'];
            $tempRec['prc_cat_02_name'] = $record['prc_cat_02_name'];
            $tempRec['prc_cat_03_name'] = $record['prc_cat_03_name'];
            // $tempRec['prc_short_name'] = $record['prc_cat_01_name'] . ' ' . $record['prc_cat_02_name'] . ' ' . $record['prc_cat_03_name'];
            $updateResult = self::editMasterDataPCategory($columns2, $tempRec, $dbh);
          }

          if (!$updateResult) {
            // insert失敗
            $dbh->rollBack();
            $resp['msg'] = '品名分類データ登録に失敗しました';
            $resp['succeed'] = false;
            echo json_encode($resp);
            return;
          }
        }

        // 品名マスタ登録
        // 必須
        $record['p_belong_cd'] = $companyCD;
        $record['p_update_at'] = $updateDate;
        $record['p_update_cd'] = $updateCD;
        $record['p_type_continue'] = $typeContinue;
        $record['p_type_03'] = strlen($record['p_cd']) > 8 ? '0' : $categoryLevel;

        $record['p_type'] = self::checkNotSet($record['p_type']) ? '000' : '100';
        $record['p_short_name'] = '';
        $record['p_fig_num'] = self::checkNotSet($record['p_fig_num']) ? '' : $record['p_fig_num'];
        $record['p_tax_rate_cd'] = self::checkNotSet($record['p_tax_rate_cd']) ? '000' : $record['p_tax_rate_cd'];
        $record['p_remarks'] = self::checkNotSet($record['p_remarks']) ? '' : $record['p_remarks'];
        $record['p_type_subject'] = self::checkNotSet($record['p_type_subject']) ? '1' : $record['p_type_subject'];
        // 在庫管理区分は、Defaultで管理ありとする。
        $record['p_type_01'] = '0';
        $record['p_type_02'] = '0';
        $record['p_type_04'] = '0';
        // 単位については、Default値は必ずある「枚」とする。
        $record['p_unit_tran'] = self::checkNotSet($record['p_unit_tran']) ? '枚' : $record['p_unit_tran'];
        $record['p_unit_eval'] = self::checkNotSet($record['p_unit_eval']) ? '枚' : $record['p_unit_eval'];
      
        if (!self::editMasterDataProduct($columns, $record, $dbh)) {
          $dbh->rollBack();
          $resp['msg'] = '品名データ登録に失敗しました';
          $resp['succeed'] = false;
          echo json_encode($resp);
          return;
        }

      }
      $dbh->commit();
      echo json_encode($resp);
      return;
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['succeed'] = false;
      $resp['msg'] = '登録に失敗しました';
      echo json_encode($resp);
      return;
    }
  }


  /***
   * 在庫マスタ登録。マスタ一覧にて更新可能なのは状態カラムのみ。
   */
  public static function updateStorage ($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    
    $columns = self::getColumnDefs('storage');
    
    $dbh->beginTransaction();
    try {
      
      foreach ($sdat as $record) {
        $sth = $dbh->prepare('
        SELECT * FROM storage 
        WHERE sr_w_cd = :WCD AND sr_p_cd = :PCD AND sr_sub_cd = :SUBCD
        ;');
        $sth->bindValue(':WCD', $record['sr_w_cd'], PDO::PARAM_STR);
        $sth->bindValue(':PCD', $record['sr_p_cd'], PDO::PARAM_STR);
        $sth->bindValue(':SUBCD', $record['sr_sub_cd'], PDO::PARAM_STR);
        $sth->execute();
        $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($rslt) > 0) {
          // 既存の時&&状態カラムのみ更新可能
          $rslt[0]['sr_remarks'] = $record['sr_remarks'];
            
          $sth = $dbh->prepare(self::makeUpdateSQL('storage', $columns));
          self::bindUpdateKeys($sth, $columns, $rslt[0]);
          $sth->execute();
        }
      }


      echo json_encode($resp);
      return;
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['succeed'] = false;
      $resp['msg'] = '登録に失敗しました';
      echo json_encode($resp);
      return;
    }
  }


  public static function updateCurrency($sdat) {
    $columns = self::getColumnDefs('currency');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['cu_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['cu_update_at'] = self::currentDate();
      $sdat[$key]['cu_update_time'] = self::currentTime();
      $sdat[$key]['cu_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('currency', $columns, $sdat);
  }

  // 荷姿マスタ更新
  public static function updatePacking($sdat) {
    $columns = self::getColumnDefs('packing');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['pkg_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['pkg_update_at'] = self::currentDate();
      $sdat[$key]['pkg_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('packing', $columns, $sdat);
  }

  // BOMマスタを更新する
  public static function updateBom($sdat) {
    $columns = self::getColumnDefs('bom');
    self::editMasterDB('bom', $columns, $sdat);
  }

  // BOM割当マスタを更新する
  public static function updateBomAssignableTo($sdat) {
    $columns = self::getColumnDefs('bom_assignable_to');
    self::editMasterDB('bom_assignable_to', $columns, $sdat);
  }

  // プロジェクトマスタを更新する
  public static function updateProjects($sdat) {
    $columns = self::getColumnDefs('projects');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['id'] = $sdat[$key]['prj_id'];
      $sdat[$key]['id_PREVVAL'] = $sdat[$key]['prj_id_PREVVAL'];
      // 階層として自身の指定を禁止
      if ($sdat[$key]['id'] === $sdat[$key]['parent_id']) {
        throw new Exception('id === parent_id');
      }
    }
    self::editMasterDB('projects', $columns, $sdat);
  }

  // メンバーマスタを更新する
  public static function updateMembers($sdat) {
    $columns = self::getColumnDefs('members');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['id'] = $sdat[$key]['mem_id'];
      $sdat[$key]['id_PREVVAL'] = $sdat[$key]['mem_id_PREVVAL'];
    }
    self::editMasterDB('members', $columns, $sdat);
  }

  // public static function updateStorages($sdat) {
  //   $columns = self::getColumnDefs('storages');
  //   self::editMasterDB('storages', $columns, $sdat);
  // }

  // 入出庫事由マスタを更新する
  public static function updateStorereasons($sdat) {
    $columns = self::getColumnDefs('storereasons');
    self::editMasterDB('storereasons', $columns, $sdat);
  }

  // 倉庫マスタを更新する
  public static function updateWarehouse($sdat) {
    // date_default_timezone_set('Asia/Tokyo');
    // $objToday = new DateTime();
    $columns = self::getColumnDefs('warehouse');
    foreach ($sdat as $key => $key) {
      
      $sdat[$key]['w_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['w_update_at'] = self::currentDate();
      $sdat[$key]['w_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('warehouse', $columns, $sdat);
  }

  // 単位マスタを更新する
  public static function updateUnit($sdat) {
    $columns = self::getColumnDefs('unit');
    // $objToday = new DateTime();
    foreach ($sdat as $key => $key) {
      $sdat[$key]['u_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['u_update_at'] = self::currentDate();
      $sdat[$key]['u_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('unit', $columns, $sdat);
  }

  // 
  public static function updateArrangement($sdat) {
    $columns = self::getColumnDefs('arrangement');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['ar_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['ar_update_at'] = self::currentDate();
      $sdat[$key]['ar_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('arrangement', $columns, $sdat);
  }

  // 重量換算マスタ
  public static function updateWeight($sdat) {
    $columns = self::getColumnDefs('weight');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['wm_dia'] = (float)$sdat[$key]['wm_dia'] * 10;
      $sdat[$key]['wm_mesh'] = (float)$sdat[$key]['wm_mesh'] * 10;
      $sdat[$key]['wm_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['wm_update_at'] = self::currentDate();
      $sdat[$key]['wm_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('weight', $columns, $sdat);
  }
  // 税率マスタ
  public static function updateTax($sdat) {
    $columns = self::getColumnDefs('tax');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['t_rate_change_date'] = str_replace('/', '', $sdat[$key]['t_rate_change_date']);
      $sdat[$key]['t_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['t_update_at'] = self::currentDate();
      $sdat[$key]['t_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('tax', $columns, $sdat);
  }
  // 検査数
  public static function updateInspection($sdat) {
    $columns = self::getColumnDefs('inspection');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['ins_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['ins_cd'] = '000';
      $sdat[$key]['ins_update_at'] = self::currentDate();
      $sdat[$key]['ins_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('inspection', $columns, $sdat);
  }
  // 検査表示
  public static function updateInspectionview($sdat) {
    $columns = self::getColumnDefs('inspectionview');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['inv_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['inv_pattern'] = 0;
      $sdat[$key]['inv_update_at'] = self::currentDate();
      $sdat[$key]['inv_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('inspectionview', $columns, $sdat);
  }
  // 検査項目
  public static function updateInspectionitem($sdat) {
    $columns = self::getColumnDefs('inspectionitem');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['ini_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['ini_update_at'] = self::currentDate();
      $sdat[$key]['ini_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('inspectionitem', $columns, $sdat);
  }
  // 線番
  public static function updateWire($sdat) {
    $columns = self::getColumnDefs('wire');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['wi_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['wi_update_at'] = self::currentDate();
      $sdat[$key]['wi_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('wire', $columns, $sdat);
  }
  // 運送会社
  public static function updateTransportcompany($sdat) {
    $columns = self::getColumnDefs('transportcompany');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['tc_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['tc_update_at'] = self::currentDate();
      $sdat[$key]['tc_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('transportcompany', $columns, $sdat);
  }
  // 在庫
  // public static function updateStorage($sdat) {
  //   $columns = self::getColumnDefs('storage');

  //   // $objToday = new DateTime();
  //   foreach ($sdat as $key => $key) {
  //     $sdat[$key]['sr_belong_cd'] = $_SESSION['companycd'];
  //     $sdat[$key]['sr_update_at'] = self::currentDate();
  //     $sdat[$key]['sr_update_cd'] = $_SESSION['usercd'];
  //   }
  //   self::editMasterDB('storage', $columns, $sdat);
  // }
  // 受払
  public static function updatePayment($sdat) {
    $columns = self::getColumnDefs('payment');
    // $objToday = new DateTime();
    foreach ($sdat as $key => $key) {
      $sdat[$key]['py_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['py_update_at'] = self::currentDate();
      $sdat[$key]['py_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('payment', $columns, $sdat);
  }
  // ガリ
  public static function updateGari($sdat) {
    $columns = self::getColumnDefs('gari');
    // $objToday = new DateTime();
    foreach ($sdat as $key => $key) {
      $sdat[$key]['g_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['g_update_at'] = self::currentDate();
      $sdat[$key]['g_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('gari', $columns, $sdat);
  }
  // 織方
  public static function updateWeave($sdat) {
    $columns = self::getColumnDefs('weave');
    // $objToday = new DateTime();
    foreach ($sdat as $key => $key) {
      $sdat[$key]['wv_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['wv_update_at'] = self::currentDate();
      $sdat[$key]['wv_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('weave', $columns, $sdat);
  }
  // カム
  public static function updateCam($sdat) {
    $columns = self::getColumnDefs('cam');
    // $objToday = new DateTime();
    foreach ($sdat as $key => $key) {
      $sdat[$key]['cam_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['cam_update_at'] = self::currentDate();
      $sdat[$key]['cam_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('cam', $columns, $sdat);
  }
  // 金型
  public static function updateMold($sdat) {
    $columns = self::getColumnDefs('mold');
    // $objToday = new DateTime();
    foreach ($sdat as $key => $key) {
      $sdat[$key]['ml_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['ml_update_at'] = self::currentDate();
      $sdat[$key]['ml_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('mold', $columns, $sdat);
  }
  // 製品手配
  public static function updateParrangement($sdat) {
    $columns = self::getColumnDefs('parrangement');
    // $objToday = new DateTime();
    foreach ($sdat as $key => $key) {
      $sdat[$key]['par_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['par_update_at'] = self::currentDate();
      $sdat[$key]['par_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('parrangement', $columns, $sdat);
  }
  // 加工
  public static function updateManufacture($sdat) {
    $columns = self::getColumnDefs('manufacture');
    // $objToday = new DateTime();
    foreach ($sdat as $key => $key) {
      $sdat[$key]['mn_belong_cd'] = $_SESSION['companycd'];
      $sdat[$key]['mn_update_at'] = self::currentDate();
      $sdat[$key]['mn_update_cd'] = $_SESSION['usercd'];
    }
    self::editMasterDB('manufacture', $columns, $sdat);
  }

  // 勤務形態マスタを更新する
  public static function updateWbsctrl($sdat) {
    $columns = self::getColumnDefs('wbsctrl');
    foreach ($sdat as $key => $key) {
      $sdat[$key]['id'] = $sdat[$key]['wctrl_id'];
      $sdat[$key]['id_PREVVAL'] = $sdat[$key]['wctrl_id_PREVVAL'];
    }
    self::editMasterDB('wbsctrl', $columns, $sdat);
  }


  private static function getTargetProc($datHeader) {
    $arProc = [];
    try {
      for ($i = 0; $i < 10; $i++) {
        if ($i < 4) {
          continue;
        }
        $str = 'pd_process_cd_' . (string)$i . '0';
        if ($datHeader[0][$str] > 0) {
          $arProc[] = (string)$i . '0';
        }
      }
      return $arProc;
    } catch (Exception $e) {
      throw $e;
    }
  }

  private static function updateProcessPL($dbh, $process, $datHeader, $datDetail) {
    $arProc = [];   // 工程データ
    $i = 0; 
    // 登録するテーブルのレイアウト取得
    $columns = self::getColumnDefs('prodplans');
    $columnsT = self::getColumnDefs('t_prodplans');
    $columnsProc = self::getColumnDefs('prodplansproc');
    // PKを設定
    self::markAsHeaderPK($columns, 'pd_belong_cd');
    self::markAsHeaderPK($columns, 'pd_prod_plan_no');
    self::markAsHeaderPK($columns, 'pd_prod_plan_sub_no');
    self::markAsHeaderPK($columnsT, 'pd_belong_cd');
    self::markAsHeaderPK($columnsT, 'pd_prod_plan_no');
    self::markAsHeaderPK($columnsT, 'pd_prod_plan_sub_no');
    try { 
      // なくなった工程のみチェック
      $sth = $dbh->prepare('
      SELECT * FROM prodplans
      WHERE pd_belong_cd = :BELONGCD AND 
      pd_prod_plan_no = :PLANNO 
      GROUP BY pd_process_cd    
      ;');
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':PLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      if (count($result) > 0) {
        // 工程でないものがないか確認、あったら削除
        foreach ($result as $rec) {
          // for($i = 0; $i < count())
        }
      }

      // ベースデータを先に登録　00のデータ
      foreach ($datDetail as $rec) {
        $sth = $dbh->prepare('
        SELECT * FROM prodplans
        WHERE pd_belong_cd = :BELONGCD AND 
        pd_prod_plan_no = :PLANNO AND 
        pd_prod_plan_sub_no = :SUBNO AND 
        pd_process_cd = :PROCCD
        ;');
        $sth->bindValue(':BELONGCD', $rec['pd_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':PLANNO', $rec['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $rec['pd_prod_plan_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', '00', PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {
          // 既存ならば更新
          $rec['pd_update_cnt'] = $result[0]['pd_update_cnt'] + 1;
          $sth = $dbh->prepare(self::makeUpdateSQL('prodplans', $columns));
          self::bindValueToUpdate($sth, $columns, $rec);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $rec);
          $sth->execute();
        } else {
          // 新規ならば追加
          $rec['pd_update_cnt'] = 0;
          $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
          self::bindInsertKeys($sth, $columnsT, $rec);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $rec);
          $sth->execute();
        }
      }

      // 工程別データ登録
      foreach ($datDetail as $rec) {
        $sth = $dbh->prepare('
        SELECT * FROM prodplans
        WHERE pd_belong_cd = :BELONGCD AND 
        pd_prod_plan_no = :PLANNO AND 
        pd_prod_plan_sub_no = :SUBNO AND 
        pd_process_cd = :PROCCD
        ;');
        $sth->bindValue(':BELONGCD', $rec['pd_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':PLANNO', $rec['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $rec['pd_prod_plan_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD',  $arProc[$i], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {
          // 既存だったら更新
          $rec['pd_process_cd'] = $arProc[$i];
          $rec['pd_plan_interval '] = $datHeader[0]['pd_process_cd_' . $arProc[$i]];
          $sth = $dbh->prepare(self::makeUpdateSQL('prodplans', $columns));
          self::bindValueToUpdate($sth, $columns, $rec);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $rec);
          $sth->execute();
        } else {
          // 新規追加
          $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
          self::bindInsertKeys($sth, $columns, $rec);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $rec);
          $sth->execute();
        }
      }



      
    } catch (Exception $e) {
      throw $e;
    }


  }


  /**
   * 製造指図登録
   */
  public static function updateProdPlans($datHeader, $datDetail) {
    $resp = array('succeed' => true, 'msg' => '');
    $str = '';
    $bDeleted = false;
    $cnt = 0;     // 枝番用
    // DB定義取得
    $columns = self::getColumnDefs('prodplans');
    $columnsT = self::getColumnDefs('t_prodplans');
    $columnsProc = self::getColumnDefs('prodplansproc');
    $columnsProcT = self::getColumnDefs('t_prodplansproc');
    $columnsWH = self::getColumnDefs('prodplansw');
    $columnsWD = self::getColumnDefs('prodplandetailsw');
    // PKを設定
    self::markAsHeaderPK($columns, 'pd_belong_cd');
    self::markAsHeaderPK($columns, 'pd_prod_plan_no');
    self::markAsHeaderPK($columns, 'pd_prod_plan_sub_no');
    self::markAsHeaderPK($columnsWH, 'pp_belong_cd');
    self::markAsHeaderPK($columnsWH, 'pp_prod_plan_no');
    self::markAsHeaderPK($columnsWD, 'pdw_belong_cd');
    self::markAsHeaderPK($columnsWD, 'pdw_prod_plan_no');
    self::markAsHeaderPK($columnsWD, 'pdw_process_cd');
    self::markAsHeaderPK($columnsWD, 'pdw_disp_num');

    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();

      // 行削除　明細データ削除分
      self::deleteProdplansDetailsRecord($datHeader, $datDetail, $dbh);

      // ヘッダ登録
      self::registProdplansHeaderRecord($datHeader, $datDetail[0], $dbh);

      // 明細登録　受払予定データ登録を含む。
      self::registProdplansDetailRecord($datHeader, $datDetail, $dbh);

      // 加工詳細データ不要分削除
      self::createDeleteProdplansProcess($datHeader, $datDetail, $dbh);  

      // 金網製造指示データ作成
      self::registProdplansw($datHeader, $datDetail, $dbh);

      foreach ($datDetail as $record) {
        // 受注データ更新
        if (self::checkNotSet($record['pd_e_estimate_no']) === false) {
          $dat = [];
          array_push($dat, $record['pd_e_estimate_no']);
          array_push($dat, $record['pd_e_estimate_sub_no']);
          array_push($dat, '01');
          self::updateEstimateFlg('PLODPLAN_INSERT', '1', $dat, $dbh);
        }
      }

      $dbh->commit();
      echo json_encode($resp);
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }

  /***
   * prodplanテーブルに各工程ヘッダデータ追加
   */
  private static function registProdplansHeaderRecord($datHeader, $datRecord, $dbh) {
    // DB定義取得
    $columns = self::getColumnDefs('prodplans');
    $columnsT = self::getColumnDefs('t_prodplans');
    // PKを設定
    self::markAsHeaderPK($columns, 'pd_belong_cd');
    self::markAsHeaderPK($columns, 'pd_prod_plan_no');
    self::markAsHeaderPK($columns, 'pd_prod_plan_sub_no');
    self::markAsHeaderPK($columnsT, 'pd_belong_cd');
    self::markAsHeaderPK($columnsT, 'pd_prod_plan_no');
    self::markAsHeaderPK($columnsT, 'pd_prod_plan_sub_no');
    self::markAsHeaderPK($columnsT, 'pd_update_cnt');

    $datUpdate = [];
    $IsMetalMesh = true;
    try {
      // 初期値
      $datUpdate['pd_belong_cd'] = $_SESSION['companycd'];
      $datUpdate['pd_prod_plan_no'] = $datHeader[0]['pd_prod_plan_no'];
      $datUpdate['pd_prod_plan_sub_no'] = '000';
      $datUpdate['pd_process_cd'] = '00';
      $datUpdate['pd_update_cnt'] = 0;
      $datUpdate['pd_place_cd'] = $datHeader[0]['pd_place_cd'];
      $datUpdate['pd_proj_cd'] = '';
      $datUpdate['pd_par_cd'] = $datRecord['pd_par_cd'];
      $datUpdate['pd_ar_cd'] = $datHeader[0]['pd_ar_cd'];
      $datUpdate['pd_ins_level'] = $datHeader[0]['pd_ins_level'] ? $datHeader[0]['pd_ins_level'] : 0;
      $datUpdate['pd_finish_plan_date_h'] = $datHeader[0]['pd_finish_plan_date_h'] ? self::paddingDate($datHeader[0]['pd_finish_plan_date_h']) : '';
      $datUpdate['pd_disp_order'] = '000';
      $datUpdate['pd_e_estimate_no'] = '';
      $datUpdate['pd_e_estimate_sub_no'] = '';
      $datUpdate['pd_e_customer_cd'] = '';
      $datUpdate['pd_e_shipper_cd'] = '';
      $datUpdate['pd_e_stay_cd'] = '';
      $datUpdate['pd_e_delivery_cd'] = '';
      $datUpdate['pd_e_customer_charge_cd'] = '';
      $datUpdate['pd_e_desired_delivery_date'] = '';
      $datUpdate['pd_p_cd'] = $datRecord['pd_p_cd'];
      $datUpdate['pd_ed_sub_01'] = $datRecord['pd_ed_sub_01'] ? $datRecord['pd_ed_sub_01'] : 0;
      $datUpdate['pd_ed_sub_02'] = $datRecord['pd_ed_sub_02'] ? $datRecord['pd_ed_sub_02'] : 0;
      $datUpdate['pd_ed_sub_03'] = $datRecord['pd_ed_sub_03'] ? $datRecord['pd_ed_sub_03'] : '';
      $datUpdate['pd_ed_sub_04'] = $datRecord['pd_ed_sub_04'] ? $datRecord['pd_ed_sub_04'] : 0;
      $datUpdate['pd_ed_sub_05'] = $datRecord['pd_ed_sub_05'] ? $datRecord['pd_ed_sub_05'] : 0;
      $datUpdate['pd_ed_sub_06'] = $datRecord['pd_ed_sub_06'] ? $datRecord['pd_ed_sub_06'] : '';
      $datUpdate['pd_ed_sub_08'] = 0;
      $datUpdate['pd_ed_sub_09'] = 0;
      $datUpdate['pd_ed_sub_10'] = '';
      $datUpdate['pd_ed_sub_11'] = '';
      $datUpdate['pd_ed_sub_12'] = 0;
      $datUpdate['pd_ed_sub_13'] = 0;
      $datUpdate['pd_ed_quantity'] = 0;
      $datUpdate['pd_ins_qty'] = 0;
      $datUpdate['pd_dimension'] = 0;
      $datUpdate['pd_weight'] = 0;
      $datUpdate['pd_wire'] = 0;
      $datUpdate['pd_material_unit_cost'] = 0;
      $datUpdate['pd_leaf_no'] = '';
      $datUpdate['pd_leaf_create_date'] = '';
      $datUpdate['pd_start_plan_date'] = '';
      $datUpdate['pd_start_plan_time'] = '';
      $datUpdate['pd_finish_plan_date'] = '';
      $datUpdate['pd_finish_plan_time'] = '';
      $datUpdate['pd_plan_interval'] = 0; 
      $datUpdate['pd_start_date'] = '';
      $datUpdate['pd_start_time'] = '';
      $datUpdate['pd_finish_date'] = '';
      $datUpdate['pd_finish_time'] = '';
      $datUpdate['pd_abort_num'] = 0;
      $datUpdate['pd_interval'] = 0;
      $datUpdate['pd_prod_qty'] = 0;
      $datUpdate['pd_update_at'] = self::currentDate();
      $datUpdate['pd_update_cd'] = $_SESSION['usercd'];
      $datUpdate['pd_weave_sign'] = '0';

      // 既存かどうか
      $sth = $dbh->prepare('
      SELECT * FROM prodplans
      WHERE  pd_belong_cd = :BELONGCD 
      AND pd_prod_plan_no = :PRODPLANNO
      AND pd_prod_plan_sub_no = :SUBNO
      AND pd_process_cd = :PROCCD FOR UPDATE
      ;');
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
      $sth->bindValue(':PROCCD', '00', PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
            
      // 本来であれば、金網か金型かによって作成レコードを変える。 $IsMetalMeshに判定結果入れる
      // $sth = $dbh->prepare('
      // SELECT p_type FROM product
      // WHERE p_cd = :PCD
      // ;');
      if (!$IsMetalMesh) {
        // 金網でない場合は、基本情報明細のみ保有する。
        return;
      }

      if (count($result) <= 0) {
        // 製造指示取消後の再登録を考慮する。
        // 製造指示番号取得時に、履歴テーブルでの最大値から製造指示番号を取得しているが、登録がすれ違ったときのため
        $sth = $dbh->prepare('
        SELECT * FROM t_prodplans
        WHERE  pd_belong_cd = :BELONGCD 
        AND pd_prod_plan_no = :PRODPLANNO
        AND pd_prod_plan_sub_no = :SUBNO
        AND pd_process_cd = :PROCCD
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', '00', PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {
          $datUpdate['pd_update_cnt'] = $result[0]['pd_update_cnt'] + 1;
        }

        // 基本情報
        $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
        self::bindInsertKeys($sth, $columns, $datUpdate);
        $sth->execute();
        // history
        $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
        self::bindInsertKeys($sth, $columnsT, $datUpdate);
        $sth->execute();  
        // 段取工程
        $datUpdate['pd_process_cd'] = '10';
        $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
        self::bindInsertKeys($sth, $columns, $datUpdate);
        $sth->execute();
        // history
        $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
        self::bindInsertKeys($sth, $columnsT, $datUpdate);
        $sth->execute();
        
        // 金網織工程に関してのみ、表示グループが存在するため、別関数

        if ($datHeader[0]['pd_process_cd_30'] > 0) {
          // 型切工程
          $datUpdate['pd_process_cd'] = '30';
          $datUpdate['pd_plan_interval'] = $datHeader[0]['pd_process_cd_30'];
          $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
          self::bindInsertKeys($sth, $columns, $datUpdate);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $datUpdate);
          $sth->execute();  
        }
        if ($datHeader[0]['pd_process_cd_40'] > 0) {
          // 加工工程
          $datUpdate['pd_process_cd'] = '40';
          $datUpdate['pd_plan_interval'] = $datHeader[0]['pd_process_cd_40'];
          $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
          self::bindInsertKeys($sth, $columns, $datUpdate);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $datUpdate);
          $sth->execute();  
        }
        if ($datHeader[0]['pd_process_cd_50'] > 0) {
          // 振動篩
          $datUpdate['pd_process_cd'] = '50';
          $datUpdate['pd_plan_interval'] = $datHeader[0]['pd_process_cd_50'];
          $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
          self::bindInsertKeys($sth, $columns, $datUpdate);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $datUpdate);
          $sth->execute();  
        }        
        if ($datHeader[0]['pd_process_cd_80'] > 0) {
          // シート製作
          $datUpdate['pd_process_cd'] = '80';
          $datUpdate['pd_plan_interval'] = $datHeader[0]['pd_process_cd_80'];
          $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
          self::bindInsertKeys($sth, $columns, $datUpdate);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $datUpdate);
          $sth->execute();  
        }
        return;
      }


      // 既存********************************************************************
      // 基本情報ヘッダ
      $datUpdate['pd_update_cnt'] = $result[0]['pd_update_cnt'] + 1;
      $sth = $dbh->prepare(self::makeUpdateSQL('prodplans', $columns));
      self::bindValueToUpdate($sth, $columns, $datUpdate);
      $sth->execute();
      // history
      $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
      self::bindInsertKeys($sth, $columnsT, $datUpdate);
      $sth->execute();

      // 各工程確認
      $strSQL = '
      SELECT * FROM prodplans
      WHERE  pd_belong_cd = :BELONGCD 
      AND pd_prod_plan_no = :PRODPLANNO
      AND pd_prod_plan_sub_no = :SUBNO
      AND pd_process_cd = :PROCCD FOR UPDATE
      ;';

      // 段取工程　10
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
      $sth->bindValue(':PROCCD', '10', PDO::PARAM_STR);
      $sth->execute();
      $result10 = $sth->fetchAll(PDO::FETCH_ASSOC);
      
      $datUpdate['pd_update_cnt'] = 0;
      $datUpdate['pd_process_cd'] = '10';
      if (count($result10) > 0) {

        $datUpdate['pd_update_cnt'] = $result10[0]['pd_update_cnt'] + 1;
        $sth = $dbh->prepare(self::makeUpdateSQL('prodplans', $columns));
        self::bindValueToUpdate($sth, $columns, $datUpdate);
        $sth->execute();
        // history
        $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
        self::bindInsertKeys($sth, $columnsT, $datUpdate);
        $sth->execute();

      } else {
        // 新規
        // 取消後、同じ製番で登録された場合を考慮
        $strSQL = '
        SELECT * FROM t_prodplans
        WHERE pd_belong_cd = :BELONGCD 
        AND pd_prod_plan_no = :PRODPLANNO
        AND pd_prod_plan_sub_no = :SUBNO
        AND pd_process_cd = :PROCCD
        ;';
        $sth = $dbh->prepare($strSQL);
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', '10', PDO::PARAM_STR);
        $sth->execute();
        $result10 = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (count($result10) > 0) {
          $datUpdate['pd_update_cnt'] = $result10[0]['pd_update_cnt'] + 1;
        }
        // 段取工程
        $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
        self::bindInsertKeys($sth, $columns, $datUpdate);
        $sth->execute();
        // history
        $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
        self::bindInsertKeys($sth, $columnsT, $datUpdate);
        $sth->execute();
      }

      // 型切工程　30
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
      $sth->bindValue(':PROCCD', '30', PDO::PARAM_STR);
      $sth->execute();
      $result30 = $sth->fetchAll(PDO::FETCH_ASSOC);
      
      $datUpdate['pd_update_cnt'] = 0;
      $datUpdate['pd_process_cd'] = '30';
      $datUpdate['pd_plan_interval'] = $datHeader[0]['pd_process_cd_30'];
      if (count($result30) > 0) {
        if (self::checkNotSet($datUpdate['pd_plan_interval']) || $datUpdate['pd_plan_interval'] <= 0) {
          $sth = $dbh->prepare('
          DELETE FROM prodplans
          WHERE  pd_belong_cd = :BELONGCD 
          AND pd_prod_plan_no = :PRODPLANNO
          AND pd_prod_plan_sub_no = :SUBNO
          AND pd_process_cd = :PROCCD 
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
          $sth->bindValue(':PROCCD', '30', PDO::PARAM_STR);
          $sth->execute();
          
        } else {
          $datUpdate['pd_update_cnt'] = $result30[0]['pd_update_cnt'] + 1;
          $sth = $dbh->prepare(self::makeUpdateSQL('prodplans', $columns));
          self::bindValueToUpdate($sth, $columns, $datUpdate);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $datUpdate);
          $sth->execute();
        }
      } else {
        if (self::checkNotSet($datUpdate['pd_plan_interval']) === false && $datUpdate['pd_plan_interval'] > 0) {
          // 取消後、同じ製番で登録された場合を考慮
          $strSQL = '
          SELECT * FROM t_prodplans
          WHERE pd_belong_cd = :BELONGCD 
          AND pd_prod_plan_no = :PRODPLANNO
          AND pd_prod_plan_sub_no = :SUBNO
          AND pd_process_cd = :PROCCD
          ;';
          $sth = $dbh->prepare($strSQL);
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
          $sth->bindValue(':PROCCD', '30', PDO::PARAM_STR);
          $sth->execute();
          $result30 = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($result30) > 0) {
            $datUpdate['pd_update_cnt'] = $result30[0]['pd_update_cnt'] + 1;
          }

          // 新規
          $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
          self::bindInsertKeys($sth, $columns, $datUpdate);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $datUpdate);
          $sth->execute();
        }
      }

      // 加工工程　40
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
      $sth->bindValue(':PROCCD', '40', PDO::PARAM_STR);
      $sth->execute();
      $result40 = $sth->fetchAll(PDO::FETCH_ASSOC);

      $datUpdate['pd_update_cnt'] = 0;
      $datUpdate['pd_process_cd'] = '40';
      $datUpdate['pd_plan_interval'] = $datHeader[0]['pd_process_cd_40'];
      if (count($result40) > 0) {
        if (self::checkNotSet($datUpdate['pd_plan_interval']) || $datUpdate['pd_plan_interval'] <= 0) {
          $sth = $dbh->prepare('
          DELETE FROM prodplans
          WHERE  pd_belong_cd = :BELONGCD 
          AND pd_prod_plan_no = :PRODPLANNO
          AND pd_prod_plan_sub_no = :SUBNO
          AND pd_process_cd = :PROCCD 
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
          $sth->bindValue(':PROCCD', '40', PDO::PARAM_STR);
          $sth->execute();
          
        } else {
          $datUpdate['pd_update_cnt'] = $result40[0]['pd_update_cnt'] + 1;
          $sth = $dbh->prepare(self::makeUpdateSQL('prodplans', $columns));
          self::bindValueToUpdate($sth, $columns, $datUpdate);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $datUpdate);
          $sth->execute();
        }
      } else {
        // 新規
        if (self::checkNotSet($datUpdate['pd_plan_interval']) === false && $datUpdate['pd_plan_interval'] > 0) {
          // 取消後、同じ製番で登録された場合を考慮
          $strSQL = '
          SELECT * FROM t_prodplans
          WHERE pd_belong_cd = :BELONGCD 
          AND pd_prod_plan_no = :PRODPLANNO
          AND pd_prod_plan_sub_no = :SUBNO
          AND pd_process_cd = :PROCCD
          ;';
          $sth = $dbh->prepare($strSQL);
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
          $sth->bindValue(':PROCCD', '40', PDO::PARAM_STR);
          $sth->execute();
          $result40 = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($result40) > 0) {
            $datUpdate['pd_update_cnt'] = $result40[0]['pd_update_cnt'] + 1;
          }

          $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
          self::bindInsertKeys($sth, $columns, $datUpdate);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $datUpdate);
          $sth->execute();
        }
      }

      
      // 工程　50
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
      $sth->bindValue(':PROCCD', '50', PDO::PARAM_STR);
      $sth->execute();
      $result50 = $sth->fetchAll(PDO::FETCH_ASSOC);

      $datUpdate['pd_update_cnt'] = 0;
      $datUpdate['pd_process_cd'] = '50';
      $datUpdate['pd_plan_interval'] = $datHeader[0]['pd_process_cd_50'];
      if (count($result50) > 0) {
        if (self::checkNotSet($datUpdate['pd_plan_interval']) || $datUpdate['pd_plan_interval'] <= 0) {
          $sth = $dbh->prepare('
          DELETE FROM prodplans
          WHERE  pd_belong_cd = :BELONGCD 
          AND pd_prod_plan_no = :PRODPLANNO
          AND pd_prod_plan_sub_no = :SUBNO
          AND pd_process_cd = :PROCCD 
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
          $sth->bindValue(':PROCCD', '50', PDO::PARAM_STR);
          $sth->execute();
          
        } else {
          $datUpdate['pd_update_cnt'] = $result50[0]['pd_update_cnt'] + 1;
          $sth = $dbh->prepare(self::makeUpdateSQL('prodplans', $columns));
          self::bindValueToUpdate($sth, $columns, $datUpdate);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $datUpdate);
          $sth->execute();
        }
      } else {
        // 新規        
        if (self::checkNotSet($datUpdate['pd_plan_interval']) === false && $datUpdate['pd_plan_interval'] > 0) {
          // 取消後、同じ製番で登録された場合を考慮
          $strSQL = '
          SELECT * FROM t_prodplans
          WHERE pd_belong_cd = :BELONGCD 
          AND pd_prod_plan_no = :PRODPLANNO
          AND pd_prod_plan_sub_no = :SUBNO
          AND pd_process_cd = :PROCCD
          ;';
          $sth = $dbh->prepare($strSQL);
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
          $sth->bindValue(':PROCCD', '50', PDO::PARAM_STR);
          $sth->execute();
          $result50 = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($result50) > 0) {
            $datUpdate['pd_update_cnt'] = $result50[0]['pd_update_cnt'] + 1;
          }

          $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
          self::bindInsertKeys($sth, $columns, $datUpdate);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $datUpdate);
          $sth->execute();
        }
      }

      
      // 加工工程　80
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
      $sth->bindValue(':PROCCD', '80', PDO::PARAM_STR);
      $sth->execute();
      $result80 = $sth->fetchAll(PDO::FETCH_ASSOC);

      $datUpdate['pd_update_cnt'] = 0;
      $datUpdate['pd_process_cd'] = '80';
      $datUpdate['pd_plan_interval'] = $datHeader[0]['pd_process_cd_80'];
      if (count($result80) > 0) {
        if (self::checkNotSet($datUpdate['pd_plan_interval']) || $datUpdate['pd_plan_interval'] <= 0) {
          $sth = $dbh->prepare('
          DELETE FROM prodplans
          WHERE  pd_belong_cd = :BELONGCD 
          AND pd_prod_plan_no = :PRODPLANNO
          AND pd_prod_plan_sub_no = :SUBNO
          AND pd_process_cd = :PROCCD 
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
          $sth->bindValue(':PROCCD', '80', PDO::PARAM_STR);
          $sth->execute();
          
        } else {
          $datUpdate['pd_update_cnt'] = $result80[0]['pd_update_cnt'] + 1;
          $sth = $dbh->prepare(self::makeUpdateSQL('prodplans', $columns));
          self::bindValueToUpdate($sth, $columns, $datUpdate);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $datUpdate);
          $sth->execute();
        }
      } else {
        // 新規        
        if (self::checkNotSet($datUpdate['pd_plan_interval']) === false && $datUpdate['pd_plan_interval'] > 0) {
          // 取消後、同じ製番で登録された場合を考慮
          $strSQL = '
          SELECT * FROM t_prodplans
          WHERE pd_belong_cd = :BELONGCD 
          AND pd_prod_plan_no = :PRODPLANNO
          AND pd_prod_plan_sub_no = :SUBNO
          AND pd_process_cd = :PROCCD
          ;';
          $sth = $dbh->prepare($strSQL);
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
          $sth->bindValue(':PROCCD', '80', PDO::PARAM_STR);
          $sth->execute();
          $result80 = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($result80) > 0) {
            $datUpdate['pd_update_cnt'] = $result80[0]['pd_update_cnt'] + 1;
          }

          $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
          self::bindInsertKeys($sth, $columns, $datUpdate);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $datUpdate);
          $sth->execute();
        }
      }

    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * prodplanテーブルに各工程明細データ追加
   */
  private static function registProdplansDetailRecord($datHeader, $datDetail, $dbh) {
    // DB定義取得
    $columns = self::getColumnDefs('prodplans');
    $columnsT = self::getColumnDefs('t_prodplans');
    // PKを設定
    self::markAsHeaderPK($columns, 'pd_belong_cd');
    self::markAsHeaderPK($columns, 'pd_prod_plan_no');
    self::markAsHeaderPK($columns, 'pd_prod_plan_sub_no');
    self::markAsHeaderPK($columnsT, 'pd_belong_cd');
    self::markAsHeaderPK($columnsT, 'pd_prod_plan_no');
    self::markAsHeaderPK($columnsT, 'pd_prod_plan_sub_no');
    self::markAsHeaderPK($columnsT, 'pd_update_cnt');

    $datUpdate = [];
    $seqNo = 0;
    try {
      foreach ($datDetail as $record) {
        // 初期値
        $record['pd_belong_cd'] = $_SESSION['companycd'];
        $record['pd_prod_plan_no'] = $datHeader[0]['pd_prod_plan_no'];
        $record['pd_process_cd'] = '00';
        $record['pd_place_cd'] = $datHeader[0]['pd_place_cd'];
        $record['pd_proj_cd'] = '';
        $record['pd_par_cd'] = $record['pd_par_cd'];
        $record['pd_ar_cd'] = $datHeader[0]['pd_ar_cd'];
        $record['pd_ins_level'] = $datHeader[0]['pd_ins_level'] ? $datHeader[0]['pd_ins_level'] : 0;
        $record['pd_finish_plan_date_h'] = $datHeader[0]['pd_finish_plan_date_h'] ? self::paddingDate($datHeader[0]['pd_finish_plan_date_h']) : '';
        $record['pd_disp_order'] = $record['pd_disp_order'];
        $record['pd_ed_sub_01'] = $record['pd_ed_sub_01'] ? $record['pd_ed_sub_01'] : 0;
        $record['pd_ed_sub_02'] = $record['pd_ed_sub_02'] ? $record['pd_ed_sub_02'] : 0;
        $record['pd_ed_sub_04'] = $record['pd_ed_sub_04'] ? $record['pd_ed_sub_04'] : 0;
        $record['pd_ed_sub_05'] = $record['pd_ed_sub_05'] ? $record['pd_ed_sub_05'] : 0;
        $record['pd_ed_sub_08'] = $record['pd_ed_sub_08'] ? $record['pd_ed_sub_08'] : 0;
        $record['pd_ed_sub_09'] = $record['pd_ed_sub_09'] ? $record['pd_ed_sub_09'] : 0;
        $record['pd_ed_sub_12'] = $record['pd_ed_sub_12'] ? $record['pd_ed_sub_12'] : 0;
        $record['pd_ed_sub_13'] = $record['pd_ed_sub_13'] ? $record['pd_ed_sub_13'] : 0;       
        $record['pd_ed_quantity'] = $record['pd_ed_quantity'] ? $record['pd_ed_quantity'] : 0;
        $record['pd_ins_qty'] = $record['pd_ins_qty'] ? $record['pd_ins_qty'] : 0;

        // DBレイアウトに基づき、小数点以下3桁指定。
        $record['pd_dimension'] = self::calcDimension($record['pd_ed_sub_08'], $record['pd_ed_sub_09'], $record['pd_ed_quantity'], 3, 0);
        $record['pd_weight'] = 0;
        $record['pd_wire'] = 0;
        $record['pd_material_unit_cost'] = 0;
        $record['pd_plan_interval'] = 0; 

        $record['pd_abort_num'] = 0;
        $record['pd_interval'] = 0;
        $record['pd_prod_qty'] = 0;
        $record['pd_update_at'] = self::currentDate();
        $record['pd_update_cd'] = $_SESSION['usercd'];
        $record['pd_weave_sign'] = '0';

        // 受払予定データ登録
        self::issueStockPlan('PRODPLAN', $record['pd_update_at'], $record, $dbh); 

        // 基本情報明細
        $sth = $dbh->prepare('
        SELECT * FROM prodplans
        WHERE  pd_belong_cd = :BELONGCD 
        AND pd_prod_plan_no = :PRODPLANNO
        AND pd_prod_plan_sub_no = :SUBNO
        AND pd_process_cd = :PROCCD 
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':PRODPLANNO', $record['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $record['pd_prod_plan_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', '00', PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        $record['pd_update_cnt'] = 0;
        $record['pd_process_cd'] = '00';
        if (count($result) > 0) {
          // 既存
          $record['pd_update_cnt'] = $result[0]['pd_update_cnt'] + 1;
          $sth = $dbh->prepare(self::makeUpdateSQL('prodplans', $columns));
          self::bindValueToUpdate($sth, $columns, $record);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $record);
          $sth->execute();
          
        } else {
          // 新規
          $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
          self::bindInsertKeys($sth, $columns, $record);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $record);
          $sth->execute(); 
        }

        
        // 型切工程 30 
        $sth = $dbh->prepare('
        SELECT * FROM prodplans
        WHERE  pd_belong_cd = :BELONGCD 
        AND pd_prod_plan_no = :PRODPLANNO
        AND pd_prod_plan_sub_no = :SUBNO
        AND pd_process_cd = :PROCCD 
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':PRODPLANNO', $record['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $record['pd_prod_plan_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', '30', PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        $record['pd_update_cnt'] = 0;
        $record['pd_process_cd'] = '30';
        if (count($result) > 0) {
          // 既存
          if (self::checkNotSet($datHeader[0]['pd_process_cd_30']) || $datHeader[0]['pd_process_cd_30'] <= 0) {
            // subno=000はヘッダなので削除済みのため除外。
            $sth = $dbh->prepare('
            DELETE FROM prodplans
            WHERE  pd_belong_cd = :BELONGCD 
            AND pd_prod_plan_no = :PRODPLANNO
            AND pd_prod_plan_sub_no <> :SUBNO
            AND pd_process_cd = :PROCCD 
            ;');
            $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
            $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
            $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
            $sth->bindValue(':PROCCD', '30', PDO::PARAM_STR);
            $sth->execute();
            
          } else {
            $record['pd_update_cnt'] = $result[0]['pd_update_cnt'] + 1;
            $sth = $dbh->prepare(self::makeUpdateSQL('prodplans', $columns));
            self::bindValueToUpdate($sth, $columns, $record);
            $sth->execute();
            // history
            $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
            self::bindInsertKeys($sth, $columnsT, $record);
            $sth->execute();
          }
        } else {
          if (self::checkNotSet($datHeader[0]['pd_process_cd_30']) === false || $datHeader[0]['pd_process_cd_30'] > 0) {
            // 型切工程については、工程自体の有無を判定の後登録
            // 新規
            $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
            self::bindInsertKeys($sth, $columns, $record);
            $sth->execute();
            // history
            $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
            self::bindInsertKeys($sth, $columnsT, $record);
            $sth->execute(); 
          }
        }

        
        // 金網製造工程 20 
        $sth = $dbh->prepare('
        SELECT * FROM prodplans
        WHERE  pd_belong_cd = :BELONGCD 
        AND pd_prod_plan_no = :PRODPLANNO
        AND pd_prod_plan_sub_no = :SUBNO
        AND pd_process_cd = :PROCCD 
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':PRODPLANNO', $record['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $record['pd_prod_plan_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', '20', PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        $record['pd_update_cnt'] = 0;
        $record['pd_process_cd'] = '20';
        if (count($result) > 0) {
          // 既存
          $record['pd_update_cnt'] = $result[0]['pd_update_cnt'] + 1;
          $sth = $dbh->prepare(self::makeUpdateSQL('prodplans', $columns));
          self::bindValueToUpdate($sth, $columns, $record);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $record);
          $sth->execute();
        } else {
          // 新規
          $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columns));
          self::bindInsertKeys($sth, $columns, $record);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
          self::bindInsertKeys($sth, $columnsT, $record);
          $sth->execute(); 
        }
      }
    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 製造指示データ　行削除
   */
  private static function deleteProdplansDetailsRecord($datHeader, $datDetails, $dbh) {
    $defDataRecord = [];
    $existFlg = false;
    try {
      // 既存データ ヘッダデータは除外するため、subnoが000のレコードを除外
      $sth = $dbh->prepare('
      SELECT * FROM prodplans
      WHERE pd_belong_cd = :BELONGCD 
      AND pd_prod_plan_no = :PRODPLANNO
      AND pd_process_cd = :PROCCD AND pd_prod_plan_sub_no <> "000"
      ;');
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->bindValue(':PROCCD', '00', PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($result) <= 0) { return; }

      foreach($result as $record) {
        $existFlg = false;
        foreach ($datDetails as $detailRecord) {
          if ($record['pd_prod_plan_no'] === $detailRecord['pd_prod_plan_no'] && $record['pd_prod_plan_sub_no'] === $detailRecord['pd_prod_plan_sub_no']) {
            $existFlg = true;
          }
        }
        if (!$existFlg) {
          array_push($defDataRecord, $record);
        }
      }

      foreach($defDataRecord as $rec) {
        // 差異のレコード＝行削除されたレコード
        // 製造指示
        $sth = $dbh->prepare('
        DELETE FROM prodplans
        WHERE  pd_belong_cd = :BELONGCD 
        AND pd_prod_plan_no = :PRODPLANNO
        AND pd_prod_plan_sub_no = :SUBNO
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':PRODPLANNO', $rec['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $record['pd_prod_plan_sub_no'], PDO::PARAM_STR);
        $sth->execute();

        // 製造指示金網ヘッダ
        $sth = $dbh->prepare('
        DELETE FROM prodplandetailsw
        WHERE  pw_belong_cd = :BELONGCD 
        AND pw_prod_plan_no = :PRODPLANNO
        AND pw_prod_plan_sub_no = :SUBNO
        AND pw_process_cd IN ("20", "24")
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':PRODPLANNO', $rec['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $record['pd_prod_plan_sub_no'], PDO::PARAM_STR);
        $sth->execute();

      }

    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 加工内容詳細追加 新規登録&データ削除を行う。
   */
  private static function createDeleteProdplansProcess($datHeader, $datDetails, $dbh) {
    $columns = self::getColumnDefs('prodplansproc');
    $columnsT = self::getColumnDefs('t_prodplansproc');
    self::markAsHeaderPK($columns, 'ppr_belong_cd');
    self::markAsHeaderPK($columns, 'ppr_prod_plan_no');
    self::markAsHeaderPK($columns, 'ppr_proc_cd');
    self::markAsHeaderPK($columns, 'ppr_mn_content_cd');
    self::markAsHeaderPK($columnsT, 'ppr_belong_cd');
    self::markAsHeaderPK($columnsT, 'ppr_prod_plan_no');
    self::markAsHeaderPK($columnsT, 'ppr_proc_cd');
    self::markAsHeaderPK($columnsT, 'ppr_mn_content_cd');
    self::markAsHeaderPK($columnsT, 'ppr_update_cnt');

    $updateData = [];
    try {
      // 加工内容詳細の紐づけテーブルに該当加工内容のデータがあるかどうか確認
      $sth = $dbh->prepare('
      SELECT * FROM processrelation
      WHERE rl_ar_cd = :ARCD
      ;');
      $sth->bindValue(':ARCD', $datDetails[0]['pd_par_cd'], PDO::PARAM_STR);
      $sth->execute();
      $rsltProcessRelation = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($rsltProcessRelation) > 0) {
        // 該当の加工内容に対する加工詳細が指定されている場合。各製造指示番号の加工内容詳細テーブルにデータが登録されているかどうか確認する。
        $sth = $dbh->prepare('
        SELECT * FROM processrelation AS rl 
        LEFT JOIN (SELECT * FROM prodplansproc WHERE ppr_prod_plan_no = :PRODPLANNO) AS ppr ON rl.rl_mn_content_cd = ppr.ppr_mn_content_cd AND rl.rl_mn_cd = ppr.ppr_proc_cd
        WHERE rl_ar_cd = :ARCD
        ;');
        $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':ARCD', $datDetails[0]['pd_par_cd'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        foreach($result as $rec) {
          if (self::checkNotSet($rec['ppr_prod_plan_no']) === true) {
            // 新規追加
            // 初期値
            $updateData['ppr_belong_cd'] = $_SESSION['companycd'];
            $updateData['ppr_prod_plan_no'] = $datHeader[0]['pd_prod_plan_no'];
            $updateData['ppr_proc_cd'] = $rec['rl_mn_cd'];
            $updateData['ppr_mn_content_cd'] = $rec['rl_mn_content_cd'];
            $updateData['ppr_update_cnt'] = 0;
            $updateData['ppr_mn_content_name'] = $rec['rl_mn_content_name'];
            $updateData['ppr_details'] = '';
            $updateData['ppr_ins_cd'] = '';
            $updateData['ppr_ins_cd_01'] = '';
            $updateData['ppr_ins_cd_02'] = '';
            $updateData['ppr_ins_cd_03'] = '';
            $updateData['ppr_plan_interval'] = 0;
            $updateData['ppr_worker_cd'] = '';
            $updateData['ppr_interval'] = 0;
            $updateData['ppr_type_01'] = '0';
            $updateData['ppr_type_02'] = '';
            $updateData['ppr_type_03'] = '';
            $updateData['ppr_update_at'] = self::currentDate();
            $updateData['ppr_update_cd'] = $_SESSION['usercd'];

            $sth = $dbh->prepare(self::makeInsertSQL('prodplansproc', $columns));
            self::bindInsertKeys($sth, $columns, $updateData);
            $sth->execute();
            // 履歴テーブル
            $sth = $dbh->prepare(self::makeInsertSQL('t_prodplansproc', $columnsT));
            self::bindInsertKeys($sth, $columnsT, $updateData);
            $sth->execute();
          } 
          // 既存は無視
          
        }

      } else {
        // 指定値がない場合は、各工程のデフォルトの値をセット
        // 初期値
        $updateData['ppr_belong_cd'] = $_SESSION['companycd'];
        $updateData['ppr_prod_plan_no'] = $datHeader[0]['pd_prod_plan_no'];
        $updateData['ppr_proc_cd'] = '00';
        $updateData['ppr_mn_content_cd'] = '000';
        $updateData['ppr_update_cnt'] = 0;
        $updateData['ppr_mn_content_name'] = '';
        $updateData['ppr_details'] = '';
        $updateData['ppr_ins_cd'] = '';
        $updateData['ppr_ins_cd_01'] = '';
        $updateData['ppr_ins_cd_02'] = '';
        $updateData['ppr_ins_cd_03'] = '';
        $updateData['ppr_plan_interval'] = 0;
        $updateData['ppr_worker_cd'] = '';
        $updateData['ppr_interval'] = 0;
        $updateData['ppr_type_01'] = '0';
        $updateData['ppr_type_02'] = '';
        $updateData['ppr_type_03'] = '';
        $updateData['ppr_update_at'] = self::currentDate();
        $updateData['ppr_update_cd'] = $_SESSION['usercd'];


        $sth = $dbh->prepare('
        SELECT * FROM prodplansproc
        WHERE ppr_belong_cd = :BELONGCD 
        AND ppr_prod_plan_no = :PRODPLANNO 
        AND ppr_proc_cd = :PROCCD
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':PRODPLANNO',$datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', '30', PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {
          // 既存
          if (self::checkNotSet($datHeader[0]['pd_process_cd_30']) || $datHeader[0]['pd_process_cd_30'] <= 0) {
            // 30が0もしくは空がセットされた場合
            $sth = $dbh->prepare('
            DELETE FROM prodplansproc
            WHERE  ppr_belong_cd = :BELONGCD 
            AND ppr_prod_plan_no = :PRODPLANNO
            AND ppr_mn_content_cd = :PROCCD 
            ;');
            $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
            $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
            $sth->bindValue(':PROCCD', '30', PDO::PARAM_STR);
            $sth->execute();
          } 
        } else {
          // 新規登録
          $sth = $dbh->prepare('
          SELECT mn_content_cd, mn_content_name FROM manufacture
          WHERE mn_cd = :PROCCD AND mn_cd_01 = "1"
          ;');
          $sth->bindValue(':PROCCD', '30', PDO::PARAM_STR);
          $sth->execute();
          $resultMaster = $sth->fetchAll(PDO::FETCH_ASSOC);

          foreach ($resultMaster as $rec) {
            // デフォルトの工程内容を先に登録しておく        
            $updateData['ppr_proc_cd'] = '30';
            $updateData['ppr_mn_content_cd'] = $rec['mn_content_cd'];
            $updateData['ppr_mn_content_name'] = $rec['mn_content_name'];

            $sth = $dbh->prepare(self::makeInsertSQL('prodplansproc', $columns));
            self::bindInsertKeys($sth, $columns, $updateData);
            $sth->execute();
            // 履歴テーブル
            $sth = $dbh->prepare(self::makeInsertSQL('t_prodplansproc', $columnsT));
            self::bindInsertKeys($sth, $columnsT, $updateData);
            $sth->execute();
          }
        }

        $sth = $dbh->prepare('
        SELECT * FROM prodplansproc
        WHERE ppr_belong_cd = :BELONGCD 
        AND ppr_prod_plan_no = :PRODPLANNO 
        AND ppr_proc_cd = :PROCCD
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':PRODPLANNO',$datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', '40', PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {
          // 既存
          if (self::checkNotSet($datHeader[0]['pd_process_cd_40']) || $datHeader[0]['pd_process_cd_40'] <= 0) {
            // 40が0もしくは空がセットされた場合
            $sth = $dbh->prepare('
            DELETE FROM prodplansproc
            WHERE  ppr_belong_cd = :BELONGCD 
            AND ppr_prod_plan_no = :PRODPLANNO
            AND ppr_mn_content_cd = :PROCCD 
            ;');
            $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
            $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
            $sth->bindValue(':PROCCD', '40', PDO::PARAM_STR);
            $sth->execute();
          } 
        } else {        
          // 新規登録
          $sth = $dbh->prepare('
          SELECT mn_content_cd, mn_content_name FROM manufacture
          WHERE mn_cd = :PROCCD AND mn_cd_02 = "1"
          ;');
          $sth->bindValue(':PROCCD', '40', PDO::PARAM_STR);
          $sth->execute();
          $resultMaster = $sth->fetchAll(PDO::FETCH_ASSOC);

          foreach ($resultMaster as $rec) {
            // デフォルトの工程内容を先に登録しておく        
            $updateData['ppr_proc_cd'] = '40';
            $updateData['ppr_mn_content_cd'] = $rec['mn_content_cd'];
            $updateData['ppr_mn_content_name'] = $rec['mn_content_name'];

            $sth = $dbh->prepare(self::makeInsertSQL('prodplansproc', $columns));
            self::bindInsertKeys($sth, $columns, $updateData);
            $sth->execute();
            // 履歴テーブル
            $sth = $dbh->prepare(self::makeInsertSQL('t_prodplansproc', $columnsT));
            self::bindInsertKeys($sth, $columnsT, $updateData);
            $sth->execute();
          }
        }

        $sth = $dbh->prepare('
        SELECT * FROM prodplansproc
        WHERE ppr_belong_cd = :BELONGCD 
        AND ppr_prod_plan_no = :PRODPLANNO 
        AND ppr_proc_cd = :PROCCD
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':PRODPLANNO',$datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', '50', PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {
          // 既存
          if (self::checkNotSet($datHeader[0]['pd_process_cd_50']) || $datHeader[0]['pd_process_cd_50'] <= 0) {
            // 50が0もしくは空がセットされた場合
            $sth = $dbh->prepare('
            DELETE FROM prodplansproc
            WHERE  ppr_belong_cd = :BELONGCD 
            AND ppr_prod_plan_no = :PRODPLANNO
            AND ppr_mn_content_cd = :PROCCD 
            ;');
            $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
            $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
            $sth->bindValue(':PROCCD', '50', PDO::PARAM_STR);
            $sth->execute();
          } else {
            // 新規登録
            $sth = $dbh->prepare('
            SELECT mn_content_cd, mn_content_name FROM manufacture
            WHERE mn_cd = :PROCCD AND mn_cd_03 = "1"
            ;');
            $sth->bindValue(':PROCCD', '50', PDO::PARAM_STR);
            $sth->execute();
            $resultMaster = $sth->fetchAll(PDO::FETCH_ASSOC);
    
            foreach ($resultMaster as $rec) {
              // デフォルトの工程内容を先に登録しておく        
              $updateData['ppr_mn_content_cd'] = $rec['mn_content_cd'];
              $updateData['ppr_mn_content_name'] = $rec['mn_content_name'];
              $updateData['ppr_proc_cd'] = '50';
              $sth = $dbh->prepare(self::makeInsertSQL('prodplansproc', $columns));
              self::bindInsertKeys($sth, $columns, $updateData);
              $sth->execute();

              // 履歴テーブル
              $sth = $dbh->prepare(self::makeInsertSQL('t_prodplansproc', $columnsT));
              self::bindInsertKeys($sth, $columnsT, $updateData);
              $sth->execute();
            
            }

          }
        } 
      }

    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 金網製造指示データ登録
   * 製作指示登録時に、システム側の都合でデータインサートを行う。
   */
  private static function registProdplansw($datHeader, $datDetail, $dbh) {
    $columnsH = self::getColumnDefs('prodplansw');
    $columnsD = self::getColumnDefs('prodplandetailsw');

    self::markAsHeaderPK($columnsH, 'pp_belong_cd');  
    self::markAsHeaderPK($columnsH, 'pp_prod_plan_no');  
    self::markAsHeaderPK($columnsD, 'pw_belong_cd');  
    self::markAsHeaderPK($columnsD, 'pw_prod_plan_no'); 
    self::markAsHeaderPK($columnsD, 'pw_process_cd');  
    self::markAsHeaderPK($columnsD, 'pw_disp_num');

    try {
      $sth =$dbh->prepare('
      SELECT * FROM prodplansw
      WHERE pp_prod_plan_no = :PRODPLANNO
      ;');
      $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($result) <= 0) {
        // なかったら作成。既存は、この時点では変更をかけない
        $updateData = [];

        $updateData['pp_belong_cd'] = $_SESSION['companycd'];
        $updateData['pp_prod_plan_no'] = $datHeader[0]['pd_prod_plan_no'];
        $updateData['pp_ar_cd'] = $datDetail[0]['pd_par_cd'];
        $updateData['pp_mn_cd'] = $datHeader[0]['pd_ar_cd'];
        $updateData['pp_p_cd'] = $datDetail[0]['pd_p_cd'];
        $updateData['pp_bump_num'] = 0;
        $updateData['pp_spec'] = '';
        $updateData['pp_ed_sub_01'] = (float)$datDetail[0]['pd_ed_sub_01'];
        $updateData['pp_ed_sub_12'] = (float)$datDetail[0]['pd_ed_sub_12'];
        $updateData['pp_ed_sub_04'] = (float)$datDetail[0]['pd_ed_sub_04'];
        $updateData['pp_depth_01'] = 0;
        $updateData['pp_ed_sub_06'] = $datDetail[0]['pd_ed_sub_06'];
        $updateData['pp_ed_sub_02'] = (float)$datDetail[0]['pd_ed_sub_02'];
        $updateData['pp_ed_sub_13'] = (float)$datDetail[0]['pd_ed_sub_13'];
        $updateData['pp_ed_sub_05'] = (float)$datDetail[0]['pd_ed_sub_05'];
        $updateData['pp_depth_02'] = 0;
        $updateData['pp_ed_sub_06_02'] = $datDetail[0]['pd_ed_sub_06'];
        $updateData['pp_rfid_no'] = '';
        $updateData['pp_mold_01'] = '';
        $updateData['pp_mold_02'] = '';
        $updateData['pp_customer_cd'] = $datDetail[0]['pd_e_customer_cd'];
        $updateData['pp_shipper_cd'] = $datDetail[0]['pd_e_shipper_cd'];
        $updateData['pp_delivery_cd'] = $datDetail[0]['pd_e_delivery_cd'];
        $updateData['pp_customer_charge_cd'] = $datDetail[0]['pd_e_customer_charge_cd'];
        $updateData['pp_desired_delivery_date'] = $datDetail[0]['pd_e_desired_delivery_date'];
        $updateData['pp_dimension'] = self::calcDimension($datDetail[0]['pd_ed_sub_08'], $datDetail[0]['pd_ed_sub_09'], $datDetail[0]['pd_ed_quantity'], 3, 0);
        $updateData['pp_unit_weight'] = 0; 
        $updateData['pp_weght'] = $datDetail[0]['pp_weght'];
        $updateData['pp_loss_rate'] = 0;
        $updateData['pp_update_at'] = self::currentDate();
        $updateData['pp_update_cd'] = $_SESSION['usercd'];

        $sth = $dbh->prepare(self::makeInsertSQL('prodplansw', $columnsH));
        self::bindInsertKeys($sth, $columnsH, $updateData);
        $sth->execute();

      }

      /***
       * prodplanswがヘッダ、prodplansdetailswが工程ごとの明細のイメージ。
       * そのため、prodplanswがあれば、prodplandetailswも存在する。
       * ただし、織、縦抜きがないタイプの場合は、存在しても空のデータレコードがセットされているイメージとなる。
       *  */ 
      $arrGroup = self::getProdplansGroupData($datDetail);

      // 既存データがあり、かつ、そのデータのグループ番号が変更されていた場合、工程20のレコードデータを削除
      $sth = $dbh->prepare('
      SELECT * FROM prodplandetailsw
      WHERE pw_belong_cd = :BELONGCD
      AND pw_prod_plan_no = :PRODPLANNO
      AND pw_process_cd = :PROCCD
      ;');
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->bindValue(':PROCCD', '20', PDO::PARAM_STR);
      $sth->execute();
      $rsltOrg = $sth->fetchAll(PDO::FETCH_ASSOC);

      $bExist = false;
      foreach($rsltOrg as $recordD) {
        foreach($arrGroup as $recordH) {
          // カラムの定義名が異なっているので注意
          if ($recordH['pd_disp_order'] === $recordD['pw_disp_num']) { $bExist = true; }
        }
        if (!$bExist) {
          // データが変更されたためレコードデータ削除  グループのカラムの型定義が他テーブルと異なるため注意。()ソートが重要なため)
          $sth = $dbh->prepare('
          DELETE FROM prodplandetailsw
          WHERE pw_belong_cd = :BELONGCD
          AND pw_prod_plan_no = :PRODPLANNO
          AND pw_process_cd = :PROCCD
          AND pw_disp_num = :DISPNUM
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':PRODPLANNO', $datHeader[0]['pd_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':PROCCD', '20', PDO::PARAM_STR);
          $sth->bindValue(':DISPNUM', (int)$record['pd_disp_order'], PDO::PARAM_STR);
          $sth->execute();
        }
        $bExist = false;  // リセット
      }

      // 工程20に関しては、グループがセットされて初めてデータ登録を行う。
      foreach($arrGroup as $record) {
        // 工程20の方のデータ登録
        $updateData = array(
          'pw_belong_cd'          =>    $_SESSION['companycd'],
          'pw_prod_plan_no'       =>    $datHeader[0]['pd_prod_plan_no'],
          'pw_prod_plan_sub_no'   =>    $record['pd_prod_plan_sub_no'],
          'pw_process_cd'         =>    '20',
          'pw_disp_num'           =>    (int)$record['pd_disp_order'],
          'pw_ed_sub_08'          =>    $record['pd_ed_sub_08'] === '' ? 0 : $record['pd_ed_sub_08'],
          'pw_ed_sub_09'          =>    $record['pd_ed_sub_09'] === '' ? 0 : $record['pd_ed_sub_09'],
          'pw_dimension'          =>    0,
          'pw_weight'             =>    0,
          'pw_quantity'           =>    0,
          'pw_prod_qty'           =>    0,
          'pw_ins_qty'            =>    0,
          'pw_side_num'           =>    0,
          'pw_width_size'         =>    $record['pw_width_size'] === '' ? 0 : $record['pw_width_size'],
          'pw_vertical_size'      =>    0,
          'pw_sheets_num'         =>    0,
          'pw_result_size'        =>    $record['pw_result_size'] === '' ? 0 : $record['pw_result_size'],
          'pw_vert_num'           =>    0,
          'pw_chain_num'          =>    0,
          'pw_group_sign'         =>    0,
          'pw_prod_remark'        =>    '',
          'pw_leaf_create_date'   =>    '',
          'pw_leaf_no'            =>    '',
          'pw_result_number'      =>    0,
          'pw_result_chain'       =>    0,
          'pw_abort_num'          =>    0,
          'pw_prod_finish_date'   =>    '',
          'pw_prod_finish_time'   =>    '',
          'pw_update_at'          =>    self::currentDate(),
          'pw_update_cd'          =>    $_SESSION['usercd'],

        );

        $sth = $dbh->prepare(self::makeInsertSQL('prodplandetailsw', $columnsD));
        self::bindInsertKeys($sth, $columnsD, $updateData);
        $sth->execute();
      }



      if (count($result) <= 0) {
        // 新規のときのみデータ登録
        
        // 工程24のデータ登録
        $updateData = [];
        $dimension = 0;
        foreach ($datDetail as $record) {
          $dimension = self::calcDimension($record['pd_ed_sub_08'], $record['pd_ed_sub_09'], $record['pd_ed_quantity'], 3, 0);
          $updateData = array(
            'pw_belong_cd'          =>    $_SESSION['companycd'],
            'pw_prod_plan_no'       =>    $datHeader[0]['pd_prod_plan_no'],
            'pw_prod_plan_sub_no'   =>    $record['pd_prod_plan_sub_no'],
            'pw_process_cd'         =>    '24',
            'pw_disp_num'           =>    (int)$record['pd_prod_plan_sub_no'],   // 工程24は指示枝番を指定
            'pw_change_sign'        =>    '0',
            'pw_ed_sub_08'          =>    $record['pd_ed_sub_08'] === '' ? 0 : $record['pd_ed_sub_08'],
            'pw_ed_sub_10'          =>    $record['pd_ed_sub_10'],
            'pw_ed_sub_09'          =>    $record['pd_ed_sub_09'] === '' ? 0 : $record['pd_ed_sub_09'],
            'pw_ed_sub_11'          =>    $record['pd_ed_sub_11'],
            'pw_dimension'          =>    $dimension,
            'pw_weight'             =>    $record['pd_weight'] === '' ? 0 : $record['pd_weight'],
            'pw_estimate_no'        =>    $record['pd_e_estimate_no'],
            'pw_estimate_sub_no'    =>    $record['pd_e_estimate_sub_no'],
            'pw_finish_plan_date'   =>    $record['pd_finish_plan_date_h'],
            'pw_customer_cd'        =>    $record['pd_e_customer_cd'],
            'pw_shipper_cd'         =>    $record['pd_e_shipper_cd'],
            'pw_delivery_cd'        =>    $record['pd_e_delivery_cd'],
            'pw_quantity'           =>    $record['pd_ed_quantity'] * 2,
            'pw_prod_qty'           =>    0,
            'pw_ins_qty'            =>    $record['pd_ins_qty'],
            'pw_side_num'           =>    1,
            'pw_width_size'         =>    $record['pw_width_size'] === '' ? 0 : $record['pw_width_size'],
            'pw_vertical_size'      =>    $record['pw_vertical_size'] === '' ? 0 : $record['pw_vertical_size'],
            'pw_sheets_num'         =>    1,
            'pw_result_size'        =>    0,
            'pw_vert_num'           =>    0,
            'pw_chain_num'          =>    0,
            'pw_group_sign'         =>    1,
            'pw_prod_remark'        =>    $record['pd_ed_sub_10'] . $record['pd_ed_sub_11'],
            'pw_leaf_create_date'   =>    '',
            'pw_leaf_no'            =>    '',
            'pw_result_number'      =>    0,
            'pw_result_chain'       =>    0,
            'pw_abort_num'          =>    0,
            'pw_prod_finish_date'   =>    '',
            'pw_prod_finish_time'   =>    '',
            'pw_update_at'          =>    self::currentDate(),
            'pw_update_cd'          =>    $_SESSION['usercd'],
          );

          $sth = $dbh->prepare(self::makeInsertSQL('prodplandetailsw', $columnsD));
          self::bindInsertKeys($sth, $columnsD, $updateData);
          $sth->execute();
        }
        
      }

    } catch (Exception $e) {
      throw $e;
    }

  }


  /***
   * 指定グループ毎のデータ取得
   * prodplandetailsw初期登録用
   */
  private static function getProdplansGroupData($datDetails) {
    $groupData = [];
    $tempStr = '';

    try {
      foreach($datDetails as $record) {
        if (self::checkNotSet($record['pd_disp_order'])) { continue; }

        if (count($groupData) <= 0 && $tempStr === '') {
          $record['pw_width_size'] = (float)$record['pd_ed_sub_09'];
          $record['pw_result_size'] = (float)$record['pd_ed_sub_08'];
          $groupData[$record['pd_disp_order']] = $record;
          $tempStr = $record['pd_disp_order'];

        } else if ($tempStr !== $record['pd_disp_order']) {

          if (array_key_exists($record['pd_disp_order'], $groupData)) {
            // 既に配列があったら無視する。グループNoが順番に入っている確証はないため
            // 横サイズ最大
            $groupData[$record['pd_disp_order']]['pw_width_size'] = $groupData[$record['pd_disp_order']]['pw_width_size'] < (float)$record['pd_ed_sub_09'] ? (float)$record['pd_ed_sub_09'] : $groupData[$record['pd_disp_order']]['pw_width_size'];
            // 縦サイズ合計
            $groupData[$record['pd_disp_order']]['pw_result_size'] += (float)$record['pd_ed_sub_08'];

          } else {
            $groupData[$record['pd_disp_order']] = $record;
            $tempStr = $record['pd_disp_order'];
          }

        } else {
          // 横サイズ最大
          $groupData[$record['pd_disp_order']]['pw_width_size'] = $groupData[$record['pd_disp_order']]['pw_width_size'] < (float)$record['pd_ed_sub_09'] ? (float)$record['pd_ed_sub_09'] : $groupData[$record['pd_disp_order']]['pw_width_size'];
          // 縦サイズ合計
          $groupData[$record['pd_disp_order']]['pw_result_size'] += (float)$record['pd_ed_sub_08'];

        }
      }
      return $groupData;
    } catch (Exception $e) {
      throw $e;
    }
  } 



  // 出荷計画を更新する
  public static function updateShipplans($datHeader, $datdetail) {
    $columnsH = self::getColumnDefs('shipplans');
    $columnsD = self::getColumnDefs('shipplandetails');
    self::markAsHeaderPK($columnsD, 'spd_shipplan_id');
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      foreach ($datHeader as $key => $key) {
        if (self::checkNotSet($datHeader[$key]['sp_id']) === true) {
          $sth = $dbh->prepare('SELECT MAX(sp_id)+1 AS nextid FROM shipplans');
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
          $datHeader[$key]['sp_id'] = isset($result[0]['nextid']) ? $result[0]['nextid'] : 1;
        }
        if (self::checkNotSet($datHeader[$key]['sp_registration_date']) === true) {
          $datHeader[$key]['sp_registration_date'] = self::currentDate();
        }
      }
      $datdetail = self::setHeaderValueToDetails($datHeader, $datdetail, 'sp_id', 'spd_shipplan_id');
      $newspdrowcnt = 0;
      foreach ($datdetail as $key => $key) {
        if (self::checkNotSet($datdetail[$key]['spd_row']) === true) {
          $sth = $dbh->prepare('SELECT MAX(spd_row)+1 AS nextrow FROM shipplandetails WHERE spd_shipplan_id = :spd_shipplan_id');
          $sth->bindValue(':spd_shipplan_id', $datdetail[$key]['spd_shipplan_id'], PDO::PARAM_INT);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
          $datdetail[$key]['spd_row'] = $newspdrowcnt + (isset($result[0]['nextrow']) ? $result[0]['nextrow'] : 1);
          $newspdrowcnt++;
        }
        if (self::checkNotSet($datdetail[$key]['spd_remarks']) === true) {
          $datdetail[$key]['spd_remarks'] = '';
        }
      }
      self::editHeaderAndDetailDB('shipplans', $columnsH, 'shipplandetails', $columnsD, $datHeader, $datdetail, $dbh);
      $dbh->commit();
    } catch (Exception $e) {
      $dbh->rollBack();
      throw $e;
    }
  }

  /**
   * 出荷引継取消
   */
  public static function deleteShipplans($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    $compSDFlg = false;
    $delFlgH = false;
    $delFlgD = false;
    $subNo = '';
    $estNo = '';
    $arNotTargetData = [];  // 同じ納品番号で、今回対象でない明細
    $arDeleteRecord = [];   
    $delMode = false;  // 更新・新規の場合はfalse、削除の場合はtrue
    
    $columnsDD = self::getColumnDefs('estimatedetails');
    self::markAsHeaderPK($columnsDD, 'ed_belong_cd');
    self::markAsHeaderPK($columnsDD, 'ed_estimate_no');
    self::markAsHeaderPK($columnsDD, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsDD, 'ed_shipment_sub_no');
    $columnsD = self::getColumnDefs('t_estimatedetails');
    self::markAsHeaderPK($columnsD, 'ed_belong_cd');
    self::markAsHeaderPK($columnsD, 'ed_estimate_no');
    self::markAsHeaderPK($columnsD, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsD, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsD, 'ed_update_cnt');

    try {
      $dbh->beginTransaction();

      foreach($sdat as $record) {
        // 対象データ取得
        $sth = $dbh->prepare('
        SELECT * FROM statementdetails
        WHERE sd_e_estimate_no = :ESTNO  
        AND sd_statement_sub_no = :STSUBNO  
        AND sd_estimate_sub_no = :ESTSUBNO  
        AND sd_shipment_sub_no = :SHIPNO        
        ;');
        $sth->bindValue(':ESTNO', $record['sd_e_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':STSUBNO', $record['sd_statement_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':ESTSUBNO', $record['sd_estimate_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':SHIPNO', $record['sd_shipment_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {
          // 既存でないレコードは対象になりえないが、エラー処理
          $arDeleteRecord = $result[0];
          // 受注明細更新
          self::cancelEDStatementData($arDeleteRecord, $dbh);
          
          // 該当データ削除
          $sth = $dbh->prepare('
          DELETE FROM statementdetails
          WHERE sd_belong_cd = :BELONGCD AND 
          sd_e_estimate_no = :ESTNO AND 
          sd_statement_sub_no = :STSUBNO AND 
          sd_estimate_sub_no = :ESTSUBNO AND 
          sd_shipment_sub_no = :SHIPNO                
          ;');
          $sth->bindValue(':BELONGCD', $arDeleteRecord['sd_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $arDeleteRecord['sd_e_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':STSUBNO', $arDeleteRecord['sd_statement_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':ESTSUBNO', $arDeleteRecord['sd_estimate_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':SHIPNO', $arDeleteRecord['sd_shipment_sub_no'], PDO::PARAM_STR);
          $sth->execute();

        } 
      }

      // 指定された納品番号の明細の中で、今回のターゲットになっていないレコードを取得。
      $arNotTargetData = self::getDeleteSDRecord($sdat, $dbh);

      if (count($arNotTargetData) <= 0) {
        // 全明細が対象だった場合
        $sth = $dbh->prepare('
        DELETE FROM statement
        WHERE s_belong_cd = :BELONGCD AND
        s_estimate_no = :ESTNO AND 
        s_serial_no = :STSUBNO                 
        ;');
        $sth->bindValue(':BELONGCD', $sdat[0]['sd_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':ESTNO', $sdat[0]['sd_e_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':STSUBNO', $sdat[0]['sd_statement_sub_no'], PDO::PARAM_STR);
        $sth->execute();

        $delMode = true;  // 削除
      }

      $dbh->commit();
      // 登録された納品データをもとにデータを更新
      // $delMode 削除はtrue
      $resp = self::updateLeafship($sdat, $delMode);
    } catch (Exception $e) {
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      $dbh->rollBack();
    }
    echo json_encode($resp);
  }


  /***
   * 出荷予定一覧の受注取消ボタン押下
   * UI側で、出荷済みデータは受注取消不可でこちらまで到達しないようになっている
   */
  public static function cancelEstimateInheriting($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    $subNo = '';
    $estNo = '';
    $arDelData = [];
    $columnsD = self::getColumnDefs('t_estimatedetails');
    $columnsDD = self::getColumnDefs('estimatedetails');
    self::markAsHeaderPK($columnsD, 'ed_belong_cd');
    self::markAsHeaderPK($columnsD, 'ed_estimate_no');
    self::markAsHeaderPK($columnsD, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsD, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsD, 'ed_update_cnt');
    self::markAsHeaderPK($columnsDD, 'ed_belong_cd');
    self::markAsHeaderPK($columnsDD, 'ed_estimate_no');
    self::markAsHeaderPK($columnsDD, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsDD, 'ed_shipment_sub_no');

    try {      
      $dbh->beginTransaction();
      // ①１つの納品データ丸ごとデータ削除になっているかどうかチェック
      foreach ($sdat as $key) {
        // 対象受注番号と納品書発行済みか、もしくは削除対象のデータレコード数を確認。
        if ($subNo === '' && $estNo === '') {
          $subNo = $key['sd_statement_sub_no'];
          $estNo = $key['sd_e_estimate_no'];
          $arDelData[$estNo . $subNo]['del'] = 1;
          if (isset($key['sd_deliv_create_date'])) {
            $arDelData[$estNo . $subNo]['compSD'] = true;
          }
        } else if ($subNo === $key['sd_statement_sub_no'] && $estNo === $key['sd_e_estimate_no']) {
          $arDelData[$estNo . $subNo]['del'] += 1;
        } else {
          $subNo = $key['sd_statement_sub_no'];
          $estNo = $key['sd_e_estimate_no'];
          $arDelData[$estNo . $subNo]['del'] = 1;
          if (isset($key['sd_deliv_create_date'])) {
            $arDelData[$estNo . $subNo]['compSD'] = true;
          }
        }
      }
      foreach ($arDelData as $key => $value) {
        $sth = $dbh->prepare('
        SELECT * FROM statementdetails
        WHERE sd_belong_cd = :BELONGCD AND 
        CONCAT(sd_e_estimate_no, sd_statement_sub_no) = :NO
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':NO', $key, PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        if ($value['del'] === count($result)) {
          $arDelData[$key]['delHeader'] = true;
        }
      }
      // ---------------------------------------------①ここまで
      // ②該当する受注番号&&受注枝番&&出荷枝番のデータレコードが複数あった場合、受注データの削除はしない。
      foreach ($sdat as $key) {
        // 受注データと納品データ
        $sth = $dbh->prepare('
        SELECT * FROM statementdetails
        WHERE sd_belong_cd = :BELONGCD AND 
        sd_e_estimate_no = :ESTNO AND 
        sd_estimate_sub_no = :ESTSUBNO AND 
        sd_shipment_sub_no = :SHIPNO
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':ESTNO', $key['sd_e_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':ESTSUBNO', $key['sd_estimate_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':SHIPNO', $key['sd_shipment_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (count($result) > 0 && count($result) <= 1) {
          // 1:1のデータなので、受注データを削除する。
          $sth = $dbh->prepare('
          DELETE FROM estimatedetails
          WHERE ed_belong_cd = :BELONGCD AND 
          ed_estimate_no = :ESTNO AND 
          ed_estimate_sub_no = :ESTSUBNO AND 
          ed_shipment_sub_no = :SHIPNO 
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $key['sd_e_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':ESTSUBNO', $key['sd_estimate_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':SHIPNO', $key['sd_shipment_sub_no'], PDO::PARAM_STR);
          $sth->execute(); 
        }
        // 納品データは受注が分割の有無にかかわらず削除する
        $sth = $dbh->prepare('
        DELETE FROM statementdetails
        WHERE sd_belong_cd = :BELONGCD AND
        sd_e_estimate_no = :ESTNO AND 
        sd_statement_sub_no = :STSUBNO AND 
        sd_estimate_sub_no = :ESTSUBNO AND 
        sd_shipment_sub_no = :SHIPNO
        ;'); 
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':ESTNO', $key['sd_e_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':STSUBNO', $key['sd_statement_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':ESTSUBNO', $key['sd_estimate_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':SHIPNO', $key['sd_shipment_sub_no'], PDO::PARAM_STR);
        $sth->execute();
      }
      // ③全データが削除対象だった場合、ヘッダデータも削除する。
      foreach ($arDelData as $key => $value) {
        if ($arDelData[$key]['delHeader']) {
          // 該当する受注は分割されているかどうか確認
          $sth = $dbh->prepare('
          SELECT * FROM statement 
          WHERE s_estimate_no
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'] , PDO::PARAM_STR);
          $sth->bindValue(':NO', substr($key, 0, 11), PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($result) <= 1 && count($result) > 0) {
            // 分割されていないので、受注データも削除　受注データが丸ごと消されてもよい場合のみの注意が必要
            $sth = $dbh->prepare('
            DELETE FROM estimate
            WHERE  e_belong_cd = :BELONGCD AND
            e_estimate_no = :NO
            ;');
            $sth->bindValue(':BELONGCD', $_SESSION['companycd'] , PDO::PARAM_STR);
            $sth->bindValue(':NO', substr($key, 0, 11), PDO::PARAM_STR);
            $sth->execute();
          }
          // 該当の納品枝番の納品ヘッダデータを削除
          $sth = $dbh->prepare('
          DELETE FROM statement
          WHERE  s_belong_cd = :BELONGCD AND
          CONCAT(s_estimate_no, s_serial_no) = :NO
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'] , PDO::PARAM_STR);
          $sth->bindValue(':NO', $key, PDO::PARAM_STR);
          $sth->execute();       
        }

        // 出荷リーフデータ削除
        $sth = $dbh->prepare('
        SELECT * FROM leafship
        WHERE l_belong_cd = :BELONGCD AND CONCAT(l_estimate_no, l_statement_sub_no) = :STATEMENTNO      
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':STATEMENTNO',  $key, PDO::PARAM_STR);
        $sth->execute();
        $rsltL = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($rsltL) > 0) {
          $sth = $dbh->prepare('
          DELETE FROM leafship
          WHERE l_belong_cd = :BELONGCD AND CONCAT(l_estimate_no, l_statement_sub_no) = :STATEMENTNO 
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':STATEMENTNO',  $key, PDO::PARAM_STR);
          $sth->execute();
        }

      }


      $dbh->commit();
      echo json_encode($resp);
    } catch (exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }

  /**
   * 見積書登録。見積計算登録
   */
  public static function updateED($datHeader, $datDetail) {
    error_reporting(0);
    $resp = array('succeed' => true, 'msg' => '');
    $bOrderFlg = false;   // 受注日が入ってるかどうか
    $calcNo = [];       // 登録されている見積計算番号

    // DB定義取得
    $columnsH = self::getColumnDefs('estimate');
    $columnsD = self::getColumnDefs('estimatedetails');
    $columnsTH = self::getColumnDefs('t_estimate');
    $columnsTD = self::getColumnDefs('t_estimatedetails');
    $columnsCH = self::getColumnDefs('estimate_calc');
    $columnsCD = self::getColumnDefs('estimatedetails_calc');
    $columnsCC = self::getColumnDefs('customercharge');
    $columnsCP = self::getColumnDefs('customerpost');
    $columnsLS = self::getColumnDefs('leafship');
    
    // PK定義
    self::markAsHeaderPK($columnsH, 'e_belong_cd');
    self::markAsHeaderPK($columnsH, 'e_estimate_no');
    self::markAsHeaderPK($columnsD, 'ed_belong_cd');
    self::markAsHeaderPK($columnsD, 'ed_estimate_no');
    self::markAsHeaderPK($columnsD, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsD, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsCH, 'ec_belong_cd');
    self::markAsHeaderPK($columnsCH, 'ec_estimate_no');
    self::markAsHeaderPK($columnsCH, 'ec_estimatecalc_no');
    self::markAsHeaderPK($columnsCD, 'ecd_belong_cd');
    self::markAsHeaderPK($columnsCD, 'ecd_estimate_no');
    self::markAsHeaderPK($columnsCD, 'ecd_estimatecalc_no');
    self::markAsHeaderPK($columnsCD, 'ecd_estimate_sub_no');
    self::markAsHeaderPK($columnsCC, 'CC_CUSTOMER_ID');
    self::markAsHeaderPK($columnsCC, 'CC_CUSTOMER_CD');
    self::markAsHeaderPK($columnsCC, 'CC_POST_CD');
    self::markAsHeaderPK($columnsCC, 'CC_CHARGE_CD');
    self::markAsHeaderPK($columnsCP, 'CP_CUSTOMER_ID');
    self::markAsHeaderPK($columnsCP, 'CP_CUSTOMER_CD');
    self::markAsHeaderPK($columnsCP, 'CP_POST_CD');
    self::markAsHeaderPK($columnsLS, 'l_belong_cd');
    self::markAsHeaderPK($columnsLS, 'l_leaf_no');

    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();

      $datHeader[0]['e_valid_month'] = 1;
      $datHeader[0]['e_belong_cd'] = $_SESSION['companycd'];
      $datHeader[0]['e_update_at'] = self::currentDate();
      $datHeader[0]['e_update_cd'] = $_SESSION['usercd'];
      // 日付　/を除く8桁にする
      $datHeader[0]['e_estimate_date']  = self::paddingDate($datHeader[0]['e_estimate_date']);
      $datHeader[0]['e_desired_delivery_date']  = self::paddingDate($datHeader[0]['e_desired_delivery_date']);
      $datHeader[0]['e_shipplan_date']  = self::paddingDate($datHeader[0]['e_shipplan_date']);
      // 受注日がはいっていたら
      if (self::checkNotSet($datHeader[0]['e_estimate_date']) === false) {
        $bOrderFlg = true;
      }
      // 納期が入っていなかったら
      if (self::checkNotSet($datHeader[0]['e_desired_delivery_date']) === true) {
        $datHeader[0]['e_desired_delivery_date'] = '';
      }
      // ロゴが手入力されていたらそちらを優先。ロゴ選択がされていなかったらSTONE
      $str = '';
      if ($datHeader[0]['e_logo_02'] !== '') {
        // Default以外のロゴ指定有り
        $str = $datHeader[0]['e_logo_02'];
      } else {
        $str = $datHeader[0]['e_logo_01'];
      }
      // 備考と結合するため、30までパディング
      $str = str_pad($str, 30);
      if (self::checkNotSet($datHeader[0]['e_remark_01']) === false) {
        // 備考があった場合 マルチバイト文字が入ってくるので、パディング時にマルチバイト対応しておくべきだが、できていなかったため、selectする際にデータ調整する。
        $str = $str . str_pad($datHeader[0]['e_remark_01'], 30);
      }
      $datHeader[0]['e_remarks'] = $str;

      // e_shipplan_dateかe_desired_delivery_dateが設定されていれば、leafテーブルに追加する。
      if (self::checkNotSet($datHeader[0]['e_shipplan_date']) === false 
        || self::checkNotSet($datHeader[0]['e_desired_delivery_date']) === false) {

        // 登録用データ配列
        $arData = array(
          'l_belong_cd'             =>  $_SESSION['companycd'],
          'l_leaf_no'               =>  "",
          'l_estimate_no'           =>  $datHeader[0]['e_estimate_no'],
          'l_statement_sub_no'      =>  '0001',
          'l_estimate_sub_no'       =>  '000',
          'l_shipment_sub_no'       =>  '00',
          'l_p_cd'                  =>  $datHeader[0]['ed_p_cd'],
          'l_p_name_supple'         =>  '',
          'l_quantity'              =>  0,
          'l_customer_cd'           =>  $datHeader[0]['e_customer_cd'],
          'l_customer_post_cd'      =>  $datHeader[0]['e_customer_post_cd'],
          'l_customer_charge_cd'    =>  $datHeader[0]['e_customer_charge_cd'],
          'l_salesman_cd'           =>  $datHeader[0]['e_salesman_cd'],
          'l_order_no'              =>  $datHeader[0]['e_customer_order_no'],
          'l_shipper_cd'            =>  $datHeader[0]['e_shipper_cd'],
          'l_stay_cd'               =>  $datHeader[0]['e_stay_cd'],
          'l_delivery_cd'           =>  $datHeader[0]['e_delivery_cd'],
          'l_tc_short_name'         =>  $datHeader[0]['e_tc_short_name'],
          'l_title'                 =>  $datHeader[0]['e_title'],
          'l_handorver'             =>  $datHeader[0]['e_remarks'],
          'l_start_plan_date'       =>  $datHeader[0]['e_shipplan_date'] ? $datHeader[0]['e_shipplan_date'] : $datHeader[0]['e_desired_delivery_date'],
          'l_start_plan_time'       =>  '0000',
          'l_interval'              =>  60,   // リーフ表示用
          'l_warehouse_cd'          =>  '',
          'l_org_leaf_no'           =>  '',
          'l_start_date'            =>  '',
          'l_start_time'            =>  '',
          'l_finish_date'           =>  '',
          'l_finish_time'           =>  '',
          'l_remarks'               =>  '',
          'l_deadline'              =>  $datHeader[0]['e_shipplan_date'] ? $datHeader[0]['e_shipplan_date'] : $datHeader[0]['e_desired_delivery_date'],
        );     

        $sth = $dbh->prepare('
        SELECT * FROM leafship
        WHERE l_estimate_no = :ESTNO AND 
        l_estimate_sub_no = :ESTSUBNO AND 
        l_shipment_sub_no = :SHIPSUBNO
        ;');
        $sth->bindValue(':ESTNO', $datHeader[0]['e_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':ESTSUBNO', '000', PDO::PARAM_STR);
        $sth->bindValue(':SHIPSUBNO', '00', PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
 
        if (count($result) > 0) {
          // 既存データを更新
          $arData['l_leaf_no'] = $result[0]['l_leaf_no'];
          $sth = $dbh->prepare(self::makeUpdateSQL('leafship', $columnsLS));
          self::bindUpdateKeys($sth, $columnsLS, $arData);
          $sth->execute();
        } else {
          // 新規追加
          // リーフ番号取得
          $lShipNo = '';
          $sth = $dbh->prepare('
          SELECT MAX(l_leaf_no) AS maxno
          FROM leafship
          WHERE l_leaf_no LIKE :TODAYDATE
          ;');
          $sth->bindValue(':TODAYDATE', 'L' . substr(self::currentDate(), 2) . '%', PDO::PARAM_STR);
          $sth->execute();
          $rsltLNo = $sth->fetchAll(PDO::FETCH_ASSOC);

          if ($lShipNo === '') {
            // リーフ番号採番               
            if (self::checkNotSet($rsltLNo[0]['maxno']) !== true) {
              $lShipNo = 'L' . (substr($rsltLNo[0]['maxno'], 1) + 1);
            } else {
              $lShipNo = 'L' . substr(self::currentDate(), 2) . '001';
            }
          } else {
            $lShipNo = 'L' . (substr($lShipNo, 1) + 1);
          }

          $arData['l_leaf_no'] = $lShipNo;

          $sth = $dbh->prepare(self::makeInsertSQL('leafship', $columnsLS));
          self::bindInsertKeys($sth, $columnsLS, $arData);
          $sth->execute();
        }
      }

      // 客先担当者が入力されていたら、その担当者が登録されているか確認し、なければcdを振って登録してcdを取得。あれば単にcdを取得。
      //客先担当者の入力有無確認
      if ($datHeader[0]['e_customer_sales_name']) {
        $strSql = 'SELECT CC_CHARGE_CD, CC_POST_CD FROM customercharge 
                   WHERE CC_CUSTOMER_CD = :CUSTOMERCD AND CC_CHARGE_NAME = :CHARGENAME AND 
                   CC_POST_CD = :POSTCD
        ';
        $sth = $dbh->prepare($strSql);
        $sth->bindValue(':CUSTOMERCD', $datHeader[0]['e_customer_cd'], PDO::PARAM_STR);
        $sth->bindValue(':CHARGENAME', $datHeader[0]['e_customer_sales_name'], PDO::PARAM_STR);
        // 客先部署CDの入力確認
        if ($datHeader[0]['e_customer_post_cd']) {
          $sth->bindValue(':POSTCD', $datHeader[0]['e_customer_post_cd'], PDO::PARAM_STR);
          $isECustomerPostCd = true;
        } else {
          $sth->bindValue(':POSTCD', '9999', PDO::PARAM_STR);
        }
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        //customerchargeに登録（該当レコード）がなければ新規登録
        if (!count($result)) {
          if (!$isECustomerPostCd) {
            $strSql = 'SELECT CP_POST_CD FROM customerpost WHERE CP_CUSTOMER_CD = :CUSTOMERCD AND CP_POST_CD = "9999";';
            $sth = $dbh->prepare($strSql);
            $sth->bindValue(':CUSTOMERCD', $datHeader[0]['e_customer_cd'], PDO::PARAM_STR);
            $sth->execute();
            $result = $sth->fetchAll(PDO::FETCH_ASSOC);

            if(!count($result)){
              $strSql = 'SELECT * FROM customer WHERE C_CUSTOMER_CD = :CUSTOMERCD;';
              $sth = $dbh->prepare($strSql);
              $sth->bindValue(':CUSTOMERCD', $datHeader[0]['e_customer_cd'], PDO::PARAM_STR);
              $sth->execute();
              $result = $sth->fetchAll(PDO::FETCH_ASSOC);
              $customerPost = array();
              $customerPost['CP_CUSTOMER_ID'] = $result[0]['C_CUSTOMER_ID'];
              $customerPost['CP_CUSTOMER_CD'] = $result[0]['C_CUSTOMER_CD'];
              $customerPost['CP_POST_CD'] = '9999';
              $customerPost['CP_POST_NAME'] = '';
              $customerPost['CP_QUOTATION_TYPE'] ='';
              $customerPost['CP_POST_SIGN_TYPE'] ='';
              $customerPost['CP_ADDRESS_01'] = $result[0]['C_ADDRESS_01'];
              $customerPost['CP_ADDRESS_02'] = $result[0]['C_ADDRESS_02'];
              $customerPost['CP_TEL'] = $result[0]['C_TEL'];
              $customerPost['CP_FAX'] = $result[0]['C_FAX'];
              $customerPost['CP_ADDRESS_NO'] = $result[0]['C_ADDRESS_NO'];
              $customerPost['CP_TYPE_CONTINUE'] = '0';
              $customerPost['CP_UPDATE_AT'] = self::currentDate();
              $customerPost['CP_UPDATE_CD'] = '999999';
               //新規登録
              $sth = $dbh->prepare(self::makeInsertSQL('customerpost', $columnsCP));
              self::bindInsertKeys($sth, $columnsCP, $customerPost);
              $sth->execute();
            }
          }
          $customerCharge = array();

          $customerCharge['CC_CUSTOMER_ID'] = $datHeader[0]['e_customer_cd'];
          $customerCharge['CC_CUSTOMER_CD'] = $datHeader[0]['e_customer_cd'];
          if ($isECustomerPostCd) {
            $customerCharge['CC_POST_CD'] = $datHeader[0]['e_customer_post_cd'];
          } else {
            $customerCharge['CC_POST_CD'] = '9999';
          }
          $strSql = 'SELECT MAX(CC_CHARGE_CD)+1 as CC_CHARGE_CD FROM customercharge 
                    WHERE CC_CUSTOMER_CD = :CUSTOMERCD AND CC_POST_CD = :POSTCD;';
          $sth = $dbh->prepare("$strSql");
          $sth->bindValue(':CUSTOMERCD', $datHeader[0]['e_customer_cd'], PDO::PARAM_STR);

          if ($isECustomerPostCd) {
            $sth->bindValue(':POSTCD', $datHeader[0]['e_customer_post_cd'], PDO::PARAM_STR);
          } else {
            $sth->bindValue(':POSTCD', '9999', PDO::PARAM_STR);
          }
          $sth->execute();

          $ChargeCodeOfresult = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (!$ChargeCodeOfresult[0]['CC_CHARGE_CD']) {
            //まだcustomerchargeテーブルに一件も登録がない場合用
            $ChargeCodeOfresult[0]['CC_CHARGE_CD'] = '001';
          }
          $customerCharge['CC_CHARGE_CD'] =  str_pad($ChargeCodeOfresult[0]['CC_CHARGE_CD'], 3, '0', STR_PAD_LEFT);
          $customerCharge['CC_CHARGE_NAME'] =  $datHeader[0]['e_customer_sales_name'];
          $customerCharge['CC_BOM_TYPE'] = '';
          $customerCharge['CC_E_MAIL'] = '';
          $customerCharge['CC_TEL1'] = '';
          $customerCharge['CC_TEL2'] = '';
          $customerCharge['CC_TYPE_CONTINUE'] = '0';
          $customerCharge['CC_UPDATE_AT'] = self::currentDate();
          $customerCharge['CC_UPDATE_CD'] = '999999';
          //新規登録
          $sth = $dbh->prepare(self::makeInsertSQL('customercharge', $columnsCC));
          self::bindInsertKeys($sth, $columnsCC, $customerCharge);
          $sth->execute();
          //登録したCDを取得
          $strSql = 'SELECT CC_CUSTOMER_ID,CC_CUSTOMER_CD,CC_CHARGE_CD,CC_POST_CD FROM customercharge WHERE CC_CHARGE_CD = (SELECT Max(CC_CHARGE_CD) FROM customercharge WHERE
                     CC_CUSTOMER_CD = :CUSTOMERCD1  AND CC_POST_CD = :POSTCD1) AND CC_CUSTOMER_CD = :CUSTOMERCD2 AND CC_POST_CD = :POSTCD2;';
          $sth = $dbh->prepare("$strSql");
          $sth->bindValue(':CUSTOMERCD1', $datHeader[0]['e_customer_cd'], PDO::PARAM_STR);
          $sth->bindValue(':CUSTOMERCD2', $datHeader[0]['e_customer_cd'], PDO::PARAM_STR);
          if ($isECustomerPostCd) {
            $sth->bindValue(':POSTCD1', $datHeader[0]['e_customer_post_cd'], PDO::PARAM_STR);
            $sth->bindValue(':POSTCD2', $datHeader[0]['e_customer_post_cd'], PDO::PARAM_STR);
          } else {
            $sth->bindValue(':POSTCD1', '9999', PDO::PARAM_STR);
            $sth->bindValue(':POSTCD2', '9999', PDO::PARAM_STR);
          }
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        }
        $datHeader[0]['e_customer_charge_cd'] = $result[0]['CC_CHARGE_CD'];
        $datHeader[0]['e_customer_post_cd'] = $result[0]['CC_POST_CD'];
      }
      
      // ヘッダ
      $sth = $dbh->prepare('
      SELECT * FROM estimate 
      WHERE e_belong_cd = :BELONGCD AND 
      e_estimate_no = :ESTNO
      ;');
      $sth->bindValue('BELONGCD', $datHeader[0]['e_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue('ESTNO', $datHeader[0]['e_estimate_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($result) > 0) {
        // 既存
        $datHeader[0]['e_update_cnt'] = $result[0]['e_update_cnt'] + 1;
        $sth = $dbh->prepare(self::makeUpdateSQL('estimate', $columnsH));
        self::bindValueToUpdate($sth, $columnsH, $datHeader[0]);
        $sth->execute();
        // history
        $sth = $dbh->prepare(self::makeInsertSQL('t_estimate', $columnsTH));
        self::bindInsertKeys($sth, $columnsTH, $datHeader[0]);
        $sth->execute();

      } else {
        // 新規
        $datHeader[0]['e_update_cnt'] = 0;
        $sth = $dbh->prepare(self::makeInsertSQL('estimate', $columnsH));
        self::bindInsertKeys($sth, $columnsH, $datHeader[0]);
        $sth->execute();
        // history;
        $sth = $dbh->prepare(self::makeInsertSQL('t_estimate', $columnsTH));
        self::bindInsertKeys($sth, $columnsTH, $datHeader[0]);
        $sth->execute();
      }

      // 該当受注Noの明細一覧を取得
      $sth = $dbh->prepare('
      SELECT * FROM estimatedetails
      WHERE ed_belong_cd = :BELONGCD AND 
      ed_estimate_no = :ESTNO 
      ;');
      $sth->bindValue('BELONGCD', $datHeader[0]['e_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue('ESTNO', $datHeader[0]['e_estimate_no'], PDO::PARAM_STR);
      $sth->execute();
      $edList = $sth->fetchAll(PDO::FETCH_ASSOC);

      // 登録データに存在しないデータを抽出
      $notExistList = array_filter($edList, function ($edItem) use ($datDetail) {
        $isExist = false;
        foreach ($datDetail as $record) {
          if ($edItem['ed_estimate_sub_no'] == $record['ed_estimate_sub_no']) {
            $isExist = true;
          }
        }
        return !$isExist;
      });

      // 登録データに無い既存データは削除（行削除用の対応）
      foreach ($notExistList as $notExistItem) {
        $sth = $dbh->prepare('
        DELETE FROM estimatedetails
        WHERE ed_belong_cd = :BELONGCD AND 
        ed_estimate_no = :ESTNO AND 
        ed_estimate_sub_no = :SUBNO AND
        ed_shipment_sub_no = :SHIPNO
        ;');
        $sth->bindValue('BELONGCD', $notExistItem['ed_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue('ESTNO', $notExistItem['ed_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue('SUBNO', $notExistItem['ed_estimate_sub_no'], PDO::PARAM_STR);
        $sth->bindValue('SHIPNO', $notExistItem['ed_shipment_sub_no'], PDO::PARAM_STR);
        $sth->execute();

        $sth = $dbh->prepare('
        DELETE FROM t_estimatedetails
        WHERE ed_belong_cd = :BELONGCD AND 
        ed_estimate_no = :ESTNO AND 
        ed_estimate_sub_no = :SUBNO AND
        ed_shipment_sub_no = :SHIPNO
        ;');
        $sth->bindValue('BELONGCD', $notExistItem['ed_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue('ESTNO', $notExistItem['ed_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue('SUBNO', $notExistItem['ed_estimate_sub_no'], PDO::PARAM_STR);
        $sth->bindValue('SHIPNO', $notExistItem['ed_shipment_sub_no'], PDO::PARAM_STR);
        $sth->execute();
      }

      // 明細
      foreach ($datDetail as $record) {
        $record['ed_belong_cd'] = $datHeader[0]['e_belong_cd'];
        $record['ed_update_at'] = $datHeader[0]['e_update_at'];
        $record['ed_update_cd'] = $datHeader[0]['e_update_cd'];
        // ヘッダ保持データだが、実際は明細持ちのデータを移行
        $record['e_delivery_timing'] = $datHeader[0]['e_delivery_timing'];
        // 目合データ名を変更
        $record['ed_sub_03'] = isset($record['ed_sub_03_str']) ? $record['ed_sub_03_str'] : '';

        // データ取込時、数量が空の場合0を自動でセット
        $record['ed_quantity'] = self::checkNotSet($record['ed_quantity']) === true ? 0 : $record['ed_quantity'];

        // if (self::checkNotSet($record['ed_prod_plan_sign']))
        if (self::checkNotSet($record['ed_estimate_no']) === true) {
          $record['ed_estimate_no'] = $datHeader[0]['e_estimate_no'];
        }
        if (self::checkNotSet($record['ed_shipment_sub_no']) === true || $record['ed_shipment_sub_no'] === '00') {
          $record['ed_shipment_sub_no'] = '01';
        }

        // 明細の納品日が空の場合はヘッダの納品日をセット
        if (self::checkNotSet($record['ed_desired_delivery_date']) === true) {
          // 出荷予定日に変更　出荷予定日も納品予定日も帳票に必要ということなので、ヘッダデータカラム追加したため。
          $record['ed_desired_delivery_date'] = $datHeader[0]['e_shipplan_date'];
        } else if (self::paddingDate($record['ed_desired_delivery_date']) !== $datHeader[0]['e_shipplan_date']) {
          if ($datHeader[0]['isDirty']) {
            // ヘッダのデータ変更
            $record['ed_desired_delivery_date'] = $datHeader[0]['e_shipplan_date'];
          } else {
            $record['ed_desired_delivery_date']  = self::paddingDate($record['ed_desired_delivery_date']);
          }
        } else {
          $record['ed_desired_delivery_date']  = self::paddingDate($record['ed_desired_delivery_date']);
        }
        if (self::checkNotSet($record['ed_unit_eval']) === true) {
          // 在庫単位が未設定やったら、取引単位をセット
          $record['ed_unit_eval'] = $record['ed_unit_tran'];
        }
        // 納品先も納品日と同様（2023/1/19：納入先CDはセットされた値で毎回更新するように変更）
        $record['ed_delivery_cd'] = $datHeader[0]['e_delivery_cd'];
        // if (self::checkNotSet($record['ed_delivery_cd']) === true) {
        //   $record['ed_delivery_cd'] = $datHeader[0]['e_delivery_cd'];
        // }
        // 各ステータスフラグ 初期値セット
        if (self::checkNotSet($record['ed_prod_plan_sign']) === true) {
          $record['ed_prod_plan_sign'] = '0';
        }
        // ed_inventory_signが入ってない場合は、棚卸対象(1)をセット
        if (self::checkNotSet($record['ed_inventory_type']) === true) {
          $record['ed_inventory_type'] = '1';
        }
        if (self::checkNotSet($record['ed_ship_status_sign']) === true) {
          // 出荷引継をしていないケースは空文字とする
          // $record['ed_ship_status_sign'] = '0';
          $record['ed_ship_status_sign'] = '';
        }
        if (self::checkNotSet($record['ed_delivery_sign']) === true) {
          $record['ed_delivery_sign'] = '0';
        }
        if (self::checkNotSet($record['ed_bill_sign']) === true) {
          $record['ed_bill_sign'] = '0';
        }
        if (self::checkNotSet($record['ed_payment_sign']) === true) {
          $record['ed_payment_sign'] = '0';
        }           
        if (self::checkNotSet($record['calcno']) === false) {
          // 見積計算番号
          $record['ed_sub_07'] = $record['calcno'];
        } else {
          $record['ed_sub_07'] = '';
        }
        $record['ed_sub_06'] = (($record['ed_sub_04'] === '') || ($record['ed_sub_05'] === '')) ? '' : $record['ed_sub_06'];
        if (self::checkNotSet($record['e_delivery_timing']) === false) {
          // 納品時期が入ってたら登録 1:頃   2:まで  3:指定  
          $record['ed_type_02'] = $record['e_delivery_timing'];
        } else {  // defaultは2のまで
          $record['ed_type_02'] = '2';
        }
        // 補助数値項目　固定4
        for ($i = 0; $i < 4; $i++ ) {
          $str = 'ed_sub_num_' . sprintf('%02d', $i);
          if (self::checkNotSet($record[$str]) === true) {
            $record[$str] = 0;
          }
        }
        // 加工内容が空だったら、なしをセットする
        if (self::checkNotSet($record['ed_parrangement_cd'])) {
          $record['ed_parrangement_cd'] = '001';
        }
        $sth = $dbh->prepare('
        SELECT * FROM estimatedetails
        WHERE ed_belong_cd = :BELONGCD AND 
        ed_estimate_no = :ESTNO AND 
        ed_estimate_sub_no = :SUBNO AND
        ed_shipment_sub_no = :SHIPNO
        ;');
        $sth->bindValue('BELONGCD', $record['ed_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue('ESTNO', $record['ed_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue('SUBNO', $record['ed_estimate_sub_no'], PDO::PARAM_STR);
        $sth->bindValue('SHIPNO', $record['ed_shipment_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {
          // 既存
          // もし、データ引継が既に行われていた場合は、編集不可 レコード毎に判断
          if ($record['isDirty'] && ($result[0]['ed_prod_plan_sign'] > 0 || $result[0]['ed_ship_status_sign'] > 0 )) {
            $resp['msg'] = '既存データはすでに引継ぎ済みなので、編集することができません。';
            $resp['succeed'] = false;
            echo json_encode($resp);
            return;
          }
          $record['ed_update_cnt'] = $result[0]['ed_update_cnt'] + 1;
          $sth = $dbh->prepare(self::makeUpdateSQL('estimatedetails', $columnsD));
          self::bindValueToUpdate($sth, $columnsD, $record);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_estimatedetails', $columnsTD));
          self::bindInsertKeys($sth, $columnsTD, $record);
          $sth->execute();
        } else {
          // 新規
          $record['ed_update_cnt'] = 0;
          $sth = $dbh->prepare(self::makeInsertSQL('estimatedetails', $columnsD));
          self::bindInsertKeys($sth, $columnsD, $record);
          $sth->execute();
          // history
          $sth = $dbh->prepare(self::makeInsertSQL('t_estimatedetails', $columnsTD));
          self::bindInsertKeys($sth, $columnsTD, $record);
          $sth->execute();

        }

        // 受払予定データ更新
        if ($bOrderFlg) {
          // 品名マスタ
          $sth = $dbh->prepare('
          SELECT * FROM product
          WHERE p_cd = :PCD
          ;');
          $sth->bindValue(':PCD', $record['ed_p_cd'], PDO::PARAM_STR);
          $sth->execute();
          $resultP = $sth->fetchAll(PDO::FETCH_ASSOC);

          $record['ed_customer_cd'] = $datHeader[0]['e_customer_cd'];
          $record['ed_customer_post_cd'] = $datHeader[0]['e_customer_post_cd'];
          $record['ed_inventory_type'] = $resultP[0]['p_type_01'];
          self::issueStockPlan('ED', $datHeader[0]['e_estimate_date'], $record, $dbh);
        }
      }

      // 見積計算データの更新
      /****
       * 計算番号が空だった場合は、キーが空になるため、データを更新・登録しない
       * 1番はじめにデータが空の物をはじく
       */
      $strCalcNo = '';
      foreach ($datDetail as $rec) {
        if ($rec['calcno'] === '' || $rec['calcno'] === null) {
          // continue;
        } else if ($strCalcNo === '' && $rec['calcno'] !== '') {
          $strCalcNo = $rec['calcno'];
        } else if ($strCalcNo !== $rec['calcno']){
          $strCalcNo .= ',' . $rec['calcno'];
        } 
        $sth = $dbh->prepare('
        SELECT * FROM estimatedetails_calc
        WHERE ecd_belong_cd = :BELONGCD AND 
        ecd_estimate_no = :ESTNO AND 
        ecd_estimatecalc_no = :CALCNO AND 
        ecd_estimate_sub_no = :SUBNO         
        ;');
        $sth->bindValue(':BELONGCD', $rec['ed_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':ESTNO', $rec['ed_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':CALCNO', $rec['calcno'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $rec['ed_estimate_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $resultDC = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($resultDC) > 0) {
          // あったら寸法と受注数は更新をかける
          $sth = $dbh->prepare('
          UPDATE estimatedetails_calc
          SET ecd_ed_sub_08 = :SUB08,
          ecd_ed_sub_10 = :SUB10,
          ecd_ed_sub_09 = :SUB09,
          ecd_ed_sub_11 = :SUB11,
          ecd_quantity = :QTY,
          ecd_remarks = :EDUNIT
          WHERE ecd_belong_cd = :BELONGCD AND 
          ecd_estimate_no = :ESTNO AND 
          ecd_estimatecalc_no = :CALCNO AND 
          ecd_estimate_sub_no = :SUBNO   
          ;');
          $sth->bindValue(':SUB08', $rec['ed_sub_08'], PDO::PARAM_STR);
          $sth->bindValue(':SUB10', self::checkNotSet($rec['ed_sub_10']) === false ? '' : $rec['ed_sub_10'], PDO::PARAM_STR);
          $sth->bindValue(':SUB09', $rec['ed_sub_09'], PDO::PARAM_STR);
          $sth->bindValue(':SUB11', self::checkNotSet($rec['ed_sub_11']) === false ? '' : $rec['ed_sub_11'], PDO::PARAM_STR);
          $sth->bindValue(':QTY', $rec['ed_quantity'], PDO::PARAM_STR);
          $sth->bindValue(':EDUNIT', $rec['ed_unit_tran'], PDO::PARAM_STR);
          $sth->bindValue(':BELONGCD', $rec['ed_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $rec['ed_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':CALCNO', $rec['calcno'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', $rec['ed_estimate_sub_no'], PDO::PARAM_STR);
          $sth->execute();
        } else {
          // 他の計算番号で登録されていたら削除
          $sth = $dbh->prepare('
          SELECT * FROM estimatedetails_calc
          WHERE ecd_belong_cd = :BELONGCD AND 
          ecd_estimate_no = :ESTNO AND ecd_estimate_sub_no = :SUBNO AND ecd_estimatecalc_no <> :CALCNO   
          ;');
          $sth->bindValue(':BELONGCD', $rec['ed_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $rec['ed_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', $rec['ed_estimate_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':CALCNO', $rec['calcno'], PDO::PARAM_STR);
          $sth->execute();
          $resultEx = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($resultEx) > 0) {
            foreach ($resultEx as $recex) {
              $sth = $dbh->prepare('
              DELETE FROM estimatedetails_calc
              WHERE ecd_belong_cd = :BELONGCD AND 
              ecd_estimate_no = :ESTNO AND ecd_estimatecalc_no = :CALCNO AND ecd_estimate_sub_no = :SUBNO   
              ;');
              $sth->bindValue(':BELONGCD', $recex['ecd_belong_cd'], PDO::PARAM_STR);
              $sth->bindValue(':ESTNO', $recex['ecd_estimate_no'], PDO::PARAM_STR);
              $sth->bindValue(':CALCNO', $recex['ecd_estimatecalc_no'], PDO::PARAM_STR);
              $sth->bindValue(':SUBNO', $recex['ecd_estimate_sub_no'], PDO::PARAM_STR);
              $sth->execute();              
            }
          } 
          if ($rec['calcno'] === '' || $rec['calcno'] === null) {
            // データが入力→削除へのステータス変更の場合、明細データの方は削除処理が走らなくなってしまうため、データ削除後に、見積計算番号の有無をチェックする。
            continue;
          }

          // 仕様追加　見積リピート時は、見積計算データも継続させる
          if (self::checkNotSet($datHeader[0]['e_repeat_estimate_no']) === false ) {
            $sth = $dbh->prepare('
            SELECT * FROM estimatedetails_calc
            WHERE ecd_estimate_no = :ESTNO AND 
            ecd_estimatecalc_no = :CALCNO AND
            ecd_estimate_sub_no = :SUBNO
            ;');
            $sth->bindValue(':ESTNO', $datHeader[0]['e_repeat_estimate_no'], PDO::PARAM_STR);
            $sth->bindValue(':CALCNO', $rec['calcno'], PDO::PARAM_STR);
            $sth->bindValue(':SUBNO', $rec['ed_estimate_sub_no'], PDO::PARAM_STR);
            $sth->execute();
            $resultCalc = $sth->fetchAll(PDO::FETCH_ASSOC);
            if (count($resultCalc) > 0) {
              $arr = array(
                'ecd_belong_cd' => $_SESSION['companycd'],
                'ecd_estimate_no' => $datHeader[0]['e_estimate_no'],
                'ecd_estimatecalc_no' => $rec['calcno'],
                'ecd_estimate_sub_no' => $rec['ed_estimate_sub_no'],
                'ecd_ed_sub_08' => $resultCalc[0]['ecd_ed_sub_08'],
                'ecd_ed_sub_10' => $resultCalc[0]['ecd_ed_sub_10'],
                'ecd_ed_sub_09' => $resultCalc[0]['ecd_ed_sub_09'],
                'ecd_ed_sub_11' => $resultCalc[0]['ecd_ed_sub_11'],
                'ecd_quantity' => $resultCalc[0]['ecd_quantity'],
                'ecd_cut_cost' => $resultCalc[0]['ecd_cut_cost'],
                'ecd_process_01' => $resultCalc[0]['ecd_process_01'],
                'ecd_process_02' => $resultCalc[0]['ecd_process_02'],
                'ecd_process_03' => $resultCalc[0]['ecd_process_03'],
                'ecd_process_04' => $resultCalc[0]['ecd_process_04'],
                'ecd_process_05' => $resultCalc[0]['ecd_process_05'],
                'ecd_proc_cost' => $resultCalc[0]['ecd_proc_cost'],
                'ecd_fix_unit_cost' => $resultCalc[0]['ecd_fix_unit_cost'],
                'ecd_remarks' => $resultCalc[0]['ecd_remarks'],
                'ecd_update_at' => self::currentDate(),
                'ecd_update_cd' => $_SESSION['usercd'],          
              );
            } else {
              // リピートなのに、見積計算データがなかった場合は、新規データ追加とする。   
              $arr = array(
                'ecd_belong_cd' => $_SESSION['companycd'],
                'ecd_estimate_no' => $datHeader[0]['e_estimate_no'],
                'ecd_estimatecalc_no' => $rec['calcno'],
                'ecd_estimate_sub_no' => $rec['ed_estimate_sub_no'],
                'ecd_ed_sub_08' => $rec['ed_sub_08'],
                'ecd_ed_sub_10' => $rec['ed_sub_10'],
                'ecd_ed_sub_09' => $rec['ed_sub_09'],
                'ecd_ed_sub_11' => $rec['ed_sub_11'],
                'ecd_quantity' => $rec['ed_quantity'],
                'ecd_cut_cost' => 0,
                'ecd_process_01' => 0,
                'ecd_process_02' => 0,
                'ecd_process_03' => 0,
                'ecd_process_04' => 0,
                'ecd_process_05' => 0,
                'ecd_proc_cost' => 0,
                'ecd_fix_unit_cost' => 0,
                'ecd_remarks' => $rec['ed_unit_tran'],
                'ecd_update_at' => self::currentDate(),
                'ecd_update_cd' => $_SESSION['usercd'],          
              );
            }
          } else {
            // 新規登録   
            $arr = array(
              'ecd_belong_cd' => $_SESSION['companycd'],
              'ecd_estimate_no' => $datHeader[0]['e_estimate_no'],
              'ecd_estimatecalc_no' => $rec['calcno'],
              'ecd_estimate_sub_no' => $rec['ed_estimate_sub_no'],
              'ecd_ed_sub_08' => $rec['ed_sub_08'],
              'ecd_ed_sub_10' => $rec['ed_sub_10'],
              'ecd_ed_sub_09' => $rec['ed_sub_09'],
              'ecd_ed_sub_11' => $rec['ed_sub_11'],
              'ecd_quantity' => $rec['ed_quantity'],
              'ecd_cut_cost' => 0,
              'ecd_process_01' => 0,
              'ecd_process_02' => 0,
              'ecd_process_03' => 0,
              'ecd_process_04' => 0,
              'ecd_process_05' => 0,
              'ecd_proc_cost' => 0,
              'ecd_fix_unit_cost' => 0,
              'ecd_remarks' => $rec['ed_unit_tran'],
              'ecd_update_at' => self::currentDate(),
              'ecd_update_cd' => $_SESSION['usercd'],          
            );
          }
          $sth = $dbh->prepare(self::makeInsertSQL('estimatedetails_calc', $columnsCD));
          self::bindInsertKeys($sth, $columnsCD, $arr);
          $sth->execute();          
        }
      }

      // 見積計算ヘッダ
      // 今の見積計算番号のみを保持。空の場合は配列のlength=0
      $arCalcNo = ($strCalcNo !== '') ? explode(',', $strCalcNo) : [];
      $sth = $dbh->prepare('
      SELECT * FROM estimate_calc
      WHERE ec_belong_cd = :BELONGCD AND
      ec_estimate_no = :ESTNO  ORDER BY ec_estimatecalc_no ASC
      ;');
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':ESTNO', $datHeader[0]['e_estimate_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($result) > 0) {
        // 既存
        if (count($arCalcNo) > 0) {
          // 見積明細データの編集・更新のケース
          // 今の入力値以外のデータは削除する
          $sth = $dbh->prepare('
          DELETE FROM estimate_calc
          WHERE ec_belong_cd = :BELONGCD AND
          ec_estimate_no = :ESTNO AND 
          ec_estimatecalc_no <> ( :CALCNO ) 
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $datHeader[0]['e_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':CALCNO', $strCalcNo, PDO::PARAM_STR);
          $sth->execute();
          // 新規入力値で更新
          for ($i = 0; $i < count($arCalcNo); $i++ ) {
            $sth = $dbh->prepare('
            SELECT * FROM estimate_calc
            WHERE ec_belong_cd = :BELONGCD AND
            ec_estimate_no = :ESTNO AND 
            ec_estimatecalc_no = :CALCNO ORDER BY ec_estimatecalc_no ASC
            ;');
            $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
            $sth->bindValue(':ESTNO', $datHeader[0]['e_estimate_no'], PDO::PARAM_STR);
            $sth->bindValue(':CALCNO', $arCalcNo[$i], PDO::PARAM_STR);
            $sth->execute();
            $result = $sth->fetchAll(PDO::FETCH_ASSOC);
            if (count($result) > 0) {
              // データ編集
              foreach($datDetail as $recUp) {
                if ($recUp['calcno'] === $arCalcNo[$i]) {
                  $sth = $dbh->prepare('
                  UPDATE estimate_calc
                  SET ec_p_cd = :PCD,
                  ec_ed_sub_01 = :SUB01,
                  ec_ed_sub_02 = :SUB02,
                  ec_ed_sub_03 = :SUB03,
                  ec_ed_sub_04 = :SUB04,
                  ec_ed_sub_05 = :SUB05,
                  ec_ed_sub_06 = :SUB06,
                  ec_ed_sub_12 = :SUB12,
                  ec_ed_sub_13 = :SUB13            
                  WHERE ec_belong_cd = :BELONGCD AND
                  ec_estimate_no = :ESTNO AND 
                  ec_estimatecalc_no = :CALCNO
                  ;');
                  $sth->bindValue(':PCD', $recUp['ed_p_cd'], PDO::PARAM_STR);
                  $sth->bindValue(':SUB01', $recUp['ed_sub_01'], PDO::PARAM_STR);
                  $sth->bindValue(':SUB02', $recUp['ed_sub_02'], PDO::PARAM_STR);
                  $sth->bindValue(':SUB03', $recUp['ed_sub_03'], PDO::PARAM_STR);
                  $sth->bindValue(':SUB04', $recUp['ed_sub_04'], PDO::PARAM_STR);
                  $sth->bindValue(':SUB05', $recUp['ed_sub_05'], PDO::PARAM_STR);
                  $sth->bindValue(':SUB06', $recUp['ed_sub_06'], PDO::PARAM_STR);
                  $sth->bindValue(':SUB12', $recUp['ed_sub_12'], PDO::PARAM_STR);
                  $sth->bindValue(':SUB13', $recUp['ed_sub_13'], PDO::PARAM_STR);
                  $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
                  $sth->bindValue(':ESTNO', $datHeader[0]['e_estimate_no'], PDO::PARAM_STR);
                  $sth->bindValue(':CALCNO', $arCalcNo[$i], PDO::PARAM_STR);
                  $sth->execute();
                  break;
                }
              }
            } else {
              // 新規追加
              foreach ($datDetail as $recUp) {
                if ($recUp['calcno'] === $arCalcNo[$i]) {
                  $arrHeader = array(
                    'ec_belong_cd' => $_SESSION['companycd'],
                    'ec_estimate_no' => $recUp['ed_estimate_no'],
                    'ec_estimatecalc_no' => $recUp['ed_sub_07'],
                    'ec_p_cd' =>  $recUp['ed_p_cd'],
                    'ec_ed_sub_01' =>  $recUp['ed_sub_01'],
                    'ec_ed_sub_02' =>  $recUp['ed_sub_02'],
                    'ec_ed_sub_03' =>  $recUp['ed_sub_03'],
                    'ec_ed_sub_04' =>  $recUp['ed_sub_04'],
                    'ec_ed_sub_05' =>  $recUp['ed_sub_05'],
                    'ec_ed_sub_06' =>  $recUp['ed_sub_06'],
                    'ec_ed_sub_12' =>  $recUp['ed_sub_12'],
                    'ec_ed_sub_13' =>  $recUp['ed_sub_13'],
                    'ec_loss_rate' => 0.000,
                    'ec_w_digits' => 0,
                    'ec_material_unit_cost' => 0,
                    'ec_material_cost' => 0,
                    'ec_wage' => 0,
                    'ec_packing_cost' => 0,
                    'ec_transport_cost' => 0,
                    'ec_drawing_cost' => 0,
                    'ec_area_cost_digit' => 0,
                    'ec_cut_cost' => 0,
                    'ec_factor' => 0,
                    'ec_reserve' => 0,
                    'ec_shrink_factor' => 0,
                    'ec_update_at' => self::currentDate(),
                    'ec_update_cd' => $_SESSION['usercd'],
                  );
                  $sth = $dbh->prepare(self::makeInsertSQL('estimate_calc', $columnsCH));
                  self::bindInsertKeys($sth, $columnsCH, $arrHeader);
                  $sth->execute();
                  break;
                }
              }
            }
          }
        } else {
          // 見積計算番号が削除された=データ削除
          $sth = $dbh->prepare('
          DELETE FROM estimate_calc
          WHERE ec_belong_cd = :BELONGCD AND
          ec_estimate_no = :ESTNO
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $datHeader[0]['e_estimate_no'], PDO::PARAM_STR);
          $sth->execute();
        }
      } else {
        // 新規
        // // 仕様追加　見積リピート時は、見積計算データも継続させる
        // if (self::checkNotSet($datHeader[0]['e_repeat_estimate_no']) === false ) {
        //   $sth->prepare('
        //   SELECT * FROM estimate_calc
        //   WHERE ec_belong_cd = :BELONGCD AND 
        //   ec_estimate_no = :ESTNO AND 
        //   ec_estimatecalc_no = :PCD
        //   ;');
        //   $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        //   $sth->bindValue(':ESTNO', $datHeader[0]['e_estimate_no'], PDO::PARAM_STR);
        //   $sth->bindValue();

        // } else {
        for ($i = 0; $i < count($arCalcNo); $i++) {
          // 見積明細データから該当見積計算番号のデータを取得する
          // $arCalcNoは番号重複を認めない&&空は編集・登録を行わない
          foreach ($datDetail as $recUp) {
            if ($recUp['calcno'] === $arCalcNo[$i]) {
              if (self::checkNotSet($datHeader[0]['e_repeat_estimate_no']) === false ) {
                $sth = $dbh->prepare('
                SELECT * FROM estimate_calc
                WHERE ec_belong_cd = :BELONGCD AND
                ec_estimate_no = :ESTNO AND 
                ec_estimatecalc_no = :CALCNO
                ;');
                $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
                $sth->bindValue(':ESTNO', $datHeader[0]['e_estimate_no'], PDO::PARAM_STR);
                $sth->bindValue(':CALCNO', $recUp['calcno'], PDO::PARAM_STR);
                $sth->execute();
                $resultHdCalc = $sth->fetchAll(PDO::FETCH_ASSOC);
                if (count($resultHdCalc) > 0) {
                  $arrHeader = array(
                    'ec_belong_cd' => $_SESSION['companycd'],
                    'ec_estimate_no' => $datHeader[0]['e_estimate_no'],
                    'ec_estimatecalc_no' => $recUp['calcno'],
                    'ec_p_cd' =>  $recUp['ed_p_cd'],
                    'ec_ed_sub_01' =>  $recUp['ed_sub_01'],
                    'ec_ed_sub_02' =>  $recUp['ed_sub_02'],
                    'ec_ed_sub_03' =>  $recUp['ed_sub_03'],
                    'ec_ed_sub_04' =>  $recUp['ed_sub_04'],
                    'ec_ed_sub_05' =>  $recUp['ed_sub_05'],
                    'ec_ed_sub_06' =>  $recUp['ed_sub_06'],
                    'ec_ed_sub_12' =>  $recUp['ed_sub_12'],
                    'ec_ed_sub_13' =>  $recUp['ed_sub_13'],
                    'ec_loss_rate' => $resultHdCalc['ec_loss_rate'],
                    'ec_w_digits' => $resultHdCalc['ec_w_digits'],
                    'ec_material_unit_cost' => $resultHdCalc['ec_material_unit_cost'],
                    'ec_material_cost' => $resultHdCalc['ec_material_cost'],
                    'ec_wage' => $resultHdCalc['ec_wage'],
                    'ec_packing_cost' => $resultHdCalc['ec_packing_cost'],
                    'ec_transport_cost' => $resultHdCalc['ec_transport_cost'],
                    'ec_drawing_cost' => $resultHdCalc['ec_drawing_cost'],
                    'ec_area_cost_digit' => $resultHdCalc['ec_area_cost_digit'],
                    'ec_cut_cost' => $resultHdCalc['ec_cut_cost'],
                    'ec_factor' => $resultHdCalc['ec_factor'],
                    'ec_reserve' => $resultHdCalc['ec_reserve'],
                    'ec_shrink_factor' => $resultHdCalc['ec_shrink_factor'],
                    'ec_update_at' => self::currentDate(),
                    'ec_update_cd' => $_SESSION['usercd'],
                  );
                } else {
                  $arrHeader = array(
                    'ec_belong_cd' => $_SESSION['companycd'],
                    'ec_estimate_no' => $datHeader[0]['e_estimate_no'],
                    'ec_estimatecalc_no' => $recUp['calcno'],
                    'ec_p_cd' =>  $recUp['ed_p_cd'],
                    'ec_ed_sub_01' =>  $recUp['ed_sub_01'],
                    'ec_ed_sub_02' =>  $recUp['ed_sub_02'],
                    'ec_ed_sub_03' =>  $recUp['ed_sub_03'],
                    'ec_ed_sub_04' =>  $recUp['ed_sub_04'],
                    'ec_ed_sub_05' =>  $recUp['ed_sub_05'],
                    'ec_ed_sub_06' =>  $recUp['ed_sub_06'],
                    'ec_ed_sub_12' =>  $recUp['ed_sub_12'],
                    'ec_ed_sub_13' =>  $recUp['ed_sub_13'],
                    'ec_loss_rate' => 0.000,
                    'ec_w_digits' => 0,
                    'ec_material_unit_cost' => 0,
                    'ec_material_cost' => 0,
                    'ec_wage' => 0,
                    'ec_packing_cost' => 0,
                    'ec_transport_cost' => 0,
                    'ec_drawing_cost' => 0,
                    'ec_area_cost_digit' => 0,
                    'ec_cut_cost' => 0,
                    'ec_factor' => 0,
                    'ec_reserve' => 0,
                    'ec_shrink_factor' => 0,
                    'ec_update_at' => self::currentDate(),
                    'ec_update_cd' => $_SESSION['usercd'],
                  );
                }
              } else {
                $arrHeader = array(
                  'ec_belong_cd' => $_SESSION['companycd'],
                  'ec_estimate_no' => $datHeader[0]['e_estimate_no'],
                  'ec_estimatecalc_no' => $recUp['calcno'],
                  'ec_p_cd' =>  $recUp['ed_p_cd'],
                  'ec_ed_sub_01' =>  $recUp['ed_sub_01'],
                  'ec_ed_sub_02' =>  $recUp['ed_sub_02'],
                  'ec_ed_sub_03' =>  $recUp['ed_sub_03'],
                  'ec_ed_sub_04' =>  $recUp['ed_sub_04'],
                  'ec_ed_sub_05' =>  $recUp['ed_sub_05'],
                  'ec_ed_sub_06' =>  $recUp['ed_sub_06'],
                  'ec_ed_sub_12' =>  $recUp['ed_sub_12'],
                  'ec_ed_sub_13' =>  $recUp['ed_sub_13'],
                  'ec_loss_rate' => 0.000,
                  'ec_w_digits' => 0,
                  'ec_material_unit_cost' => 0,
                  'ec_material_cost' => 0,
                  'ec_wage' => 0,
                  'ec_packing_cost' => 0,
                  'ec_transport_cost' => 0,
                  'ec_drawing_cost' => 0,
                  'ec_area_cost_digit' => 0,
                  'ec_cut_cost' => 0,
                  'ec_factor' => 0,
                  'ec_reserve' => 0,
                  'ec_shrink_factor' => 0,
                  'ec_update_at' => self::currentDate(),
                  'ec_update_cd' => $_SESSION['usercd'],
                );
              }
              
              $sth = $dbh->prepare(self::makeInsertSQL('estimate_calc', $columnsCH));
              self::bindInsertKeys($sth, $columnsCH, $arrHeader);
              $sth->execute();
              break;
            }
          }
        }
        // }
      }
      $dbh->commit();
      echo json_encode($resp);
      // error_reporting(E_ALL);
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp); 
    }
  }

  /**
   * 受注データ削除
   */
  public static function deleteED($datDetail) {
    $resp = array('succeed' => true, 'msg' => '');

    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();

      // 受注データを削除
      $sth = $dbh->prepare('
      DELETE FROM estimate
      WHERE e_belong_cd  = :BELONGCD
      AND e_estimate_no = :ESTIMATENO
      ;');
      $sth->bindValue(':BELONGCD', $datDetail[0]->e_belong_cd, PDO::PARAM_STR);
      $sth->bindValue(':ESTIMATENO', $datDetail[0]->e_estimate_no, PDO::PARAM_STR);
      $sth->execute();

      $sth = $dbh->prepare('
      DELETE FROM estimatedetails
      WHERE ed_belong_cd  = :BELONGCD
      AND ed_estimate_no = :ESTIMATENO
      ;');
      $sth->bindValue(':BELONGCD', $datDetail[0]->e_belong_cd, PDO::PARAM_STR);
      $sth->bindValue(':ESTIMATENO', $datDetail[0]->e_estimate_no, PDO::PARAM_STR);
      $sth->execute();
      
      // 履歴データを削除
      $sth = $dbh->prepare('
      DELETE FROM t_estimate
      WHERE e_belong_cd  = :BELONGCD
      AND e_estimate_no = :ESTIMATENO
      ;');
      $sth->bindValue(':BELONGCD', $datDetail[0]->e_belong_cd, PDO::PARAM_STR);
      $sth->bindValue(':ESTIMATENO', $datDetail[0]->e_estimate_no, PDO::PARAM_STR);
      $sth->execute();

      $sth = $dbh->prepare('
      DELETE FROM t_estimatedetails
      WHERE ed_belong_cd  = :BELONGCD
      AND ed_estimate_no = :ESTIMATENO
      ;');
      $sth->bindValue(':BELONGCD', $datDetail[0]->e_belong_cd, PDO::PARAM_STR);
      $sth->bindValue(':ESTIMATENO', $datDetail[0]->e_estimate_no, PDO::PARAM_STR);
      $sth->execute();

      $dbh->commit();
      echo json_encode($resp);

    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }

  /**
   * 見積計算登録
   */
  public static function updateEDCalc($datHeader1, $datHeader2, $datDetail1, $dbh = null) {
    $resp = array('succeed' => true, 'msg' => '');   
    $myConFlg = true;     // 見積計算画面の編集ならtrue。見積画面の 
    // DB定義取得
    $columnsH = self::getColumnDefs('estimate_calc');
    $columnsD = self::getColumnDefs('estimatedetails_calc');
    // PK定義
    self::markAsHeaderPK($columnsH, 'ec_belong_cd');
    self::markAsHeaderPK($columnsH, 'ec_estimate_no');
    self::markAsHeaderPK($columnsH, 'ec_estimatecalc_no');
    self::markAsHeaderPK($columnsD, 'ecd_belong_cd');
    self::markAsHeaderPK($columnsD, 'ecd_estimate_no');
    self::markAsHeaderPK($columnsD, 'ecd_estimatecalc_no');
    self::markAsHeaderPK($columnsD, 'ecd_estimate_sub_no');
    
    $dbh = self::dbPDO();    
    try {
      $dbh->beginTransaction();
      // ヘッダ：既存データかどうか
      $sth = $dbh->prepare('
      SELECT * FROM estimate_calc
      WHERE ec_belong_cd = :BELONGCD AND 
      ec_estimate_no = :ESTNO AND 
      ec_estimatecalc_no = :CALCNO    
      ;');
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':ESTNO', $datHeader1[0]['ec_estimate_no'], PDO::PARAM_STR);
      $sth->bindValue(':CALCNO', $datHeader1[0]['ec_estimatecalc_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      // ヘッダデータ結合
      $datHeader = array_merge($datHeader1[0], $datHeader2[0]);
      // 更新データセット
      $datHeader['ec_belong_cd'] = $_SESSION['companycd'];
      $datHeader['ec_update_at'] = self::currentDate();
      $datHeader['ec_update_cd'] = $_SESSION['usercd'];
      if (count($result) > 0) {
        // 既存
        // $datHeader1['ec_loss_rate'] = $datHeader2
        $sth = $dbh->prepare(self::makeUpdateSQL('estimate_calc', $columnsH));
        self::bindValueToUpdate($sth, $columnsH, $datHeader);
        $sth->execute();
      } else {
        // 新規　見積作成時に新規作成するので、ここで新規登録は起こりえないが、エラー逃避用
        $sth = $dbh->prepare(self::makeInsertSQL('estimate_calc', $columnsH));
        self::bindInsertKeys($sth, $columnsH, $datHeader);
        $sth->execute();
      }

      // 明細
      foreach ($datDetail1 as $record) {
        $sth = $dbh->prepare('
        SELECT * FROM estimatedetails_calc 
        WHERE ecd_belong_cd = :BELONGCD AND 
        ecd_estimate_no = :ESTNO AND 
        ecd_estimatecalc_no = :CALCNO AND
        ecd_estimate_sub_no = :SUBNO
        ;');
        $sth->bindValue('BELONGCD', $datHeader['ec_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue('ESTNO', $datHeader['ec_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue('CALCNO', $datHeader['ec_estimatecalc_no'], PDO::PARAM_STR);
        $sth->bindValue('SUBNO', $record['ecd_estimate_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $resultD = $sth->fetchAll(PDO::FETCH_ASSOC);
        // 更新データセット
        $record['ecd_belong_cd'] = $_SESSION['companycd'];
        $record['ecd_update_at'] = self::currentDate();
        $record['ecd_update_cd'] = $_SESSION['usercd'];

        if (self::checkNotSet($record['ecd_fix_unit_cost']) === true) {
          // 修正単価が入力されていない場合
          $record['ecd_fix_unit_cost'] = 0;
        }

        if (count($resultD) > 0) {
          // 既存
          $sth = $dbh->prepare(self::makeUpdateSQL('estimatedetails_calc', $columnsD));
          self::bindValueToUpdate($sth, $columnsD, $record);
          $sth->execute();
        } else {
          // 新規　見積作成時に新規作成するので、ここで新規登録は起こりえないが、エラー逃避用
          $sth = $dbh->prepare(self::makeInsertSQL('estimatedetails_calc', $columnsD));
          self::bindInsertKeys($sth, $columnsD, $record);
          $sth->execute();
        }

        $cost = 0;
        if ($record['ecd_fix_unit_cost'] > 0) {
          $cost = $record['ecd_fix_unit_cost'];
        } else {
          $cost = $record['ecd_proc_cost'];
        }

        // 受注データ更新　原価
        $sth = $dbh->prepare('
        UPDATE estimatedetails
        SET ed_cost = :COST,
        ed_update_cnt = ed_update_cnt + 1,
        ed_update_at = :UPDATEAT,
        ed_update_cd = :UPDATECD
        WHERE ed_belong_cd = :BELONGCD AND 
        ed_estimate_no = :ESTNO AND
        ed_estimate_sub_no = :SUBNO 
        ;');
        $sth->bindValue(':COST', $cost, PDO::PARAM_INT);
        $sth->bindValue(':UPDATEAT', $record['ecd_update_at'], PDO::PARAM_STR);
        $sth->bindValue(':UPDATECD', $record['ecd_update_cd'], PDO::PARAM_STR);
        $sth->bindValue(':BELONGCD', $record['ecd_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':ESTNO', $datHeader['ec_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue('SUBNO', $record['ecd_estimate_sub_no'], PDO::PARAM_STR);
        $result = $sth->execute();        
      }
      $dbh->commit();
      echo json_encode($resp);
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }


  /***
   * 在庫引き当て処理
   * $activeRow:選択データ
   * $motherData:呼出画面のデータ(受注画面もしくは納品画面)
   */
  public static function updateStockData($sdat, $motherData, $mode) {
    $resp = array('succeed' => true, 'msg' => '');
    // DB定義取得
    $columns = self::getColumnDefs('shippingassign');
    // PK定義 ヘッダ＆明細
    self::markAsHeaderPK($columns, 'sas_belong_cd');  
    self::markAsHeaderPK($columns, 'sas_estimate_no');  
    self::markAsHeaderPK($columns, 'sas_estimate_sub_no');  
    self::markAsHeaderPK($columns, 'sas_shipment_sub_no'); 
    $strEstNo = '';
    $strEstSubNo = '';
    $strStatementNo = '';
    $strShipmentNo = '01';
    $pcd = '';

    $dbh = self::dbPDO();
    $i = 0; // 出荷枝番
    $sumQty = 0;
    try {
      $dbh->beginTransaction();
      // 受注番号
      $strEstNo = self::arrayFilterReturnValue($motherData, ['ed_estimate_no', 'sd_e_estimate_no']);
      // 受注枝番
      $strEstSubNo = self::arrayFilterReturnValue($motherData, ['ed_estimate_sub_no', 'sd_estimate_sub_no']);
      // 納品枝番
      $strStatementNo = self::arrayFilterReturnValue($motherData, ['sd_statement_sub_no']) === null ? '0000' : self::arrayFilterReturnValue($motherData, ['sd_statement_sub_no']);
      // 出荷枝番
      $strShipmentNo = self::arrayFilterReturnValue($motherData, ['ed_shipment_sub_no', 'sd_shipment_sub_no']);
      // 製品CD
      $pcd = self::arrayFilterReturnValue($motherData, ['ed_p_cd', 'sd_p_cd']);

      // 出荷引当更新
      foreach($sdat as $rec) {
        // 合計引当数確認
        if ($rec['assignqty'] > 0) {
          $sumQty += $rec['assignqty'];
        }
      }
      foreach($sdat as $rec) {
        if ($rec['assignqty'] > 0) {
          // 引当数にデータが入っていた場合のみデータ更新を行う
          $i++;
          $rec['sas_belong_cd'] = $_SESSION['companycd'];
          $rec['sas_estimate_no'] = $strEstNo; // 受注番号
          $rec['sas_estimate_sub_no'] = $strEstSubNo;  // 受注枝番
          $rec['sas_statement_sub_no'] = $strStatementNo;
          $rec['sas_p_cd'] = $pcd;
          $rec['sas_location'] = $rec['wcd'];
          $rec['sas_lot_no'] = $rec['lotno'];
          $rec['sas_quantity'] = (float)$rec['assignqty'];
          $rec['sas_update_at'] = self::currentDate();
          $rec['sas_update_cd'] = $_SESSION['usercd'];
          $rec['sas_unit_tran'] = $rec['unitname'];
          $rec['sas_parrangement_cd'] = $rec['parrangement_cd'];
          $rec['sas_type_subject'] = $rec['type_subject'];
          $rec['sas_serial_no'] = '00';
          $rec['sas_sub_cd'] = self::storageSetPadding($rec, $dbh, true);  // 規格文字列を作成

          $sth = $dbh->prepare('
          SELECT * FROM shippingassign
          WHERE sas_belong_cd = :BELONGCD AND
          sas_estimate_no = :ESTNO AND
          sas_statement_sub_no = :STNO AND
          sas_estimate_sub_no = :ESTSUBNO AND 
          sas_shipment_sub_no = :SHIPNO
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $rec['sas_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':STNO', $rec['sas_statement_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':ESTSUBNO', $rec['sas_estimate_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':SHIPNO', $strShipmentNo, PDO::PARAM_STR);
          $sth->execute();
          $resultSAS = $sth->fetchAll(PDO::FETCH_ASSOC);

          // if (self::checkNotSet($rec['shipsubno']) === false) {
          if (count($resultSAS) > 0) {
            // 引当済みデータ
            $rec['sas_shipment_sub_no'] = $rec['shipsubno'];
            // データ更新
            $sth = $dbh->prepare(self::makeUpdateSQL('shippingassign', $columns));
            self::bindValueToUpdate($sth, $columns, $rec);
            $sth->execute();
          } else {
            // 新規登録データの場合
            // 該当の出荷枝番を取得 持出在庫のロットが変わる場合は、出荷枝番が異なってくるため、枝番をインクリメントする
            $sth = $dbh->prepare('
            SELECT *,MAX(ed_shipment_sub_no) AS maxno FROM estimatedetails 
            WHERE ed_estimate_no = :ESTNO AND ed_estimate_sub_no = :SUBNO
            ;');
            $sth->bindValue(':ESTNO', $strEstNo, PDO::PARAM_STR);
            $sth->bindValue(':SUBNO', $strEstSubNo, PDO::PARAM_STR);
            $sth->execute();
            $result = $sth->fetchAll(PDO::FETCH_ASSOC);
            $maxno = 0;
            if (count($result) > 0) {
              $maxno = $result[0]['maxno'];
            }
            $rec['sas_shipment_sub_no'] = sprintf('%02d', $maxno + 1);
            // $rec['sas_shipment_sub_no'] = sprintf('%02d', $maxno);

            // 新規データ
            $sth = $dbh->prepare(self::makeInsertSQL('shippingassign', $columns));
            self::bindInsertKeys($sth, $columns, $rec);
            $sth->execute();
          }          
        }
      }

      if ($sumQty >= $motherData['ed_quantity']) {
        // 在庫引当完了時のみ製造指示区分を指示に変更
        $sth = $dbh->prepare('
        UPDATE estimatedetails 
        SET ed_prod_plan_sign = "1", ed_prod_plan_date = :TDATE
        WHERE ed_estimate_no = :ESTNO AND ed_estimate_sub_no = :SUBNO
        ;');
        $sth->bindValue(':TDATE', self::currentDate(), PDO::PARAM_STR);
        $sth->bindValue(':ESTNO', $strEstNo, PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $strEstSubNo, PDO::PARAM_STR);
        $sth->execute();        
      }
 
      $dbh->commit();
      echo json_encode($resp);
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }


  /***
   * 在庫調整データの登録
   */
  public static function updateStockAdjust($datHeader, $datDetail) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      $columnStock = self::getColumnDefs('stock');
      self::markAsHeaderPK($columnStock, 'stc_belong_cd');
      self::markAsHeaderPK($columnStock, 'stc_month');
      self::markAsHeaderPK($columnStock, 'stc_arrange_type');
      self::markAsHeaderPK($columnStock, 'stc_report_no');
      self::markAsHeaderPK($columnStock, 'stc_sub_no_01');
      self::markAsHeaderPK($columnStock, 'stc_sub_no_02');
      self::markAsHeaderPK($columnStock, 'stc_sub_no_03');
      self::markAsHeaderPK($columnStock, 'stc_sub_no_04');
      self::markAsHeaderPK($columnStock, 'stc_update_cnt');

      // 「Uyymmdd」が一致する伝票Noを取得
      $reportNoPrefix = 'U'.substr(self::currentdate(), 2, 6);
      $sth = $dbh->prepare('
      SELECT * FROM stock
      WHERE stc_report_no LIKE :REPORT_NO_PREFIX
      ;');
      $sth->bindValue(':REPORT_NO_PREFIX', $reportNoPrefix.'%', PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      // 登録する伝票No U + yymmdd + 3桁の連番（0埋め）
      $maxSerialNo = 0;
      foreach ($result as $record) {
        $serialNo = (int)substr($record['stc_report_no'], -3);
        if ($serialNo > $maxSerialNo) {
          $maxSerialNo = $serialNo;
        }
      }
      // 連番の最大値を含む伝票Noを設定
      $maxReportNo = $reportNoPrefix.substr('000'.($maxSerialNo + 1), -3);

      foreach ($datDetail as $record) {
        $insertData = [];
        $insertData['stc_belong_cd'] = $_SESSION['companycd'];
        $insertData['stc_month'] = substr($datHeader[0]['stc_report_date'], 2, 4);;
        $insertData['stc_arrange_type'] = $record['stc_qty_trans'] < $record['stc_qty_trans_upd'] ? '219' : '619';
        $insertData['stc_report_no'] = $maxReportNo;
        $insertData['stc_sub_no_01'] = $record['stc_sub_no_01'];
        $insertData['stc_sub_no_02'] = $record['stc_sub_no_02'];
        $insertData['stc_sub_no_03'] = '000';
        $insertData['stc_sub_no_04'] = '000';
        $insertData['stc_update_cnt'] = 1;
        $insertData['stc_report_date'] = $datHeader[0]['stc_report_date'];
        $insertData['stc_place_cd'] = $record['stc_place_cd'];
        $insertData['stc_product_cd'] = $record['productcd'];
        $insertData['stc_sub_01'] = $record['sub01'];
        $insertData['stc_sub_02'] = $record['sub02'];
        $insertData['stc_sub_03'] = $record['sub03'];
        $insertData['stc_sub_04'] = $record['sub04'];
        $insertData['stc_sub_05'] = $record['sub05'];
        $insertData['stc_sub_06'] = $record['sub06'];
        $insertData['stc_sub_07'] = $record['sub07'];
        $insertData['stc_sub_08'] = $record['sub08'];
        $insertData['stc_sub_09'] = $record['sub09'];
        $insertData['stc_sub_10'] = $record['sub10'];
        $insertData['stc_sub_11'] = $record['sub11'];
        $insertData['stc_sub_12'] = $record['sub12'];
        $insertData['stc_sub_13'] = $record['sub13'];
        $insertData['stc_qty_trans'] = abs($record['stc_qty_trans'] - $record['stc_qty_trans_upd']);
        $insertData['stc_price_trans'] = 0;
        $insertData['stc_price_tax'] = 0;
        $insertData['stc_inventory_type'] = '1';
        $insertData['stc_recv_type'] = '0';
        $insertData['stc_pay_type'] = '0';
        $insertData['stc_expence_type'] = '0';
        $insertData['stc_cost_type'] = '1';
        $insertData['stc_cost_eva_qty'] = abs($record['stc_qty_trans'] - $record['stc_qty_trans_upd']);
        $insertData['stc_unit_price'] = 0;
        $insertData['stc_type_01'] = '0';
        $insertData['stc_type_02'] = '0';
        $insertData['stc_type_03'] = '0';
        $insertData['stc_type_04'] = isset($record['stc_type_04']) ? $record['stc_type_04'] : '';
        $insertData['stc_type_05'] = '0';
        $insertData['stc_update_at'] = self::currentdate();
        $insertData['stc_update_time'] = self::currentTime();;
        $insertData['stc_update_cd'] = $_SESSION['usercd'];;
        $insertData['stc_unit_tran'] = $record['stc_unit_tran'];
        $insertData['stc_type_subject'] = $record['subjectcd'] || '1';
        $insertData['stc_parrangement_cd'] = $record['parrangementcd'];
        $insertData['stc_maker_cd'] = isset($record['makercd']) ? $record['makercd'] : '';

        // 既存かどうか
        $sth = $dbh->prepare('
        SELECT MAX(stc_update_cnt) AS maxno FROM stock
        WHERE stc_month = :MONTH AND 
        stc_arrange_type = :TYPE AND
        stc_report_no = :REPNO AND 
        stc_sub_no_01 = :SUB1 AND 
        stc_sub_no_02 = :SUB2 AND 
        stc_sub_no_03 = :SUB3 AND 
        stc_sub_no_04 = :SUB4
        ;');
        $sth->bindValue(':MONTH', $insertData['stc_month'], PDO::PARAM_STR);
        $sth->bindValue(':TYPE', $insertData['stc_arrange_type'], PDO::PARAM_STR);
        $sth->bindValue(':REPNO', $insertData['stc_report_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUB1', $insertData['stc_sub_no_01'], PDO::PARAM_STR);
        $sth->bindValue(':SUB2', $insertData['stc_sub_no_02'], PDO::PARAM_STR);
        $sth->bindValue(':SUB3', $insertData['stc_sub_no_03'], PDO::PARAM_STR);
        $sth->bindValue(':SUB4', $insertData['stc_sub_no_04'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (count($result) > 0) {
          $insertData['stc_update_cnt'] = $result[0]['maxno'] + 1;
        } 

        // 新規データ
        $sth = $dbh->prepare(self::makeInsertSQL('stock', $columnStock));
        self::bindInsertKeys($sth, $columnStock, $insertData);
        $sth->execute();
      }

      $dbh->commit();
      echo json_encode($resp);
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }

  /***
   * 在庫移動データの登録
   */
  public static function updateStockTransfer($datHeader, $datDetail) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      $columnStock = self::getColumnDefs('stock');
      self::markAsHeaderPK($columnStock, 'stc_belong_cd');
      self::markAsHeaderPK($columnStock, 'stc_month');
      self::markAsHeaderPK($columnStock, 'stc_arrange_type');
      self::markAsHeaderPK($columnStock, 'stc_report_no');
      self::markAsHeaderPK($columnStock, 'stc_sub_no_01');
      self::markAsHeaderPK($columnStock, 'stc_sub_no_02');
      self::markAsHeaderPK($columnStock, 'stc_sub_no_03');
      self::markAsHeaderPK($columnStock, 'stc_sub_no_04');
      self::markAsHeaderPK($columnStock, 'stc_update_cnt');

      // 「Uyymmdd」が一致する伝票Noを取得
      $reportNoPrefix = 'U'.substr(self::currentdate(), 2, 6);
      $sth = $dbh->prepare('
      SELECT * FROM stock
      WHERE stc_report_no LIKE :REPORT_NO_PREFIX
      ;');
      $sth->bindValue(':REPORT_NO_PREFIX', $reportNoPrefix.'%', PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      // 登録する伝票No U + yymmdd + 3桁の連番（0埋め）
      $maxSerialNo = 0;
      foreach ($result as $record) {
        $serialNo = (int)substr($record['stc_report_no'], -3);
        if ($serialNo > $maxSerialNo) {
          $maxSerialNo = $serialNo;
        }
      }
      // 連番の最大値を含む伝票Noを設定
      $maxReportNo = $reportNoPrefix.substr('000'.($maxSerialNo + 1), -3);

      foreach ($datDetail as $record) {
        $insertData = [];
        $insertData['stc_belong_cd'] = $_SESSION['companycd'];
        $insertData['stc_month'] = substr($datHeader[0]['stc_report_date'], 2, 4);;
        $insertData['stc_arrange_type'] = '810';
        $insertData['stc_report_no'] = $maxReportNo;
        $insertData['stc_sub_no_01'] = $record['stc_sub_no_01'];
        $insertData['stc_sub_no_02'] = '001';
        $insertData['stc_sub_no_03'] = '000';
        $insertData['stc_sub_no_04'] = '000';
        $insertData['stc_update_cnt'] = 1;
        $insertData['stc_report_date'] = $datHeader[0]['stc_report_date'];
        $insertData['stc_target_id'] = $record['stc_place_cd_transfer'];
        $insertData['stc_place_cd'] = $record['stc_place_cd'];
        $insertData['stc_product_cd'] = $record['productcd'];
        $insertData['stc_sub_01'] = $record['sub01'];
        $insertData['stc_sub_02'] = $record['sub02'];
        $insertData['stc_sub_03'] = $record['sub03'];
        $insertData['stc_sub_04'] = $record['sub04'];
        $insertData['stc_sub_05'] = $record['sub05'];
        $insertData['stc_sub_06'] = $record['sub06'];
        $insertData['stc_sub_07'] = $record['sub07'];
        $insertData['stc_sub_08'] = $record['sub08'];
        $insertData['stc_sub_09'] = $record['sub09'];
        $insertData['stc_sub_10'] = $record['sub10'];
        $insertData['stc_sub_11'] = $record['sub11'];
        $insertData['stc_sub_12'] = $record['sub12'];
        $insertData['stc_sub_13'] = $record['sub13'];
        $insertData['stc_qty_trans'] = $record['stc_qty_trans'];
        $insertData['stc_price_trans'] = 0;
        $insertData['stc_price_tax'] = 0;
        $insertData['stc_inventory_type'] = '1';
        $insertData['stc_recv_type'] = '0';
        $insertData['stc_pay_type'] = '0';
        $insertData['stc_expence_type'] = '0';
        $insertData['stc_cost_type'] = '1';
        $insertData['stc_cost_eva_qty'] = $record['stc_qty_trans'];
        $insertData['stc_unit_price'] = 0;
        $insertData['stc_type_01'] = '0';
        $insertData['stc_type_02'] = '0';
        $insertData['stc_type_03'] = '0';
        $insertData['stc_type_04'] = isset($record['stc_type_04']) ? $record['stc_type_04'] : '';
        $insertData['stc_type_05'] = '0';
        $insertData['stc_update_at'] = self::currentdate();
        $insertData['stc_update_time'] = self::currentTime();;
        $insertData['stc_update_cd'] = $_SESSION['usercd'];;
        $insertData['stc_unit_tran'] = $record['stc_unit_tran'];
        $insertData['stc_type_subject'] = $record['subjectcd'] || '1';
        $insertData['stc_parrangement_cd'] = $record['parrangementcd'];
        $insertData['stc_maker_cd'] = isset($record['makercd']) ? $record['makercd'] : '';

        // 既存かどうか
        $sth = $dbh->prepare('
        SELECT MAX(stc_update_cnt) AS maxno FROM stock
        WHERE stc_month = :MONTH AND 
        stc_arrange_type = :TYPE AND
        stc_report_no = :REPNO AND 
        stc_sub_no_01 = :SUB1 AND 
        stc_sub_no_02 = :SUB2 AND 
        stc_sub_no_03 = :SUB3 AND 
        stc_sub_no_04 = :SUB4
        ;');
        $sth->bindValue(':MONTH', $insertData['stc_month'], PDO::PARAM_STR);
        $sth->bindValue(':TYPE', $insertData['stc_arrange_type'], PDO::PARAM_STR);
        $sth->bindValue(':REPNO', $insertData['stc_report_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUB1', $insertData['stc_sub_no_01'], PDO::PARAM_STR);
        $sth->bindValue(':SUB2', $insertData['stc_sub_no_02'], PDO::PARAM_STR);
        $sth->bindValue(':SUB3', $insertData['stc_sub_no_03'], PDO::PARAM_STR);
        $sth->bindValue(':SUB4', $insertData['stc_sub_no_04'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (count($result) > 0) {
          $insertData['stc_update_cnt'] = $result[0]['maxno'] + 1;
        } 

        // 入庫データ登録
        $sth = $dbh->prepare(self::makeInsertSQL('stock', $columnStock));
        self::bindInsertKeys($sth, $columnStock, $insertData);
        $sth->execute();

        // 出庫データ登録
        $insertData['stc_arrange_type'] = '410';
        $insertData['stc_sub_no_02'] = '002';
        $sth = $dbh->prepare(self::makeInsertSQL('stock', $columnStock));
        self::bindInsertKeys($sth, $columnStock, $insertData);
        $sth->execute();
      }

      $dbh->commit();
      echo json_encode($resp);
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }


  /***
   * 製造指示引継ぎ取消
   */
  public static function cancelProdplans($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    $arProdNo = [];
    $strProdPlan = '';

    $columnsH = self::getColumnDefs('t_estimatedetails');
    self::markAsHeaderPK($columnsH, 'ed_belong_cd');
    self::markAsHeaderPK($columnsH, 'ed_estimate_no');
    self::markAsHeaderPK($columnsH, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsH, 'ed_shipment_sub_no');
    
    $dbh->beginTransaction();
    try {

      // 選択されている製造指示番号のデータを取得。
      foreach($sdat as $record) {
        if ($strProdPlan === $record['pd_prod_plan_no']) {
          continue;
        } else {
          $strProdPlan = $record['pd_prod_plan_no'];
        }
        array_push($arProdNo, $record);
      }


      foreach($arProdNo as $record) {
        $sth = $dbh->prepare('
        SELECT * FROM prodplans 
        WHERE pd_finish_date <> "" AND pd_finish_time <> "" 
          AND pd_prod_plan_no = :PRODPLANNO
          AND pd_process_cd = :PROCCD
        ;');
        $sth->bindValue(':PRODPLANNO', $record['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', '00', PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {
          // 製造済みが1つでもあれば指示取消不可
          $dbh->rollBack();
          $resp['msg'] = "既に製造が完了した製品があります。取消出来ません。";
          $resp['succeed'] = false;
          echo json_encode($resp);
          return;
        }

        // 製造リーフ発行済みかどうか
        $sth = $dbh->prepare('
        SELECT pd_leaf_no FROM prodplans
        WHERE pd_leaf_no <> ""
        AND pd_prod_plan_no = :PRODPLANNO
        AND pd_process_cd = :PROCCD
        ;');
        $sth->bindValue(':PRODPLANNO', $record['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', '00', PDO::PARAM_STR);
        $sth->execute();
        $rsltLeaf = $sth->fetchAll(PDO::FETCH_ASSOC);
        
        foreach ($rsltLeaf as $rec) {
          // リーフ発行済み
          $sth = $dbh->prepare('
          DELETE FROM leafprod
          WHERE l_leaf_no = :LEAFNO
          ;');
          $sth->bindValue(':LEAFNO', $rec['pd_leaf_no'], PDO::PARAM_STR);
          $sth->execute();
        }

        // 受注データ更新       
        $sth = $dbh->prepare('
        SELECT pd_e_estimate_no,  pd_e_estimate_sub_no FROM prodplans
        WHERE pd_prod_plan_no = :PRODPLANNO AND pd_process_cd = :PROCCD AND pd_prod_plan_sub_no <> "000"
        ;');
        $sth->bindValue(':PRODPLANNO', $record['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', '00', PDO::PARAM_STR);
        $sth->execute();
        $rsltProd = $sth->fetchAll(PDO::FETCH_ASSOC);

        $currentDate = self::currentDate();

        foreach($rsltProd as $rec) {
          $sth = $dbh->prepare('
          SELECT * FROM estimatedetails
          WHERE ed_estimate_no = :ESTNO
          AND ed_estimate_sub_no = :ESTSUBNO AND ed_prod_plan_sign = :STATUSFLG
          ;');
          $sth->bindValue(':ESTNO', $rec['pd_e_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':ESTSUBNO', $rec['pd_e_estimate_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':STATUSFLG', '1', PDO::PARAM_STR);
          $sth->execute();
          $rsltEst = $sth->fetchAll(PDO::FETCH_ASSOC);

          // 受注テーブル更新
          $sth = $dbh->prepare('
          UPDATE estimatedetails 
          SET ed_prod_plan_sign = :STATUSFLG , ed_prod_plan_date = :ISSUEDATE, ed_update_at = :UPDATEAT , ed_update_cd = :UPDATECD, ed_update_cnt = ed_update_cnt + 1 
          WHERE ed_estimate_no = :ESTNO
          AND ed_estimate_sub_no = :ESTSUBNO
          ;');
          $sth->bindValue(':STATUSFLG', '0', PDO::PARAM_STR);
          $sth->bindValue(':ISSUEDATE', '', PDO::PARAM_STR);
          $sth->bindValue(':UPDATEAT', $currentDate, PDO::PARAM_STR);
          $sth->bindValue(':UPDATECD', $_SESSION['usercd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $rec['pd_e_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':ESTSUBNO', $rec['pd_e_estimate_sub_no'], PDO::PARAM_STR);
          $sth->execute();

          // 受注履歴テーブル
          $rsltEst[0]['ed_update_cnt'] += 1;
          $sth = $dbh->prepare(self::makeInsertSQL('t_estimatedetails', $columnsH));
          self::bindInsertKeys($sth, $columnsH, $rsltEst[0]);
          $sth->execute();

        }
        
        // 製造指示データ削除
        $sth = $dbh->prepare('
        DELETE FROM prodplans
        WHERE pd_prod_plan_no = :PRODPLAN 
        ;');
        $sth->bindValue(':PRODPLAN', $record['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->execute();

        // 製造指示金網ヘッダ
        $sth = $dbh->prepare('
        DELETE FROM prodplansw
        WHERE pp_prod_plan_no = :PRODPLAN 
        ;');
        $sth->bindValue(':PRODPLAN', $record['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->execute();

        // 製造指示金網明細データ
        $sth = $dbh->prepare('
        DELETE FROM prodplandetailsw
        WHERE pw_prod_plan_no = :PRODPLAN 
        ;');
        $sth->bindValue(':PRODPLAN', $record['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->execute();

        // 製造指示明細データ
        $sth = $dbh->prepare('
        DELETE FROM prodplansproc
        WHERE ppr_prod_plan_no = :PRODPLAN
        ;');
        $sth->bindValue(':PRODPLAN', $record['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->execute();
      }

      $dbh->commit();
      echo json_encode($resp);
      return;
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }


  /**
   * 金網指図データ登録
   */
  public static function updateCalcProdplans($datH1, $datH2, $datD1, $datD2) {
    $resp = array('succeed' => true, 'msg' => '');
    $nGroupNum = '';   // 表示グループ
    $arGroupNo = array();
    $cnt = 0 ;        // 2X工程用枝番
    // DB定義取得
    $columnsH = self::getColumnDefs('prodplansw');
    $columnsD = self::getColumnDefs('prodplandetailsw');
    $columnsBase = self::getColumnDefs('prodplans');
    $subno = 0;   // 枝番用
    $i = 0;       // 縦抜き枝番用

    $dbh = self::dbPDO();
    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    try {      
      $dbh->beginTransaction();
      // *********************************************************
      // 金網ヘッダデータ登録
      // データマージ      
      $datHeader = array_merge($datH1[0], $datH2[0]);
      // PK定義 ヘッダ＆明細
      self::markAsHeaderPK($columnsH, 'pp_belong_cd');  
      self::markAsHeaderPK($columnsH, 'pp_prod_plan_no');  
      self::markAsHeaderPK($columnsD, 'pw_belong_cd');  
      self::markAsHeaderPK($columnsD, 'pw_prod_plan_no'); 
      self::markAsHeaderPK($columnsD, 'pw_process_cd');  
      self::markAsHeaderPK($columnsD, 'pw_disp_num');

      // 必要なデータを付加
      if (self::checkNotSet($datHeader['pp_belong_cd'])) {
        $datHeader['pp_belong_cd'] = $_SESSION['companycd'];
      }
      $datHeader['pp_update_at'] = self::currentDate();
      $datHeader['pp_update_cd'] = $_SESSION['usercd'];
      // データが入力されていない場合、データにDefaultセット
      if (self::checkNotSet($datHeader['pp_bump_num']) === true) {
        $datHeader['pp_bump_num'] = 0;
      }
      if (self::checkNotSet($datHeader['pp_depth_01']) === true) {
        $datHeader['pp_depth_01'] = 0;
      }
      if (self::checkNotSet($datHeader['pp_depth_02']) === true) {
        $datHeader['pp_depth_02'] = 0;
      }
      if (self::checkNotSet($datHeader['pp_left']) === true) {
        $datHeader['pp_left'] = 0;
      }      
      if (self::checkNotSet($datHeader['pp_weave_cnt']) === true) {
        $datHeader['pp_weave_cnt'] = 0;
      }      
      if (self::checkNotSet($datHeader['pp_right']) === true) {
        $datHeader['pp_right'] = 0;
      }      
      if (self::checkNotSet($datHeader['pp_transfer_day']) === true) {
        $datHeader['pp_transfer_day'] = 0;
      }      
      if (self::checkNotSet($datHeader['pp_packing_day']) === true) {
        $datHeader['pp_packing_day'] = 0;
      }

      // 製造指示データしか保持しないデータを取得
      // 製造パターン、加工内容、客先CD,出荷主、納入先、営業担当者CD、希望納期
      $sth = $dbh->prepare('
      SELECT * FROM prodplans
      WHERE pd_belong_cd = :BELONGCD AND 
      pd_prod_plan_no = :PLANNO AND 
      pd_prod_plan_sub_no = :SUBNO AND 
      pd_process_cd = :PROCCD
      ;');
      $sth->bindValue(':BELONGCD', $datHeader['pp_belong_cd'], PDO::PARAM_STR );
      $sth->bindValue(':PLANNO', $datHeader['pp_prod_plan_no'], PDO::PARAM_STR );
      $sth->bindValue(':SUBNO', '001', PDO::PARAM_STR );
      $sth->bindValue(':PROCCD', '00', PDO::PARAM_STR );
      $sth->execute();
      $resultPD = $sth->fetchAll(PDO::FETCH_ASSOC);
      
      // 既存データでなければデータ作成ができないので、データなければエラー
      if (count($resultPD) <= 0) {
        $resp['msg'] = '製造指示データにエラーが発生しました。';
        $resp['succeed'] = false;
        echo json_encode($resp);
      }
      $datHeader['pp_ar_cd'] = $resultPD[0]['pd_par_cd'];
      $datHeader['pp_mn_cd'] = $resultPD[0]['pd_ar_cd'];    
      $datHeader['pp_customer_cd'] = $resultPD[0]['pd_e_customer_cd'];
      $datHeader['pp_shipper_cd'] = $resultPD[0]['pd_e_shipper_cd'];
      $datHeader['pp_delivery_cd'] = $resultPD[0]['pd_e_delivery_cd'];
      $datHeader['pp_customer_charge_cd'] = $resultPD[0]['pd_e_customer_charge_cd'];
      $datHeader['pp_desired_delivery_date'] = $resultPD[0]['pd_e_desired_delivery_date'];

      // 存在確認 ヘッダを先に登録
      $sth = $dbh->prepare('SELECT pp_prod_plan_no FROM prodplansw
      WHERE pp_belong_cd = :BELONGCD AND pp_prod_plan_no = :PLANNO
      ;');
      $sth->bindValue(':BELONGCD', $datHeader['pp_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue(':PLANNO', $datHeader['pp_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();
      $sno = $sth->fetchAll(PDO::FETCH_ASSOC);
      if (count($sno) > 0) {
        // 既存の場合
        $sth = $dbh->prepare(self::makeUpdateSQL('prodplansw', $columnsH));
        self::bindValueToUpdate($sth, $columnsH, $datHeader);
        $sth->execute();
      } else {
        // 新規
        $sth = $dbh->prepare(self::makeInsertSQL('prodplansw', $columnsH));
        self::bindInsertKeys($sth, $columnsH, $datHeader);
        $sth->execute();
      }

      // 明細データ　20:縦抜きデータ(画面最下部リスト)、24:織データ、30:切断
      // 明細①データ 織切データがあったら作成 
      if ((float)$datHeader['pp_proc_time_06'] > 0) {
        // 既存データを削除
        // もしGが変更されると、更新の場合は余分なデータが残り続けるため、工程CD＆指図番号で指定して削除してから書込　基本はほとんどないはず pw_prod_plan_sub_no
        $sth = $dbh->prepare('
        SELECT * FROM prodplandetailsw 
        WHERE pw_belong_cd = :BELONGCD AND pw_prod_plan_no = :PLANNO AND pw_process_cd = :PROCCD
        ;');
        $sth->bindValue(':BELONGCD', $datHeader['pp_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':PLANNO', $datHeader['pp_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', '24', PDO::PARAM_STR);
        $sth->execute();
        $sno = $sth->fetchAll(PDO::FETCH_ASSOC);

        if(count($sno) > 0) {
          // 既存の場合削除
          $sth = $dbh->prepare('
          DELETE FROM prodplandetailsw 
          WHERE pw_belong_cd = :BELONGCD AND pw_prod_plan_no = :PLANNO AND pw_process_cd = :PROCCD
          ;');
          $sth->bindValue(':BELONGCD', $datHeader['pp_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':PLANNO', $datHeader['pp_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':PROCCD', '24', PDO::PARAM_STR);
          $sth->execute();
        }
        // レコード数分データ作成
        foreach($datD1 as $rec) {
          // 明細レコードが持っていないヘッダのデータを付加 pw_prod_plan_sub_no
          if (self::checkNotSet($rec['pw_belong_cd'])) {
            $rec['pw_belong_cd'] = $datHeader['pp_belong_cd'];
          }
          $rec['pw_update_at'] = $datHeader['pp_update_at'];
          $rec['pw_update_cd'] = $datHeader['pp_update_cd'];
          $rec['pw_prod_plan_no'] = $datHeader['pp_prod_plan_no'];
          // DB用にデータを変換
          $rec['pw_process_cd'] = '24';
          $subno = $subno + 1;
          $rec['pw_disp_num'] = $subno;
          $rec['pw_change_sign'] = $rec['isExchanged'];
          $rec['pw_result_size'] = 0;
          $rec['pw_abort_num'] = 0;          
          if (self::checkNotSet($rec['pw_side_num']) === true) {
            $rec['pw_side_num'] = 0;
          }
          if (self::checkNotSet($rec['pw_width_size']) === true) {
            $rec['pw_width_size'] = 0;
          }
          // prodplansデータから取得 ただし、幅と長さは変更後の値を保持させるため、prodplansテーブルのデータで置き換えはしない
          $sth = $dbh->prepare('
          SELECT * FROM prodplans
          WHERE pd_belong_cd = :BELONGCD AND 
          pd_prod_plan_no = :PLANNO AND 
          pd_prod_plan_sub_no = :SUBNO AND 
          pd_process_cd = :PROCCD
          ;');
          $sth->bindValue('BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue('PLANNO', $rec['pw_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue('SUBNO', $rec['pw_prod_plan_sub_no'], PDO::PARAM_STR);
          $sth->bindValue('PROCCD', '00', PDO::PARAM_STR);
          $sth->execute();
          $rsltPP = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($rsltPP) === 0) {
            // 既存データでなければ編集できないので、システムエラー
            $resp['msg'] = '製造指示データにエラーが発生しました。';
            $resp['succeed'] = false;
            echo json_encode($resp);
            return;
          }
          // prodplansデータから基本情報を取得
          if (self::checkNotSet($rec['pw_dimension']) === true) {
            $rec['pw_dimension'] = $rsltPP[0]['pd_dimension'];
          }
          if (self::checkNotSet($rec['pw_weight']) === true) {
            $rec['pw_weight'] = $rsltPP[0]['pd_weight'];
          }
          if (self::checkNotSet($rec['pw_estimate_no']) === true) {
            $rec['pw_estimate_no'] = $rsltPP[0]['pd_e_estimate_no'];
          }
          if (self::checkNotSet($rec['pw_estimate_sub_no']) === true) {
            $rec['pw_estimate_sub_no'] = $rsltPP[0]['pd_e_estimate_sub_no'];
          }
          if (self::checkNotSet($rec['pw_finish_plan_date']) === true) {
            $rec['pw_finish_plan_date'] = $rsltPP[0]['pd_finish_plan_date'];
          }
          if (self::checkNotSet($rec['pw_customer_cd']) === true) {
            $rec['pw_customer_cd'] = $rsltPP[0]['pd_e_customer_cd'];
          }
          if (self::checkNotSet($rec['pw_e_shipper_cd']) === true) {
            $rec['pw_e_shipper_cd'] = $rsltPP[0]['pd_e_shipper_cd'];
          }
          if (self::checkNotSet($rec['pw_e_delivery_cd']) === true) {
            $rec['pw_e_delivery_cd'] = $rsltPP[0]['pd_e_delivery_cd'];
          }
          if (self::checkNotSet($rec['pw_quantity']) === true) {
            $rec['pw_quantity'] = $rsltPP[0]['pd_ed_quantity'];
          }
          // 登録
          $sth = $dbh->prepare(self::makeInsertSQL('prodplandetailsw', $columnsD));
          self::bindInsertKeys($sth, $columnsD, $rec);
          $sth->execute();
        }
      }

      // 明細②データ 縦抜きデータがあったら作成 20 
      if ((float)$datHeader['pp_proc_time_02'] > 0) {
        // 既存データを削除
        // もしGが変更されると、更新の場合は余分なデータが残り続けるため、工程CD＆指図番号で指定して削除してから書込
        $sth = $dbh->prepare('SELECT * FROM prodplandetailsw 
        WHERE pw_belong_cd = :BELONGCD AND pw_prod_plan_no = :PLANNO AND pw_process_cd = :PROCCD
        ;');
        $sth->bindValue(':BELONGCD', $datHeader['pp_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':PLANNO', $datHeader['pp_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', '20', PDO::PARAM_STR);
        $sth->execute();
        $sno = $sth->fetchAll(PDO::FETCH_ASSOC);
        if(count($sno) > 0) {
          // 既存の場合削除
          $sth = $dbh->prepare('
          DELETE FROM prodplandetailsw 
          WHERE pw_belong_cd = :BELONGCD AND pw_prod_plan_no = :PLANNO AND pw_process_cd = :PROCCD
          ;');
          $sth->bindValue(':BELONGCD', $datHeader['pp_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':PLANNO', $datHeader['pp_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':PROCCD', '20', PDO::PARAM_STR);
          $sth->execute();
        }
        $recDetail2 = [];
        foreach($datD2 as $rec2) {
        // 必要なデータを付加 名称がテーブル定義と異なるので注意
        // Default値のままでよいものは表記無し
          $recDetail2 = array(
            'pw_belong_cd'        =>    $_SESSION['companycd'],
            'pw_prod_plan_no'     =>    $datHeader['pp_prod_plan_no'],
            'pw_prod_plan_sub_no' =>    sprintf('%03d', $rec2['pw_group_sign']),
            'pw_process_cd'       =>    '20',
            'pw_disp_num'         =>    $rec2['pw_group_sign'],
            'pw_change_sign'      =>    null,
            'pw_ed_sub_10'        =>    null,
            'pw_ed_sub_11'        =>    null,
            'pw_estimate_no'      =>    null,
            'pw_estimate_sub_no'  =>    null,
            'pw_finish_plan_date' =>    null,
            'pw_customer_cd'      =>    null,
            'pw_shipper_cd'       =>    null,
            'pw_delivery_cd'      =>    null,
            'pw_width_size'       =>    $rec2['pw_g_size_side'],
            'pw_vertical_size'    =>    $rec2['pw_g_vert'] ? $rec2['pw_g_vert'] : 0,
            'pw_sheets_num'       =>    $rec2['pw_g_num'], 
            'pw_result_size'      =>    $rec2['pw_g_size'],
            'pw_vert_num'         =>    $rec2['pw_g_sheets_calc'],
            'pw_chain_num'        =>    $rec2['pw_g_ch_result'],
            'pw_group_sign'       =>    $rec2['pw_g_num'],
            'pw_prod_remark'      =>    $rec2['pw_g_remark'],
            'pw_update_at'        =>    $datHeader['pp_update_at'],
            'pw_update_cd'        =>    $datHeader['pp_update_cd'],          
          );
          // 登録
          $sth = $dbh->prepare(self::makeInsertSQL('prodplandetailsw', $columnsD));
          self::bindInsertKeys($sth, $columnsD, $recDetail2);
          $sth->execute();
        } 
      }

      // 基本指図に登録
      // 時間が入っている工程のみ製造指示を作成 工程数6カラム 10~24
      for ($i = 0; $i < 6; $i++) {
        // ベースの製造指示データ $resultPD
        // 工程10と2Xのデータ登録・更新用
        $arWire = array(  
          'pd_belong_cd'                =>    $_SESSION['companycd'],
          'pd_prod_plan_no'             =>    $datHeader['pp_prod_plan_no'],
          'pd_prod_plan_sub_no'         =>    '000',
          'pd_process_cd'               =>    '',
          'pd_update_cnt'               =>    0,
          'pd_place_cd'                 =>    '',
          'pd_proj_cd'                  =>    '',
          'pd_par_cd'                   =>    '',
          'pd_ar_cd'                    =>    '',
          'pd_ins_level'                =>    '',
          'pd_finish_plan_date_h'       =>    $resultPD[0]['pd_finish_plan_date_h'],
          'pd_disp_order'               =>    '',
          'pd_e_estimate_no'            =>    '',
          'pd_e_estimate_sub_no'        =>    '',
          'pd_e_customer_cd'            =>    '',
          'pd_e_shipper_cd'             =>    '',
          'pd_e_stay_cd'                =>    '',
          'pd_e_delivery_cd'            =>    '',
          'pd_e_customer_charge_cd'     =>    '',
          'pd_e_desired_delivery_date'  =>    '',
          'pd_p_cd'                     =>    $resultPD[0]['pd_p_cd'],
          'pd_ed_sub_01'                =>    $resultPD[0]['pd_ed_sub_01'],
          'pd_ed_sub_02'                =>    $resultPD[0]['pd_ed_sub_02'],
          'pd_ed_sub_03'                =>    $resultPD[0]['pd_ed_sub_03'],
          'pd_ed_sub_04'                =>    $resultPD[0]['pd_ed_sub_04'],
          'pd_ed_sub_05'                =>    $resultPD[0]['pd_ed_sub_05'],
          'pd_ed_sub_06'                =>    $resultPD[0]['pd_ed_sub_06'],
          'pd_ed_sub_08'                =>    0,
          'pd_ed_sub_10'                =>    '',
          'pd_ed_sub_09'                =>    0,
          'pd_ed_sub_11'                =>    '',
          'pd_ed_sub_12'                =>    0,
          'pd_ed_sub_13'                =>    0,
          'pd_ed_quantity'              =>    0,
          'pd_ins_qty'                  =>    0,
          'pd_dimension'                =>    0,
          'pd_weight'                   =>    0,
          'pd_wire'                     =>    0,
          'pd_material_unit_cost'       =>    0,
          'pd_leaf_no'                  =>    '',
          'pd_leaf_create_date'         =>    '',
          'pd_start_plan_date'          =>    '',
          'pd_start_plan_time'          =>    '',
          'pd_finish_plan_date'         =>    '',
          'pd_finish_plan_time'         =>    '',
          'pd_plan_interval'            =>    0,
          'pd_start_date'               =>    '',
          'pd_start_time'               =>    '',
          'pd_finish_date'              =>    '',
          'pd_finish_time'              =>    '',
          'pd_abort_num'                =>    0,
          'pd_interval'                 =>    0,
          'pd_prod_qty'                 =>    0,
          'pd_update_at'                =>    $datHeader['pp_update_at'],
          'pd_update_cd'                =>    $datHeader['pp_update_cd'],
          'pd_weave_sign'               =>    '1'
        );
        // 必要データを設定・取得
        // PKを設定
        self::markAsHeaderPK($columnsBase, 'pd_belong_cd');
        self::markAsHeaderPK($columnsBase, 'pd_prod_plan_no');
        self::markAsHeaderPK($columnsBase, 'pd_prod_plan_sub_no');
        self::markAsHeaderPK($columnsBase, 'pd_process_cd');
        // 製造指示のヘッダデータ作成
        $arWire[$i]['pd_process_cd'] = '';
        switch (sprintf('%02d', ($i + 1))) {
          case '01':  //工程10
            if ((float)$datHeader['pp_proc_time_01'] > 0) {
              // 時間が設定されていた時のみデータ更新
              $arWire['pd_process_cd'] = '10';
              $arWire['pd_plan_interval'] = (float)$datHeader['pp_proc_time_01'];
            }
            break;
          case '02':  //工程20
            if ((float)$datHeader['pp_proc_time_02'] > 0) {
              // 時間が設定されていた時のみデータ更新
              $arWire['pd_process_cd'] = '20';
              $arWire['pd_plan_interval'] = (float)$datHeader['pp_proc_time_02'];
            }
            break;
          case '03':  //工程21
            if ((float)$datHeader['pp_proc_time_03'] > 0) {
              // 時間が設定されていた時のみデータ更新
              $arWire['pd_process_cd'] = '21';
              $arWire['pd_plan_interval'] = (float)$datHeader['pp_proc_time_03'];
            }
            break;
          case '04':  //工程22
            if ((float)$datHeader['pp_proc_time_04'] > 0) {
              // 時間が設定されていた時のみデータ更新
              $arWire['pd_process_cd'] = '22';
              $arWire['pd_plan_interval'] = (float)$datHeader['pp_proc_time_04'];
            }
            break;        
          case '05':  //工程23
            if ((float)$datHeader['pp_proc_time_05'] > 0) {
              // 時間が設定されていた時のみデータ更新
              $arWire['pd_process_cd'] = '23';
              $arWire['pd_plan_interval'] = (float)$datHeader['pp_proc_time_05'];
            }
            break;
          case '06':  //工程24
            if ((float)$datHeader['pp_proc_time_06'] > 0) {
              // 時間が設定されていた時のみデータ更新
              $arWire['pd_process_cd'] = '24';
              $arWire['pd_plan_interval'] = (float)$datHeader['pp_proc_time_06'];
            }
            break;
          default:  
            $arWire['pd_process_cd'] = '';
        }

        // 登録あるときのみデータ書き込み
        if ($arWire['pd_process_cd'] === '10') {
          // 工程10の場合         
          $sth = $dbh->prepare('
          SELECT * FROM prodplans
          WHERE pd_belong_cd = :BELONGCD AND 
          pd_prod_plan_no = :PLANNO AND
          pd_process_cd = :PRODCD          
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':PLANNO', $datHeader['pp_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':PRODCD', $arWire['pd_process_cd'], PDO::PARAM_STR);
          $sth->execute();
          $rsltP10 = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($rsltP10) > 0) {  // 既存
            $arWire['pd_update_cnt'] = $rsltP10[0]['pd_update_cnt'] + 1;
            $sth = $dbh->prepare(self::makeUpdateSQL('prodplans', $columnsBase));
            self::bindUpdateKeys($sth, $columnsBase, $arWire);
            $sth->execute();
          } else {
            $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columnsBase));
            self::bindInsertKeys($sth, $columnsBase, $arWire);
            $sth->execute();
          }
        }

        if (substr($arWire['pd_process_cd'], 0, 1) === '2') {
          // 工程2Xの場合        
          foreach ($datD2 as $rec) {
            $cnt++;
            $sth = $dbh->prepare('
            SELECT * FROM prodplans
            WHERE pd_belong_cd = :BELONGCD AND 
            pd_prod_plan_no = :PLANNO AND
            pd_prod_plan_sub_no = :SUBNO AND
            pd_process_cd = :PRODCD          
            ;');
            $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
            $sth->bindValue(':PLANNO', $datHeader['pp_prod_plan_no'], PDO::PARAM_STR);
            $sth->bindValue(':SUBNO', sprintf('%03d', $rec['pw_group_sign']), PDO::PARAM_STR);
            $sth->bindValue(':PRODCD', $arWire['pd_process_cd'], PDO::PARAM_STR);
            $sth->execute();
            $rsltP20 = $sth->fetchAll(PDO::FETCH_ASSOC);
            if (count($rsltP20) > 0) {  // 既存
              $arWire['pd_update_cnt'] = $rsltP20[0]['pd_update_cnt'] + 1;
              $arWire['pd_prod_plan_sub_no'] = sprintf('%03d', $rec['pw_group_sign']);
              $sth = $dbh->prepare(self::makeUpdateSQL('prodplans', $columnsBase));
              self::bindUpdateKeys($sth, $columnsBase, $arWire);
              $sth->execute();
            } else {
              $arWire['pd_prod_plan_sub_no'] = sprintf('%03d', $rec['pw_group_sign']);
              $sth = $dbh->prepare(self::makeInsertSQL('prodplans', $columnsBase));
              self::bindInsertKeys($sth, $columnsBase, $arWire);
              $sth->execute();
            }
          }           
        }
      

        // 金網指示作成フラグを更新
        $sth = $dbh->prepare('
        UPDATE prodplans
        SET pd_weave_sign = :SIGN
        WHERE pd_belong_cd = :BELONGCD AND 
        pd_prod_plan_no = :PLANNO
        ;');
        $sth->bindValue(':SIGN', '1', PDO::PARAM_STR);
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':PLANNO', $datHeader['pp_prod_plan_no'], PDO::PARAM_STR);
        $sth->execute();
        
      }
      $dbh->commit();
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
    }      
    echo json_encode($resp);
    // throw $e;
  }


  /***
   * 製造指示の加工工程詳細データを登録
   */
  public static function updateProdplansproc($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $columns = self::getColumnDefs('prodplansproc');  
    $dbh = self::dbPDO();
    try {   
      $dbh->beginTransaction();
      foreach ($sdat as $record) {
        // 必要データをセット 更新回数はdefault0をセット
        $record['ppr_belong_cd'] = $_SESSION['companycd'];
        $record['ppr_update_cnt'] = 0;
        $record['ppr_update_cd'] = $_SESSION['usercd'];
        $record['ppr_update_at'] = self::currentDate();
        
        $sth = $dbh->prepare('
        SELECT * FROM prodplansproc
        WHERE ppr_belong_cd = :BELONGCD AND 
        ppr_prod_plan_no = :PLANNO AND 
        ppr_proc_cd = :PROCCD AND 
        ppr_mn_content_cd = :CONTENTCD 
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':PLANNO', $record['ppr_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', $record['ppr_proc_cd'], PDO::PARAM_STR);
        $sth->bindValue(':CONTENTCD', $record['ppr_mn_content_cd'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (count($result) > 0) {
          // 既存データ
          // 更新回数最大値を上記に入れるとcountでは、データ有無が判断できなくなるのでここで取得
          $sth = $dbh->prepare('
          SELECT MAX(ppr_update_cnt) AS maxcnt FROM prodplansproc
          WHERE ppr_belong_cd = :BELONGCD AND 
          ppr_prod_plan_no = :PLANNO AND 
          ppr_proc_cd = :PROCCD AND 
          ppr_mn_content_cd = :CONTENTCD 
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':PLANNO', $record['ppr_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':PROCCD', $record['ppr_proc_cd'], PDO::PARAM_STR);
          $sth->bindValue(':CONTENTCD', $record['ppr_mn_content_cd'], PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);

          $record['ppr_update_cnt'] = $result[0]['maxcnt'] + 1;
          $sth = $dbh->prepare(self::makeUpdateSQL('prodplansproc', $columns, $record));
          self::bindValueToUpdate($sth, $columns, $record);
        } else {
          $sth = $dbh->prepare(self::makeInsertSQL('prodplansproc', $columns, $record));
          self::bindInsertKeys($sth, $columns, $record);
        }
        $sth->execute();
      }
      $dbh->commit();
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
    }
    echo json_encode($resp);
  }



  // 製作指示書更新
  public static function updateL($datHeader, $datdetail) {
    $columnsD = self::getColumnDefs('leaflist');
    self::markAsHeaderPK($columnsD, 'L_CUSTOMER_ID');
    self::markAsHeaderPK($columnsD, 'L_CUSTOMER_CD');
    self::markAsHeaderPK($columnsD, 'L_CUSTOMER_POST_ID');
    self::markAsHeaderPK($columnsD, 'L_ESTIMATE_DATE');
    self::markAsHeaderPK($columnsD, 'L_SALESMAN_ID');
    self::markAsHeaderPK($columnsD, 'L_SALESMAN_CD');
    self::markAsHeaderPK($columnsD, 'L_ESTIMATE_SEQ_NO');
    self::markAsHeaderPK($columnsD, 'L_ESTIMATE_VER');
    self::markAsHeaderPK($columnsD, 'L_ESTIMATE_DETAILS_NO');
    self::markAsHeaderPK($columnsD, 'L_LEAF_SEQ_NO');
    self::markAsHeaderPK($columnsD, 'L_LEAF_VER');
    $columnsD = self::removeFromColumns($columnsD, 'L_SERIAL_ID');
    $columnsD = self::removeFromColumns($columnsD, 'L_PRODUCTS_NAME');
    $columnsD = self::removeFromColumns($columnsD, 'L_PRODUCTS_NO');
    $columnsD = self::removeFromColumns($columnsD, 'L_UNIT');
    $columnsD = self::removeFromColumns($columnsD, 'L_CUSTOMER_ORDER_NO');
    $columnsD = self::removeFromColumns($columnsD, 'L_PIC_NO');
    $columnsD = self::removeFromColumns($columnsD, 'L_PREV_LEAF1');
    $columnsD = self::removeFromColumns($columnsD, 'L_PREV_LEAF2');
    $columnsD = self::removeFromColumns($columnsD, 'L_PREV_LEAF3');
    $columnsD = self::removeFromColumns($columnsD, 'L_PREV_LEAF4');
    $columnsD = self::removeFromColumns($columnsD, 'L_PREV_LEAF5');
    $columnsD = self::removeFromColumns($columnsD, 'L_NEXT_LEAF1');
    $columnsD = self::removeFromColumns($columnsD, 'L_NEXT_LEAF2');
    $columnsD = self::removeFromColumns($columnsD, 'L_NEXT_LEAF3');
    $columnsD = self::removeFromColumns($columnsD, 'L_NEXT_LEAF4');
    $columnsD = self::removeFromColumns($columnsD, 'L_NEXT_LEAF5');
    $columnsD = self::removeFromColumns($columnsD, 'L_TITLE_NAME');
    //foreach ($datHeader as $key => $key) { $datHeader[$key]['L_CUSTOMER_ID'] = $datHeader[$key]['L_CUSTOMER_CD'] . '  '; }
    foreach ($datdetail as $key => $key) {
      $datdetail[$key]['L_CUSTOMER_ID_PREVVAL'] = $datdetail[$key]['L_CUSTOMER_ID'];
      $datdetail[$key]['L_CUSTOMER_CD_PREVVAL'] = $datdetail[$key]['L_CUSTOMER_CD'];
      $datdetail[$key]['L_CUSTOMER_POST_ID_PREVVAL'] = $datdetail[$key]['L_CUSTOMER_POST_ID'];
      $datdetail[$key]['L_ESTIMATE_DATE_PREVVAL'] = $datdetail[$key]['L_ESTIMATE_DATE'];
      $datdetail[$key]['L_SALESMAN_ID_PREVVAL'] = $datdetail[$key]['L_SALESMAN_ID'];
      $datdetail[$key]['L_SALESMAN_CD_PREVVAL'] = $datdetail[$key]['L_SALESMAN_CD'];
      $datdetail[$key]['L_ESTIMATE_SEQ_NO_PREVVAL'] = $datdetail[$key]['L_ESTIMATE_SEQ_NO'];
      $datdetail[$key]['L_ESTIMATE_VER_PREVVAL'] = $datdetail[$key]['L_ESTIMATE_VER'];
      $datdetail[$key]['L_ESTIMATE_DETAILS_NO_PREVVAL'] = $datdetail[$key]['L_ESTIMATE_DETAILS_NO'];
      $datdetail[$key]['L_LEAF_SEQ_NO_PREVVAL'] = $datdetail[$key]['L_LEAF_SEQ_NO'];
      $datdetail[$key]['L_LEAF_VER_PREVVAL'] = $datdetail[$key]['L_LEAF_VER'];
    }
    //self::editHeaderAndDetailDB('leaflist', $columnsH, 'leaflist', $columnsD, $datHeader, $datdetail);
    self::editMasterDB('leaflist', $columnsD, $datdetail);
  }

  // 製作指示書(製造リーフ)更新
  public static function updateLP($datHeader, $datdetail) {
    $columnsD = self::getColumnDefs('leafprod');
    self::markAsHeaderPK($columnsD, 'l_leaf_no');
    $columnsD = self::removeFromColumns($columnsD, 'l_pd_real_interval');
    $columnsD = self::removeFromColumns($columnsD, 'l_pd_start_date');
    $columnsD = self::removeFromColumns($columnsD, 'l_pd_start_time');
    $columnsD = self::removeFromColumns($columnsD, 'l_pd_finish_date');
    $columnsD = self::removeFromColumns($columnsD, 'l_pd_finish_time');
    self::editMasterDB('leafprod', $columnsD, $datdetail);
  }

  /*************************************************************************************
   * 材料発注書登録
   */
  public static function updateMOED($datHeader, $datdetail) {
    $resp = array('succeed' => true, 'msg' => '');
    $columnsH = self::getColumnDefs('morderestimate');
    // $columnsEH = self::getColumnDefs('estimate');
    $columnsED = self::getColumnDefs('estimatedetails');
    $columnsTED = self::getColumnDefs('t_estimatedetails');
    
    // キー項目登録
    self::markAsHeaderPK($columnsH, 'moed_belong_cd');
    self::markAsHeaderPK($columnsH, 'moed_order_no');
    self::markAsHeaderPK($columnsH, 'moed_sub_no');
    self::markAsHeaderPK($columnsH, 'moed_accept_sub_no');

    self::markAsHeaderPK($columnsED, 'ed_belong_cd');
    self::markAsHeaderPK($columnsED, 'ed_estimate_no');
    self::markAsHeaderPK($columnsED, 'ed_shipment_sub_no');

    self::markAsHeaderPK($columnsTED, 'ed_belong_cd');
    self::markAsHeaderPK($columnsTED, 'ed_estimate_no');
    self::markAsHeaderPK($columnsTED, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsTED, 'ed_update_cnt');
    // 必須項目
    $belongCd = $_SESSION['companycd'];
    $updateAt = self::currentDate();
    $updateCD = $_SESSION['usercd'];

    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();

      foreach ($datdetail as $rec) {
        // ヘッダ項目を結合
        $rec = array_merge($rec, $datHeader);
        $sth = $dbh->prepare('
        SELECT * FROM morderestimate 
        WHERE moed_belong_cd = :BELONGCD AND 
        moed_order_no = :ORDERNO AND
        moed_sub_no = :SUBNO AND 
        moed_accept_sub_no = :ACCSUBNO
        ;');
        $sth->bindValue(':BELONGCD', $belongCd, PDO::PARAM_STR );
        $sth->bindValue(':ORDERNO', $$rec['moed_order_no'], PDO::PARAM_STR );
        $sth->bindValue(':SUBNO', $rec['moed_sub_no'], PDO::PARAM_STR );
        $sth->bindValue(':ACCSUBNO', $rec['moed_accept_sub_no'], PDO::PARAM_STR );
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        
        if (count($result) > 0 ) {
          // 既存 
          // 履歴テーブル記載
          $sth = $dbh->prepare('
          INSERT INTO t_morderestimate
          SELECT * FROM morderestimate 
          WHERE moed_belong_cd = :BELONGCD AND 
          moed_order_no = :ORDERNO AND
          moed_sub_no = :SUBNO AND 
          moed_accept_sub_no = :ACCSUBNO
          ');
          $sth->bindValue(':BELONGCD', $belongCd, PDO::PARAM_STR );
          $sth->bindValue(':ORDERNO', $$rec['moed_order_no'], PDO::PARAM_STR );
          $sth->bindValue(':SUBNO', $rec['moed_sub_no'], PDO::PARAM_STR );
          $sth->bindValue(':ACCSUBNO', $rec['moed_accept_sub_no'], PDO::PARAM_STR );
          $sth->execute();
          
          $rec['moed_update_cnt'] = $result[0]['moed_update_cnt'] + 1;
          $sth = $dbh->prepare(self::makeUpdateSQL('morderestimate', $columnsH, $rec));
          self::bindUpdateKeys($sth, $columnsH, $rec);

        } else {
          $sth = $dbh->prepare(self::makeInsertSQL('morderestimate', $columnsH, $rec));
          self::bindInsertKeys($sth, $columnsH, $rec);
        }
        $sth->execute();

        if (isset($rec['moed_refer_no']) && isset($rec['moed_refer_sub_no'])) {
          // 発注引継データなので、受注データを更新
          $sth1 = $dbh->prepare('
            SELECT * FROM estimatedetails
            WHERE ed_estimate_no = :ESTNO AND ed_esimte_sub_no = :SUBNO;');
          $sth1->bindValue(':ESTNO', $rec['moed_refer_no'], PDO::PARAM_STR );
          $sth1->bindValue(':SUBNO', $rec['moed_refer_sub_no'], PDO::PARAM_STR );
          $sth1->execute();
          $resultED = $sth->fetchAll(PDO::FETCH_ASSOC);

          $resultED[0]['ed_type_07'] = '1';
          $resultED[0]['ed_update_cnt'] += 1;
          $sth1 = $dbh->prepare(self::makeUpdateSQL('estimatedetails', $columnsED, $resultED[0]));
          self::bindUpdateKeys($sth1, $columnsED, $resultED[0]);
          $sth1->execute();

          // 履歴アップデート
          $sth1 = $dbh->prepare(self::makeInsertSQL('t_estimatedetails', $columnsTED));
          self::bindInsertKeys($sth1, $columnsTED, $resultED[0]);
          $sth1->execute();
        }
      }
      $dbh->commit();
      echo json_encode($resp);
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }
  //   try {
  //     $dbh->beginTransaction();
  //     foreach ($datHeader as $key => $key) {
  //       $datHeader[$key]['MOE_ORDER_ID'] = $datHeader[$key]['MOE_ORDER_CD'];// . '  ';
  //       $datHeader[$key]['MOE_SALESMAN_ID'] = $datHeader[$key]['MOE_SALESMAN_CD'];// . '  ';
  //       $datHeader[$key]['MOE_CREATER_ID'] = $datHeader[$key]['MOE_CREATER_CD'];// . '  ';
  //       $datHeader[$key]['MOE_APPROVAL_ID'] = $datHeader[$key]['MOE_APPROVAL_CD'];// . '  ';
  //       $datHeader[$key]['MOE_LAST_CONFIRMATION_MAN_ID'] = $datHeader[$key]['MOE_LAST_CONFIRMATION_MAN_CD'];// .
  //       // 見積依頼作成日が未入力だった場合、依頼書注文Noが作成できないので当日をいれておく　sono
  //       if (self::checkNotSet($datHeader[$key]['MOE_ESTIMATE_DATE']) === true) { 
  //         $datHeader[$key]['MOE_ESTIMATE_DATE'] = self::currentDate();          
  //       }
  //       if (self::checkNotSet($datHeader[$key]['MOE_ORDER_NO']) === true) {
  //         $datHeader[$key]['MOE_ORDER_NO'] = self::getOrderNoDispSQL($dbh, 'MOE',
  //           $datHeader[$key]['MOE_ORDER_CD'], $datHeader[$key]['MOE_CREATION_DATE']);
  //           // MOE_ESTIMATE_DATEからMOE_CREATION_DATEへ変更。MOE_ESTIMATE_DATEがNOT NULLだったので、NULL許可変更に伴い変更。
  //           // $datHeader[$key]['MOE_ORDER_CD'], $datHeader[$key]['MOE_ESTIMATE_DATE']);
  //       }
  //       if (self::checkNotSet($datHeader[$key]['MOE_CREATION_DATE']) === true) {
  //         $datHeader[$key]['MOE_CREATION_DATE'] = self::currentDate();
  //       }
  //     }
  //     $datdetail = self::setHeaderValueToDetails($datHeader, $datdetail, 'MOE_ORDER_NO', 'MOED_ORDER_NO');
  //     foreach ($datdetail as $key => $key) {
  //       $datdetail[$key]['MOED_CUSTOMER_ID'] = $datdetail[$key]['MOED_CUSTOMER_CD'] . '  ';
  //       $datdetail[$key]['MOED_SALESMAN_ID'] = $datdetail[$key]['MOED_SALESMAN_CD'] . '  ';
  //       $datdetail[$key]['MOED_PROCESS_ID'] = $datdetail[$key]['MOED_PROCESS_CD'];// . '    ';
  //       // $datdetail[$key]['MOED_STATEMENT_DETAILS_NO'] = str_pad($datdetail[$key]['MOED_STATEMENT_DETAILS_NO'], 3, '0', STR_PAD_LEFT);
  //       if (self::checkNotSet($datdetail[$key]['MOED_STATEMENT_DETAILS_NO'])) {
  //         $datdetail[$key]['MOED_STATEMENT_DETAILS_NO'] = str_pad(($key+1), 3, '0', STR_PAD_LEFT);
  //       } else {
  //         $datdetail[$key]['MOED_STATEMENT_DETAILS_NO'] = str_pad($datdetail[$key]['MOED_STATEMENT_DETAILS_NO'], 3, '0', STR_PAD_LEFT);           
  //       }
  //       if (self::checkDeleteRowRequired($key) === false) {
  //         $total += $datdetail[$key]['MOED_MONEY'];
  //       }
  //     }
  //     // 合計金額を計算して代入後、登録を実行
  //     foreach ($datHeader as $key => $key) {
  //       $datHeader[$key]['MOE_TOTAL'] = $total;
  //     }
  //     self::editHeaderAndDetailDB('morderestimate', $columnsH, 'morderestimatedetails', $columnsD, $datHeader, $datdetail, $dbh);
  //     $dbh->commit();
  //   } catch (Exception $e) {
  //     $dbh->rollBack();
  //     // debug用　sono
  //     // error_log($e, "3", "C:/Apache24/htdocs/wbs/log/log_sono.txt");
  //     throw $e;
  //   }
  // }


  
  /***
   * 
   * $mode:0:検収取消 1:検収報告
   */
  public static function updateMODAccept($dat, $mode) {
    $resp = array('succeed' => true, 'msg' => '');
    $PAYMENT_DAY = '25';
    $DEL_FLG = 1;
    $ORDER_MATERIAL = 0;
    $ORDER_ESTIMATE = 1;
    $columnsH = self::getColumnDefs('morderestimate');
    $columnsTR = self::getColumnDefs('t_morderestimate');
    
    self::markAsHeaderPK($columnsH, 'moed_belong_cd');
    self::markAsHeaderPK($columnsH, 'moed_order_no');
    self::markAsHeaderPK($columnsH, 'moed_sub_no');
    self::markAsHeaderPK($columnsH, 'moed_accept_sub_no');
    self::markAsHeaderPK($columnsTR, 'moed_belong_cd');
    self::markAsHeaderPK($columnsTR, 'moed_order_no');
    self::markAsHeaderPK($columnsTR, 'moed_sub_no');
    self::markAsHeaderPK($columnsTR, 'moed_accept_sub_no');
    self::markAsHeaderPK($columnsTR, 'moed_update_cnt');
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      // 必要なデータを付加
      $belongCd = $_SESSION['companycd'];
      $updateAt = self::currentDate();
      $updateCd = $_SESSION['usercd'];

      foreach ($dat as $record) {
        // 該当レコードデータ取得
        $sth = $dbh->prepare('
        SELECT * FROM morderestimate
        WHERE moed_belong_cd = :BELONGCD  AND moed_order_no = :ORDERNO
        AND moed_sub_no = :SUBNO
        AND moed_accept_sub_no = :ACCNO
        ;');
        $sth->bindValue(':BELONGCD', $belongCd, PDO::PARAM_STR);
        $sth->bindValue(':ORDERNO', $record['moed_order_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $record['moed_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':ACCNO', $record['moed_accept_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        
        // 処理不要のデータをチェック
        if (self::checkNotSet($record['moed_accept_date'])) {
          // 未検収で、検収取消のケース
          if ($mode === 0) { continue; }
        } else {
          // 検収済みで、検収報告のケース
          if ($mode === 1) { continue; }
        }

        $record['moed_update_cnt'] = $result[0]['moed_update_cnt'] + 1;
        $record['moed_update_at'] = $updateAt;
        $record['moed_update_cd'] = $updateCd;
        // 日付を/抜きに
        $record['moed_arrival_plan_date'] = self::paddingDate($record['moed_arrival_plan_date']);
        $record['moed_arrival_hd_date'] = self::paddingDate($record['moed_arrival_hd_date']);

        if ($record['moed_payment_no'] === '未') {  // 画面表記から変換させる
          $record['moed_payment_no'] = '';
        }
        // 数値項目のデータを0に置き換える
        // 線番データは、画面表示項目なので、数値データに置き換えてやる
        if (!isset($record['moed_sub_num_3']) || $record['moed_sub_num_3'] === '') {
          $record['moed_sub_num_03'] = 0;
        } 
        if ($mode === 1) {  // 検収報告
          // ヘッダの入荷予定日で、明細データを書き換え 
          // 検収→検収取消→検収時、基軸日が明細でとっているためヘッダデータで置き換え       
          $record['moed_accept_date'] = $result[0]['moed_arrival_hd_date'];
          $record['moed_arrival_plan_date'] = $result[0]['moed_arrival_hd_date'];
          $record['moed_payment_plan_date'] = self::getMOPaymentDate($record['moed_arrival_plan_date'], $PAYMENT_DAY);

          // 社内ロット番号 発注番号+枝番
          // ※入庫時、ロットNoは改めてセットする。
          $record['moed_type_03'] = substr($record['moed_order_no'], 1, 10) . $record['moed_sub_no'] . $record['moed_accept_sub_no'];
        } else {  // 検収取消
          $record['moed_accept_date'] = '';
          $record['moed_payment_plan_date'] = '';
        }
        // 発注データ更新
        $sth = $dbh->prepare('
        UPDATE morderestimate 
        SET moed_update_cnt = :CNT,
        moed_accept_date = :ACCPTDATE,
        moed_qty_quit = :QTY,
        moed_payment_plan_date = :PAYDAY,
        moed_update_at = :AT,
        moed_update_cd = :UPCD
        WHERE moed_belong_cd = :BELONGCD 
        AND moed_order_no = :ORDERNO
        AND moed_sub_no = :SUBNO
        AND moed_accept_sub_no = :ACCNO
        ');
        $sth->bindValue(':CNT', $record['moed_update_cnt'], PDO::PARAM_STR);
        $sth->bindValue(':ACCPTDATE', $record['moed_accept_date'], PDO::PARAM_STR);
        $sth->bindValue(':QTY', 0, PDO::PARAM_STR);
        $sth->bindValue(':PAYDAY', $record['moed_payment_plan_date'], PDO::PARAM_STR);
        $sth->bindValue(':AT', $record['moed_update_at'], PDO::PARAM_STR);
        $sth->bindValue(':UPCD', $record['moed_update_cd'], PDO::PARAM_STR);
        $sth->bindValue(':BELONGCD', $belongCd, PDO::PARAM_STR);
        $sth->bindValue(':ORDERNO', $record['moed_order_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $record['moed_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':ACCNO', $record['moed_accept_sub_no'], PDO::PARAM_STR);
        $sth->execute();

        // 履歴更新
        $sth = $dbh->prepare(self::makeInsertSQL('t_morderestimate', $columnsTR));
        self::bindInsertKeys($sth, $columnsTR, $record);
        $sth->execute();

        // 検収解除は旧データのマイナス処理を行う
        // 検収登録は、画面のレコードデータを登録 
        if ($mode === 1) {
          // 登録
          self::issueStock('ACCEPTUP', $record['moed_accept_date'], $record, $dbh);
          // 消費税登録
          self::issueStockMODTaxValue($dbh, $record, $record['moed_accept_date'], 1);

          // 在庫管理対象かつ、入庫済みの場合、在庫データの評価金額をセットする ※2023/6/13
          if ($record['moed_inventory_type'] == '1' && $record['moed_type_02'] == '1') {
            $wcd = self::checkNotSet($record['moed_customer_charge_cd']) ? '000' : $record['moed_customer_charge_cd'];
            $pcd = $record['moed_product_cd'];
            $subcd = self::storageSetPadding($record);
            $typesubject = $record['moed_type_subject'];
            $parrangementcd = $record['moed_parrangement_cd'];
            $unitcd = $record['moed_zaiko_tani'];
            // 在庫テーブルに存在するかチェック
            $sth = $dbh->prepare('
            SELECT *
            FROM storage
            WHERE sr_w_cd = :WAREHOUSECD
            AND sr_p_cd = :PRODUCTCD
            AND sr_sub_cd = :PSUPPLE
            AND sr_type_subject = :SUBJECTCD
            AND sr_parrangement_cd = :PARCD 
            AND sr_unit_cd = :UNITCD
            ;');
            $sth->bindValue(':WAREHOUSECD', $wcd, PDO::PARAM_STR);
            $sth->bindValue(':PRODUCTCD', $pcd, PDO::PARAM_STR);
            $sth->bindValue(':PSUPPLE', $subcd, PDO::PARAM_STR);
            $sth->bindValue(':SUBJECTCD', $typesubject, PDO::PARAM_STR);
            $sth->bindValue(':PARCD', $parrangementcd, PDO::PARAM_STR);
            $sth->bindValue(':UNITCD', $unitcd, PDO::PARAM_STR);
            $sth->execute();
            $storageData = $sth->fetchAll(PDO::FETCH_ASSOC);

            // 在庫テーブルに存在する場合、在庫数から評価合計金額を計算
            if (count($storageData) > 0) {
              $money = $storageData[0]['sr_quantity'] * $record['moed_unit_price'];
              $price = $record['moed_unit_price'];

              $sth = $dbh->prepare('
              UPDATE storage
              SET sr_price_eval = :MONEY, 
              sr_fix_price_eval = :PRICE, 
              sr_update_at = :UPDATEAT, 
              sr_update_cd = :UPDATECD 
              WHERE sr_w_cd = :WAREHOUSECD
              AND sr_p_cd = :PRODUCTCD
              AND sr_sub_cd = :PSUPPLE
              AND sr_type_subject = :SUBJECTCD
              AND sr_parrangement_cd = :PARCD 
              AND sr_unit_cd = :UNITCD
              ;');
              $sth->bindValue(':MONEY', $money, PDO::PARAM_STR);
              $sth->bindValue(':PRICE', $price, PDO::PARAM_STR);
              $sth->bindValue(':UPDATEAT', self::currentDate(), PDO::PARAM_STR);
              $sth->bindValue(':UPDATECD', $_SESSION['usercd'], PDO::PARAM_STR);
              $sth->bindValue(':WAREHOUSECD', $wcd, PDO::PARAM_STR);
              $sth->bindValue(':PRODUCTCD', $pcd, PDO::PARAM_STR);
              $sth->bindValue(':PSUPPLE', $subcd, PDO::PARAM_STR);
              $sth->bindValue(':SUBJECTCD', $typesubject, PDO::PARAM_STR);
              $sth->bindValue(':PARCD', $parrangementcd, PDO::PARAM_STR);
              $sth->bindValue(':UNITCD', $unitcd, PDO::PARAM_STR);
              $sth->execute();              
            }
          }

        } else {
          // 解除 解除日の日付を要確認のこと
          self::issueStock('ACCEPTDEL', $result[0]['moed_accept_date'], $result[0], $dbh);
          self::issueStockMODTaxValue($dbh, $result[0], $result[0]['moed_accept_date'], 0);

          // 在庫管理対象かつ、入庫済みの場合、在庫データの評価金額をリセットする ※2023/6/13
          if ($record['moed_inventory_type'] == '1' && $record['moed_type_02'] == '1') {
            $wcd = self::checkNotSet($record['moed_customer_charge_cd']) ? '000' : $record['moed_customer_charge_cd'];
            $pcd = $record['moed_product_cd'];
            $subcd = self::storageSetPadding($record);
            $typesubject = $record['moed_type_subject'];
            $parrangementcd = $record['moed_parrangement_cd'];
            $unitcd = $record['moed_zaiko_tani'];
            // 在庫テーブルに存在する場合、在庫数から評価合計金額を計算
            $sth = $dbh->prepare('
            UPDATE storage
            SET sr_price_eval = 0, 
            sr_fix_price_eval = 0, 
            sr_update_at = :UPDATEAT, 
            sr_update_cd = :UPDATECD 
            WHERE sr_w_cd = :WAREHOUSECD
            AND sr_p_cd = :PRODUCTCD
            AND sr_sub_cd = :PSUPPLE
            AND sr_type_subject = :SUBJECTCD
            AND sr_parrangement_cd = :PARCD 
            AND sr_unit_cd = :UNITCD
            ;');
            $sth->bindValue(':UPDATEAT', self::currentDate(), PDO::PARAM_STR);
            $sth->bindValue(':UPDATECD', $_SESSION['usercd'], PDO::PARAM_STR);
            $sth->bindValue(':WAREHOUSECD', $wcd, PDO::PARAM_STR);
            $sth->bindValue(':PRODUCTCD', $pcd, PDO::PARAM_STR);
            $sth->bindValue(':PSUPPLE', $subcd, PDO::PARAM_STR);
            $sth->bindValue(':SUBJECTCD', $typesubject, PDO::PARAM_STR);
            $sth->bindValue(':PARCD', $parrangementcd, PDO::PARAM_STR);
            $sth->bindValue(':UNITCD', $unitcd, PDO::PARAM_STR);
            $sth->execute();              
          }
        }
      }

      $dbh->commit();

      echo json_encode($resp);
    } catch (Exception $e) {
      // echo $e;
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }


  /**
   * 材料発注登録
   * $mode: 0はデータ登録、1は発注・検収同時登録、2は部分検収
   * （※2023/6/12　発注の新規登録と同時に検収登録をすることがないため、$mode: 1は処理しない）
   * 発注・検収は、入庫せず、委託先や発注先から直接発送の場合。
   * dbstatus:0は新規登録、1は更新
   */
  public static function updateMOD($datHeader, $datDetail, $mode, $dbstatus = '1') {
    $resp = array('succeed' => true, 'msg' => '');
    $nAcceptCnt = 0;    // 検収
    $nOrderCnt = 0;    // 発注書発行
    $nRecCnt = 0;       // レコードカウント
    $nPayCnt = 0;       // 支払区分　全て1より大きい場合は、支払済みなので、変更不可。
    $PAYMENT_DAY = '25';
    $UNDEF_CUSTOMER_POST_CD = 'xxxx';   // 受注からの引継ぎデータの場合の仮置きコード
    $strShipperCD = '';
    $strDeliveryCD = '';
    $STOCK_OWN = '0';   // 在庫の区分　0は自社
    $STOCK_CUSTOMER = '1';  // 客先用　受注品はすべてここ
    $STOCK_SUPPLY = '2';    // 支給品

    $columnsH = self::getColumnDefs('morderestimate');
    $columnsTH = self::getColumnDefs('t_morderestimate');    
    $columnsEH = self::getColumnDefs('estimatedetails');
    $columnsETH = self::getColumnDefs('t_estimatedetails');

    self::markAsHeaderPK($columnsH, 'moed_belong_cd');
    self::markAsHeaderPK($columnsH, 'moed_order_no');
    self::markAsHeaderPK($columnsH, 'moed_sub_no');
    self::markAsHeaderPK($columnsH, 'moed_accept_sub_no');
    self::markAsHeaderPK($columnsTH, 'moed_belong_cd');
    self::markAsHeaderPK($columnsTH, 'moed_order_no');
    self::markAsHeaderPK($columnsTH, 'moed_sub_no');
    self::markAsHeaderPK($columnsTH, 'moed_accept_sub_no');
    self::markAsHeaderPK($columnsTH, 'moed_update_cnt');
    self::markAsHeaderPK($columnsEH, 'ed_belong_cd');
    self::markAsHeaderPK($columnsEH, 'ed_estimate_no');
    self::markAsHeaderPK($columnsEH, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsEH, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsETH, 'ed_belong_cd');
    self::markAsHeaderPK($columnsETH, 'ed_estimate_no');
    self::markAsHeaderPK($columnsETH, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsETH, 'ed_shipment_sub_no');

    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      $datHeader[0]['moed_belong_cd'] = $_SESSION['companycd'];
      $datHeader[0]['moed_update_at'] = self::currentDate();
      $datHeader[0]['moed_update_cd'] = $_SESSION['usercd'];
      // 該当の発注番号で検索をかけ、既存の有無、発注書発行と検収、支払状況を確認
      if (!$dbstatus) {
        // 新規 dbstatus=0が新規。
        $sth = $dbh->prepare('
        SELECT MAX(moed_order_no) AS maxno FROM t_morderestimate
        WHERE 
        moed_order_no LIKE CONCAT("H", DATE_FORMAT(now(), "%y%m%d"), "%")
        ;');
        $sth->execute();
        $resultSqno = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (isset($resultSqno[0]['maxno'])) {
          $datHeader[0]['moed_order_no'] = substr($resultSqno[0]['maxno'], 0, 7) . (sprintf('%04d', substr($resultSqno[0]['maxno'], -4) + 1));
        } else {
          $datHeader[0]['moed_order_no'] = 'H' . substr( self::currentDate(), 2, 6) . '0001';
        }

        // 同じ見積データからの遷移の場合、エラーチェックはこのフェーズが最終確認箇所なので、ここで確認
        $sth = $dbh->prepare('
        SELECT * FROM estimatedetails 
        WHERE ed_estimate_no = :ESTNO AND ed_estimate_sub_no = :SUBNO
        ;');
        $sth->bindValue(':ESTNO', $datHeader[0]['moed_refer_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $datHeader[0]['moed_refer_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $resultEST = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($resultEST) > 0 ) {
          // 直前に他者によって、同じ見積データから製造委託が登録されてしまった場合
          if ($resultEST[0]['ed_sub_07'] !== null && $resultEST[0]['ed_sub_07'] > 0) {
            $resp['succeed'] = false;
            $resp['msg'] = '引継ぎ済みの受注データです。再度確認をお願いします。';
            $dbh->rollBack();
            echo json_encode($resp);
            return;
          }
        }
      } else {
        $sth = $dbh->prepare('
        SELECT * FROM morderestimate
        WHERE moed_belong_cd = :BELONGCD AND
        moed_order_no = :ORDERNO
        ;');
        $sth->bindValue(':BELONGCD', $datHeader[0]['moed_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':ORDERNO', $datHeader[0]['moed_order_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        $nRecCnt = count($result);
        for ($i = 0; $i < $nRecCnt; $i++) {
          // 発注書発行済みか検収済みかカウント
          if (self::checkNotSet($result[$i]['moed_order_date']) === false) {
            $nOrderCnt++;
          }
          if (self::checkNotSet($result[$i]['moed_accept_date']) === false) {
            $nAcceptCnt++;
          }
          if ($result[$i]['moed_pay_type'] !== '' && $result[$i]['moed_pay_type'] >= 1) {
            $nPayCnt++;
          }
        }
        if ($nRecCnt > 0 && $nPayCnt === $nRecCnt) {
          // 支払へ進んでいるため修正不可。受払明細での修正
          $resp['succeed'] = false;
          $resp['msg'] = '支払済みなので編集できません。';
          $dbh->rollBack();
          echo json_encode($resp);
          return;
        }
        if ($nRecCnt > 0 && $nAcceptCnt === $nRecCnt) {
          // 全レコード検収済み。検収取消後修正可能
          $resp['succeed'] = false;
          $resp['msg'] = '全データ検収済みなので編集できません。';
          $dbh->rollBack();
          echo json_encode($resp);
          return;
        }
      }

      // 発注引継ぎかつ、出荷元と納入先に変更がない場合は、仕入先の部署コードに該当データを追記する。
      if (isset($datHeader[0]['is_order_takeover']) && $datHeader[0]['is_order_takeover'] === true && $datHeader[0]['moed_refer_no']) {
        if ($datHeader[0]['moed_shipper_cd'] === $UNDEF_CUSTOMER_POST_CD) {
          $strShipperCD = self::registCustomerPostCD('shipper', $UNDEF_CUSTOMER_POST_CD, $datHeader, $dbh);
        }
        if ($datHeader[0]['moed_delivery_cd'] === $UNDEF_CUSTOMER_POST_CD) {
          $strDeliveryCD = self::registCustomerPostCD('delivery', $UNDEF_CUSTOMER_POST_CD, $datHeader, $dbh);
        }
      }

      foreach ($datDetail as $record) {
        // ヘッダデータを明細データに追加
        $record['moed_belong_cd'] = $_SESSION['companycd'];
        $record['moed_order_no'] = $datHeader[0]['moed_order_no'];
        $record['moed_customer_cd'] = $datHeader[0]['moed_customer_cd'];
        $record['moed_customer_post_cd'] = $datHeader[0]['moed_customer_post_cd'];
        $record['moed_customer_charge_cd'] = $datHeader[0]['moed_customer_charge_cd'];
        $record['moed_arrival_hd_date'] = $datHeader[0]['moed_arrival_hd_date'];
        $record['moed_refer_no'] = $datHeader[0]['moed_refer_no'];    // 引継ぎ受注番号
        $record['moed_salesman_cd'] = $datHeader[0]['moed_salesman_cd'];
        $record['moed_remarks'] = $datHeader[0]['moed_remarks'];
        $record['moed_update_at'] = $datHeader[0]['moed_update_at'];
        $record['moed_update_cd'] = $datHeader[0]['moed_update_cd'];
        $record['moed_warehouse_cd'] = $datHeader[0]['moed_warehouse_cd'];
        $record['moed_manufacture_cd'] = $datHeader[0]['moed_manufacture_cd'];
        $record['moed_shipper_cd'] = $strShipperCD !== '' ? $strShipperCD : $datHeader[0]['moed_shipper_cd'];
        $record['moed_delivery_cd'] = $strDeliveryCD !== '' ? $strDeliveryCD : $datHeader[0]['moed_delivery_cd'];
        $record['moed_sales_price'] = self::checkNotSet($datHeader[0]['moed_sales_price']) ? 0 : $datHeader[0]['moed_sales_price'];
        $record['moed_tax_sum'] = self::checkNotSet($datHeader[0]['moed_tax_sum']) ? 0 : $datHeader[0]['moed_tax_sum'];

        if (self::checkNotSet($record['moed_sub_num_03']) === true) {
          $record['moed_sub_num_03'] = 0;
        }

        // 読込時のDBデータカラム名と、入力カラム名が同じかつ、発注機能の都合上変更が不可のため、画面未入力=NULLとなることを避けるためチェック
        $record['moed_sub_08'] = is_null($record['moed_sub_08']) ? '' : $record['moed_sub_08'];
        $record['moed_sub_09'] = is_null($record['moed_sub_09']) ? '' : $record['moed_sub_09'];

        if (self::checkNotSet($record['moed_unit_price']) === true || $record['moed_unit_price'] === '-') {
          $record['moed_unit_price'] = 0;
        }
        if (self::checkNotSet($record['moed_money']) === true || $record['moed_money'] === '-') {
          $record['moed_money'] = 0;
        }
        if (self::checkNotSet($record['moed_money_tax']) === true || $record['moed_money_tax'] === '-') {
          $record['moed_money_tax'] = 0;
        }
        if (self::checkNotSet($record['moed_money_inc_tax']) === true || $record['moed_money_inc_tax'] === '-') {
          $record['moed_money_inc_tax'] = 0;
        }
        if (self::checkNotSet($record['moed_unit_qty']) || $record['moed_unit_qty'] <= 0) {
          $record['moed_stock_qty'] = $record['moed_quantity'];  
          $record['moed_unit_qty'] = $record['moed_quantity']; 
        }
        if (self::checkNotSet($record['moed_unit_eval'])) {
          // 在庫単位がセットされてなかったら取引単位を入れる
          $rec['moed_unit_eval'] = $record['moed_unit_tran'];
        }
        if (self::checkNotSet($record['moed_pay_type']) === true) {
          $record['moed_pay_type'] = 0;
        }  
        if (self::checkNotSet($record['moed_sub_13']) === true) {
          $record['moed_sub_13'] = '';
        } 

        // 入庫フラグ初期値0
        $record['moed_type_02'] = $record['moed_type_02'] === '' ? '0' : $record['moed_type_02'];

        // メーカーが入力されている場合、メーカーCDを設定
        $rsltManufacture = [];
        if (self::checkNotSet($datHeader[0]['moed_manufacture_cd']) === false) {
          $record['moed_maker_cd'] = $datHeader[0]['moed_customer_cd'] . $datHeader[0]['moed_customer_post_cd'];

          // 国産材か外国材か登録
          // メーカーコードが入っているときのみ判定。それ以外は不明のU
          $sth = $dbh->prepare('
          SELECT CP_QUOTATION_TYPE FROM customerpost
          WHERE CP_CUSTOMER_CD = :CUSCD AND CP_POST_CD = :MAKERCD AND CP_TYPE_CONTINUE = :TYPECONTINUE
          ;');
          $sth->bindValue(':CUSCD', $rec['moed_customer_cd'], PDO::PARAM_STR);
          $sth->bindValue(':MAKERCD', $rec['moed_manufacture_cd'], PDO::PARAM_STR);
          $sth->bindValue(':TYPECONTINUE', '0', PDO::PARAM_STR);
          $sth->execute();
          $rsltManufacture = $sth->fetchAll(PDO::FETCH_ASSOC);
        }

        if (count($rsltManufacture) > 0) {
          // 国産:D(domestic) 外国産:O(oversea)
          $rec['moed_type_06'] = $rsltManufacture[0]['CP_QUOTATION_TYPE'];
        } else {
          // Unknown
          $rec['moed_type_06'] = 'U';
        }

        // フラグ表示をDB用に戻す
        if ($record['moed_payment_no'] === '未' ) {
          $record['moed_payment_no'] = null;
        }

        $record['moed_parrangement_cd'] = is_null($record['moed_parrangement_cd']) || $record['moed_parrangement_cd'] === '' ? '001' : $record['moed_parrangement_cd']; 

        // カレンダー考慮　0埋め・文字数など
        $record['moed_arrival_plan_date'] = self::paddingDate($record['moed_arrival_plan_date']);
        $record['moed_arrival_hd_date'] = self::paddingDate($record['moed_arrival_hd_date']);

        if ($mode === '1' || $mode === '3') {
          if (self::checkNotSet($record['moed_order_date'])) {
            // 検収段階もしくは入庫段階の場合は、発注日がセットされていない場合は、自動でセットする。
            $record['moed_order_date'] = self::paddingDate($record['moed_arrival_hd_date']);
          }
          // // ヘッダの入荷予定日で、明細データを書き換え 検収→検収取消→検収時、基軸日が明細でとっているためヘッダデータで置き換え
          // if ($mode === '1') {
          //   // 検収時のみセット
          //   $record['moed_arrival_plan_date'] = $record['moed_arrival_hd_date'];
          // }
        } 
        if ($mode === '2') {
          // 部分検収の場合は、日付が異なるレコードは別検収とする。
          if ($record['moed_arrival_plan_date'] !== '' && $record['moed_arrival_plan_date'] !== $record['moed_arrival_hd_date']) {
            // 別検収
            $record['moed_arrival_plan_date'] = self::checkNotSet($rec['moed_arrival_plan_date']) ?  $record['moed_arrival_hd_date'] : $rec['moed_arrival_plan_date'];
            $recoed['moed_type_02'] = '0';
          }
        }
        if (self::checkNotSet($record['moed_arrival_plan_date']) === true) {
          // 明細に入荷予定日がセットされていなければ、ヘッダの入荷予定日をセット
          $record['moed_arrival_plan_date'] = $record['moed_arrival_hd_date'];
        }

        // // 入庫予定数量を算出
        // if (self::checkNotSet($record['moed_unit_qty']) === false && $record['moed_unit_qty'] > 0) {
        //   // 単価単位数量が入っている場合のみ、入庫予定数量を算出する
        //   $record['moed_stock_qty'] = $record['moed_unit_qty'] * ($record['moed_money'] / $record['moed_unit_price']);
        // }

        // 既存データ取得
        $sth = $dbh->prepare('
        SELECT * FROM morderestimate
        WHERE moed_belong_cd = :BELONGCD AND 
        moed_order_no = :ORDERNO AND 
        moed_sub_no = :SUBNO AND 
        moed_accept_sub_no = :ACTNO
        ;');
        $sth->bindValue(':BELONGCD', $record['moed_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':ORDERNO', $record['moed_order_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $record['moed_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':ACTNO', $record['moed_accept_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $rsltNow = $sth->fetchAll(PDO::FETCH_ASSOC);

        /** ここから ***/
        // 履歴テーブルデータ取得
        $sth = $dbh->prepare('
        SELECT * FROM t_morderestimate
        WHERE moed_belong_cd = :BELONGCD AND 
        moed_order_no = :ORDERNO AND 
        moed_sub_no = :SUBNO AND 
        moed_accept_sub_no = :ACTNO
        ;');
        $sth->bindValue(':BELONGCD', $record['moed_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':ORDERNO', $record['moed_order_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $record['moed_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':ACTNO', $record['moed_accept_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $rsltTran = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($rsltTran) > 0 && count($rsltNow) <= 0) {
          // 履歴テーブルには存在するのに、通常テーブルにはデータがない場合は、データが行削除された場合
          // 新規の場合は、最大値取得
          $sth = $dbh->prepare('
          SELECT *,max(moed_sub_no) AS maxno  FROM t_morderestimate
          WHERE moed_belong_cd = :BELONGCD AND 
          moed_order_no = :ORDERNO AND 
          moed_accept_sub_no = :ACTNO
          ;');
          $sth->bindValue(':BELONGCD', $record['moed_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':ORDERNO', $record['moed_order_no'], PDO::PARAM_STR);
          $sth->bindValue(':ACTNO', $record['moed_accept_sub_no'], PDO::PARAM_STR);
          $sth->execute();
          $rsltTranNo = $sth->fetchAll(PDO::FETCH_ASSOC);

          $record['moed_sub_no'] = sprintf('%03d', (integer)($rsltTranNo[0]['maxno']) + 1);
        } 
        if (count($rsltNow) <= 0) {
          // 新規追加行 発注データ新規登録もしくは、分割検収データの登録時
          if (self::checkNotSet($record['moed_type_subject']) === true) {
            $record['moed_type_subject'] = '7';   // 何も入ってなかったら経費とみなす
          }
          // if ($record['moed_type_subject'] === '1') {
          //   // 原材料品
          //   $record['moed_buy_type'] = '1';
          // } else if ($record['moed_type_subject'] === '2') {
          //   // リセール品
          //   $record['moed_buy_type'] = '2';
          // } else {
          //   // 雑費
          //   $record['moed_buy_type'] = '0';
          //   $record['moed_type_subject'] = '7';   // 何も入ってなかったら経費とみなす
          // }
          $record['moed_update_cnt'] = 0;
          if (self::checkNotSet($record['moed_pay_type']) === true) {
            $record['moed_pay_type'] = 0;
          }  

          // 在庫区分初期値 在庫管理対象
          $record['moed_inventory_type'] = isset($record['moed_inventory_type']) ? $record['moed_inventory_type'] : '2';

          // 社内ロット番号 発注番号+枝番+検収枝番
          // ※入庫時、ロットNoは改めてセットする。
          $record['moed_type_03'] = substr($record['moed_order_no'], 1, 10) . $record['moed_sub_no'] . $record['moed_accept_sub_no'];

          // 受注番号の引継ぎはあるが、在庫区分が入っていない場合、自動設定。客先用
          if (!self::checkNotSet($record['moed_refer_no'])) {
            // 2:客先用　0:自社用
            $record['moed_type_04'] = self::checkNotSet($record['moed_type_04']) ? $STOCK_CUSTOMER : $record['moed_type_04'];
          } 
          
          if ($mode === '1') {
            // mode1 発注・検収同時登録の場合のみ、検収処理を追加
            // 検収日・発注日は、入荷予定日をセットする
            if (self::checkNotSet($record['moed_arrival_plan_date']) === true) {
              $record['moed_accept_date'] = $record['moed_arrival_hd_date'];
            } else {
              $record['moed_accept_date'] = $record['moed_arrival_plan_date'];
            }
            $record['moed_order_date'] = $record['moed_accept_date'];
            $record['moed_qty_quit'] = 0;

            $record['moed_payment_plan_date'] = self::getMOPaymentDate($record['moed_accept_date'], $PAYMENT_DAY);         
          } 
          // 部分検収モードの新規レコードは、発注登録編集と同様の扱いとする。
          // 番号一覧表示のため追加　@20220310
          $record['moed_type_continue'] = $record['moed_type_continue'] ? $record['moed_type_continue'] : '0';

          // 2023/3/6 仕入先CDの変更がある発注の行追加データの発注番号が変わるため、以下の処理を実行しない。※別の不具合が発生したら再確認が必要↓
          // 発注番号が重複する場合、INSERTがUPDATE様の動作をしてしまうため、仕入先CDを含めて同一発注番号がないか再度確認させる。
          // 本来は、仕入先CDを複合主キーに入れた方がスマートであるが、仕入先の変更が発生しうることを鑑み、下記処理とする。
          // $sth = $dbh->prepare('
          // SELECT * FROM t_morderestimate
          // WHERE moed_order_no = :ORDERNO AND moed_customer_cd <> :CUSTOMERCD
          // FOR UPDATE
          // ;');
          // $sth->bindValue(':ORDERNO', $record['moed_order_no'], PDO::PARAM_STR);
          // $sth->bindValue(':CUSTOMERCD', $record['moed_customer_cd'], PDO::PARAM_STR);
          // $sth->execute();
          // $rsltExist = $sth->fetchAll(PDO::FETCH_ASSOC);
          // if (count($rsltExist) > 0) {
          //   $sth = $dbh->prepare('
          //   SELECT MAX(moed_order_no) AS maxno FROM t_morderestimate
          //   WHERE 
          //   moed_order_no LIKE CONCAT("H", DATE_FORMAT(now(), "%y%m%d"), "%")
          //   ;');
          //   $sth->execute();
          //   $resultSqno = $sth->fetchAll(PDO::FETCH_ASSOC);
          //   $record['moed_order_no'] = substr($resultSqno[0]['maxno'], 0, 7) . (sprintf('%04d', substr($resultSqno[0]['maxno'], -4) + 1));
          // }

          $sth = $dbh->prepare(self::makeInsertSQL('morderestimate', $columnsH));
          self::bindInsertKeys($sth, $columnsH, $record);
          $sth->execute();
          // 履歴更新
          $sth = $dbh->prepare(self::makeInsertSQL('t_morderestimate', $columnsTH));
          self::bindInsertKeys($sth, $columnsTH, $record);
          $sth->execute(); 
          // 発注引継ぎのケースは、受注データの発注済みステータスを更新
          if (self::checkNotSet($datHeader[0]['moed_refer_no']) === false) {
            $sth = $dbh->prepare('
            UPDATE estimatedetails
            SET ed_update_cnt = ed_update_cnt + 1,
            ed_type_07 = :FLG, 
            ed_update_at = :UPDATEAT, 
            ed_update_cd = :UPDATECD 
            WHERE ed_belong_cd = :BELONGCD AND
            ed_estimate_no = :ESTNO AND 
            ed_estimate_sub_no = :SUBNO               
            ;');
            $sth->bindValue(':FLG', '1', PDO::PARAM_STR);
            $sth->bindValue(':UPDATEAT', $record['moed_update_at'], PDO::PARAM_STR);
            $sth->bindValue(':UPDATECD', $record['moed_update_cd'], PDO::PARAM_STR);
            $sth->bindValue(':BELONGCD', $record['moed_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':ESTNO', $record['moed_refer_no'], PDO::PARAM_STR);
            $sth->bindValue(':SUBNO', $record['moed_refer_sub_no'], PDO::PARAM_STR);
            $sth->execute();
          }          
          if ($mode === '1') {
            // 新規追加かつ、検収の場合　受払明細にデータ追加
            self::issueStock('MOD', $record['moed_accept_date'],  $record, $dbh);
          } 
          if ($mode === '0' || $mode === '2') {
            // 追加行のケース　および部分検収の場合
            self::issueStockPlan('MOD', $record['moed_arrival_hd_date'], $record, $dbh);
          }
        } else {
          // 既存データ　データ削除に関しては、$datdetailに入ってこないので、別途処理
          if ($mode === '1' && self::checkNotSet($record['moed_accept_date']) === false) {
            // 検収済みの場合、検収取消の後にデータ編集可能。
            continue;
          }
          if ($mode === '2' && self::checkNotSet($record['moed_accept_date']) === false) {
            // 部分検収モードの場合も、検収済みのデータは無視する。
            continue;
          }
          if ($mode === '1' || $mode === '2') {
            // 既存データかつ、発注・検収同時登録の場合　(未検収の場合のみが該当)
            // // 入庫予定数量を算出
            // if (self::checkNotSet($record['moed_unit_qty']) === false && $record['moed_unit_qty'] > 0) {
            //   // 単価単位数量が入っている場合のみ、入庫予定数量を算出する
            //   $record['moed_stock_qty'] = $record['moed_unit_qty'] * ($record['moed_money'] / $record['moed_unit_price']);
            // }
            if (self::checkNotSet($record['moed_accept_date']) === true) {
              // 発注済みかつ未検収のケースはヘッダの入荷日を検収日とする
              $record['moed_accept_date'] = self::paddingDate( $datHeader[0]['moed_arrival_hd_date']);
              $record['moed_payment_plan_date'] = self::getMOPaymentDate($record['moed_accept_date'], $PAYMENT_DAY);
            } 
            if (self::checkNotSet($record['moed_order_date']) === true) {
              // 発注書未発行の場合は、入荷予定日をセットする。
              $record['moed_order_date'] = self::checkNotSet($record['moed_arrival_plan_date']) ? $record['moed_arrival_hd_date'] : $record['moed_arrival_plan_date'];
            }
          }
          // ※入庫時、ロットNoは改めてセットする。
          $record['moed_type_03'] = substr($record['moed_order_no'], 1, 10) . $record['moed_sub_no'] . $record['moed_accept_sub_no'];
          $record['moed_update_cnt'] = $rsltNow[0]['moed_update_cnt'] + 1;
          // 番号一覧表示のため追加　@20220310
          $record['moed_type_continue'] = '0';  // $rsltNow[0]['moed_type_continue'] ? $rsltNow[0]['moed_type_continue'] : '0';
          // mode = '0'の時のデフォルト値セット
          $record['moed_buy_type'] = self::checkNotSet($record['moed_buy_type']) ? '0' : $record['moed_buy_type'];
          $record['moed_inventory_type'] = self::checkNotSet($record['moed_inventory_type']) ? '2' : $record['moed_inventory_type'];
          $record['moed_type_subject'] = self::checkNotSet($record['moed_type_subject']) ? '7' : $record['moed_type_subject'];

          // 受注番号の引継ぎはあるが、在庫区分が入っていない場合、自動設定。客先用
          if (!self::checkNotSet($record['moed_refer_no'])) {
            // 2:客先用　0:自社用
            $record['moed_type_04'] = self::checkNotSet($record['moed_type_04']) ? $STOCK_CUSTOMER : $record['moed_type_04'];
          } 
          

          // データ編集
          $sth = $dbh->prepare(self::makeUpdateSQL('morderestimate', $columnsH));
          self::bindValueToUpdate($sth, $columnsH, $record);
          $sth->execute();
          // 履歴更新
          $sth = $dbh->prepare(self::makeInsertSQL('t_morderestimate', $columnsTH));
          self::bindInsertKeys($sth, $columnsTH, $record);
          $sth->execute();

          // 発注引継ぎのケースは、受注データの発注済みステータスを更新
          if (self::checkNotSet($datHeader[0]['moed_refer_no']) === false) {
            $sth = $dbh->prepare('
            UPDATE estimatedetails
            SET ed_update_cnt = ed_update_cnt + 1,
            ed_type_07 = :FLG, 
            ed_update_at = :UPDATEAT, 
            ed_update_cd = :UPDATECD 
            WHERE ed_belong_cd = :BELONGCD AND
            ed_estimate_no = :ESTNO AND 
            ed_estimate_sub_no = :SUBNO               
            ;');
            $sth->bindValue(':FLG', '1', PDO::PARAM_STR);
            $sth->bindValue(':UPDATEAT', $record['moed_update_at'], PDO::PARAM_STR);
            $sth->bindValue(':UPDATECD', $record['moed_update_cd'], PDO::PARAM_STR);
            $sth->bindValue(':BELONGCD', $record['moed_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':ESTNO', $record['moed_refer_no'], PDO::PARAM_STR);
            $sth->bindValue(':SUBNO', $record['moed_refer_sub_no'], PDO::PARAM_STR);
            $sth->execute();
          } else if (self::checkNotSet($rsltNow[0]['moed_refer_no']) === false) {
            // 引継ぎ取消
            $sth = $dbh->prepare('
            UPDATE estimatedetails
            SET ed_update_cnt = ed_update_cnt + 1,
            ed_type_07 = :FLG, 
            ed_update_at = :UPDATEAT, 
            ed_update_cd = :UPDATECD 
            WHERE ed_belong_cd = :BELONGCD AND
            ed_estimate_no = :ESTNO AND 
            ed_estimate_sub_no = :SUBNO               
            ;');
            $sth->bindValue(':FLG', '0', PDO::PARAM_STR);
            $sth->bindValue(':UPDATEAT', $record['moed_update_at'], PDO::PARAM_STR);
            $sth->bindValue(':UPDATECD', $record['moed_update_cd'], PDO::PARAM_STR);
            $sth->bindValue(':BELONGCD', $record['moed_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':ESTNO', $rsltNow[0]['moed_refer_no'], PDO::PARAM_STR);
            $sth->bindValue(':SUBNO', $record['moed_refer_sub_no'], PDO::PARAM_STR);
            $sth->execute();
          }    

          if ($mode === '1' || $mode === '2') {
            // 既存データで、未検収の場合
            self::issueStock('MOD', $record['moed_accept_date'],  $record, $dbh);
          }
          if ($mode === '0') {
            // 既存データで更新の場合、受払予定データを更新
            // 受払予定データは、入庫時に削除する。検収時は、受払予定のままとするので注意。
            self::issueStockPlan('MOD', $record['moed_arrival_hd_date'], $record, $dbh);
          }
        }
      }

      // データ削除 既存データのみ考慮、発注済み、検収済みは画面上で行削除不可
      if ((int)$mode <= 1 && $nRecCnt > 0) {
        for ($i = 0; $i < count($result); $i++) {
          $existFlg = 0;
          // 既存のレコード(枝番で判定)が、編集後のデータにあるかどうか確認していき、ない場合は、削除されたとみなす。
          foreach ($datDetail as $recUpdate) {
            if ($result[$i]['moed_sub_no'] === $recUpdate['moed_sub_no']) {
              $existFlg = 1;
            }
          }
          if ($existFlg === 0) {
            // 行削除対象レコード
            $sth = $dbh->prepare('
            DELETE FROM morderestimate
            WHERE moed_belong_cd = :BELONGCD AND 
            moed_order_no = :ORDERNO AND 
            moed_sub_no = :SUBNO        
            ;');
            $sth->bindValue(':BELONGCD', $result[$i]['moed_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':ORDERNO', $result[$i]['moed_order_no'], PDO::PARAM_STR);
            $sth->bindValue(':SUBNO', $result[$i]['moed_sub_no'], PDO::PARAM_STR);
            $sth->execute();

            if ($result[$i]['moed_refer_no'] && $result[$i]['moed_refer_sub_no']) {
              // 削除行が引継データだった場合は、見積データのフラグをクリア
              $sth = $dbh->prepare('
              UPDATE estimatedetails
              SET ed_update_cnt = ed_update_cnt + 1,
              ed_type_07 = :FLG, 
              ed_update_at = :UPDATEAT, 
              ed_update_cd = :UPDATECD 
              WHERE ed_belong_cd = :BELONGCD AND
              ed_estimate_no = :ESTNO AND 
              ed_estimate_sub_no = :SUBNO               
              ;');
              $sth->bindValue(':FLG', '', PDO::PARAM_STR);
              $sth->bindValue(':UPDATEAT', $result[$i]['moed_update_at'], PDO::PARAM_STR);
              $sth->bindValue(':UPDATECD', $result[$i]['moed_update_cd'], PDO::PARAM_STR);
              $sth->bindValue(':BELONGCD', $result[$i]['moed_belong_cd'], PDO::PARAM_STR);
              $sth->bindValue(':ESTNO', $result[$i]['moed_refer_no'], PDO::PARAM_STR);
              $sth->bindValue(':SUBNO', $result[$i]['moed_refer_sub_no'], PDO::PARAM_STR);
              $sth->execute();

            }
          }
        }
      }
      $dbh->commit(); 
      echo json_encode($resp);     
    } catch (Exception $e) {
      $dbh->rollBack();
      if ($resp['msg'] === '') {
        $resp['msg'] = self::getDBErrorMsg($e);
      }
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }

  /**
   * 入庫登録 
   * mode: 1:発注・入庫同時処理　0:入庫処理のみ
   * （※2023/6/12　発注の新規登録と同時に入庫登録をすることがないため、$mode: 1は処理しない）
   */
  public static function updateMST($datHeader, $datDetail, $mode) {
    $resp = array('succeed' => true, 'msg' => '');

    $columnsH = self::getColumnDefs('morderestimate');
    $columnsTH = self::getColumnDefs('t_morderestimate');    
    $columnsD = self::getColumnDefs('estimatedetails');
    $columnsTD = self::getColumnDefs('t_estimatedetails');
    $columnsS = self::getColumnDefs('storage');
    $PAYMENT_DAY = '25';

    $beforeData = [];

    self::markAsHeaderPK($columnsH, 'moed_belong_cd');
    self::markAsHeaderPK($columnsH, 'moed_order_no');
    self::markAsHeaderPK($columnsH, 'moed_sub_no');
    self::markAsHeaderPK($columnsH, 'moed_accept_sub_no');
    self::markAsHeaderPK($columnsTH, 'moed_belong_cd');
    self::markAsHeaderPK($columnsTH, 'moed_order_no');
    self::markAsHeaderPK($columnsTH, 'moed_sub_no');
    self::markAsHeaderPK($columnsTH, 'moed_accept_sub_no');
    self::markAsHeaderPK($columnsTH, 'moed_update_cnt');
    self::markAsHeaderPK($columnsD, 'ed_belong_cd');
    self::markAsHeaderPK($columnsD, 'ed_estimate_no');
    self::markAsHeaderPK($columnsD, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsD, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsTD, 'ed_belong_cd');
    self::markAsHeaderPK($columnsTD, 'ed_estimate_no');
    self::markAsHeaderPK($columnsTD, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsTD, 'ed_shipment_sub_no');

    $dbh = self::dbPDO();
    $arUpdate = [];
    $flgEq = 0;
    $flgExistInsert = false;  // 新規追加行があり、検収済みの場合、stockテーブルのDEL+INSERT必要
    
    try {
      $dbh->beginTransaction();

      // 前回値と今回値比較
      $sth = $dbh->prepare('
      SELECT *, "delete" AS recordStatus
       FROM morderestimate
      WHERE moed_belong_cd  = :BELONGCD AND 
      moed_order_no = :ORDERNO
      ;');
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':ORDERNO', $datHeader[0]['moed_order_no'], PDO::PARAM_STR);
      $sth->execute();
      $beforeData = $sth->fetchAll(PDO::FETCH_ASSOC);

      // 前回ないもの=新規追加　前回あるが今回ないもの=データ削除
      foreach ($datDetail as &$rec) {
        $rec['recordStatus'] = 'insert';
        foreach ($beforeData as &$beforeRec) {
          if ($rec['moed_sub_no'] === $beforeRec['moed_sub_no'] && $rec['moed_accept_sub_no'] === $beforeRec['moed_accept_sub_no'] 
            && $rec['moed_product_cd'] === $beforeRec['moed_product_cd']) {
            // 既存データの更新のケース
            $rec['recordStatus'] = 'update';
            $beforeRec['recordStatus'] = 'update';
            break;
          }
        }
      }
      unset($rec);

      // 編集後データと、既存データとで、検収済みにもかかわらず数量差異があるものをエラ―とする
      // 新規データの取引数量をレコード毎に確認
      $arUpdate = self::arrayAggregation('moed_sub_no', 'moed_accept_sub_no', 'moed_quantity', $datDetail);

      $sth = $dbh->prepare('
      SELECT *, TRUNCATE(SUM(moed_quantity), 0) AS qtysum, SUM(moed_accept_date) AS apt FROM morderestimate      
      WHERE moed_order_no = :MNO
      GROUP BY moed_order_no, moed_sub_no, moed_accept_sub_no
      ;');
      $sth->bindValue(':MNO', $datHeader[0]['moed_order_no'], PDO::PARAM_STR);
      $sth->execute();
      $rsltUp = $sth->fetchAll(PDO::FETCH_ASSOC);
      foreach ($rsltUp as $record) {
        if (self::checkNotSet($arUpdate[$record['moed_sub_no'] . $record['moed_accept_sub_no']])) {
          // 表示していない明細はパス
          continue;
        }
        // 検収済みかつ、数量が異なる場合
        if ($record['apt'] > 0) {
          (int)$arUpdate[$record['moed_sub_no'] . $record['moed_accept_sub_no']] === (int)$record['qtysum'] ? $flgEq += 0 : $flgEq += 1;
        }
      }
      if ($flgEq) {
        // 検収済みは、検収取消の後、発注データ変更が必要
        $resp['succeed'] = false;
        $resp['msg'] = '検収数量と異なります。数量の確認をお願いします。';
        $dbh->rollBack();
        echo json_encode($resp);
        return;
      }

      foreach ($datDetail as $rec) {
        // 在庫管理対象の場合は在庫数を更新する
        // 在庫管理対象かチェック、入庫済みのデータでないことをチェック
        if ($rec['moed_inventory_type'] === '1' && $rec['moed_type_02'] !== '1') {
          $wcd = self::checkNotSet($rec['moed_customer_charge_cd']) ? '000' : $rec['moed_customer_charge_cd'];
          $pcd = $rec['moed_product_cd'];
          $subcd = self::storageSetPadding($rec);
          $typesubject = $rec['moed_type_subject'];
          $parrangementcd = $rec['moed_parrangement_cd'];
          $unitcd = $rec['moed_zaiko_tani'];
          // 在庫テーブルに存在するかチェック
          $sth = $dbh->prepare('
          SELECT *
          FROM storage
          WHERE sr_w_cd = :WAREHOUSECD
          AND sr_p_cd = :PRODUCTCD
          AND sr_sub_cd = :PSUPPLE
          AND sr_type_subject = :SUBJECTCD
          AND sr_parrangement_cd = :PARCD 
          AND sr_unit_cd = :UNITCD
          ;');
          $sth->bindValue(':WAREHOUSECD', $wcd, PDO::PARAM_STR);
          $sth->bindValue(':PRODUCTCD', $pcd, PDO::PARAM_STR);
          $sth->bindValue(':PSUPPLE', $subcd, PDO::PARAM_STR);
          $sth->bindValue(':SUBJECTCD', $typesubject, PDO::PARAM_STR);
          $sth->bindValue(':PARCD', $parrangementcd, PDO::PARAM_STR);
          $sth->bindValue(':UNITCD', $unitcd, PDO::PARAM_STR);
          $sth->execute();
          $storageData = $sth->fetchAll(PDO::FETCH_ASSOC);

          // 在庫テーブルにあるの場合、在庫数を更新
          if (count($storageData) > 0) {
            $storageData[0]['sr_quantity'] += $rec['moed_stock_qty'];
            $sth = $dbh->prepare(self::makeUpdateSQL('storage', $columnsS));
            self::bindValueToUpdate($sth, $columnsS, $storageData[0]);
            $sth->execute();
          } else {
            // 在庫テーブルに無い場合、在庫数を新規登録
            $insertData = [];
            $insertData['sr_belong_cd'] = $_SESSION['companycd'];
            $insertData['sr_cd'] = '0000';
            $insertData['sr_w_cd'] = $wcd;
            $insertData['sr_p_cd'] = $pcd;
            $insertData['sr_sub_cd'] = $subcd;
            $insertData['sr_sub_01'] = self::checkNotSet($rec['moed_sub_01']) ? 0 : $rec['moed_sub_01'];
            $insertData['sr_sub_02'] = self::checkNotSet($rec['moed_sub_02']) ? 0 : $rec['moed_sub_02'];
            $insertData['sr_sub_03'] = $rec['moed_sub_03'];
            $insertData['sr_sub_04'] = self::checkNotSet($rec['moed_sub_04']) ? 0 : $rec['moed_sub_04'];
            $insertData['sr_sub_05'] = self::checkNotSet($rec['moed_sub_05']) ? 0 : $rec['moed_sub_05'];
            $insertData['sr_sub_06'] = $rec['moed_sub_06'];
            $insertData['sr_sub_07'] = $rec['moed_sub_07'];
            $insertData['sr_sub_08'] = $rec['moed_sub_08'];
            $insertData['sr_sub_09'] = $rec['moed_sub_09'];
            $insertData['sr_sub_10'] = $rec['moed_sub_10'];
            $insertData['sr_sub_11'] = $rec['moed_sub_11'];
            $insertData['sr_sub_12'] = $rec['moed_sub_12'];
            $insertData['sr_sub_13'] = $rec['moed_sub_13'];
            $insertData['sr_sub_14'] = $rec['moed_type_03'];
            $insertData['sr_transfer_date'] = self::paddingDate($datHeader[0]['moed_arrival_hd_date']);
            $insertData['sr_prev_quantity'] = 0;
            $insertData['sr_prev_quantity_eval'] = 0;
            $insertData['sr_prev_price_eval'] = 0;
            $insertData['sr_quantity'] = $rec['moed_stock_qty'];
            $insertData['sr_unit_cd'] = $rec['moed_zaiko_tani'];
            $insertData['sr_price_eval'] = 0;
            $insertData['sr_dimension'] = $rec['moed_sub_num_01'];
            $insertData['sr_weight'] = $rec['moed_sub_num_02'];
            $insertData['sr_fix_price_eval'] = 0;
            $insertData['sr_remarks'] = $rec['moed_dt_remarks'];
            $insertData['sr_update_at'] = self::currentDate();
            $insertData['sr_update_cd'] = $_SESSION['usercd'];
            $insertData['sr_type_subject'] = $typesubject;
            $insertData['sr_parrangement_cd'] = $parrangementcd;
            $insertData['sr_maker_cd'] = $rec['moed_customer_cd'] . $rec['moed_manufacture_cd'];
            $insertData['sr_type_material'] = $rec['moed_type_06'];
            $sth = $dbh->prepare(self::makeInsertSQL('storage', $columnsS));
            self::bindInsertKeys($sth, $columnsS, $insertData);
            $sth->execute();
          }
        }

        // 共通データのうち、渡された値に含まれないものを先にセット
        $rec['moed_belong_cd'] = $_SESSION['companycd'];
        $rec['moed_update_at'] = self::currentDate();
        $rec['moed_update_cd'] = $_SESSION['usercd'];
        if (self::checkNotSet($rec['moed_sub_num_03'])) {
          $rec['moed_sub_num_03'] = 0;
        }
        if (self::checkNotSet($rec['moed_sub_num_04'])) {
          $rec['moed_sub_num_04'] = 0;
        }

        if (self::checkNotSet($rec['moed_unit_eval'])) {
          // 在庫単位がセットされてなかったら取引単位を入れる
          $rec['moed_unit_eval'] = $rec['moed_unit_tran'];
        }
        // 入庫予定日のフォーマット修正
        $rec['moed_arrival_hd_date'] = self::paddingDate($datHeader[0]['moed_arrival_hd_date']);
        // $rec['moed_arrival_plan_date'] 
        $detailArrivalPlanDate = self::checkNotSet($rec['moed_arrival_plan_date']) ?  $rec['moed_arrival_hd_date'] : self::paddingDate($datHeader[0]['moed_arrival_hd_date']);
        if (self::checkNotSet($rec['moed_accept_date']) === false && $rec['moed_accept_date'] !== $rec['moed_arrival_hd_date']) {
          $rec['moed_accept_date'] = $rec['moed_arrival_hd_date'];
        }
        $rec['moed_payment_plan_date'] = self::getMOPaymentDate($rec['moed_arrival_hd_date'], $PAYMENT_DAY);
        
        // 発注枝番がない場合　(画面上でエラーが発生しているということなのでエラー出す)
        if (self::checkNotSet($rec['moed_sub_no']) === true) {
          $resp['succeed'] = false;
          $resp['msg'] = '発注枝番が正常に設定できていません。';
          $dbh->rollBack();
          echo json_encode($resp);
          return;
        }
        // 検収枝番がない場合　行追加で検収枝番はセットされるはずだが、エラー対策
        if (self::checkNotSet($rec['moed_accept_sub_no']) === true) {
          $rec['moed_accept_sub_no'] = '01';
        } 
        // 入金が未完了の場合
        if ($rec['moed_payment_no'] === '未') {
          $rec['moed_payment_no'] = '';
        }
        // ロット番号
        $rec['moed_type_03'] = substr($rec['moed_order_no'], 1, 10) . $rec['moed_sub_no'] . $rec['moed_accept_sub_no'];

        if (self::checkNotSet($rec['moed_order_date']) === true) {
          // 発注書発行がされていない場合は、発注日に入荷予定日をセットする。
          $rec['moed_order_date'] = self::paddingDate( $datHeader[0]['moed_arrival_hd_date']);
        }

        if (self::checkNotSet($rec['moed_unit_qty'])) {
          // 空だったら0セット 
          $rec['moed_unit_qty'] = 0;
        }

        // 国産材か外国材か登録
        $rsltManufacture = [];
        if (self::checkNotSet($rec['moed_manufacture_cd']) === false) {
          // メーカーコードが入っているときのみ判定。それ以外は不明のU
          $sth = $dbh->prepare('
          SELECT CP_QUOTATION_TYPE FROM customerpost
          WHERE CP_CUSTOMER_CD = :CUSCD AND CP_POST_CD = :MAKERCD AND CP_TYPE_CONTINUE = :TYPECONTINUE
          ;');
          $sth->bindValue(':CUSCD', $rec['moed_customer_cd'], PDO::PARAM_STR);
          $sth->bindValue(':MAKERCD', $rec['moed_manufacture_cd'], PDO::PARAM_STR);
          $sth->bindValue(':TYPECONTINUE', '0', PDO::PARAM_STR);
          $sth->execute();
          $rsltManufacture = $sth->fetchAll(PDO::FETCH_ASSOC);
        } 
        if (count($rsltManufacture) > 0) {
          // 国産:D(domestic) 外国産:O(oversea)
          $rec['moed_type_06'] = $rsltManufacture[0]['CP_QUOTATION_TYPE'];
        } else {
          // Unknown
          $rec['moed_type_06'] = 'U';
        }

        // ---------------------------------↑データチェック
        if ($rec['recordStatus'] === 'insert') {
          // 新規追加の場合=行追加の場合
          $flgExistInsert = true;
          $arBeforeData = [];
          // 分枝前のデータから基本データ取得
          $strSubNo = $rec['moed_sub_no'];
          foreach($beforeData as $elem ) {
            if ($elem['moed_sub_no'] === $strSubNo && $elem['moed_accept_sub_no'] === '01') {
              $arBeforeData = $elem;
            }
          }
          // 入庫数量
          if (self::checkNotSet($rec['moed_stock_qty']) || ceil($rec['moed_stock_qty']) == 0) {
            // 入庫数がセットされていないデータは未入庫とし0をセット（※2023/6/13現在：入庫数のエラーチェックにより0登録はしない）
            $rec['moed_type_02'] = '0'; 
            $rec['moed_arrival_plan_date'] = self::paddingDate($rec['moed_arrival_plan_date']);
            // 後で入庫する予定の物は、受払予定明細追加
            self::issueStockPlan('MOD', $rec['moed_arrival_plan_date'], $rec, $dbh);       
          } else {
            $rec['moed_type_02'] = '1'; 
            $rec['moed_arrival_plan_date'] = $detailArrivalPlanDate;
          }
          // 単価単位と在庫単位が異なっていれば、単価数量と単価単位を更新する 2023/6/12
          if ($rec['moed_unit_eval'] !== $rec['moed_zaiko_tani']) {
            $rec['moed_unit_eval'] = $rec['moed_zaiko_tani'];
          }
          $rec['moed_unit_qty'] = $rec['moed_stock_qty'];
          $rec['moed_money'] = (float)$rec['moed_unit_price'] * (float)$rec['moed_unit_qty'];
          // 2023/6/12　上記処理により、コメントアウト
          // if ($arBeforeData['moed_unit_tran'] !== $arBeforeData['moed_unit_eval'] ) {
          //   // 在庫用単位がある場合 支払処理で検収枝番毎のデータ表示をしているため、初期登録とデータが異なるため注意。
          //   $rec['moed_quantity'] = $arBeforeData['moed_quantity'];
          // } else {
          //   // 在庫も取引も単位が同じ 0でなければ取引数量を上書き
          //   $rec['moed_quantity'] = ceil($rec['moed_stock_qty']) == 0 ? $rec['moed_unit_qty'] : $rec['moed_stock_qty'];
          //   $rec['moed_unit_qty'] = ceil($rec['moed_stock_qty']) == 0 ? $rec['moed_unit_qty'] : $rec['moed_stock_qty'];
          // }
          // 単価は引き継ぐ 最終金額は検収時
          // $rec['moed_unit_price'] = $arBeforeData['moed_unit_price'];
          // $rec['moed_money'] = $arBeforeData['moed_unit_price'] * $rec['moed_unit_qty'];
          $percentage = 0;
          if ((int)$arBeforeData['moed_unit_price'] > 0 && (int)$arBeforeData['moed_money'] > 0 ) {
            $percentage = (float)$arBeforeData['moed_money_tax'] / (float)$arBeforeData['moed_money'];
          }
          $rec['moed_money_tax'] = $rec['moed_money'] * $percentage; 
          $rec['moed_money_inc_tax'] = $rec['moed_money'] + $rec['moed_money_tax'];
            
          // 行追加の場合、sub08とsub09がnullになるので修正
          $rec['moed_sub_08'] = self::checkNotSet($rec['moed_sub_08']) ? '' : $rec['moed_sub_08'];
          $rec['moed_sub_09'] = self::checkNotSet($rec['moed_sub_09']) ? '' : $rec['moed_sub_09'];
          $rec['moed_sub_13'] = self::checkNotSet($rec['moed_sub_13']) ? '' : $rec['moed_sub_13'];
          $rec['moed_type_continue'] = 0; 
          // 画面表示がないもの&&必要なデータをセット
          $rec['moed_order_date'] = $arBeforeData['moed_order_date'];
          $rec['moed_update_cnt'] = 0;

          $sth = $dbh->prepare(self::makeInsertSQL('morderestimate', $columnsH));
          self::bindInsertKeys($sth, $columnsH, $rec);
          $sth->execute();
          // 履歴
          $sth = $dbh->prepare(self::makeInsertSQL('t_morderestimate', $columnsTH));
          self::bindInsertKeys($sth, $columnsTH, $rec);
          $sth->execute();
    
        } else {
          // 既存データの場合
          $arBeforeData = [];
          $strSubNo = $rec['moed_sub_no'];
          $strAptNo = $rec['moed_accept_sub_no'];
          foreach($beforeData as $elem ) {
            if ($elem['moed_sub_no'] === $strSubNo && $elem['moed_accept_sub_no'] === $strAptNo) {
              $arBeforeData = $elem;
            }
          }
          
          $rec['moed_update_cnt'] = $arBeforeData['moed_update_cnt'] + 1;
          // $rec['moed_quantity'] = $rec['moed_stock_qty'];
          if (self::checkNotSet($rec['moed_stock_qty']) || ceil($rec['moed_stock_qty']) == 0) {
            // 入庫数がセットされていないデータは未入庫とし0をセット（※2023/6/13現在：入庫数のエラーチェックにより0登録はしない）
            $rec['moed_type_02'] = '0'; 
            $rec['moed_arrival_plan_date'] = self::paddingDate($rec['moed_arrival_plan_date']);
            // 後で入庫する予定の物は、受払予定明細追加
            self::issueStockPlan('MOD', $rec['moed_arrival_plan_date'], $rec, $dbh);       
          } else {
            $rec['moed_type_02'] = '1'; 
            $rec['moed_arrival_plan_date'] = $detailArrivalPlanDate;
          }

          // 単価単位と在庫単位が異なっていれば、単価数量と単価単位を更新する 2023/6/12
          if ($rec['moed_unit_eval'] !== $rec['moed_zaiko_tani']) {
            $rec['moed_unit_eval'] = $rec['moed_zaiko_tani'];
          }
          $rec['moed_unit_qty'] = $rec['moed_stock_qty'];
          $rec['moed_money'] = (float)$rec['moed_unit_price'] * (float)$rec['moed_unit_qty'];
          // 2023/6/12　上記処理により、コメントアウト
          // if ($arBeforeData['moed_unit_tran'] !== $arBeforeData['moed_unit_eval']) {
          //   // 在庫用単位がある場合支払処理にかかわるため取引数量は引き継がない
          //   $rec['moed_quantity'] = $arBeforeData['moed_quantity'];
          //   // $rec['moed_unit_qty'] = $rec['moed_stock_qty'];
          // } else {
          //   // 在庫も取引も単位が同じ
          //   $rec['moed_quantity'] = ceil($rec['moed_stock_qty']) == 0 ? $rec['moed_unit_qty'] : $rec['moed_stock_qty'];
          //   $rec['moed_unit_qty'] = $rec['moed_stock_qty'];
          // }
          // // 単価は引き継ぐ 最終金額は検収時
          // $rec['moed_unit_price'] = (float)$arBeforeData['moed_unit_price'];
          // $rec['moed_money'] = (float)$arBeforeData['moed_unit_price'] * (float)$rec['moed_unit_qty'];
          $percentage = 0;
          if ((int)$arBeforeData['moed_unit_price'] > 0 && (int)$arBeforeData['moed_money'] > 0 ) {
            $percentage = (float)$arBeforeData['moed_money_tax'] / (float)$arBeforeData['moed_money'];
          }
          $rec['moed_money_tax'] = $rec['moed_money'] * $percentage; 
          $rec['moed_money_inc_tax'] = $rec['moed_money'] + $rec['moed_money_tax'];


          $sth = $dbh->prepare(self::makeUpdateSQL('morderestimate', $columnsH));
          self::bindValueToUpdate($sth, $columnsH, $rec);
          $sth->execute();
          // 履歴
          $sth = $dbh->prepare(self::makeInsertSQL('t_morderestimate', $columnsTH));
          self::bindInsertKeys($sth, $columnsTH, $rec);
          $sth->execute();

          // 受払予定明細の削除処理 在庫入替のため、データが残り続ける可能性があるため、if文コメント
          // if ($arBeforeData['moed_type_02'] === '0') {
          //   // 前回登録時は未入庫で、今回入庫だった場合
            self::issueStockPlan('MOD', '', $rec, $dbh, true);
          // }
        }

        // 新規、既存どちらにしても、既存で検収済みの場合はロットNoの更新
        // 検収済みかつ受注引継もしくは、支給品の場合はロットNoの更新不要。
        if (!self::checkNotSet($arBeforeData['moed_accept_date'])) {
          // 検収済み＝受払明細にデータがある。 
          if (($rec['moed_type_04'] === '0') || (self::checkNotSet($rec['moed_type_04']) && self::checkNotSet($rec['moed_refer_no']))) {
            // 用途区分が自社の場合もしくは、データ未セットかつ引継受注番号が未指定の場合のみデータ更新  
            self::issueStock('STOREDAFTERACCEPT', $rec['moed_accept_date'], $arBeforeData, $dbh);

          }
        }
        
      }

      // foreach ($beforeData as $rec) {
      //   if ($rec['recordStatus'] === 'delete') {
      //     // 行削除対象データ
      //     $sth = $dbh->prepare('
      //     DELETE FROM morderestimate
      //     WHERE moed_belong_cd = :BELONGCD 
      //     AND moed_order_no = :ORDERNO 
      //     AND moed_sub_no = :SUBNO 
      //     AND moed_accept_sub_no = :APTNO
      //     ;');
      //     $sth->bindValue(':BELONGCD', $rec['moed_belong_cd'], PDO::PARAM_STR);
      //     $sth->bindValue(':ORDERNO', $rec['moed_order_no'], PDO::PARAM_STR);
      //     $sth->bindValue(':SUBNO', $rec['moed_sub_no'], PDO::PARAM_STR);
      //     $sth->bindValue(':APTNO', $rec['moed_accept_sub_no'], PDO::PARAM_STR);
      //     $sth->execute();
      //   }
      // }
      $dbh->commit();
      echo json_encode($resp);
      return;
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }

  /**
   * 入庫取消 
   */
  public static function cancelMST($datHeader, $datDetail) {
    $resp = array('succeed' => true, 'msg' => '');
    $columnsS = self::getColumnDefs('storage');

    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      foreach ($datDetail as $rec) {
        // 在庫管理対象の場合は在庫数を更新する
        // 在庫管理対象かチェック、入庫済みのデータであることをチェック
        if ($rec['moed_inventory_type'] === '1' && $rec['moed_type_02'] === '1') {

          $wcd = self::checkNotSet($rec['moed_customer_charge_cd']) ? '000' : $rec['moed_customer_charge_cd'];
          $pcd = $rec['moed_product_cd'];
          $subcd = self::storageSetPadding($rec);
          $typesubject = $rec['moed_type_subject'];
          $parrangementcd = $rec['moed_parrangement_cd'];
          $unitcd = $rec['moed_zaiko_tani'];
          // 在庫テーブルに存在するかチェック
          $sth = $dbh->prepare('
          SELECT *
          FROM storage
          WHERE sr_w_cd = :WAREHOUSECD
          AND sr_p_cd = :PRODUCTCD
          AND sr_sub_cd = :PSUPPLE
          AND sr_type_subject = :SUBJECTCD
          AND sr_parrangement_cd = :PARCD 
          AND sr_unit_cd = :UNITCD
          ;');
          $sth->bindValue(':WAREHOUSECD', $wcd, PDO::PARAM_STR);
          $sth->bindValue(':PRODUCTCD', $pcd, PDO::PARAM_STR);
          $sth->bindValue(':PSUPPLE', $subcd, PDO::PARAM_STR);
          $sth->bindValue(':SUBJECTCD', $typesubject, PDO::PARAM_STR);
          $sth->bindValue(':PARCD', $parrangementcd, PDO::PARAM_STR);
          $sth->bindValue(':UNITCD', $unitcd, PDO::PARAM_STR);
          $sth->execute();
          $storageData = $sth->fetchAll(PDO::FETCH_ASSOC);

          // 在庫テーブルにある場合、在庫数を更新
          if (count($storageData) > 0) {
            $storageData[0]['sr_quantity'] -= $rec['moed_stock_qty'];
            // 在庫数が0になるとき、対象の在庫データを削除
            if ($storageData[0]['sr_quantity'] == 0) {
              $sth = $dbh->prepare('
              DELETE FROM storage
              WHERE sr_w_cd = :WAREHOUSECD
              AND sr_p_cd = :PRODUCTCD
              AND sr_sub_cd = :PSUPPLE
              AND sr_type_subject = :SUBJECTCD
              AND sr_parrangement_cd = :PARCD 
              AND sr_unit_cd = :UNITCD
              ;');
              $sth->bindValue(':WAREHOUSECD', $wcd, PDO::PARAM_STR);
              $sth->bindValue(':PRODUCTCD', $pcd, PDO::PARAM_STR);
              $sth->bindValue(':PSUPPLE', $subcd, PDO::PARAM_STR);
              $sth->bindValue(':SUBJECTCD', $typesubject, PDO::PARAM_STR);
              $sth->bindValue(':PARCD', $parrangementcd, PDO::PARAM_STR);
              $sth->bindValue(':UNITCD', $unitcd, PDO::PARAM_STR);
              $sth->execute();    
            } else {
              $sth = $dbh->prepare(self::makeUpdateSQL('storage', $columnsS));
              self::bindValueToUpdate($sth, $columnsS, $storageData[0]);
              $sth->execute();
            }
          }

          // 発注データの受入区分を「0：未」に更新する
          $sth = $dbh->prepare('
          UPDATE morderestimate
          SET moed_type_02 = "0", 
          moed_update_at = :UPDATEAT, 
          moed_update_cd = :UPDATECD 
          WHERE moed_belong_cd = :BELONGCD AND
          moed_order_no = :ORDERNO AND 
          moed_sub_no = :SUBNO               
          ;');
          $sth->bindValue(':UPDATEAT', self::currentDate(), PDO::PARAM_STR);
          $sth->bindValue(':UPDATECD', $_SESSION['usercd'], PDO::PARAM_STR);
          $sth->bindValue(':BELONGCD', $rec['moed_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':ORDERNO', $rec['moed_order_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', $rec['moed_sub_no'], PDO::PARAM_STR);
          $sth->execute();
        }
      }
      $dbh->commit();
      echo json_encode($resp);
      return;
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }

  // 外注見積依頼書更新処理
  public static function updateOOED($datHeader, $datdetail) {
    $columnsH = self::getColumnDefs('outsideorderestimate');
    $columnsD = self::getColumnDefs('outsideorderestimatedetails');
    self::markAsHeaderPK($columnsD, 'OOED_ORDER_NO');
    $total = 0;
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      foreach ($datHeader as $key => $key) {
        $datHeader[$key]['OOE_ORDER_ID'] = $datHeader[$key]['OOE_ORDER_CD'];// . '  ';
        $datHeader[$key]['OOE_SALESMAN_ID'] = $datHeader[$key]['OOE_SALESMAN_CD'];// . '  ';
        $datHeader[$key]['OOE_CREATER_ID'] = $datHeader[$key]['OOE_CREATER_CD'];// . '  ';
        $datHeader[$key]['OOE_APPROVAL_ID'] = $datHeader[$key]['OOE_APPROVAL_CD'];// . '  ';
        $datHeader[$key]['OOE_LAST_CONFIRMATION_MAN_ID'] = $datHeader[$key]['OOE_LAST_CONFIRMATION_MAN_CD'];// . '  ';
        if (self::checkNotSet($datHeader[$key]['OOE_ORDER_NO']) === true) {
          $datHeader[$key]['OOE_ORDER_NO'] = self::getOrderNoDispSQL($dbh, 'OOE',
            $datHeader[$key]['OOE_ORDER_CD'], $datHeader[$key]['OOE_CREATION_DATE']);
            // 外注見積依頼の外注注文日をNULL許可に変更したため、コード体系を注文日でなく作成日に変更する。 sono
            // $datHeader[$key]['OOE_ORDER_CD'], $datHeader[$key]['OOE_ESTIMATE_DATE']);
        }
        if (self::checkNotSet($datHeader[$key]['OOE_CREATION_DATE']) === true) {
          $datHeader[$key]['OOE_CREATION_DATE'] = self::currentDate();
        }
      }
      $datdetail = self::setHeaderValueToDetails($datHeader, $datdetail, 'OOE_ORDER_NO', 'OOED_ORDER_NO');
      foreach ($datdetail as $key => $key) {
        $datdetail[$key]['OOED_CUSTOMER_ID'] = $datdetail[$key]['OOED_CUSTOMER_CD'] . '  ';
        $datdetail[$key]['OOED_SALESMAN_ID'] = $datdetail[$key]['OOED_SALESMAN_CD'] . '  ';
        $datdetail[$key]['OOED_PROCESS_ID'] = $datdetail[$key]['OOED_PROCESS_CD'];// . '    ';
        $datdetail[$key]['OOED_STATEMENT_DETAILS_NO'] = str_pad($datdetail[$key]['OOED_STATEMENT_DETAILS_NO'], 3, '0', STR_PAD_LEFT);
        if (self::checkDeleteRowRequired($key) === false) {
          $total += $datdetail[$key]['OOED_MONEY'];
        }
      }
      // 合計金額を計算して代入後、登録を実行
      foreach ($datHeader as $key => $key) {
        $datHeader[$key]['OOE_TOTAL'] = $total;
      }
      self::editHeaderAndDetailDB('outsideorderestimate', $columnsH, 'outsideorderestimatedetails', $columnsD, $datHeader, $datdetail, $dbh);
      $dbh->commit();
    } catch (Exception $e) {
      $dbh->rollBack();
      throw $e;
    }
  }

  /***
   * 外注発注登録
   * $mode: 0はデータ登録、1は検収、2は発注・検収同時登録。
   */
  public static function updateOOD($datHeader, $datDetail, $mode, $dbstatus = '1') {
    $resp = array('succeed' => true, 'msg' => '');
    $nAcceptCnt = 0;    // 検収
    $nOrderCnt = 0;    // 発注書発行
    $nRecCnt = 0;       // レコードカウント
    $nPayCnt = 0;       // 支払区分　全て1より大きい場合は、支払済みなので、変更不可。
    $PAYMENT_DAY = '25';

    $columnsH = self::getColumnDefs('morderestimate');
    $columnsTH = self::getColumnDefs('t_morderestimate');    
    $columnsEH = self::getColumnDefs('estimatedetails');
    $columnsETH = self::getColumnDefs('t_estimatedetails');

    self::markAsHeaderPK($columnsH, 'moed_belong_cd');
    self::markAsHeaderPK($columnsH, 'moed_order_no');
    self::markAsHeaderPK($columnsH, 'moed_sub_no');
    self::markAsHeaderPK($columnsH, 'moed_accept_sub_no');
    self::markAsHeaderPK($columnsTH, 'moed_belong_cd');
    self::markAsHeaderPK($columnsTH, 'moed_order_no');
    self::markAsHeaderPK($columnsTH, 'moed_sub_no');
    self::markAsHeaderPK($columnsTH, 'moed_accept_sub_no');
    self::markAsHeaderPK($columnsTH, 'moed_update_cnt');
    self::markAsHeaderPK($columnsEH, 'ed_belong_cd');
    self::markAsHeaderPK($columnsEH, 'ed_estimate_no');
    self::markAsHeaderPK($columnsEH, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsEH, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsETH, 'ed_belong_cd');
    self::markAsHeaderPK($columnsETH, 'ed_estimate_no');
    self::markAsHeaderPK($columnsETH, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsETH, 'ed_shipment_sub_no');

    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      $datHeader[0]['moed_belong_cd'] = $_SESSION['companycd'];
      $datHeader[0]['moed_update_at'] = self::currentDate();
      $datHeader[0]['moed_update_cd'] = $_SESSION['usercd'];
      // 該当の発注番号で検索をかけ、既存の有無、発注書発行と検収、支払状況を確認
      if (!$dbstatus) {
        // 新規 dbstatus=0が新規。
        $sth = $dbh->prepare('
        SELECT MAX(moed_order_no) AS maxno FROM t_morderestimate
        WHERE 
        moed_order_no LIKE CONCAT("H", DATE_FORMAT(now(), "%y%m%d"), "%")
        ;');
        $sth->execute();
        $resultSqno = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (isset($resultSqno[0]['maxno'])) {
          $datHeader[0]['moed_order_no'] = substr($resultSqno[0]['maxno'], 0, 7) . (sprintf('%04d', substr($resultSqno[0]['maxno'], -4) + 1));
        } else {
          $datHeader[0]['moed_order_no'] = 'H' . substr( self::currentDate(), 2, 6) . '0001';
        }

        // 同じ見積データからの遷移の場合、エラーチェックがこのフェーズが最終確認箇所なので、ここで確認
        $sth = $dbh->prepare('
        SELECT * FROM estimatedetails 
        WHERE ed_estimate_no = :ESTNO AND ed_estimate_sub_no = :SUBNO
        ;');
        $sth->bindValue(':ESTNO', $datHeader[0]['moed_refer_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $datHeader[0]['moed_refer_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $resultEST = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($resultEST) > 0 ) {
          // 直前に他者によって、同じ見積データから製造委託が登録されてしまった場合
          if ($resultEST[0]['ed_sub_07'] !== null && $resultEST[0]['ed_sub_07'] > 0) {
            $resp['succeed'] = false;
            $resp['msg'] = '引継ぎ済みの受注データです。再度確認をお願いします。';
            $dbh->rollBack();
            echo json_encode($resp);
            return;
          }
        }
      } else {
        // 更新
        $sth = $dbh->prepare('
        SELECT * FROM morderestimate
        WHERE moed_belong_cd = :BELONGCD AND
        moed_order_no = :ORDERNO
        ;');
        $sth->bindValue(':BELONGCD', $datHeader[0]['moed_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':ORDERNO', $datHeader[0]['moed_order_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        $nRecCnt = count($result);
        for ($i = 0; $i < $nRecCnt; $i++) {
          // 発注書発行済みか検収済みかカウント
          if (self::checkNotSet($result[$i]['moed_order_date']) === false) {
            $nOrderCnt++;
          }
          if (self::checkNotSet($result[$i]['moed_accept_date']) === false) {
            $nAcceptCnt++;
          }
          if ($result[$i]['moed_pay_type'] !== '' && $result[$i]['moed_pay_type'] >= 1) {
            $nPayCnt++;
          }
        }
        if ($nRecCnt > 0 && $nPayCnt === $nRecCnt) {
          // 支払へ進んでいるため修正不可。受払明細での修正
          $resp['succeed'] = false;
          $resp['msg'] = '支払済みなので編集できません。';
          $dbh->rollBack();
          echo json_encode($resp);
          return;
        }
        if ($nRecCnt > 0 && $nAcceptCnt === $nRecCnt) {
          // 全レコード検収済み。検収取消後修正可能
          $resp['succeed'] = false;
          $resp['msg'] = '全データ検収済みなので編集できません。';
          $dbh->rollBack();
          echo json_encode($resp);
          return;
        }
      }

      foreach ($datDetail as $record) {
        // ヘッダデータを明細データに追加
        $record['moed_belong_cd'] = $_SESSION['companycd'];
        $record['moed_order_no'] = $datHeader[0]['moed_order_no'];
        $record['moed_customer_cd'] = $datHeader[0]['moed_customer_cd'];
        $record['moed_customer_post_cd'] = $datHeader[0]['moed_customer_post_cd'];
        $record['moed_customer_charge_cd'] = $datHeader[0]['moed_customer_charge_cd'];
        $record['moed_arrival_hd_date'] = self::paddingDate( $datHeader[0]['moed_arrival_hd_date']);
        $record['moed_refer_no'] = $datHeader[0]['moed_refer_no'];    // 引継ぎ受注番号
        // $record['moed_refer_sub_no'] = $datHeader[0]['moed_refer_sub_no'];      // 引継ぎ受注枝番　明細の枝番毎に持たせるように修正
        $record['moed_salesman_cd'] = $datHeader[0]['moed_salesman_cd'];
        $record['moed_remarks'] = $datHeader[0]['moed_remarks'];
        $record['moed_update_at'] = $datHeader[0]['moed_update_at'];
        $record['moed_update_cd'] = $datHeader[0]['moed_update_cd'];
        $record['moed_warehouse_cd'] = $datHeader[0]['moed_warehouse_cd'];
        $record['moed_manufacture_cd'] = $datHeader[0]['moed_manufacture_cd'];
        $record['moed_shipper_cd'] = $datHeader[0]['moed_shipper_cd'];
        $record['moed_delivery_cd'] = $datHeader[0]['moed_delivery_cd'];

        if (self::checkNotSet($record['moed_sub_num_03']) === true) {
          $record['moed_sub_num_03'] = 0;
        }

        // 国産材か外国材か登録
        $rsltManufacture = [];
        if (self::checkNotSet($record['moed_manufacture_cd']) === false) {
          // メーカーコードが入っているときのみ判定。それ以外は不明のU
          $sth = $dbh->prepare('
          SELECT CP_QUOTATION_TYPE FROM customerpost
          WHERE CP_CUSTOMER_CD = :CUSCD AND CP_POST_CD = :MAKERCD AND CP_TYPE_CONTINUE = :TYPECONTINUE
          ;');
          $sth->bindValue(':CUSCD', $record['moed_customer_cd'], PDO::PARAM_STR);
          $sth->bindValue(':MAKERCD', $record['moed_manufacture_cd'], PDO::PARAM_STR);
          $sth->bindValue(':TYPECONTINUE', '0', PDO::PARAM_STR);
          $sth->execute();
          $rsltManufacture = $sth->fetchAll(PDO::FETCH_ASSOC);
        } 
        if (count($rsltManufacture) > 0) {
          // 国産:D(domestic) 外国産:O(oversea)
          $record['moed_type_06'] = $rsltManufacture[0]['CP_QUOTATION_TYPE'];
        } else {
          // Unknown
          $record['moed_type_06'] = 'U';
        }

        // 読込時のDBデータカラム名と、入力カラム名が同じかつ、発注機能の都合上変更が不可のため、画面未入力=NULLとなることを避けるためチェック
        $record['moed_sub_08'] = is_null($record['moed_sub_08']) ? '' : $record['moed_sub_08'];
        $record['moed_sub_09'] = is_null($record['moed_sub_09']) ? '' : $record['moed_sub_09'];

        if (self::checkNotSet($record['moed_unit_price']) === true || $record['moed_unit_price'] === '-') {
          $record['moed_unit_price'] = 0;
        }
        if (self::checkNotSet($record['moed_money']) === true || $record['moed_money'] === '-') {
          $record['moed_money'] = 0;
        }
        if (self::checkNotSet($record['moed_money_tax']) === true || $record['moed_money_tax'] === '-') {
          $record['moed_money_tax'] = 0;
        }
        if (self::checkNotSet($record['moed_money_inc_tax']) === true || $record['moed_money_inc_tax'] === '-') {
          $record['moed_money_inc_tax'] = 0;
        }
        if (self::checkNotSet($record['moed_unit_qty']) === true || $record['moed_unit_qty'] <= 0 ) {
          // $record['moed_unit_qty'] = 0;
          // 在庫単位がなかったら、取引単位をセット
          $record['moed_unit_qty'] = $record['moed_quantity'];
          $record['moed_unit_eval'] = $record['moed_unit_tran'];
        }        
        if (self::checkNotSet($record['moed_unit_eval'])) {
          // 在庫単位がセットされてなかったら取引単位を入れる
          $rec['moed_unit_eval'] = $record['moed_unit_tran'];
        }
        if (self::checkNotSet($record['moed_pay_type']) === true) {
          $record['moed_pay_type'] = 0;
        }  
        if (self::checkNotSet($record['moed_sub_13']) === true) {
          $record['moed_sub_13'] = '';
        } 

        // 入庫フラグ初期値0
        $record['moed_type_02'] = $record['moed_type_02'] === '' ? '0' : $record['moed_type_02'];

        // 線番
        $record['moed_sub_num_03'] = (self::checkNotSet($record['moed_sub_num_03']) === false) ? (float)$record['moed_sub_num_03'] : 0;
        // 引張強度
        $record['moed_sub_num_04'] = (self::checkNotSet($record['moed_sub_num_04']) === false) ? (float)$record['moed_sub_num_04'] : 0;


        // フラグ表示をDB用に戻す
        if ($record['moed_payment_no'] === '未' ) {
          $record['moed_payment_no'] = null;
        }

        $record['moed_parrangement_cd'] = is_null($record['moed_parrangement_cd']) || $record['moed_parrangement_cd'] === '' ? '001' : $record['moed_parrangement_cd']; 

        // カレンダー考慮　0埋め・文字数など
        $record['moed_arrival_plan_date'] = self::paddingDate($record['moed_arrival_plan_date']);
        $record['moed_arrival_hd_date'] = self::paddingDate($record['moed_arrival_hd_date']);
        if ($mode === '1' || $mode === '3') {
          if (self::checkNotSet($record['moed_order_date'])) {
            // 検収段階もしくは入庫段階の場合は、発注日がセットされていない場合は、自動でセットする。
            $record['moed_order_date'] = self::paddingDate($record['moed_arrival_hd_date']);
          }
        } 
        if ($mode === '2') {
          // $record['moed_arrival_change_date'] = self::paddingDate($record['moed_arrival_change_date']);
          // 部分検収の場合は、日付が異なるレコードは別検収とする。
          if ($record['moed_arrival_plan_date'] !== '' && $record['moed_arrival_plan_date'] !== $record['moed_arrival_hd_date']) {
            // 別検収
            $record['moed_arrival_plan_date'] = self::checkNotSet($rec['moed_arrival_plan_date']) ?  $record['moed_arrival_hd_date'] : $rec['moed_arrival_plan_date'];
            $recoed['moed_type_02'] = '0';
          }
        }
        if (self::checkNotSet($record['moed_arrival_plan_date']) === true) {
          $record['moed_arrival_hd_date'] = self::paddingDate( $datHeader[0]['moed_arrival_hd_date']);
          // 明細に入荷予定日がセットされていなければ、ヘッダの入荷予定日をセット
          $record['moed_arrival_plan_date'] = self::paddingDate( $datHeader[0]['moed_arrival_hd_date']);
        }

        // 既存データ取得
        $sth = $dbh->prepare('
        SELECT * FROM morderestimate
        WHERE moed_belong_cd = :BELONGCD AND 
        moed_order_no = :ORDERNO AND 
        moed_sub_no = :SUBNO AND 
        moed_accept_sub_no = :ACTNO
        ;');
        $sth->bindValue(':BELONGCD', $record['moed_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':ORDERNO', $record['moed_order_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $record['moed_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':ACTNO', $record['moed_accept_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $rsltNow = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($rsltNow) <= 0) {
          // 新規追加行 発注データ新規登録もしくは、分割検収データの登録時
          if ($record['moed_type_subject'] === '3') {
            // 製造委託
            $record['moed_buy_type'] = '3';
          } else if ($record['moed_type_subject'] === '4') {
            // 支給有の製造委託
            $record['moed_buy_type'] = '4';
          } else {
            // 指定なければ製造委託
            $record['moed_buy_type'] = '3';
            $record['moed_type_subject'] = '2';   // 何も入ってなかったらリセール品とみなす
          }
          $record['moed_update_cnt'] = 0;
          if (self::checkNotSet($record['moed_pay_type']) === true) {
            $record['moed_pay_type'] = 0;
          }  
          
          // 在庫区分初期値 在庫管理対象
          $record['moed_inventory_type'] = isset($record['moed_inventory_type']) ? $record['moed_inventory_type'] : '2';

          // 社内ロット番号 発注番号+枝番+検収枝番
          // ※入庫時、ロットNoは改めてセットする。
          $record['moed_type_03'] = substr($record['moed_order_no'], 1, 10) . $record['moed_sub_no'] . $record['moed_accept_sub_no'];
          
          if ($mode === '1') {
            // mode1 発注・検収同時登録の場合のみ、検収処理を追加
            // 検収日・発注日は、入荷予定日をセットする
            if (self::checkNotSet($record['moed_arrival_plan_date']) === true) {
              $record['moed_accept_date'] = self::paddingDate( $datHeader[0]['moed_arrival_hd_date']);
            } else {
              $record['moed_accept_date'] = $record['moed_arrival_plan_date'];
            }
            $record['moed_order_date'] = $record['moed_accept_date'];
            $record['moed_qty_quit'] = 0;

            $record['moed_payment_plan_date'] = self::getMOPaymentDate($record['moed_accept_date'], $PAYMENT_DAY);
          } 
          // 部分検収モードの新規レコードは、発注登録編集と同様の扱いとする。
          // 番号一覧表示のため追加　@20220310
          $record['moed_type_continue'] = $record['moed_type_continue'] ? $record['moed_type_continue'] : '0';
          $sth = $dbh->prepare(self::makeInsertSQL('morderestimate', $columnsH));
          self::bindInsertKeys($sth, $columnsH, $record);
          $sth->execute();
          // 履歴更新
          $sth = $dbh->prepare(self::makeInsertSQL('t_morderestimate', $columnsTH));
          self::bindInsertKeys($sth, $columnsTH, $record);
          $sth->execute(); 
          // 発注引継ぎのケースは、受注データの発注済みステータスを更新
          if (self::checkNotSet($datHeader[0]['moed_refer_no']) === false) {
            $sth = $dbh->prepare('
            UPDATE estimatedetails
            SET ed_update_cnt = ed_update_cnt + 1,
            ed_type_07 = :FLG, 
            ed_update_at = :UPDATEAT, 
            ed_update_cd = :UPDATECD 
            WHERE ed_belong_cd = :BELONGCD AND
            ed_estimate_no = :ESTNO AND 
            ed_estimate_sub_no = :SUBNO               
            ;');
            $sth->bindValue(':FLG', '1', PDO::PARAM_STR);
            $sth->bindValue(':UPDATEAT', $record['moed_update_at'], PDO::PARAM_STR);
            $sth->bindValue(':UPDATECD', $record['moed_update_cd'], PDO::PARAM_STR);
            $sth->bindValue(':BELONGCD', $record['moed_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':ESTNO', $record['moed_refer_no'], PDO::PARAM_STR);
            $sth->bindValue(':SUBNO', $record['moed_refer_sub_no'], PDO::PARAM_STR);
            $sth->execute();
          }          
          if ($mode === '1') {
            // 新規追加かつ、検収の場合　受払明細にデータ追加
            self::issueStock('MOD', $record['moed_accept_date'],  $record, $dbh);
          } 
          if ($mode === '0' || $mode === '2') {
            // 追加行のケース
            self::issueStockPlan('MOD', $record['moed_arrival_hd_date'], $record, $dbh);
          }
        } else {
          // 既存データ　データ削除に関しては、$datdetailに入ってこないので、別途処理
          if ($mode === '1' && self::checkNotSet($record['moed_accept_date']) === false) {
            // 検収済みの場合、検収取消の後にデータ編集可能。
            continue;
          }
          if ($mode === '2' && self::checkNotSet($record['moed_accept_date']) === false) {
            // 部分検収モードの場合も、検収済みのデータは無視する。
            continue;
          }
          if ($mode === '1' || $mode === '2') {
            // 既存データかつ、発注・検収同時登録の場合　(未検収の場合のみが該当)
            if (self::checkNotSet($record['moed_accept_date']) === true) {
              // 発注済みかつ未検収のケースはヘッダの入荷日を検収日とする
              $record['moed_accept_date'] = self::paddingDate( $datHeader[0]['moed_arrival_hd_date']);
              $record['moed_payment_plan_date'] = self::getMOPaymentDate($record['moed_accept_date'], $PAYMENT_DAY);
            } 
            if (self::checkNotSet($record['moed_order_date']) === true) {
              // 発注書未発行の場合は、入荷予定日をセットする。
              $record['moed_order_date'] = self::checkNotSet($record['moed_arrival_plan_date']) ? self::paddingDate( $datHeader[0]['moed_arrival_hd_date']) : $record['moed_arrival_plan_date'];
            }
          }
          // ※入庫時、ロットNoは改めてセットする。
          $record['moed_type_03'] = substr($record['moed_order_no'], 1, 10) . $record['moed_sub_no'] . $record['moed_accept_sub_no'];
          $record['moed_update_cnt'] = $rsltNow[0]['moed_update_cnt'] + 1;          
          // 番号一覧表示のため追加　@20220310
          $record['moed_type_continue'] = $record['moed_type_continue'] ? $record['moed_type_continue'] : '0';
          // データ編集
          $sth = $dbh->prepare(self::makeUpdateSQL('morderestimate', $columnsH));
          self::bindValueToUpdate($sth, $columnsH, $record);
          $sth->execute();
          // 履歴更新
          $sth = $dbh->prepare(self::makeInsertSQL('t_morderestimate', $columnsTH));
          self::bindInsertKeys($sth, $columnsTH, $record);
          $sth->execute();

          if ($mode === '1' || $mode === '2') {
            // 既存データで、未検収の場合
            self::issueStock('MOD', $record['moed_accept_date'],  $record, $dbh);
          }
          if ($mode === '0') {
            // 既存データで更新の場合、受払予定データを更新
            self::issueStockPlan('MOD', self::paddingDate($datHeader[0]['moed_arrival_hd_date']), $record, $dbh);
          }
        }
      }
      
      // データ削除 既存データのみ考慮、発注済み、検収済みは画面上で行削除不可
      if ((int)$mode <= '1' && $nRecCnt > 0) {
        for ($i = 0; $i < count($result); $i++) {
          $existFlg = 0;
          // 既存のレコード(枝番で判定)が、編集後のデータにあるかどうか確認していき、ない場合は、削除されたとみなす。
          foreach ($datDetail as $recUpdate) {
            if ($result[$i]['moed_sub_no'] === $recUpdate['moed_sub_no']) {
              $existFlg = 1;
            }
          }
          if ($existFlg === 0) {
            // 行削除対象レコード
            $sth = $dbh->prepare('
            DELETE FROM morderestimate
            WHERE moed_belong_cd = :BELONGCD AND 
            moed_order_no = :ORDERNO AND 
            moed_sub_no = :SUBNO        
            ;');
            $sth->bindValue(':BELONGCD', $result[$i]['moed_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':ORDERNO', $result[$i]['moed_order_no'], PDO::PARAM_STR);
            $sth->bindValue(':SUBNO', $result[$i]['moed_sub_no'], PDO::PARAM_STR);
            $sth->execute();

            
            if ($result[$i]['moed_refer_no'] && $result[$i]['moed_refer_sub_no']) {
              // 削除行が引継データだった場合は、見積データのフラグをクリア
              $sth = $dbh->prepare('
              UPDATE estimatedetails
              SET ed_update_cnt = ed_update_cnt + 1,
              ed_type_07 = :FLG, 
              ed_update_at = :UPDATEAT, 
              ed_update_cd = :UPDATECD 
              WHERE ed_belong_cd = :BELONGCD AND
              ed_estimate_no = :ESTNO AND 
              ed_estimate_sub_no = :SUBNO               
              ;');
              $sth->bindValue(':FLG', '', PDO::PARAM_STR);
              $sth->bindValue(':UPDATEAT', $result[$i]['moed_update_at'], PDO::PARAM_STR);
              $sth->bindValue(':UPDATECD', $result[$i]['moed_update_cd'], PDO::PARAM_STR);
              $sth->bindValue(':BELONGCD', $result[$i]['moed_belong_cd'], PDO::PARAM_STR);
              $sth->bindValue(':ESTNO', $result[$i]['moed_refer_no'], PDO::PARAM_STR);
              $sth->bindValue(':SUBNO', $result[$i]['moed_refer_sub_no'], PDO::PARAM_STR);
              $sth->execute();

            }
          }
        }
      }
      $dbh->commit(); 
      echo json_encode($resp);     
    } catch (Exception $e) {
      $dbh->rollBack();
      if ($resp['msg'] === '') {
        $resp['msg'] = self::getDBErrorMsg($e);
      }
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
    return;
  }


  /***
   * 受注からの発注引継のケース　出荷元もしくは納入先コードの登録
   */
  private static function registCustomerPostCD($pattern, $UNDEF_CUSTOMER_POST_CD, $datHeader, $dbh) {
    $columnName = $pattern === 'shipper' ? 'moed_shipper_cd' : 'moed_delivery_cd';
    $strCustomerPostCD = '';
    $shipperDatas = [];

    if ($datHeader[0][$columnName] === $UNDEF_CUSTOMER_POST_CD) {
      // 固定コードすなわち、受注時のコードを移行してきた場合
      // 客先部署マスタに既存かどうか確認
      $sth = $dbh->prepare('
      SELECT * FROM customerpost
      WHERE CP_CUSTOMER_ID = :CUSTOMERID AND 
      CP_CUSTOMER_CD = :CUSTOMERCD AND 
      REPLACE(CP_ADDRESS_01, "　", "") = (
          SELECT REPLACE(CP_ADDRESS_01, "　","")
          FROM customerpost WHERE CP_CUSTOMER_ID = :EDCUSID AND CP_CUSTOMER_CD = :EDCUSCD AND CP_POST_CD = :EDPOSCD)
      ;');
      $sth->bindValue(':CUSTOMERID', $datHeader[0]['moed_customer_cd'], PDO::PARAM_STR);
      $sth->bindValue(':CUSTOMERCD', $datHeader[0]['moed_customer_cd'], PDO::PARAM_STR);
      $sth->bindValue(':EDCUSID', $datHeader[0]['moed_order_takeover'], PDO::PARAM_STR);
      $sth->bindValue(':EDCUSCD', $datHeader[0]['moed_order_takeover'], PDO::PARAM_STR);
      $sth->bindValue(':EDPOSCD', $datHeader[0][$columnName . '_ed'], PDO::PARAM_STR);
      $sth->execute();
      $existData = $sth->fetchAll(PDO::FETCH_ASSOC);
      
      if (count($existData) > 0) {
        // 既存ならそのコードを充てる
        $strCustomerPostCD = $existData[0]['CP_POST_CD'];
      } else {
        // 先頭1文字がアルファベットの場合は想定内だが、移行、先頭2桁がアルファベットになった場合にはコード修正が必要
        // 存在しない場合は、最大値を取得
        $sth = $dbh->prepare('
        SELECT MAX(CAST(substring(CP_POST_CD, 2, 4) AS SIGNED)) AS maxcd FROM customerpost
        WHERE CP_CUSTOMER_ID = :CUSTOMERID AND 
        CP_CUSTOMER_CD = :CUSTOMERCD AND 
        CP_POST_CD LIKE :POSTCD
        ;');
        $sth->bindValue(':CUSTOMERID', $datHeader[0]['moed_customer_cd'], PDO::PARAM_STR);
        $sth->bindValue(':CUSTOMERCD', $datHeader[0]['moed_customer_cd'], PDO::PARAM_STR);
        $sth->bindValue(':POSTCD', substr($datHeader[0][$columnName . '_ed'], 0, 1) . '%', PDO::PARAM_STR);
        $sth->execute();
        $shipperDatas = $sth->fetchAll(PDO::FETCH_ASSOC);
        // 最大値が999をオーバーしたら、9千番台で付番する
        $strPadding = '';
        if (!isset($shipperDatas[0]['maxcd'])) {
          // NULLの場合は、受注先に紐づく客先部署コードの先頭1文字を取得し、1番とする。
          $strCustomerPostCD = substr($datHeader[0][$columnName . '_ed'], 0, 1) . '01';

        } else if (substr($datHeader[0][$columnName . '_ed'], 0, 1) !== '0' && intval($shipperDatas[0]['maxcd']) < 999) {
          // 先頭1文字がアルファベットの時
          if (intval($shipperDatas[0]['maxcd']) >= 99) {
            $strPadding = sprintf('%03d', $shipperDatas[0]['maxcd'] + 1);
          } else {
            $strPadding = sprintf('%02d', $shipperDatas[0]['maxcd'] + 1);
          }
          $strCustomerPostCD = substr($datHeader[0][$columnName . '_ed'], 0, 1) . $strPadding;

        } else if (intval($shipperDatas[0]['maxcd']) >= 999) {
          $sth = $dbh->prepare('
          SELECT MAX(CP_POST_CD) AS maxcd FROM customerpost
          WHERE CP_CUSTOMER_ID = :CUSTOMERID AND 
          CP_CUSTOMER_CD = :CUSTOMERCD AND 
          CP_POST_CD LIKE :POSTCD
          ;');
          $sth->bindValue(':CUSTOMERID', $datHeader[0]['moed_customer_cd'], PDO::PARAM_STR);
          $sth->bindValue(':CUSTOMERCD', $datHeader[0]['moed_customer_cd'], PDO::PARAM_STR);
          $sth->bindValue(':POSTCD', '9%', PDO::PARAM_STR);
          $sth->execute();
          $shipperData2 = $sth->fetchAll(PDO::FETCH_ASSOC);

          $strPadding = (String)($shipperData2[0]['maxcd'] + 1);
          $strCustomerPostCD = $strPadding;
        } else if (intval($shipperDatas[0]['maxcd']) >= 99) {
          // 先頭1文字目0固定　4桁
          $strPadding = sprintf('%03d', $shipperDatas[0]['maxcd'] + 1);
          $strCustomerPostCD = '0' . $strPadding;
        } else {
          // 先頭1文字目0固定　3桁
          $strPadding = sprintf('%02d', $shipperDatas[0]['maxcd'] + 1);
          $strCustomerPostCD = '0' . $strPadding;
        }
        

        $sth = $dbh->prepare('
        SELECT * FROM customerpost
        WHERE CP_CUSTOMER_ID = :CUSTOMERID AND 
        CP_CUSTOMER_CD = :CUSTOMERCD AND 
        CP_POST_CD = :POSCD
        ;');
        $sth->bindValue(':CUSTOMERID', $datHeader[0]['moed_order_takeover'], PDO::PARAM_STR);
        $sth->bindValue(':CUSTOMERCD', $datHeader[0]['moed_order_takeover'], PDO::PARAM_STR);
        $sth->bindValue(':POSCD', $datHeader[0][$columnName . '_ed'], PDO::PARAM_STR);
        $sth->execute();
        $existData = $sth->fetchAll(PDO::FETCH_ASSOC);

        // データ登録
        // 部署マスタに納入先を登録
        $sth = $dbh->prepare(
          'INSERT INTO customerpost (
            CP_CUSTOMER_ID, 
            CP_CUSTOMER_CD, 
            CP_POST_CD, 
            CP_POST_NAME,
            CP_QUOTATION_TYPE,
            CP_ADDRESS_01,
            CP_ADDRESS_02,
            CP_TEL,
            CP_FAX,
            CP_ADDRESS_NO,
            CP_UPDATE_AT,
            CP_UPDATE_CD
          ) VALUES (
            :CUSTOMERID, 
            :CUSTOMERCD, 
            :POSTCD, 
            :POSTNAME,
            :QUOTATIONTYPE,
            :CP_ADDRESS_01,
            :CP_ADDRESS_02,
            :CP_TEL,
            :CP_FAX,
            :CP_ADDRESS_NO,
            :UPDATEAT,
            :UPDATECD
        );');
        $sth->bindValue(':CUSTOMERID', $datHeader[0]['moed_customer_cd'], PDO::PARAM_STR);
        $sth->bindValue(':CUSTOMERCD', $datHeader[0]['moed_customer_cd'], PDO::PARAM_STR);
        $sth->bindValue(':POSTCD', $strCustomerPostCD, PDO::PARAM_STR);
        $sth->bindValue(':POSTNAME', $datHeader[0]['moed_' . $pattern . '_name'], PDO::PARAM_STR);
        $sth->bindValue(':QUOTATIONTYPE', '', PDO::PARAM_STR);
        $sth->bindValue(':CP_ADDRESS_01', $existData[0]['CP_ADDRESS_01'], PDO::PARAM_STR);
        $sth->bindValue(':CP_ADDRESS_02', $existData[0]['CP_ADDRESS_02'], PDO::PARAM_STR);
        $sth->bindValue(':CP_TEL', $existData[0]['CP_TEL'], PDO::PARAM_STR);
        $sth->bindValue(':CP_FAX', $existData[0]['CP_FAX'], PDO::PARAM_STR);
        $sth->bindValue(':CP_ADDRESS_NO', $existData[0]['CP_ADDRESS_NO'], PDO::PARAM_STR);
        $sth->bindValue(':UPDATEAT', self::currentDate(), PDO::PARAM_STR);
        $sth->bindValue(':UPDATECD', $_SESSION['usercd'], PDO::PARAM_STR);
        $sth->execute();
      }
    }
    return $strCustomerPostCD;
  }

  // 出荷済みフラグ確認
  public static function checkShipmentFlg($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $result = array();
    $dbh = self::dbPDO();
    try {
      for ($i = 0; $i < count($sdat); $i++) {
        $sth = $dbh->prepare('SELECT * FROM estimatedetails
        WHERE ed_belong_cd = :BELONG AND ed_estimate_no = :ESTNO AND ed_estimate_sub_no = :SUBNO
        ;');
        $sth->bindValue(':BELONG', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':ESTNO', $sdat[$i]['ed_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $sdat[$i]['ed_estimate_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = array_merge($result, $sth->fetchAll(PDO::FETCH_ASSOC));
      }
      echo json_encode($result);
    } catch (Exception $e) {
      throw $e;
    }
  } 
  
  /**********************************************************************************************************
   * 納品書データ更新
   * 納品書発行時に、見積明細データを更新にかける。
   * 納品書発行後も、納品日、出荷元、納品先、単価は変更することがあるため、単価以外は最新値で更新する。単価
   * については、検収時に売りが上がるときのみ検証する値とし、見積データは更新しない。
   */
  public static function updateSD($datHeader, $datDetail) {
    $resp = array('succeed' => true, 'msg' => '');
    // 削除チェック用
    $delFlgH = false;     // ヘッダ削除フラグ
    $delFlgD = false;     // 明細削除フラグ
    $delCnt = 0;          // 削除レコードカウント
    $compSDFlg = false;   // 納品書発行済みフラグ

    $pos = [];
    $arr = [];
    $arDeleteRecord = [];
    $delMode = false;  // 更新・新規の場合はfalse、削除の場合はtrue
    // statement,statementdetailsテーブルのデータ定義取得
    $columnsH = self::getColumnDefs('statement');
    $columnsD = self::getColumnDefs('statementdetails');    
    // 各テーブルのヘッダセット
    self::markAsHeaderPK($columnsH, 's_belong_cd');
    self::markAsHeaderPK($columnsH, 's_estimate_no');
    self::markAsHeaderPK($columnsH, 's_serial_no');
    self::markAsHeaderPK($columnsD, 'sd_belong_cd');
    self::markAsHeaderPK($columnsD, 'sd_e_estimate_no');
    self::markAsHeaderPK($columnsD, 'sd_statement_sub_no');
    self::markAsHeaderPK($columnsD, 'sd_estimate_sub_no');

    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();

      // 画面非表示のデータセット&YYYYMMDDに記載変更
      $datHeader[0]['s_belong_cd'] = $_SESSION['companycd'];
      $datHeader[0]['s_update_at'] = self::currentDate();
      $datHeader[0]['s_update_cd'] = $_SESSION['usercd'];
      $datHeader[0]['s_shipping_plan_date'] = self::paddingDate($datHeader[0]['s_shipping_plan_date']);
      $datHeader[0]['s_shipping_date'] = self::paddingDate($datHeader[0]['s_shipping_date']);
      $datHeader[0]['s_desired_delivery_date'] = self::dateFormatForDB($datHeader[0]['s_desired_delivery_date'], $datHeader[0]['s_shipping_date']);
      $datHeader[0]['s_bill_close_date'] = self::paddingDate($datHeader[0]['s_bill_close_date']);
      $datHeader[0]['s_payment_plan_date'] = self::paddingDate($datHeader[0]['s_payment_plan_date']);
      $datHeader[0]['s_type_continue'] = '0';

      
      foreach($datDetail as $record) {
        // ヘッダデータ付与
        $record['sd_belong_cd'] = $_SESSION['companycd'];
        $record['sd_update_at'] = self::currentDate();
        $record['sd_update_cd'] = $_SESSION['usercd'];
        $record['sd_e_estimate_no'] = $datHeader[0]['s_estimate_no'];
        $record['sd_statement_sub_no'] = $datHeader[0]['s_serial_no'];

        $record['sd_desired_delivery_date'] = self::dateFormatForDB($record['sd_desired_delivery_date'], $datHeader[0]['s_shipping_plan_date']);

        $record['sd_shipment_date'] = self::checkNotSet($datHeader[0]['s_shipping_date']) ? '' : $datHeader[0]['s_shipping_date'];

        $record['sd_bill_close_date'] = self::checkNotSet($datHeader[0]['s_bill_close_date']) ? '' : $datHeader[0]['s_bill_close_date'];
        
        $record['sd_payment_close_date'] = self::checkNotSet($datHeader[0]['s_payment_plan_date']) ? '' : $datHeader[0]['s_payment_plan_date'];

        $record['sd_customer_order_no'] = self::checkNotSet($record['sd_customer_order_no']) ? '' : $record['sd_customer_order_no'];
        $record['sd_delivery_cd'] = self::checkNotSet($record['sd_delivery_cd']) ? $datHeader[0]['s_delivery_cd'] : $record['sd_delivery_cd'];
        
        // 品名が規格を含む場合は、sd_pnameは品名のみ保持する。
        $arr = explode('_', $record['sd_p_name']);
        $record['sd_p_name'] = $arr[0];

        // 受注データ更新
        self::updateEDShippingData($record, $record['sd_shipment_date'], $dbh);

        // 既存データ取得
        $sth = $dbh->prepare('
        SELECT * FROM statementdetails
        WHERE sd_e_estimate_no = :ESTNO  
        AND sd_statement_sub_no = :STSUBNO  
        AND sd_estimate_sub_no = :ESTSUBNO  
        AND sd_shipment_sub_no = :SHIPNO        
        ;');
        $sth->bindValue(':ESTNO', $record['sd_e_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':STSUBNO', $record['sd_statement_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':ESTSUBNO', $record['sd_estimate_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':SHIPNO', $record['sd_shipment_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        
        if (count($result) > 0) {
          // 既存
          // 納品書発行後直後にリロードしない場合を考慮
          $record['sd_deliv_create_date'] = self::checkNotSet($result[0]['sd_deliv_create_date']) ? '' : $result[0]['sd_deliv_create_date'];

          $sth = $dbh->prepare(self::makeUpdateSQL('statementdetails', $columnsD));
          self::bindValueToUpdate($sth, $columnsD, $record);
          $sth->execute();

        } else {
          
          // 新規
          $sth = $dbh->prepare(self::makeInsertSQL('statementdetails', $columnsD));
          self::bindInsertKeys($sth, $columnsD, $record);
          $sth->execute();
        }
      }

      // 削除レコードがあるか確認
      $arDeleteRecord = self::getDeleteSDRecord($datDetail, $dbh);

      // 受注明細更新
      self::cancelEDStatementData($arDeleteRecord, $dbh);

      foreach ($arDeleteRecord as $record) {
        // 該当データ削除
        $sth = $dbh->prepare('
        DELETE FROM statementdetails
        WHERE sd_belong_cd = :BELONGCD AND 
        sd_e_estimate_no = :ESTNO AND 
        sd_statement_sub_no = :STSUBNO AND 
        sd_estimate_sub_no = :ESTSUBNO AND 
        sd_shipment_sub_no = :SHIPNO                
        ;');
        $sth->bindValue(':BELONGCD', $datHeader[0]['s_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':ESTNO', $datHeader[0]['s_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':STSUBNO', $datHeader[0]['s_serial_no'], PDO::PARAM_STR);
        $sth->bindValue(':ESTSUBNO', $record['sd_estimate_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':SHIPNO', $record['sd_shipment_sub_no'], PDO::PARAM_STR);
        $sth->execute();
      }

      if (count($datDetail) <= 0) {
        // 全削除の場合
        $sth = $dbh->prepare('
        DELETE FROM statement
        WHERE s_belong_cd = :BELONGCD AND
        s_estimate_no = :ESTNO AND 
        s_serial_no = :STSUBNO                 
        ;');
        $sth->bindValue(':BELONGCD', $datHeader[0]['s_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':ESTNO', $datHeader[0]['s_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':STSUBNO', $datHeader[0]['s_serial_no'], PDO::PARAM_STR);
        $sth->execute();

        $delMode = true;  // 削除
      } else {
        $sth = $dbh->prepare('
        SELECT * FROM statement
        WHERE s_belong_cd = :BELONGCD AND
        s_estimate_no = :ESTNO AND 
        s_serial_no = :STSUBNO      
        ;');
        $sth->bindValue(':BELONGCD', $datHeader[0]['s_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':ESTNO', $datHeader[0]['s_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':STSUBNO', $datHeader[0]['s_serial_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {          // 既存
          $sth = $dbh->prepare(self::makeUpdateSQL('statement', $columnsH));
          self::bindValueToUpdate($sth, $columnsH, $datHeader[0]);
          $sth->execute();

        } else {
          // 新規
          $sth = $dbh->prepare(self::makeInsertSQL('statement', $columnsH));
          self::bindInsertKeys($sth, $columnsH, $datHeader[0]);
          $sth->execute();

        }
      }

    
      $dbh->commit();
      // 登録された納品データをもとにデータを更新
      // $delMode 削除はtrue
      $resp = self::updateLeafship($datHeader, $delMode);
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
    }
    echo json_encode($resp);
  }


  /***
   * 面積計算
   * $mode : 0:数量を計算に入れない。1:数量を計算に入れる。
   */
  private static function calcDimension($num01, $num02, $qty, $length, $mode = 0) {
    $tempDimension = 0;
    $dimension = 0;
    $result = 0;

    if (self::checkNotSet($num01) || self::checkNotSet($num02)) {
      return 0;
    }

    $tempDimension = $num01 * $num02;
    if ($mode) {
      $dimension = $tempDimension * $qty / 1000000;
    } else {
      $dimension = $tempDimension / 1000000;
    }

    return $result = round($dimension, $length);
  }


  /***
   * データの有無で日付のセットデータ変更
   */
  private static function dateFormatForDB($dat, $default) {
    if (self::checkNotSet($dat) === true) {
      return $default;
    } else {
      return self::paddingDate($dat);
    }
  }


  /***
   * 削除対象レコードを取得
   */
  private static function getDeleteSDRecord($datDetail, $dbh) {
    $recStatus = true;  
    $arNotExistRecord = []; 
    $arTargetRecord = [];
    try {      
      // 既存データ
      $sth = $dbh->prepare('
      SELECT * FROM statementdetails
      WHERE sd_e_estimate_no = :ESTNO 
      AND sd_statement_sub_no = :STNO
      ;');
      $sth->bindValue(':ESTNO', $datDetail[0]['sd_estimate_no'], PDO::PARAM_STR);
      $sth->bindValue(':STNO', $datDetail[0]['sd_statement_sub_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($result) <= 0) {
        // 1回目の登録
        return $arNotExistRecord;
      }

      for ($i = 0; $i < count($result); $i++) {
        for ($j = 0; $j < count($datDetail); $j++) {
          if ($result[$i]['sd_estimate_sub_no'] === $datDetail[$j]['sd_estimate_sub_no']
          && $result[$i]['sd_shipment_sub_no'] === $datDetail[$j]['sd_shipment_sub_no']) {
            $recStatus = false;
            break;
          }
        }
        if ($recStatus) {
          // 元々存在しないデータ
          array_push($arNotExistRecord, $result[$i]);
        }
      }

      for ($i = 0; $i < count($arNotExistRecord); $i++) {
        for ($j = 0; $j < count($result); $j++) {
          if ($arNotExistRecord[$i]['sd_estimate_sub_no'] === $result[$j]['sd_estimate_sub_no']
            && $arNotExistRecord[$i]['sd_shipment_sub_no'] === $result[$j]['sd_shipment_sub_no']) {
            array_push($arTargetRecord, $arNotExistRecord[$i]);
            break;
          }
        }
      }

      return $arTargetRecord;

    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 出荷実績データ更新時、見積データを更新
   */
  private static function updateEDShippingData($datDetailRecord, $shippingDate, $dbh) {
    $columnsED = self::getColumnDefs('estimatedetails');
    $columnsTED = self::getColumnDefs('t_estimatedetails');

    self::markAsHeaderPK($columnsED, 'ed_belong_cd');
    self::markAsHeaderPK($columnsED, 'ed_estimate_no');
    self::markAsHeaderPK($columnsED, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsED, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsTED, 'ed_belong_cd');
    self::markAsHeaderPK($columnsTED, 'ed_estimate_no');
    self::markAsHeaderPK($columnsTED, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsTED, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsTED, 'ed_update_cnt');

    $result = [];
    $insertFlg = false;
    
    try {

      $sth = $dbh->prepare('
      SELECT * FROM estimatedetails 
      WHERE ed_belong_cd = :BELONGCD AND 
      ed_estimate_no = :ESTNO AND 
      ed_estimate_sub_no = :SUBNO AND
      ed_shipment_sub_no = :SDNO
      ');
      $sth->bindValue(':BELONGCD', $datDetailRecord['sd_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue(':ESTNO', $datDetailRecord['sd_e_estimate_no'], PDO::PARAM_STR);
      $sth->bindValue(':SUBNO', $datDetailRecord['sd_estimate_sub_no'], PDO::PARAM_STR);
      $sth->bindValue(':SDNO', $datDetailRecord['sd_shipment_sub_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($result) <= 0 ) {
        // レコードがない場合、行追加 1レコードの分割のため、INSERT処理必要
        $insertFlg = true;  

        $sth = $dbh->prepare('
        SELECT * FROM estimatedetails
        WHERE ed_belong_cd = :BELONGCD AND 
        ed_estimate_no = :ESTNO AND 
        ed_estimate_sub_no = :SUBNO AND
        ed_shipment_sub_no = :SDNO
        ;');
        $sth->bindValue(':BELONGCD', $datDetailRecord['sd_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':ESTNO', $datDetailRecord['sd_e_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $datDetailRecord['sd_estimate_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':SDNO', '01', PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      }

      $item = $result[0];

      $item['ed_update_cnt'] = $insertflg ? 0 : $item['ed_update_cnt'] + 1;
      $item['ed_shipment_sub_no'] = $datDetailRecord['sd_shipment_sub_no'];
      $item['ed_update_at'] = self::currentDate();
      $item['ed_update_cd'] = $_SESSION['usercd'];

      if ($shippingDate) {
        if ($item['ed_quantity'] > $datDetailRecord['sd_qty_delivery']) {
          // 部分出荷
          $item['ed_ship_status_sign'] = '1';
        } else {
          // 出荷完了
          $item['ed_ship_status_sign'] = '2';
        }

        // 在庫から該当製品を削除
        self::updateProductRecord ($item, 1, $dbh);

        $item['ed_shipment_date'] = $shippingDate;
        $item['ed_qty_shipment'] = $datDetailRecord['sd_qty_delivery'];
        $item['ed_delivery_price'] = $datDetailRecord['sd_delivery_price'];

      } else {
        // 未出荷
        $item['ed_ship_status_sign'] = '0';
        $item['ed_shipment_date'] = '';
        $item['ed_qty_shipment'] = $datDetailRecord['sd_qty_delivery'];

      }

      // 受注明細更新
      if ($insertFlg) {
        $sth = $dbh->prepare(self::makeInsertSQL('estimatedetails',  $columnsED));
        self::bindInsertKeys($sth,  $columnsED, $item);
        $sth->execute();
      } else {
        $sth = $dbh->prepare(self::makeUpdateSQL('estimatedetails',  $columnsED));
        self::bindValueToUpdate($sth,  $columnsED, $item);
        $sth->execute();
      }
      // 受注履歴更新
      $sth = $dbh->prepare(self::makeInsertSQL('t_estimatedetails',  $columnsTED));
      self::bindInsertKeys($sth,  $columnsTED, $item);
      $sth->execute();

      
    } catch (Exception $e) {
      throw $e;
    }
  }

  /***
   * 出荷データ取消
   */
  private static function cancelEDStatementData($targetDetail, $dbh) {

    $columnsED = self::getColumnDefs('estimatedetails');
    $columnsTED = self::getColumnDefs('t_estimatedetails');

    self::markAsHeaderPK($columnsED, 'ed_belong_cd');
    self::markAsHeaderPK($columnsED, 'ed_estimate_no');
    self::markAsHeaderPK($columnsED, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsED, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsTED, 'ed_belong_cd');
    self::markAsHeaderPK($columnsTED, 'ed_estimate_no');
    self::markAsHeaderPK($columnsTED, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsTED, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsTED, 'ed_update_cnt');

    $result = [];
    try {
      $sth = $dbh->prepare('
      SELECT * FROM estimatedetails 
      WHERE ed_belong_cd = :BELONGCD AND 
      ed_estimate_no = :ESTNO AND 
      ed_estimate_sub_no = :SUBNO AND
      ed_shipment_sub_no = :SDNO
      ');
      $sth->bindValue(':BELONGCD', $targetDetail['sd_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue(':ESTNO', $targetDetail['sd_e_estimate_no'], PDO::PARAM_STR);
      $sth->bindValue(':SUBNO', $targetDetail['sd_estimate_sub_no'], PDO::PARAM_STR);
      $sth->bindValue(':SDNO', $targetDetail['sd_shipment_sub_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      foreach($result as $record) {
        $record['ed_update_cnt'] += 1;
        $record['ed_ship_status_sign'] = '';
        $record['ed_shipment_date'] = '';
        $record['ed_qty_shipment'] = 0;
        $record['ed_qty_delivery'] = 0;
        $record['ed_delivery_price'] = 0;
        $record['ed_delivery_sign'] = '0';
        $record['ed_deliv_create_date'] = '';
        $record['ed_bill_close_date'] = '';
        $record['ed_bill_price'] = 0;
        $record['ed_bill_sign'] = '0';
        $record['ed_bill_create_date'] = '';
        $record['ed_payment_close_date'] = '';
        $record['ed_payment_price'] = 0;
        $record['ed_payment_sign'] = '0';
        $record['ed_payment_del_date'] = '';
        
        // 受注明細更新
        $sth = $dbh->prepare(self::makeUpdateSQL('estimatedetails',  $columnsED));
        self::bindValueToUpdate($sth,  $columnsED, $record);
        $sth->execute();
        // 受注履歴更新
        $sth = $dbh->prepare(self::makeInsertSQL('t_estimatedetails',  $columnsTED));
        self::bindInsertKeys($sth,  $columnsTED, $record);
        $sth->execute();
      }


    } catch (Exception $e) {
      throw $e;
    }
  }


  // 納品データ登録時に同時登録 出荷済みデータは呼出元関数にてチェックのこと
  /**
   * 出荷リーフ作成
   * 出荷リーフは、出荷番号で1リーフとする(竹中仕様)
   */
  public static function updateLeafship($datHeader, $mode) {
    $resp = array('succeed' => true, 'msg' => '');
    $columns = self::getColumnDefs('leafship');

    // 各テーブルのヘッダセット
    self::markAsHeaderPK($columns, 'l_belong_cd');
    self::markAsHeaderPK($columns, 'l_leaf_no');

    $dbh = self::dbPDO();
    $lShipNo = '';
    try {
      $dbh->beginTransaction();
      if ($mode) {
        // 削除された場合リーフも削除
        $sth = $dbh->prepare('
        DELETE FROM leafship
        WHERE l_estimate_no = :ESTNO AND 
        l_statement_sub_no = :SDNO AND 
        l_estimate_sub_no = :ESTSUBNO AND 
        l_shipment_sub_no = :SHIPNO
        ;');
        $sth->bindValue(':ESTNO', $datHeader[0]['s_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':SDNO', $datHeader[0]['s_serial_no'], PDO::PARAM_STR);
        $sth->bindValue(':ESTSUBNO', '000', PDO::PARAM_STR);
        $sth->bindValue(':SHIPNO', '00', PDO::PARAM_STR);
        $sth->execute();

      } else {
        // 登録されたデータ取得 強制的に製品CDを取得。ただし、枝番が最も小さいレコードが出るとは限らないため、客先から指示があった場合は修正の必要あり
        $sth = $dbh->prepare('
        SELECT * FROM statementdetails
        LEFT JOIN statement ON s_estimate_no = sd_e_estimate_no AND s_serial_no = sd_statement_sub_no
        WHERE sd_e_estimate_no = :SDNO AND sd_statement_sub_no = :SUBNO
        GROUP BY sd_e_estimate_no, sd_statement_sub_no
        ;');
        $sth->bindValue(':SDNO', $datHeader[0]['s_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $datHeader[0]['s_serial_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        foreach ($result as $rec) {
          $sth = $dbh->prepare('
          SELECT * FROM leafship
          WHERE l_estimate_no = :ESTNO AND 
          l_statement_sub_no = :SDNO AND 
          l_estimate_sub_no = :ESTSUBNO AND 
          l_shipment_sub_no = :SHIPNO
          ;');
          $sth->bindValue(':ESTNO', $rec['s_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':SDNO', $rec['s_serial_no'], PDO::PARAM_STR);
          $sth->bindValue(':ESTSUBNO', '000', PDO::PARAM_STR);
          $sth->bindValue(':SHIPNO', '00', PDO::PARAM_STR);
          $sth->execute();
          $rsltL = $sth->fetchAll(PDO::FETCH_ASSOC);
                  
          if (count($rsltL) > 0) {
            // 既存　納期変更->仕様変更により出荷予定日に変更
            $rsltL[0]['l_start_plan_date'] = $rec['s_shipping_plan_date'];
            // s_shipping_dateが入っていたら、l_finish_dateを上書き
            if (self::checkNotSet($rec['s_shipping_date']) === false) {
              $rsltL[0]['l_finish_date'] = $rec['s_shipping_date'];
            }
            
            $sth = $dbh->prepare(self::makeUpdateSQL('leafship', $columns));
            self::bindUpdateKeys($sth, $columns, $rsltL[0]);
            $sth->execute();
          } else {
            // 新規登録        
            // リーフ番号取得
            $sth = $dbh->prepare('
            SELECT MAX(l_leaf_no) AS maxno
            FROM leafship
            WHERE l_leaf_no LIKE :TODAYDATE
            ;');
            $sth->bindValue(':TODAYDATE', 'L' . substr(self::currentDate(), 2) . '%', PDO::PARAM_STR);
            $sth->execute();
            $rsltLNo = $sth->fetchAll(PDO::FETCH_ASSOC);
            
            if ($lShipNo === '') {
              // リーフ番号採番               
              if (self::checkNotSet($rsltLNo[0]['maxno']) !== true) {
                $lShipNo = 'L' . (substr($rsltLNo[0]['maxno'], 1) + 1);
              } else {
                $lShipNo = 'L' . substr(self::currentDate(), 2) . '001';
              }
            } else {
              $lShipNo = 'L' . (substr($lShipNo, 1) + 1);
            }     
            // 登録用データ配列
            $arData = array(
              'l_belong_cd'             =>  $_SESSION['companycd'],
              'l_leaf_no'               =>  $lShipNo,
              'l_estimate_no'           =>  $rec['s_estimate_no'],
              'l_statement_sub_no'      =>  $rec['s_serial_no'],
              'l_estimate_sub_no'       =>  '000',
              'l_shipment_sub_no'       =>  '00',
              'l_p_cd'                  =>  self::checkNotSet($rec['sd_p_cd']) ? '' : $rec['sd_p_cd'],
              'l_p_name_supple'         =>  '',
              'l_quantity'              =>  0,
              'l_customer_cd'           =>  $rec['s_customer_cd'],
              'l_customer_post_cd'      =>  $rec['s_customer_post_cd'],
              'l_customer_charge_cd'    =>  $rec['s_customer_charge_cd'],
              'l_salesman_cd'           =>  $rec['s_salesman_cd'],
              'l_order_no'              =>  $rec['s_customer_order_no'],
              'l_shipper_cd'            =>  $rec['s_shipper_cd'],
              'l_stay_cd'               =>  $rec['s_stay_cd'],
              'l_delivery_cd'           =>  $rec['s_delivery_cd'],
              'l_tc_short_name'         =>  $rec['s_tc_short_name'],
              'l_title'                 =>  $rec['s_title'],
              'l_handorver'             =>  $rec['s_remarks'],
              'l_start_plan_date'       =>  $rec['s_shipping_plan_date'],
              'l_start_plan_time'       =>  '0000',
              'l_interval'              =>  60,   // リーフ表示用
              'l_warehouse_cd'          =>  '',
              'l_org_leaf_no'           =>  '',
              'l_start_date'            =>  '',
              'l_start_time'            =>  '',
              'l_finish_date'           =>  $rec['s_shipping_date'] ? $rec['s_shipping_date'] : '',
              'l_finish_time'           =>  '',
              'l_remarks'               =>  '',
              'l_deadline'              =>  $rec['s_desired_delivery_date'],
            );     

            $sth = $dbh->prepare(self::makeInsertSQL('leafship', $columns));
            self::bindInsertKeys($sth, $columns, $arData);
            $sth->execute();
          }
        }
      }
      $dbh->commit();
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
    }
    return $resp;
  }


  /**
   * 見積書データの出荷枝番取得
   * 未使用
   */
  public static function getMaxShipNo($dat) {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('
      SELECT MAX(ed_shipment_sub_no) FROM estimatedetails 
      WHERE ed_belong_cd = :BELONGCD AND 
            ed_estimate_no = :ESTNO 
      ;');
      $sth->bindValue(':BELONGCD', $dat['e_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue(':ESTNO', $dat['e_estimate_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      echo json_encode($result);
    } catch (Exception $e) {
      $dbh->rollBack();
    }
  }

  // 出荷済みフラグ確認
  public static function updateShipmentFlg($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $result = array();
    $dbh = self::dbPDO();
    try {
      for ($i = 0; $i < count($sdat); $i++) {
        $sth = $dbh->prepare('SELECT * FROM estimatedetails
        WHERE ed_belong_cd = :BELONG AND ed_estimate_no = :ESTNO AND ed_estimate_sub_no = :SUBNO
        ;');
        $sth->bindValue(':BELONG', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':ESTNO', $sdat[$i]['ed_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $sdat[$i]['ed_estimate_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = array_merge($result, $sth->fetchAll(PDO::FETCH_ASSOC));
      }
      echo json_encode($result);
    } catch (Exception $e) {
      throw $e;
    }
  } 

  /**
   * 納品確定/納品取消ボタン押下
   * 1: 確定　0:キャンセル
   */
  public static function updateEDStatementFlg($datHeader, $datDetail, $flg) {
    $resp = array('succeed' => true, 'msg' => '');
    $result = array();

    $columns = self::getColumnDefs('statement');
    self::markAsHeaderPK($columns, 's_belong_cd');
    self::markAsHeaderPK($columns, 's_estimate_no');
    self::markAsHeaderPK($columns, 's_serial_no');

    $columnsED = self::getColumnDefs('estimatedetails');
    self::markAsHeaderPK($columnsED, 'ed_belong_cd');
    self::markAsHeaderPK($columnsED, 'ed_estimate_no');
    self::markAsHeaderPK($columnsED, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsED, 'ed_shipment_sub_no');
    $columnsTED = self::getColumnDefs('t_estimatedetails');
    self::markAsHeaderPK($columnsTED, 'ed_belong_cd');
    self::markAsHeaderPK($columnsTED, 'ed_estimate_no');
    self::markAsHeaderPK($columnsTED, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsTED, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsTED, 'ed_update_cnt');
    $dbh = self::dbPDO();

    try {
      $dbh->beginTransaction();
      // 納品確定の場合は、売りを立てる。納品取消の場合は、受払明細にマイナスデータで更新
      // つまり、確定前に、全作業が完了している必要がある
      $datHeader[0]['s_shipping_date'] = self::paddingDate($datHeader[0]['s_shipping_date']);
      if ($flg) {
        // 納品確定
        $sth = $dbh->prepare('
        SELECT * FROM statementdetails AS sd
        LEFT JOIN statement AS s ON s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
        LEFT JOIN estimatedetails AS ed ON ed.ed_estimate_no = sd.sd_e_estimate_no AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no AND ed.ed_shipment_sub_no = sd.sd_shipment_sub_no
        WHERE sd_e_estimate_no = :ESTNO AND 
        sd_statement_sub_no = :SDNO        
        ;');
        $sth->bindValue(':ESTNO', $datHeader[0]['s_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':SDNO', $datHeader[0]['s_serial_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if ($result[0]['s_sales_sign'] === '1') {
          $resp['succeed'] = false;
          $resp['msg'] = '既に納品確定済みです。';
          echo json_encode($resp);
          return;
        }

        foreach ($result as $rec) {
          // 売上計上 
          // 仕様変更のため、基軸日を納品日から出荷予定日とする。帳票出力のために納品日を使用させるために、基軸日を出荷予定日とし、出荷日と整合性が合わなくても許可する
          // self::issueStock('SD', $datHeader[0]['s_desired_delivery_date'], $rec, $dbh);
          self::issueStock('SD', $datHeader[0]['s_shipping_date'], $rec, $dbh);
        }
        
        // データ更新
        $result[0]['s_sales_sign'] = 1;
        if (self::checkNotSet($result[0]['s_desired_delivery_date']) === true) {

          $result[0]['s_desired_delivery_date'] = $result[0]['s_shipping_date'];
        } 
        $sth = $dbh->prepare(self::makeUpdateSQL('statement', $columns ));
        self::bindValueToUpdate($sth, $columns, $result[0]);
        $sth->execute();

        foreach ($datDetail as $rec) {
          $sth = $dbh->prepare('
          SELECT * FROM estimatedetails AS ed
          LEFT JOIN estimate As e ON e.e_estimate_no = ed.ed_estimate_no
          WHERE ed.ed_estimate_no = :ESTNO AND ed.ed_estimate_sub_no = :EDSUBNO AND ed.ed_shipment_sub_no = :SDSUBNO
          ;');
          $sth->bindValue(':ESTNO', $datHeader[0]['s_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':EDSUBNO', $rec['sd_estimate_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':SDSUBNO', $rec['sd_shipment_sub_no'], PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);

          // 納品フラグ更新
          $updateDate = self::currentDate();    // 更新日
          $updateCD = $_SESSION['usercd'];
          $result[0]['ed_delivery_sign'] = '2';
          $result[0]['ed_update_at'] = $updateDate;
          $result[0]['ed_update_cd'] = $updateCD;
          $result[0]['ed_update_cnt'] += 1;
          $sth = $dbh->prepare(self::makeUpdateSQL('estimatedetails', $columnsED ));
          self::bindValueToUpdate($sth, $columnsED, $result[0]);
          $sth->execute();

          $sth = $dbh->prepare(self::makeInsertSQL('t_estimatedetails', $columnsTED));
          self::bindInsertKeys($sth, $columnsTED, $result[0]);
          $sth->execute();    

          // 入庫予定を削除
          self::issueStockPlan('ED', '', $result[0], $dbh, true);
        }
      } else {
        // 納品確定解除
        $sth = $dbh->prepare('
        SELECT * FROM statementdetails AS sd
        LEFT JOIN statement AS s ON s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
        LEFT JOIN estimatedetails AS ed ON ed.ed_estimate_no = sd.sd_e_estimate_no AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no AND ed.ed_shipment_sub_no = sd.sd_shipment_sub_no
        WHERE sd_e_estimate_no = :ESTNO AND 
        sd_statement_sub_no = :SDNO        
        ;');
        $sth->bindValue(':ESTNO', $datHeader[0]['s_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':SDNO', $datHeader[0]['s_serial_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if ($result[0]['s_sales_sign'] === '0') {
          $resp['succeed'] = false;
          $resp['msg'] = '納品確定されていません。';
          echo json_encode($resp);
          return;
        }

        if (self::checkNotSet($datHeader[0]['s_shipping_date']) === true) {
          // 出荷日を消して、納品取消ボタンを押下した場合、キーカラムなのでエラーが発生する。エラー防止
          $datHeader[0]['s_shipping_date'] = $result[0]['s_shipping_date'];
        }
    

        foreach ($result as $rec) {
          // 売上計上をマイナス
          // self::issueStock('SD', $datHeader[0]['s_desired_delivery_date'], $rec, $dbh, true);
          self::issueStock('SD', $result[0]['s_shipping_date'], $rec, $dbh, true);
        }

        // データ更新
        $result[0]['s_sales_sign'] = 0;
        $sth = $dbh->prepare(self::makeUpdateSQL('statement', $columns ));
        self::bindValueToUpdate($sth, $columns, $result[0]);
        $sth->execute();

        foreach ($datDetail as $rec) {
          $sth = $dbh->prepare('
          SELECT * FROM estimatedetails AS ed
          LEFT JOIN estimate As e ON e.e_estimate_no = ed.ed_estimate_no
          WHERE ed.ed_estimate_no = :ESTNO AND ed.ed_estimate_sub_no = :EDSUBNO AND ed.ed_shipment_sub_no = :SDSUBNO
          ;');
          $sth->bindValue(':ESTNO', $datHeader[0]['s_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':EDSUBNO', $rec['sd_estimate_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':SDSUBNO', $rec['sd_shipment_sub_no'], PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);

          // 納品フラグ更新
          $updateDate = self::currentDate();    // 更新日
          $updateCD = $_SESSION['usercd'];
          $result[0]['ed_delivery_sign'] = '0';
          $result[0]['ed_update_at'] = $updateDate;
          $result[0]['ed_update_cd'] = $updateCD;
          $result[0]['ed_update_cnt'] += 1;
          $sth = $dbh->prepare(self::makeUpdateSQL('estimatedetails', $columnsED ));
          self::bindValueToUpdate($sth, $columnsED, $result[0]);
          $sth->execute();

          $sth = $dbh->prepare(self::makeInsertSQL('t_estimatedetails', $columnsTED));
          self::bindInsertKeys($sth, $columnsTED, $result[0]);
          $sth->execute();    

          // 入庫予定を元に戻す
          self::issueStockPlan('ED', $result[0]['e_estimate_date'], $result[0], $dbh);
        }
      }

      $dbh->commit();
    } catch (Exception $e) { 
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      
      // throw $e;
    }
    echo json_encode($resp);
  }

  /***
   * 請求書作成 【2023/5/17修正：繰越再請求データは、税抜き価格にしなくてそのままの金額で登録する】
   * $sdat: closeDate, customercd
   */
  public static function createBD($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $result = array();
    $rsltFlg = array();
    $flg = false;     // データチェック用　trueで該当データ空
    $cusnum = [];
    $ADJUST_PRICE_CD = 'Z1';    // 消費税調整額
    $TRANSFER_FEE_CD = 'Z2';    // 振込料金
    $TAX_RATE = 0;               // 現行消費税率(%) 
    
    $dbh = self::dbPDO();
    $columnsH = self::getColumnDefs('bill');
    $columnsD = self::getColumnDefs('billdetails');
    $columnsTED = self::getColumnDefs('t_estimatedetails');
    self::markAsHeaderPK($columnsH, 'b_belong_cd');
    self::markAsHeaderPK($columnsH, 'b_customer_cd');
    self::markAsHeaderPK($columnsH, 'b_bill_no');
    self::markAsHeaderPK($columnsD, 'bd_belong_cd');
    self::markAsHeaderPK($columnsD, 'bd_bill_no');
    self::markAsHeaderPK($columnsD, 'bd_customer_cd');
    self::markAsHeaderPK($columnsD, 'bd_shipment_date');
    self::markAsHeaderPK($columnsD, 'bd_estimate_no');
    self::markAsHeaderPK($columnsD, 'bd_st_details_no');
    self::markAsHeaderPK($columnsD, 'bd_ed_details_no');
    self::markAsHeaderPK($columnsD, 'bd_shipment_div');
    self::markAsHeaderPK($columnsD, 'bd_payment_div');
    self::markAsHeaderPK($columnsTED, 'ed_belong_cd');
    self::markAsHeaderPK($columnsTED, 'ed_estimate_no');
    self::markAsHeaderPK($columnsTED, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsTED, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsTED, 'ed_update_cnt');
    try {
      $dbh->beginTransaction();
      // closedate,customeroutputdateを文字列yyyymmddに変換
      $sdat['closeDate'] = self::paddingDate($sdat['closeDate']);

      // 現行消費税額
      // 本来であれば、製品ごとの消費税率で計算すべきであるが、竹中金網様においては、全て消費税率10％であるため、一律の消費税率とする。
      // 制度変更が発生した場合は、処理順序変更の必要あり。
      $sth = $dbh->prepare('
      SELECT t_rate FROM tax 
      WHERE t_rate_change_date = (SELECT MAX(t_rate_change_date) FROM tax)
      ;');
      $sth->execute();
      $rsltTax = $sth->fetchAll(PDO::FETCH_ASSOC);
      $TAX_RATE = $rsltTax[0]['t_rate'];

      // 客先CD指定か否かで分岐
      if (self::checkNotSet(($sdat['customercd'])) === true) {
        $sth = $dbh->prepare('
        SELECT DISTINCT s.s_customer_cd FROM statementdetails AS sd 
        LEFT JOIN statement AS s ON s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
        LEFT JOIN estimatedetails AS ed ON ed.ed_estimate_no = sd.sd_e_estimate_no AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no AND ed.ed_shipment_sub_no = sd.sd_shipment_sub_no
        WHERE  sd.sd_bill_close_date = :CLOSEDATE AND sd.sd_shipment_date <> "" AND ed_delivery_sign = "2" 
        ORDER BY s.s_customer_cd
        ;');
        $sth->bindValue(':CLOSEDATE', $sdat['closeDate'], PDO::PARAM_STR);
        $sth->execute();
        $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($rslt) <= 0) {
          // 該当データがない
          $resp['msg'] = '納品データの中に該当するデータはありませんでした。';
          $resp['succeed'] = false;
          echo json_encode($resp);
          return;
        } 
        foreach ($rslt as $rec) {
          array_push($cusnum, $rec['s_customer_cd']);
        }

        // 繰越金額が残っている客先を確認
        $strSql = '
        SELECT b.*, temp1.C_FINALDAY FROM bill AS b 
        INNER JOIN (SELECT *, max(b_bill_no) as maxBillNo FROM bill WHERE b_final_date < ? GROUP by b_customer_cd) AS b2 ON b.b_bill_no = b2.maxBillNo 
        LEFT JOIN (select *, IF(c.C_FINALDAY IS NOT NULL, c.C_FINALDAY, "31") as finalDay from customer AS c ) AS temp1 ON b.b_customer_cd = temp1.C_CUSTOMER_CD 
        WHERE temp1.finalDay = ? AND b.b_customer_cd NOT IN (';
        foreach ($rslt as $rec) {
          $strSql = $strSql . '?,';
        }
        $strSql = mb_substr($strSql, 0, mb_strlen($strSql) - 1);
        $strSql = $strSql . ');';
        $sth = $dbh->prepare("$strSql");
        $sth->bindValue(1, $sdat['closeDate'], PDO::PARAM_STR);
        // 月末が小の月は、締日を「31」に変換する必要がある。　2023/5/1修正
        if (substr($sdat['closeDate'], 6, 2) > '27') {
          $sth->bindValue(2, '31', PDO::PARAM_STR);
        } else {
          $sth->bindValue(2, substr($sdat['closeDate'], 6, 2), PDO::PARAM_STR);
        }
        $i = 3;
        foreach ($rslt as $rec) {
          $sth->bindValue($i, $rec['s_customer_cd'], PDO::PARAM_STR);
          $i++;
        }
        $sth->execute();
        $rsltCarried = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($rsltCarried) > 0) {
          // 繰越金額が残っている客先のみ抽出
          foreach ($rsltCarried as $rec) {
            $beforeBill = $rec['b_bill'];
            
            $strSQL = '
            SELECT sum(dp_price) dp_price FROM deposit 
            WHERE dp_del_flg = "0" AND dp_customer_cd = :CUSCD AND 
            ';
            if (self::checkNotSet($rec['C_FINALDAY']) === false) {
              // 通常請求
              $strSQL .= ' (dp_date > :BEFOREDATE AND dp_date <= :THISDATE OR dp_no IN (SELECT bd_payment_no FROM billdetails WHERE bd_bill_no = :BEFORENO));';
            } else {
              // 都度請求
              $strSQL .= ' (dp_date >= :BEFOREDATE AND dp_date <= :THISDATE OR dp_no IN (SELECT bd_payment_no FROM billdetails WHERE bd_bill_no = :BEFORENO));';
            }
            $sth = $dbh->prepare($strSQL);
            $sth->bindValue(':CUSCD', $rec['b_customer_cd'], PDO::PARAM_STR);
            $sth->bindValue(':BEFOREDATE', '20' . substr($rec['b_bill_no'], 0, 6), PDO::PARAM_STR);
            $sth->bindValue(':THISDATE', $sdat['closeDate'], PDO::PARAM_STR);            
            $sth->bindValue(':BEFORENO', $rec['b_bill_no'], PDO::PARAM_STR);
            $sth->execute();
            $rsltDeposit = $sth->fetchAll(PDO::FETCH_ASSOC);
            
            if ($beforeBill !== $rsltDeposit[0]['dp_price']) {
              array_push($cusnum, $rec['b_customer_cd'] . "xxx");
            }
          }
        }
      } else {
        // 納品確定された未請求データがあるか確認
        $sth = $dbh->prepare('
        SELECT DISTINCT s.s_customer_cd FROM statementdetails AS sd 
        LEFT JOIN statement AS s ON s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
        LEFT JOIN estimatedetails AS ed ON ed.ed_estimate_no = sd.sd_e_estimate_no AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no AND ed.ed_shipment_sub_no = sd.sd_shipment_sub_no
        WHERE  sd.sd_bill_close_date = :CLOSEDATE AND sd.sd_shipment_date <> "" AND ed_delivery_sign = "2" AND s.s_customer_cd = :CUSCD 
        ORDER BY s.s_customer_cd
        ;');
        $sth->bindValue(':CUSCD', $sdat['customercd'], PDO::PARAM_STR);
        $sth->bindValue(':CLOSEDATE', $sdat['closeDate'], PDO::PARAM_STR);
        $sth->execute();
        $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

        // 繰越金額が残っているか否かの判定を先にしておく
        $sth = $dbh->prepare('
        SELECT b.*, temp1.C_FINALDAY FROM bill AS b 
        INNER JOIN (SELECT *, max(b_bill_no) as maxBillNo FROM bill WHERE b_final_date < :CLOSEDATE1 GROUP by b_customer_cd) AS b2 ON b.b_bill_no = b2.maxBillNo 
        LEFT JOIN (select *, IF(c.C_FINALDAY IS NOT NULL, c.C_FINALDAY, "31") as finalDay from customer AS c ) AS temp1 ON b.b_customer_cd = temp1.C_CUSTOMER_CD 
        WHERE temp1.finalDay = :CLOSEDATE2 AND b.b_customer_cd = :CUSCD
        ;');
        $sth->bindValue(':CLOSEDATE1', $sdat['closeDate'], PDO::PARAM_STR);
        // 月末が小の月は、締日を「31」に変換する必要がある。　2023/5/1修正
        if (substr($sdat['closeDate'], 6, 2) > '27') {
          $sth->bindValue(':CLOSEDATE2', '31', PDO::PARAM_STR);
        } else {
          $sth->bindValue(':CLOSEDATE2', substr($sdat['closeDate'], 6, 2), PDO::PARAM_STR);
        }
        $sth->bindValue(':CUSCD', $sdat['customercd'], PDO::PARAM_STR);
        $sth->execute();
        $rsltBilled = $sth->fetchAll(PDO::FETCH_ASSOC);
        
        // 前回請求日から今回請求日までに入金データがあるか確認
        $strSQL = '
        SELECT sum(dp_price) dp_price FROM deposit 
        WHERE dp_del_flg = "0" AND dp_customer_cd = :CUSCD AND 
        ';
        if (self::checkNotSet($rsltBilled[0]['C_FINALDAY']) === false) {
          // 通常請求
          $strSQL .= ' (dp_date > :BEFOREDATE AND dp_date <= :THISDATE OR dp_no IN (SELECT bd_payment_no FROM billdetails WHERE bd_bill_no = :BEFORENO));';
        } else {
          // 都度請求
          $strSQL .= ' (dp_date >= :BEFOREDATE AND dp_date <= :THISDATE OR dp_no IN (SELECT bd_payment_no FROM billdetails WHERE bd_bill_no = :BEFORENO));';
        }
        $sth = $dbh->prepare($strSQL);
        $sth->bindValue(':CUSCD', $sdat['customercd'], PDO::PARAM_STR);
        $sth->bindValue(':BEFOREDATE', '20' . substr($rsltBilled[0]['b_bill_no'], 0, 6), PDO::PARAM_STR);
        $sth->bindValue(':THISDATE', $sdat['closeDate'], PDO::PARAM_STR);            
        $sth->bindValue(':BEFORENO', $rsltBilled[0]['b_bill_no'], PDO::PARAM_STR);
        $sth->execute();
        $rsltDeposit = $sth->fetchAll(PDO::FETCH_ASSOC);
        
        // 該当データがないか、繰越用請求データか、通常請求データの条件分岐
        if (count($rslt) <= 0 && $rsltBilled[0]['b_bill'] == $rsltDeposit[0]['dp_price']) {
          $resp['msg'] = '納品データの中に該当するデータはありませんでした。';
          $resp['succeed'] = false;
          echo json_encode($resp);
          return;
        } else if (count($rslt) <= 0 && $rsltBilled[0]['b_bill'] !== $rsltDeposit[0]['dp_price']) {
          array_push($cusnum, $sdat['customercd'] . "xxx");
        } else {
          $cusnum = explode(',', $sdat['customercd']);
        }
      }

      foreach ($cusnum as $cusCD) {
        // 客先毎にデータ作成
        $billno = '';
        // 請求番号最大値取得
        $sth = $dbh->prepare('
        SELECT MAX(b_bill_no) AS maxno FROM bill
        WHERE b_bill_no LIKE :BILLNO 
        ;');
        $sth->bindValue(':BILLNO', substr($sdat['closeDate'], 2, 6) . '%', PDO::PARAM_STR);
        $sth->execute();
        $rsltNo = $sth->fetchAll(PDO::FETCH_ASSOC);

        // 請求番号設定
        if ($billno === '') { 
          if (self::checkNotSet($rsltNo[0]['maxno']) === true) {
            // 該当値なし
            $billno = substr($sdat['closeDate'], 2, 6) . '001';
          } else {
            // 最大値をインクリメント
            $billno = (String)($rsltNo[0]['maxno'] + 1);
          }
        } else {
          $billno = $billno + 1;
        }

        if (strlen($cusCD) > 3) {
          // 繰越のみの客先データは、前回請求書のデータ取得
          $sth = $dbh->prepare('
          SELECT c.C_FINALDAY, bd.*, b2.* FROM billdetails AS bd 
          INNER JOIN (SELECT *, max(b_bill_no) as maxBillNo FROM bill WHERE b_final_date < :CLOSEDATE GROUP by b_customer_cd) AS b ON bd.bd_bill_no = b.maxBillNo 
          LEFT JOIN bill AS b2 ON bd.bd_bill_no = b2.b_bill_no 
          LEFT JOIN customer AS c ON b2.b_customer_cd = c.C_CUSTOMER_CD 
          WHERE bd_customer_cd = :CUSTOMERCD 
          ;');
          $sth->bindValue(':CLOSEDATE', $sdat['closeDate'], PDO::PARAM_STR);
          $sth->bindValue(':CUSTOMERCD', substr($cusCD, 0, 3), PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
  
          // 受注データ更新しない(配列初期化)
          $rsltFlg = [];

        } else {
          // 納品書データのうち、納品確定されているもののみデータ取得
          $sth = $dbh->prepare('
          SELECT * FROM statementdetails AS sd
            LEFT JOIN statement AS s ON s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no 
            LEFT JOIN estimatedetails AS ed ON ed.ed_estimate_no = sd.sd_e_estimate_no AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no AND ed.ed_shipment_sub_no = sd.sd_shipment_sub_no
          WHERE sd.sd_bill_close_date = :CLOSEDATE AND 
          sd.sd_bill_create_date = "" AND 
          sd.sd_shipment_date <> ""  AND
          s_customer_cd = :CUSTOMERCD AND
          ed_delivery_sign = "2" 
          ORDER BY  s.s_customer_cd,s.s_customer_post_cd, s.s_customer_charge_cd, sd.sd_e_estimate_no, sd.sd_statement_sub_no, sd.sd_estimate_sub_no, sd.sd_shipment_sub_no
          ;');
          $sth->bindValue(':CLOSEDATE', $sdat['closeDate'], PDO::PARAM_STR);
          $sth->bindValue(':CUSTOMERCD', substr($cusCD, 0, 3), PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
  
          // 受注データ更新用に別途データ取得　納品ヘッダテーブルと、受注明細テーブルを連結
          $sth = $dbh->prepare('
            SELECT sd.sd_e_estimate_no, 
            sd.sd_estimate_sub_no, 
            sd.sd_shipment_sub_no, 
            SUM(sd.sd_delivery_price) AS billprice, 
            sd.sd_bill_close_date, 
            sd.sd_bill_create_date, 
            sd.sd_shipment_date, 
            ed.*, s.s_customer_cd
            FROM statementdetails AS sd
            LEFT JOIN statement AS s ON s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
            LEFT JOIN estimatedetails AS ed ON ed.ed_estimate_no = sd.sd_e_estimate_no AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no AND ed.ed_shipment_sub_no = sd.sd_shipment_sub_no 
            WHERE sd_bill_close_date = :CLOSEDATE AND 
            sd.sd_bill_create_date = "" AND 
            sd.sd_shipment_date <> "" AND 
            s.s_customer_cd = :CUSTOMERCD 
            GROUP BY sd.sd_e_estimate_no, sd.sd_estimate_sub_no, sd.sd_shipment_sub_no
          ;');        
          $sth->bindValue(':CLOSEDATE', $sdat['closeDate'], PDO::PARAM_STR);
          $sth->bindValue(':CUSTOMERCD', substr($cusCD, 0, 3), PDO::PARAM_STR);
          $sth->execute();
          $rsltFlg = $sth->fetchAll(PDO::FETCH_ASSOC);
  
        }
        // 2023/3/28 締日前に事前に請求データを作成することもあるため、該当データ無しは次のループへ進む
        if (count($result) <= 0) {
          // 該当データなし
          continue;
        }

        // 前回請求額取得
        $sth = $dbh->prepare('
        SELECT b_customer_cd, b_bill, MAX(b_bill_no) AS exbillno FROM bill
        WHERE b_final_sign = 0 AND b_customer_cd = :CUSTOMERCD 
        GROUP BY b_customer_cd 
        ;');
        $sth->bindValue(':CUSTOMERCD', substr($cusCD, 0, 3), PDO::PARAM_STR);
        $sth->execute();
        $rsltExBill = $sth->fetchAll(PDO::FETCH_ASSOC);

        // 共通項目
        $updateDate = self::currentDate();
        $updateCD = $_SESSION['usercd'];
        $belongCD = $_SESSION['companycd'];
        $billPrice = 0;   // 請求額
        $salesPrice = 0;  // 売上金額
        $tax = 0;         // 消費税額
        $sign = '0';       // 請求書区分
        $deposit = 0;      // 入金額 入金額詳細は請求書作成時に集計
        $carriedPrice = 0;  // 前回繰越金額
        $adjustZ1 = 0;      // 調整額
        // $discount = 0;      // 値引き

        if (strlen($cusCD) > 3) {
          // result = 登録済みの請求データを参考に繰越金額のみの請求データを再作成
          if ($sdat['closeDate'] > $result[0]['bd_payment_close_date']) {
            // 入金予定日が請求締日より前の場合、入金予定日を更新する。
            $newDate = date('Ymd', strtotime($sdat['closeDate'] . '+1 month'));
            $paymentDate = $newDate;
          } else {
            $paymentDate = $result[0]['bd_payment_close_date'];
          }
          
          // 前回請求～今回請求までの入金額取得
          $strSQL = '
          SELECT IF(sum(dp_price) is null, 0, sum(dp_price)) AS dp_price FROM deposit 
          WHERE dp_del_flg = "0" AND dp_customer_cd = :CUSCD AND 
          ';
          if (self::checkNotSet($result[0]['C_FINALDAY']) === false) {
            // 通常請求
            $strSQL .= ' (dp_date > :BEFOREDATE AND dp_date <= :THISDATE OR dp_no IN (SELECT bd_payment_no FROM billdetails WHERE bd_bill_no = :BEFORENO));';
          } else {
            // 都度請求
            $strSQL .= ' (dp_date >= :BEFOREDATE AND dp_date <= :THISDATE OR dp_no IN (SELECT bd_payment_no FROM billdetails WHERE bd_bill_no = :BEFORENO));';
          }
          $sth = $dbh->prepare($strSQL);
          $sth->bindValue(':CUSCD', $rsltExBill[0]['b_customer_cd'], PDO::PARAM_STR);
          $sth->bindValue(':BEFOREDATE', '20' . substr($rsltExBill[0]['exbillno'], 0, 6), PDO::PARAM_STR);
          $sth->bindValue(':THISDATE', $sdat['closeDate'], PDO::PARAM_STR);            
          $sth->bindValue(':BEFORENO', $rsltExBill[0]['exbillno'], PDO::PARAM_STR);
          $sth->execute();
          $rsltExPay = $sth->fetchAll(PDO::FETCH_ASSOC);

          // 入金処理で税抜き価格で表示する必要があるため、先に繰越金額を求めた後に税抜き価格に変換する必要がある。（2023/5/17：税込金額としてそのまま登録に変更）
          $included_price = intval($result[0]['b_bill']) - intval($rsltExPay[0]['dp_price']);
          // $tax_amount = $included_price * (($TAX_RATE / 100) / (1 + ($TAX_RATE / 100)));
          // $newBill = $included_price - floor($tax_amount);

          // 明細更新
          $ar = [];
          $ar['bd_belong_cd'] = $belongCD;
          $ar['bd_bill_no'] = $billno;
          $ar['bd_dell_sign'] = '0';
          $ar['bd_customer_cd'] = $result[0]['b_customer_cd'];
          $ar['bd_estimate_no'] = ' ';
          $ar['bd_st_details_no'] = ' ';
          $ar['bd_ed_details_no'] = ' ';
          $ar['bd_shipment_div'] = ' ';
          $ar['bd_payment_div'] = '00';
          $ar['bd_customer_post_cd'] = $result[0]['bd_customer_post_cd'];
          $ar['bd_customer_charge_cd'] = $result[0]['bd_customer_charge_cd'];
          $ar['bd_salesman_cd'] = '';
          $ar['bd_order_date'] = '';
          $ar['bd_desired_delivery_date'] = '';
          $ar['bd_product_name'] = '【繰越再請求】';
          $ar['bd_prod_summary'] = "（前回請求No：{$result[0]['b_bill_no']}）";
          $ar['bd_ed_quantity'] = '1';
          $ar['bd_unit_price'] = $included_price;
          $ar['bd_price'] = $included_price;
          $ar['bd_cost'] = 0;
          $ar['bd_dt_desired_delivery_date'] = '';
          $ar['bd_dt_customer_order_no'] = '';
          $ar['bd_dt_customer_p_name'] = '';
          $ar['bd_delivery_cd'] = '';
          $ar['bd_detail_remarks'] = '';
          $ar['bd_prod_fin_date'] = '';
          $ar['bd_shipment_date'] = $sdat['closeDate']; // ★主キーのため、今回請求締日で更新する
          $ar['bd_qty_delivery'] = 1; // ★入金処理で分割処理として認識されてしまうため、仮納品数を「1」とする
          $ar['bd_delivery_price'] = $included_price; // ★入金処理で「品代」が計算されなくなるため、納品金額＝請求金額とする
          $ar['bd_tax'] = 0;
          $ar['bd_deliv_create_date'] = '';
          $ar['bd_bill_close_date'] = $sdat['closeDate']; // ★今回請求締日に更新する
          $ar['bd_bill_price'] = $included_price;
          $ar['bd_invoice_no'] = '';    //  'S' . $billno; 請求書作成データ取得時に更新
          $ar['bd_payment_close_date'] = $paymentDate;
          $ar['bd_payment_money'] = 0;
          $ar['bd_payment_tax'] = 0;
          $ar['bd_payment_sign'] = '0';
          $ar['bd_payment_no'] = '';
          $ar['bd_remarks'] = '';
          $ar['bd_update_at'] = $updateDate;
          $ar['bd_update_cd'] = $updateCD;
          $ar['bd_unit_tran'] = '';
          $ar['bd_parrangement_cd'] = '';
          // 2023/3/22 繰越がある場合、すでに一度請求している為、前回請求額から入金があった差分のみ再請求とする。
          $salesPrice = 0;
          // $salesPrice = $salesPrice + $ar['bd_delivery_price'];
          // $billPrice = $billPrice + $ar['bd_bill_price'];
          // $tax = $tax + $ar['bd_tax'];

          $sth = $dbh->prepare(self::makeInsertSQL('billdetails', $columnsD));
          self::bindInsertKeys($sth, $columnsD, $ar);
          $sth->execute();

          // result = 登録済みの請求データは、繰越金額として再請求したため、全額入金と同じ扱いで更新しておく　2023/4/6修正
          foreach ($result as $rec) {
            // 該当前回請求データの「入金金額、入金区分、更新者、更新日」を更新 (※入金Noは、登録データがないため更新しない)
            $sth = $dbh->prepare('
            UPDATE billdetails
            SET bd_payment_money = :BDPRICE,
            bd_payment_sign = "2",
            bd_update_at = :UPDATEAT,
            bd_update_cd = :UPDATECD
            WHERE bd_bill_no = :BILLNO AND 
            bd_estimate_no = :ESTNO AND
            bd_st_details_no = :STNO AND 
            bd_ed_details_no = :ESTSUBNO AND 
            bd_shipment_div = :SHIPNO
            ;');
            $sth->bindValue(':BDPRICE', $rec['bd_price'], PDO::PARAM_STR);
            $sth->bindValue(':UPDATEAT', $updateDate, PDO::PARAM_STR);
            $sth->bindValue(':UPDATECD', $updateCD, PDO::PARAM_STR);
            $sth->bindValue(':BILLNO', $rec['bd_bill_no'], PDO::PARAM_STR);
            $sth->bindValue(':ESTNO', $rec['bd_estimate_no'], PDO::PARAM_STR);
            $sth->bindValue(':STNO', $rec['bd_st_details_no'], PDO::PARAM_STR);
            $sth->bindValue(':ESTSUBNO', $rec['bd_ed_details_no'], PDO::PARAM_STR);
            $sth->bindValue(':SHIPNO', $rec['bd_shipment_div'], PDO::PARAM_STR);
            $sth->execute();

            // 該当前回請求データに紐づく受注データの「入金金額、入金区分、入金消込日、更新者、更新日」を更新 (※)
            $sth = $dbh->prepare('
            UPDATE estimatedetails
            SET ed_payment_price = :BDPRICE,
            ed_payment_sign = "2",
            ed_payment_del_date = :TODAY,
            ed_update_at = :UPDATEAT,
            ed_update_cd = :UPDATECD
            WHERE ed_estimate_no = :ESTNO AND
            ed_estimate_sub_no = :ESTSUBNO AND 
            ed_shipment_sub_no = :SHIPNO
            ;');
            $sth->bindValue(':BDPRICE', $rec['bd_price'], PDO::PARAM_STR);
            $sth->bindValue(':TODAY', $updateDate, PDO::PARAM_STR);
            $sth->bindValue(':UPDATEAT', $updateDate, PDO::PARAM_STR);
            $sth->bindValue(':UPDATECD', $updateCD, PDO::PARAM_STR);
            $sth->bindValue(':ESTNO', $rec['bd_estimate_no'], PDO::PARAM_STR);
            $sth->bindValue(':ESTSUBNO', $rec['bd_ed_details_no'], PDO::PARAM_STR);
            $sth->bindValue(':SHIPNO', $rec['bd_shipment_div'], PDO::PARAM_STR);
            $sth->execute();
          }
        } else {
          // (result = 対象納品データ)から請求書データ作成
          foreach ($result as $rec) {
            // 明細更新
            $ar = [];
            $ar['bd_belong_cd'] = $belongCD;
            $ar['bd_bill_no'] = $billno;
            $ar['bd_dell_sign'] = '0';
            $ar['bd_customer_cd'] = $rec['s_customer_cd'];
            $ar['bd_estimate_no'] = $rec['sd_e_estimate_no'];
            $ar['bd_st_details_no'] = $rec['sd_statement_sub_no'];
            $ar['bd_ed_details_no'] = $rec['sd_estimate_sub_no'];
            $ar['bd_shipment_div'] = $rec['sd_shipment_sub_no'];
            $ar['bd_payment_div'] = '00';
            $ar['bd_customer_post_cd'] = $rec['s_customer_post_cd'];
            $ar['bd_customer_charge_cd'] = $rec['s_customer_charge_cd'];
            $ar['bd_salesman_cd'] = $rec['s_salesman_cd'];
            $ar['bd_order_date'] = $rec['s_estimate_date'];
            $ar['bd_desired_delivery_date'] = $rec['s_desired_delivery_date'];
            $ar['bd_product_name'] = $rec['sd_p_name'];          
            $ar['bd_prod_summary'] = $rec['sd_p_name_supple'];
            $ar['bd_ed_quantity'] = $rec['sd_estimate_quantity'];
            $ar['bd_unit_price'] = $rec['sd_unit_price'];
            $ar['bd_price'] = self::checkNotSet($rec['sd_price']) === true ? 0 : $rec['sd_price'];
            $ar['bd_cost'] = $rec['sd_cost'];
            $ar['bd_dt_desired_delivery_date'] = $rec['sd_desired_delivery_date'];
            $ar['bd_dt_customer_order_no'] = $rec['sd_customer_order_no'];
            $ar['bd_dt_customer_p_name'] = $rec['sd_customer_p_name'];
            $ar['bd_delivery_cd'] = $rec['sd_delivery_cd'];
            $ar['bd_detail_remarks'] = $rec['sd_detail_remarks'];
            $ar['bd_prod_fin_date'] = $rec['sd_prod_fin_date'];
            $ar['bd_shipment_date'] = $rec['sd_shipment_date'];
            $ar['bd_qty_delivery'] = $rec['sd_qty_delivery'];
            $ar['bd_delivery_price'] = $rec['sd_delivery_price'];
            $ar['bd_tax'] = $rec['sd_tax'];
            $ar['bd_deliv_create_date'] = $rec['sd_deliv_create_date'];
            $ar['bd_bill_close_date'] =  $rec['sd_bill_close_date'];
            $ar['bd_bill_price'] = $rec['sd_delivery_price'] + $rec['sd_tax'];
            $ar['bd_invoice_no'] = '';    //  'S' . $billno; 請求書作成データ取得時に更新
            $ar['bd_payment_close_date'] = $rec['sd_payment_close_date'];  // $paymentDate;
            $ar['bd_payment_money'] = 0;
            $ar['bd_payment_tax'] = 0;
            $ar['bd_payment_sign'] = '0';
            $ar['bd_payment_no'] = '';
            $ar['bd_remarks'] = $rec['sd_remarks'];
            $ar['bd_update_at'] = $updateDate;
            $ar['bd_update_cd'] = $updateCD;
            $ar['bd_unit_tran'] = $rec['sd_unit_tran'];
            $ar['bd_parrangement_cd'] = $rec['sd_parrangement_cd'];
            $billPrice = $billPrice + $ar['bd_bill_price'];
            $salesPrice = $salesPrice + $ar['bd_delivery_price'];
            $tax = $tax + $ar['bd_tax'];
  
            $sth = $dbh->prepare(self::makeInsertSQL('billdetails', $columnsD));
            self::bindInsertKeys($sth, $columnsD, $ar);
            $sth->execute();
  
            // 該当納品データの請求書発行日を更新
            $sth = $dbh->prepare('
            UPDATE statementdetails
            SET sd_bill_create_date = :DATE,
            sd_update_at = :UPDATEAT,
            sd_update_cd = :UPDATECD
            WHERE sd_belong_cd = :BELONGCD AND 
            sd_e_estimate_no = :ESTNO AND
            sd_statement_sub_no = :STNO AND 
            sd_estimate_sub_no = :ESTSUBNO AND 
            sd_shipment_sub_no = :SHIPNO
            ;');
            $sth->bindValue(':DATE', $updateDate, PDO::PARAM_STR);
            $sth->bindValue(':UPDATEAT', $updateDate, PDO::PARAM_STR);
            $sth->bindValue(':UPDATECD', $updateCD, PDO::PARAM_STR);
            $sth->bindValue(':BELONGCD', $belongCD, PDO::PARAM_STR);
            $sth->bindValue(':ESTNO', $rec['sd_e_estimate_no'], PDO::PARAM_STR);
            $sth->bindValue(':STNO', $rec['sd_statement_sub_no'], PDO::PARAM_STR);
            $sth->bindValue(':ESTSUBNO', $rec['sd_estimate_sub_no'], PDO::PARAM_STR);
            $sth->bindValue(':SHIPNO', $rec['sd_shipment_sub_no'], PDO::PARAM_STR);
            $sth->execute();
          }
        }

        foreach ($rsltFlg as $rec) {
          $sign = self::setStatusSign('bill', $rec['ed_price'], $rec['ed_delivery_price'], $rec['billprice']);
          // $sign = self::setStatusSign('bill', $rec['ed_price'], $rec['ed_delivery_price'], $rec['ed_bill_price'] + $rec['billprice']);
          $sth = $dbh->prepare('
          UPDATE estimatedetails
          SET ed_bill_price = :PRICE,
          ed_bill_sign = :SIGN,
          ed_update_cnt = ed_update_cnt + 1,
          ed_bill_create_date = :DATE,
          ed_update_at = :UPDATEAT,
          ed_update_cd = :UPDATECD
          WHERE ed_belong_cd = :BELONGCD AND 
          ed_estimate_no = :ESTNO AND 
          ed_estimate_sub_no = :ESTSUBNO AND
          ed_shipment_sub_no = :SHIPNO
          ;');
          $sth->bindValue(':PRICE', $rec['billprice'], PDO::PARAM_STR);
          $sth->bindValue(':SIGN', $sign, PDO::PARAM_STR);
          $sth->bindValue(':DATE', $updateDate, PDO::PARAM_STR);
          $sth->bindValue(':UPDATEAT', $updateDate, PDO::PARAM_STR);
          $sth->bindValue(':UPDATECD', $updateCD, PDO::PARAM_STR);
          $sth->bindValue(':BELONGCD', $rec['ed_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $rec['ed_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':ESTSUBNO', $rec['ed_estimate_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':SHIPNO', $rec['ed_shipment_sub_no'], PDO::PARAM_STR);
          $sth->execute();

          // 履歴更新
          $rec['ed_bill_price'] = $rec['ed_bill_price'] + $rec['billprice'];
          $rec['ed_bill_sign'] = $sign;
          $rec['ed_bill_create_date'] = $updateDate;
          $rec['ed_update_at'] = $updateDate;
          $rec['ed_update_cd'] = $updateCD;
          $rec['ed_update_cnt'] += 1;
          $sth = $dbh->prepare(self::makeInsertSQL('t_estimatedetails', $columnsTED));
          self::bindInsertKeys($sth, $columnsTED, $rec);
          $sth->execute();

        }

        if (count($rsltExBill) > 0) {
          // 前回請求額を保持し、初回請求の場合と区別させる。
          $carriedPrice = $rsltExBill[0]['b_bill'];
          // 入金が2か月以上かかるデータもあるため、単純に前回請求データに対応する入金データを取得するだけでは、正確な入金データとならない。
          // また都度請求の場合は、前回請求データに入金データがのらないため、今回の請求データにて載せる。
          $depositDate = '';

          // 前回請求締日取得
          $sth = $dbh->prepare('
          SELECT MIN(bd_bill_close_date) AS closedate  FROM billdetails
          WHERE bd_bill_no = :BILLNO AND bd_customer_cd = :CUSCD
          ;');
          $sth->bindValue(':BILLNO', $rsltExBill[0]['exbillno'], PDO::PARAM_STR);
          $sth->bindValue(':CUSCD', substr($cusCD, 0, 3), PDO::PARAM_STR);
          $sth->execute();
          $beforeDate = $sth->fetchAll(PDO::FETCH_ASSOC);

          // 都度請求Or通常請求の如何によりデータ取得開始日を判定する。*****************************************************
          /*
          都度請求の場合は、次回請求書に前回請求締日の入金データを含む必要がある。
          (これは、請求データ→入金データの順でなければ登録できないため、都度請求の場合は、入金データが載らなくなるためである。)
          */
          $sth = $dbh->prepare('
            SELECT * FROM deposit
            WHERE  dp_del_flg = "0" AND dp_no IN (SELECT bd_payment_no FROM billdetails WHERE bd_bill_no = :EXBILLNO)
          ;');
          $sth->bindValue(':EXBILLNO', $rsltExBill[0]['exbillno'], PDO::PARAM_STR);
          $sth->execute();
          $dpTimingData = $sth->fetchAll(PDO::FETCH_ASSOC);

          if (count($dpTimingData) > 0 && $dpTimingData[0]['dp_date'] <= $beforeDate[0]['closedate']) {
            // 都度請求
            $depositDate = $dpTimingData[0]['dp_date'];
          } 

          $strSQL = '
          SELECT  dp_type, SUM(dp_price) AS price
          FROM deposit 
          WHERE dp_del_flg = "0" AND dp_customer_cd = :CUSCD 
              AND (STR_TO_DATE(dp_date, "%Y%m%d") <= STR_TO_DATE( :THISDATE , "%Y%m%d") AND
           ';
          if (self::checkNotSet($depositDate) === false) {
            // 都度請求の場合、前回請求の入金データを今回の請求書に含ませる。
            $strSQL .= ' STR_TO_DATE(dp_date, "%Y%m%d") >= STR_TO_DATE( :BEFOREDATE , "%Y%m%d")) ';
          } else {
            // 通常請求では、前回請求締日の入金データは前回請求書に載っているため、含まないようにする。
            $strSQL .= ' STR_TO_DATE(dp_date, "%Y%m%d") > STR_TO_DATE( :BEFOREDATE , "%Y%m%d")) ';
          }
          $strSQL .= ' GROUP BY dp_type; ';
          $sth = $dbh->prepare($strSQL);

          $sth->bindValue(':CUSCD', substr($cusCD, 0, 3), PDO::PARAM_STR);
          $sth->bindValue(':THISDATE', $sdat['closeDate'], PDO::PARAM_STR);
          if (self::checkNotSet($depositDate) === false) {
            // 都度請求の場合
            $sth->bindValue(':BEFOREDATE', $depositDate, PDO::PARAM_STR);
          } else {
            // 通常は前回請求締日
            $sth->bindValue(':BEFOREDATE', $beforeDate[0]['closedate'], PDO::PARAM_STR);
          }
          $sth->execute();
          $resultDep = $sth->fetchAll(PDO::FETCH_ASSOC);
          // *********************************************************************************************

          foreach($resultDep as $recPrice) {
            // 請求書発行時に相殺額、値引き額、繰越額は再算出
            if ((int)$recPrice['dp_type'] <= 6 || (int)$recPrice['dp_type'] === 8 || (int)$recPrice['dp_type'] === 9 || $recPrice['dp_type'] === $TRANSFER_FEE_CD) {
              $deposit += (float)$recPrice['price'];
            } else if ($recPrice['dp_type'] === $ADJUST_PRICE_CD) {
              $adjustZ1 += (float)$recPrice['price']; 
            }
          }
        } else {
          // 前回請求が無かった場合は、締めのデータがあるか確認
          $sth = $dbh->prepare('
          SELECT * FROM sumreceive
          WHERE sr_customer_cd = :CUSCD AND sr_month = (SELECT MAX(sr_month)  FROM sumreceive WHERE sr_customer_cd = :CUSCD2)
          ;');
          $sth->bindValue(':CUSCD', substr($cusCD, 0, 3), PDO::PARAM_STR);
          $sth->bindValue(':CUSCD2', substr($cusCD, 0, 3), PDO::PARAM_STR);
          $sth->execute();
          $resultTSum = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($resultTSum) > 0) {
            // 金額がマイナスならば入金額、プラスならば請求額に保持させる。
            if ($resultTSum[0]['sr_carried_price'] < 0) {
              $deposit = abs($resultTSum[0]['sr_carried_price']);
            } else {
              $carriedPrice = abs($resultTSum[0]['sr_carried_price']);
            }
          }
        }

        // ヘッダ更新
        $arH = [];
        $arH['b_belong_cd'] = $belongCD;
        $arH['b_customer_cd'] = substr($cusCD, 0, 3);
        $arH['b_bill_no'] = $billno;
        $arH['b_before_bill_no'] = $rsltExBill[0]['exbillno'];
        $arH['b_final_sign'] = '0';
        $arH['b_final_date'] = $sdat['closeDate'];
        $arH['b_before_bill'] = $carriedPrice;
        $arH['b_receive'] = $deposit;
        $arH['b_sales_price'] = $salesPrice;
        $arH['b_tax'] = self::calcTaxPrice($dbh, substr($cusCD, 0, 3), $salesPrice, $TAX_RATE);        //$tax;
        $arH['b_tax_adjust'] = $adjustZ1;   // 0;
        $arH['b_bill'] = $arH['b_sales_price'] + $arH['b_tax'] + $carriedPrice - $deposit - $adjustZ1; // $billPrice + $carriedPrice - $deposit - $adjustZ1;
        $arH['b_update_at'] = $updateDate;
        $arH['b_update_cd'] = $updateCD;
        $arH['b_type_continue'] = '0';

        $sth = $dbh->prepare(self::makeInsertSQL('bill', $columnsH));
        self::bindInsertKeys($sth, $columnsH, $arH);
        $sth->execute();

        // 消費税額の登録　stock mode=1(INSERT)
        self::issueStockTaxValue($dbh, $arH, $sdat['closeDate'], 1);

        // 前回請求データのフラグを更新
        $sth = $dbh->prepare('
        UPDATE bill
        SET b_final_sign = "1"
        WHERE b_belong_cd = :BELONGCD AND
        b_customer_cd = :CUSTOMERCD AND 
        b_bill_no = :BILLNO
        ;');
        $sth->bindValue(':BELONGCD', $belongCD, PDO::PARAM_STR);
        $sth->bindValue(':CUSTOMERCD', substr($cusCD, 0, 3), PDO::PARAM_STR);
        $sth->bindValue(':BILLNO', $rsltExBill[0]['exbillno'], PDO::PARAM_STR);
        $sth->execute();

      }
      $dbh->commit();
      echo json_encode($resp);
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = $e['message'];
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }

  /***
   * 請求書発行
   * $sdat: closeDate, customeroutputdate,customercd, customerpost, billtypeusual,billtyperyokiがセットされている
   */
  public static function outputBD($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $cusnum = [];
    $dbh = self::dbPDO();
    try {
      $ryokiInfo = self::getRyokiInfo($dbh);
      $dbh->beginTransaction();
      // closedate,customeroutputdateを文字列yyyymmddに変換
      $sdat['closeDate'] = self::paddingDate($sdat['closeDate']);

      // 客先CD指定か否かで分岐
      if (self::checkNotSet(($sdat['customercd'])) === true) {
        $sth = $dbh->prepare('
        SELECT DISTINCT bd_customer_cd FROM billdetails 
        WHERE bd_bill_close_date = :CLOSEDATE 
        ORDER BY bd_customer_cd
        ;');
        $sth->bindValue(':CLOSEDATE', $sdat['closeDate'], PDO::PARAM_STR);
        $sth->execute();
        $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

        // リョーキが含まれるか確認
        $strSql = '
        SELECT DISTINCT bd_customer_cd FROM billdetails 
        WHERE bd_customer_cd IN (';
        foreach ($ryokiInfo as $ryoki) {
          $strSql = $strSql . '?,';
        }
        $strSql = mb_substr($strSql, 0, mb_strlen($strSql) - 1);
        $strSql = $strSql . ') AND bd_bill_close_date = ? ;';
        $sth = $dbh->prepare("$strSql");
        $i = 1;
        foreach ($ryokiInfo as $ryoki) {
          $sth->bindValue($i, $ryoki['C_CUSTOMER_CD'], PDO::PARAM_STR);
          $i++;
        }
        $sth->bindValue($i, $sdat['closeDate'], PDO::PARAM_STR);
        $sth->execute();
        $rsltryoki = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($rslt) <= 0) {
          // 該当データがない
          $resp['msg'] = '請求データの中に該当するデータはありませんでした。';
          $resp['succeed'] = false;
          echo json_encode($resp);
          return;
        } 
        if (count($rsltryoki) > 0) {
          // リョーキ含む
          if (!$sdat['billtyperyoki']) {
            // 特殊請求書発行にチェックが入っていない場合
            $resp['msg'] = 'リョーキ様のデータが含まれています。「リョーキ様分」にチェックをいれて、再度、請求書発行をお願いします。';
            $resp['succeed'] = false;
            echo json_encode($resp);
            return;
          }        
        } else {
          if ($sdat['billtyperyoki']) {
            $resp['msg'] = '請求データの中に該当するリョーキ様のデータはありませんでした。チェックを外して、再度、請求書発行をお願いします。';
            $resp['succeed'] = false;
            echo json_encode($resp);
            return;
          }
        }
        foreach ($rslt as $rec) {
          array_push($cusnum, $rec['bd_customer_cd']);
        }
      } else {
        $cusnum = explode(',', $sdat['customercd']);
        foreach ($ryokiInfo as $rec) {
          foreach ($cusnum as $recInput) {
            if ($recInput === $rec['C_CUSTOMER_CD'] && !$sdat['billtyperyoki']) {
              // 特殊請求書発行にチェックが入っていない場合
              $resp['msg'] = 'リョーキ様の客先CDが指定されています。「リョーキ様分」にチェックをいれて、再度、請求書発行をお願いします。';
              $resp['succeed'] = false;
              echo json_encode($resp);
              return;
            }
          }
        }       
      }
      echo json_encode($resp);
    } catch (Exception $e) {
      $resp['msg'] = $e['message'];
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }


  /***
   * 消費税額計算
   * 客先毎の消費税計算区分を加味しない場合は、customerテーブルへの参照処理をなくすこと。
   */
  private static function calcTaxPrice($dbh, $customerCD, $salesPrice, $taxRate) {
    $resultPrice = 0;
    try {
      // 客先毎の消費税端数処理区分を取得 設定値　0 ：切捨て　1：四捨五入　2：切上げ　（初期値：0）
      $sth = $dbh->prepare('
      SELECT C_INVOICE_TAX_CAL FROM customer WHERE C_CUSTOMER_CD = :CUSTOMERCD
      ;');
      $sth->bindValue(':CUSTOMERCD', $customerCD, PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      // 数値を丸める。
      if ($result[0]['C_INVOICE_TAX_CAL'] === '2') {
        // 切り上げ
        $resultPrice = ceil($salesPrice * ($taxRate / 100));
      } else if ($result[0]['C_INVOICE_TAX_CAL'] === '1') {
        // 四捨五入
        $resultPrice = round($salesPrice * ($taxRate / 100));
      } else {
        // 切り捨てもしくは、マスタからのデータ取得が出来なかった場合
        $resultPrice = floor($salesPrice * ($taxRate / 100));
      }

      return $resultPrice;

    } catch (Exeption $e) {
      throw $e;
    }
  }

  // 各種ヘッダ及び明細に対応するDB更新処理を実行する
  public static function editHeaderAndDetailDB($tblnameH, $columnsH, $tblnameD, $columnsD, $datHeader, $datdetail, $dbh = null) {
    $resp = array('succeed' => true, 'msg' => '');
    $usenewdbh = false;
    if ($dbh === null) {
      $dbh = self::dbPDO();
      $usenewdbh = true;
    }
    try {
      if ($usenewdbh) {
        $dbh->beginTransaction();
      }
      // ヘッダ(1行のみ)
      $keyH = $datHeader[0];
      // 明細行全てが削除対象の場合、ヘッダも同時に削除する
      $detailsDelCount = 0;
      foreach ($datdetail as $keyD) {
        $detailsDelCount += self::checkDeleteRowRequired($keyD) ? 1 : 0;
      }
      if ($detailsDelCount >= count($datdetail)) {
        $keyH['isDeleted'] = true;
      }
      $deleteflagH = self::checkDeleteRowRequired($keyH);
      if ($deleteflagH === false) {
        // ヘッダを更新又は新規登録
        if (self::hasPrevPK($columnsH, $keyH)) {
          // 主キー前回値の行を更新
          $sth = $dbh->prepare(self::makeUpdateSQL($tblnameH, $columnsH));
          self::bindUpdateKeys($sth, $columnsH, $keyH);
          $sth->execute();
        } else {
          // 新規登録
          $sth = $dbh->prepare(self::makeInsertSQL($tblnameH, $columnsH));
          self::bindInsertKeys($sth, $columnsH, $keyH);
          $sth->execute();
        }
        // 明細行
        foreach ($datdetail as $keyD) {
          $deleteflagD = self::checkDeleteRowRequired($keyD);
          if ($deleteflagD === false) {
            if (self::hasPrevPK($columnsD, $keyD)) {
              // 明細を更新
              $sth = $dbh->prepare(self::makeUpdateSQL($tblnameD, $columnsD));
              self::bindUpdateKeys($sth, $columnsD, $keyD);
              $sth->execute();
            } else {
              // 明細を新規登録
              $sth = $dbh->prepare(self::makeInsertSQL($tblnameD, $columnsD));
              self::bindInsertKeys($sth, $columnsD, $keyD);
              $sth->execute();
            }
          } else {
            // 明細行削除フラグtrueの場合、更新せず行削除
            $sth = $dbh->prepare(self::makeDeleteSQL($tblnameD, $columnsD));
            self::bindDeleteKeys($sth, $columnsD, $keyD, true);
            $sth->execute();
          }
        }
      } else {
        // ヘッダ削除フラグtrueの場合、更新せずヘッダ及び全明細行を削除
        $sth = $dbh->prepare(self::makeDeleteSQL($tblnameH, $columnsH));
        self::bindDeleteKeys($sth, $columnsH, $keyH, false);
        $sth->execute();
        $sth = $dbh->prepare(self::makeDeleteAllDetailsSQL($tblnameD, $columnsD));
        self::bindDeleteAllDetailsKeys($sth, $columnsD, $keyH, true);
        $sth->execute();
      }
      if ($usenewdbh) {
        $dbh->commit();
      }
    } catch (Exception $e) {
      if ($usenewdbh) {
        $dbh->rollBack();
      }
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
    }
    echo json_encode($resp);
    return true;
  }

  /***
   * 指定請求Noのデータを削除【2023/4/12修正途中：繰越の再請求データ取消のとき、前回データの入金区分を更新追加】
   */
  public static function deleteBD($arbillno) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      foreach ($arbillno as $no) { 
        // 対象データを取得 入金済みか確認用
        $sth = $dbh->prepare('
        SELECT * FROM billdetails AS bd
        LEFT JOIN bill ON bd_bill_no = b_bill_no
         WHERE  bd_belong_cd = :BELONGCD AND 
         bd_bill_no = :BILLNO        
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':BILLNO', $no, PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) <= 0) {
          $resp = array('succeed' => false, 'msg' => '該当の請求番号がありませんでした。');
          echo json_encode($resp);
          return;
        }

        foreach($result as $rec) {
          if ($rec['bd_payment_sign'] > 0) {
            // 入金済みのデータがある場合は、データ削除不可
            $resp = array('succeed' => false, 'msg' => '入金済みのデータが存在するため、請求取消ができませんでした。');
            echo json_encode($resp);
            return;
          }
          if ($rec['b_final_sign'] === '1') {
            // 過去請求の場合は、最新請求を削除する必要あり
            $resp = array('succeed' => false, 'msg' => '指定された請求番号より後に発行された請求書があるため、請求取消ができませんでした。確認をお願いします。');
            echo json_encode($resp);
            return;
          }
        }

        // 納品データの更新用にキー項目取得
        $sth = $dbh->prepare('
        SELECT DISTINCT bd_estimate_no, bd_st_details_no
        FROM billdetails 
        WHERE bd_bill_no = :BILLNO
        ;');
        $sth->bindValue(':BILLNO', $no, PDO::PARAM_STR);
        $sth->execute();
        $rsltCD = $sth->fetchAll(PDO::FETCH_ASSOC);

        // 受注データの更新用にキー項目取得&請求金額計算用に各受注枝番+出荷枝番の請求金額も計算
        $sth = $dbh->prepare('
        SELECT *, SUM(bd_price) AS billprice 
        FROM billdetails 
        WHERE bd_bill_no = :BILLNO
        GROUP BY bd_estimate_no,bd_ed_details_no,bd_shipment_div
        ;');
        $sth->bindValue(':BILLNO', $no, PDO::PARAM_STR);
        $sth->execute();
        $rsltCD2 = $sth->fetchAll(PDO::FETCH_ASSOC);


        // 該当請求データを削除
        $sth = $dbh->prepare('
        DELETE FROM billdetails
        WHERE bd_belong_cd = :BELONGCD AND bd_bill_no = :BILLNO
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':BILLNO', $no, PDO::PARAM_STR);
        $sth->execute();

        // 前回請求データの最終請求フラグをリセット
        $sth = $dbh->prepare('
        SELECT * FROM bill
        WHERE b_bill_no = :BILLNO
        ;');
        $sth->bindValue(':BILLNO', $no, PDO::PARAM_STR);
        $sth->execute();
        $resultHeader = $sth->fetchAll(PDO::FETCH_ASSOC);

        // 前回請求データがセットされていた場合
        if (self::checkNotSet($resultHeader[0]['b_before_bill_no']) === false) {
          // 前回請求データが繰越金額発生による再請求データであり、一部入金データの有無を確認する
          $sth = $dbh->prepare('
          SELECT * FROM billdetails
          WHERE bd_bill_no = :BILLNO
          ;');
          $sth->bindValue(':BILLNO', $resultHeader[0]['b_before_bill_no'], PDO::PARAM_STR);
          $sth->execute();
          $resultDetails = $sth->fetchAll(PDO::FETCH_ASSOC);
          
          foreach ($resultDetails as $recordD) {
            // 入金Noが空のとき、入金額、入金区分を初期化（0：未）※繰越の再請求データのみ
            if ($recordD['bd_payment_no'] === null || $recordD['bd_payment_no'] === '') {
              $sth = $dbh->prepare('
              UPDATE billdetails 
              SET bd_payment_money = :PAYMENT,
              bd_payment_sign = "0",
              bd_update_at = :UPDATEAT,
              bd_update_cd = :UPDATECD
              WHERE bd_belong_cd = :BELONGCD 
              AND bd_bill_no = :BILLNO AND bd_estimate_no = :BDENO
              AND bd_ed_details_no = :BDEDNO AND bd_shipment_div = :BDSDNO
              ;');
              $sth->bindValue(':PAYMENT', 0, PDO::PARAM_STR);
              $sth->bindValue(':UPDATEAT', self::currentDate(), PDO::PARAM_STR);
              $sth->bindValue(':UPDATECD', $_SESSION['usercd'], PDO::PARAM_STR);
              $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
              $sth->bindValue(':BILLNO', $recordD['bd_bill_no'], PDO::PARAM_STR);
              $sth->bindValue(':BDENO', $recordD['bd_estimate_no'], PDO::PARAM_STR);
              $sth->bindValue(':BDEDNO', $recordD['bd_ed_details_no'], PDO::PARAM_STR);
              $sth->bindValue(':BDSDNO', $recordD['bd_shipment_div'], PDO::PARAM_STR);
              $sth->execute();
            }
          }
  
          $sth = $dbh->prepare('
          UPDATE bill 
          SET b_final_sign = "0",
          b_update_at = :UPDATEAT,
          b_update_cd = :UPDATECD
          WHERE b_belong_cd = :BELONGCD AND 
          b_bill_no = :BILLNO AND b_customer_cd = :CUSCD          
          ;');
          $sth->bindValue(':UPDATEAT', self::currentDate(), PDO::PARAM_STR);
          $sth->bindValue(':UPDATECD', $_SESSION['usercd'], PDO::PARAM_STR);
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':BILLNO', $resultHeader[0]['b_before_bill_no'], PDO::PARAM_STR);
          $sth->bindValue(':CUSCD', $resultHeader[0]['b_customer_cd'], PDO::PARAM_STR);
          $sth->execute();
        }


        // 受払明細のデータを削除。通常は、赤で入れるが、納品データと一緒ではじめて意味を成すデータのため削除
        self::issueStockTaxValue($dbh, $resultHeader[0], $resultHeader[0]['b_final_date'], 0);

        // 請求ヘッダデータ削除
        $sth = $dbh->prepare('
        DELETE FROM bill
        WHERE b_bill_no = :BILLNO 
        ;');
        $sth->bindValue(':BILLNO', $no, PDO::PARAM_STR);
        $sth->execute();

        foreach ($rsltCD as $rec) {    
          // 納品データ　請求書発行日をリセット  
          $sth = $dbh->prepare('
          UPDATE statementdetails
          SET sd_bill_create_date = "",
          sd_update_at = :UPDATEAT,
          sd_update_cd = :UPDATECD 
          WHERE sd_belong_cd = :BELONGCD AND 
          sd_e_estimate_no = :ESTNO AND 
          sd_statement_sub_no = :STNO        
          ;');
          $sth->bindValue(':UPDATEAT', self::currentDate(), PDO::PARAM_STR);
          $sth->bindValue(':UPDATECD', $_SESSION['usercd'], PDO::PARAM_STR);
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $rec['bd_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':STNO', $rec['bd_st_details_no'], PDO::PARAM_STR);
          $sth->execute();
        }

        // // 受注データの更新用にキー項目取得&請求金額計算用に各受注枝番+出荷枝番の請求金額も計算
        // $sth = $dbh->prepare('
        // SELECT *, SUM(bd_bill_price) AS billprice 
        // FROM billdetails 
        // WHERE bd_bill_no = :BILLNO
        // GROUP BY bd_estimate_no,bd_ed_details_no,bd_shipment_div
        // ;');
        // $sth->bindValue(':BILLNO', $no, PDO::PARAM_STR);
        // $sth->execute();
        // $rsltCD2 = $sth->fetchAll(PDO::FETCH_ASSOC);
        foreach ($rsltCD2 as $rec) {    
          // 受注データ　請求書発行日、請求金額をリセット
          // 請求書区分再調整用
          $sth = $dbh->prepare('
          SELECT *
          FROM estimatedetails
          WHERE ed_belong_cd = :BELONGCD AND 
            ed_estimate_no = :ESTNO AND 
            ed_estimate_sub_no = :ESTSUBNO AND 
            ed_shipment_sub_no = :SHIPNO       
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $rec['bd_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':ESTSUBNO', $rec['bd_ed_details_no'], PDO::PARAM_STR);
          $sth->bindValue(':SHIPNO', $rec['bd_shipment_div'], PDO::PARAM_STR);
          $sth->execute();
          $rsltFlg = $sth->fetchAll(PDO::FETCH_ASSOC);
          
          $flg = self::setStatusSign('bill', $rsltFlg[0]['ed_price'], $rsltFlg[0]['ed_delivery_price'], $rsltFlg[0]['ed_bill_price'] - $rec['bd_bill_price']);

          $sth = $dbh->prepare('
          UPDATE estimatedetails
            SET ed_bill_price = 0,
            ed_bill_sign = :SIGN,
            ed_bill_create_date = "",
            ed_update_at = :UPDATEAT,
            ed_update_cd = :UPDATECD            
          WHERE ed_belong_cd = :BELONGCD AND 
            ed_estimate_no = :ESTNO AND 
            ed_estimate_sub_no = :ESTSUBNO AND 
            ed_shipment_sub_no = :SHIPNO    
          ;');
          $sth->bindValue(':SIGN', $flg, PDO::PARAM_STR);
          $sth->bindValue(':UPDATEAT', self::currentDate(), PDO::PARAM_STR);
          $sth->bindValue(':UPDATECD', $_SESSION['usercd'], PDO::PARAM_STR);
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $rec['bd_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':ESTSUBNO', $rec['bd_ed_details_no'], PDO::PARAM_STR);
          $sth->bindValue(':SHIPNO', $rec['bd_shipment_div'], PDO::PARAM_STR);
          $sth->execute();
        }
      }
      $dbh->commit();
      echo json_encode($resp);
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp = array('succeed' => false, 'msg' => '');
      echo json_encode($resp);
    }    
  }
  

  // ヘッダ及び明細に対応するDB更新処理を実行する。確定、削除処理はしない。
  // トランザクション処理は上位が行うこと
  // public static function updateStatementHDAndDTL($tblnameH, $columnsH, $tblnameD, $columnsD, $datHeader, $datdetail, $dbh) {
  //   $resp = array('succeed' => true, 'msg' => '');
  //   try {        
  //     // ヘッダ 変更するものは日付項目のみ
  //     $keyH = $datHeader[0];
  //     // ヘッダ削除フラグ
  //     $delFlgHeader = self::checkDeleteRowRequired($keyH);
  //     // 削除レコードカウント用
  //     $delCnt = 0;
  //     // 既存フラグ　明細が1つでも既存ならヘッダは更新
  //     $updateFlg = false;
  //     // 明細データから登録
  //     foreach ($datdetail as $keyD) {
  //       $keyD['sd_belong_cd'] = $datHeader[0]['s_belong_cd'];
  //       $keyD['sd_update_at'] = $datHeader[0]['s_update_at'];
  //       $keyD['sd_update_cd'] = $datHeader[0]['s_update_cd'];
  //       $keyD['sd_e_estimate_no'] = $datHeader[0]['s_estimate_no'];
  //       $keyD['sd_statement_sub_no'] = $datHeader[0]['s_serial_no'];
  //       // データがはいっていなかったらヘッダデータを入れる
  //       if (self::checkNotSet($keyD['sd_desired_delivery_date']) === true) {
  //         $keyD['sd_desired_delivery_date'] = $datHeader[0]['s_desired_delivery_date'];
  //       }
  //       if (self::checkNotSet($keyD['sd_customer_order_no']) === true) {
  //         $keyD['sd_customer_order_no'] = $datHeader[0]['s_customer_order_no'];
  //       }
  //       if (self::checkNotSet($keyD['sd_customer_p_name']) === true) {
  //         $keyD['sd_customer_p_name'] = $datHeader[0]['s_customer_order_no'];
  //       }
  //       if (self::checkNotSet($keyD['sd_delivery_cd']) === true) {
  //         $keyD['sd_delivery_cd'] = $datHeader[0]['s_delivery_cd'];
  //       }
  //       // ヘッダデータを明細データにコピー
  //       $keyD['sd_bill_close_date'] = $datHeader[0]['s_bill_close_date'];
  //       $keyD['sd_payment_close_date'] = $datHeader[0]['s_payment_plan_date'];

  //       // 削除フラグ
  //       $delFlgDeteil = self::checkDeleteRowRequired($keyD);
  //       if ($delFlgHeader) {
  //         // ヘッダ削除フラグが立っていたら全明細削除とする
  //         $delFlgDeteil = true;
  //         $delCnt++;
  //       }
  //       // 既存データ取得
  //       $sth = $dbh->prepare('
  //       SELECT * FROM statementdetails 
  //       WHERE sd_belong_cd = :BELONGCD AND 
  //       sd_e_estimate_no = :ESTNO AND 
  //       sd_statement_sub_no = :STSUBNO AND 
  //       sd_estimate_sub_no = :ESTSUBNO AND 
  //       sd_shipment_sub_no = :SHIPSUBNO
  //       ;');
  //       $sth->bindValue(':BELONGCD', $keyD['sd_belong_cd'], PDO::PARAM_STR);
  //       $sth->bindValue(':ESTNO', $keyD['sd_e_estimate_no'], PDO::PARAM_STR);
  //       $sth->bindValue(':STSUBNO', $keyD['sd_statement_sub_no'], PDO::PARAM_STR);
  //       $sth->bindValue(':ESTSUBNO', $keyD['sd_estimate_sub_no'], PDO::PARAM_STR);
  //       $sth->bindValue(':SHIPSUBNO', $keyD['sd_shipment_sub_no'], PDO::PARAM_STR);
  //       $sth->execute();
  //       $exData = $sth->fetchAll(PDO::FETCH_ASSOC);
  //       if (count($exData) > 0) {
  //         $updateFlg = true;
  //         // 既存の場合　ひとまず現状値をリセット
  //         // 編集後のデータをセット
  //         $exData[0]['sd_deliv_create_date'] = NULL;
  //         $exData[0]['sd_update_at'] = $keyD['sd_update_at'];
  //         $exData[0]['sd_update_cd'] = $keyD['sd_update_cd'];
  //         // リセット用データ
  //         $exData[0]['sd_statement_sub_no'] = sprintf('%04d', (int)$exData[0]['sd_statement_sub_no'] + 1);
  //         if (!empty($exData['sd_qty_delivery'])) {
  //           $exData[0]['sd_qty_delivery'] = (-1) * (int)$exData[0]['sd_qty_delivery'];
  //         }
  //         if (!empty($exData['sd_delivery_price'])) {
  //           $exData[0]['sd_delivery_price'] = (-1) * (int)$exData[0]['sd_delivery_price'];
  //         }
  //         if (!empty($exData['sd_tax'])) {
  //           $exData[0]['sd_tax'] = (-1) * $exData[0]['sd_tax'];
  //         }
  //         // 受払明細にinsert
          

  //         // $columnsTrD = self::getColumnDefs('paymentdetails');
  //         // $sth = $dbh->prepare(self::makeInsertSQL('paymentdetails', $columnsTrD));
  //         // self::bindInsertKeys($sth, $columnsTrD, $exData[0]);
  //         // $sth->execute();
          
  //         // 最新データ記入
  //         $exData[0]['sd_statement_sub_no'] = sprintf('%04d', (int)$exData[0]['sd_statement_sub_no'] + 1);
  //         if ($delFlgDeteil) {
  //           // 削除だったら0更新
  //           $exData[0]['sd_p_cd'] = '';
  //           $exData[0]['sd_p_name_supple'] = '';
  //           $exData[0]['sd_estimate_quantity'] = 0;
  //           $exData[0]['sd_unit_price'] = 0;
  //           $exData[0]['sd_price'] = 0;
  //           $exData[0]['sd_cost'] = 0;
  //           $exData[0]['sd_desired_delivery_date'] = '';
  //           $exData[0]['sd_customer_order_no'] = '';
  //           $exData[0]['sd_customer_p_name'] = '';
  //           $exData[0]['sd_delivery_cd'] = '';
  //           $exData[0]['sd_detail_remarks'] = '';
  //           $exData[0]['sd_prod_fin_date'] = '';
  //           $exData[0]['sd_shipment_date'] = '';
  //           $exData[0]['sd_qty_delivery'] = 0;
  //           $exData[0]['sd_delivery_price'] = 0;
  //           $exData[0]['sd_tax'] = 0;
  //           $exData[0]['sd_deliv_create_date'] = '';
  //           $exData[0]['sd_bill_close_date'] = '';
  //           $exData[0]['sd_bill_create_date'] = '';
  //           $exData[0]['sd_payment_close_date'] = '';
  //           $exData[0]['sd_remarks'] = '';
  //         } else {
  //           // 既存編集の場合
  //           $exData[0]['sd_qty_delivery'] = $keyD['sd_qty_delivery'];
  //           $exData[0]['sd_delivery_price'] = $keyD['sd_delivery_price'];
  //           $exData[0]['sd_tax'] = $keyD['sd_tax'];
  //         }
  //         $sth = $dbh->prepare(self::makeInsertSQL($tblnameD, $columnsD));
  //         self::bindInsertKeys($sth, $columnsD, $exData[0]);
  //         $sth->execute();
  //       } else {
  //         // 新規追加
  //         $sth = $dbh->prepare(self::makeInsertSQL($tblnameD, $columnsD));
  //         self::bindInsertKeys($sth, $columnsD, $keyD);
  //         $sth->execute();
  //       }
  //     }
  //     // 納品ヘッダ登録=========================================
  //     // 全明細が削除対象だった場合は、ヘッダも削除対象
  //     if ($delCnt >= count($datdetail)) {
  //       $delFlgHeader = true;
  //     }
  //     if ($updateFlg) {
  //       // 既存
  //       $datHeader[0]['s_serial_no'] = sprintf('%04d', (int)$datHeader[0]['s_serial_no'] + 2);
  //       if ($delFlgHeader) {
  //         // 削除対象
  //         $datHeader[0]['s_customer_cd'] = '';
  //         $datHeader[0]['s_customer_post_cd'] = '';
  //         $datHeader[0]['s_customer_charge_cd'] = '';
  //         $datHeader[0]['s_salesman_cd'] = '';
  //         $datHeader[0]['s_estimate_date'] = '';
  //         $datHeader[0]['s_desired_delivery_date'] = '';
  //         $datHeader[0]['s_repeat_estimate_no'] = '';
  //         $datHeader[0]['s_customer_order_no'] = '';
  //         $datHeader[0]['s_shipper_cd'] = '';
  //         $datHeader[0]['s_stay_cd'] = '';
  //         $datHeader[0]['s_delivery_cd'] = '';
  //         $datHeader[0]['s_tc_short_name'] = '';
  //         $datHeader[0]['s_title'] = '';
  //         $datHeader[0]['s_valid_month'] = 0;
  //         $datHeader[0]['s_remarks'] = '';
  //         $datHeader[0]['s_packing_num'] = 0;
  //       }
  //     }        
  //     $sth = $dbh->prepare(self::makeInsertSQL($tblnameH, $columnsH));
  //     self::bindInsertKeys($sth, $columnsH, $datHeader[0]);
  //     $sth->execute(); 

  //     // 見積書のデータ更新===============================
  //     // DB定義取得
  //     // $columnsEstH = self::getColumnDefs('estimate');
  //     // $columnsEstD = self::getColumnDefs('estimatedetails');
  //     // $columnsEstTH = self::getColumnDefs('t_estimate');
  //     // $columnsEstTD = self::getColumnDefs('t_estimatedetails');
  //     // // PK定義
  //     // self::markAsHeaderPK($columnsEstH, 'e_belong_cd');
  //     // self::markAsHeaderPK($columnsEstH, 'e_estimate_no');
  //     // self::markAsHeaderPK($columnsEstD, 'ed_belong_cd');
  //     // self::markAsHeaderPK($columnsEstD, 'ed_estimate_no');
  //     // self::markAsHeaderPK($columnsEstD, 'ed_estimate_sub_no');
  //     // self::markAsHeaderPK($columnsEstD, 'ed_shipment_sub_no');
  //     // foreach ($datdetail as $keyD) {
  //     //   $keyD['sd_belong_cd'] = $datHeader[0]['s_belong_cd'];
  //     //   $keyD['sd_update_at'] = $datHeader[0]['s_update_at'];
  //     //   $keyD['sd_update_cd'] = $datHeader[0]['s_update_cd'];
  //     //   $keyD['sd_e_estimate_no'] = $datHeader[0]['s_estimate_no'];
  //     //   $keyD['sd_statement_sub_no'] = $datHeader[0]['s_serial_no'];
  //     //   // 以前のデータ取得 prioritykeyのためにinsert into selectが実行できなかったので分けて作業
  //     //   $sth = $dbh->prepare('
  //     //   SELECT * FROM estimatedetails 
  //     //   WHERE ed_belong_cd = :BELONGCD AND 
  //     //   ed_estimate_no = :ESTNO AND 
  //     //   ed_estimate_sub_no = :ESTSUBNO AND 
  //     //   ed_shipment_sub_no = :SHIPSUBNO
  //     //   ;');
  //     //   $sth->bindValue(':BELONGCD', $keyD['sd_belong_cd'], PDO::PARAM_STR);
  //     //   $sth->bindValue(':ESTNO', $keyD['sd_e_estimate_no'], PDO::PARAM_STR);
  //     //   $sth->bindValue(':ESTSUBNO', $keyD['sd_estimate_sub_no'], PDO::PARAM_STR);
  //     //   $sth->bindValue(':SHIPSUBNO', $keyD['sd_shipment_sub_no'], PDO::PARAM_STR);
  //     //   $sth->execute();
  //     //   $exData = $sth->fetchAll(PDO::FETCH_ASSOC);
  //     //   if (count($exData) > 0) {
  //     //     // 納品データを見積Noと見積明細、出荷枝番で集計
  //     //     $sth1 = $dbh->prepare('
  //     //     SELECT sd_belong_cd, sd_e_estimate_no, sd_estimate_sub_no, 
  //     //     SUM(sd_qty_delivery) AS sum_qty,
  //     //     SUM(sd_delivery_price) AS sum_price,
  //     //     IF((SUM(sd_qty_delivery)=sd_estimate_quantity), 2, IF(((SUM(sd_qty_delivery)=ed_qty_shipment) AND (ed_qty_shipment < sd_estimate_quantity)), 1,0)) AS deliv_status
  //     //     FROM statementdetails AS sd
  //     //     LEFT JOIN estimatedetails AS ed ON
  //     //     ed.ed_belong_cd = sd.sd_belong_cd AND 
  //     //     ed.ed_estimate_no = sd.sd_e_estimate_no AND 
  //     //     ed.ed_estimate_sub_no = sd.sd_estimate_sub_no AND 
  //     //     ed.ed_shipment_sub_no = sd.sd_shipment_sub_no
  //     //     WHERE sd_belong_cd = :BELONGCD AND 
  //     //     sd_e_estimate_no = :ESTNO AND 
  //     //     sd_estimate_sub_no = :ESTSUBNO AND 
  //     //     sd_shipment_sub_no = :SHIPSUBNO
  //     //     GROUP BY sd_belong_cd, sd_e_estimate_no, sd_estimate_sub_no
  //     //     ;');
  //     //     $sth1->bindValue(':BELONGCD', $keyD['sd_belong_cd'], PDO::PARAM_STR);
  //     //     $sth1->bindValue(':ESTNO', $keyD['sd_e_estimate_no'], PDO::PARAM_STR);
  //     //     // $sth1->bindValue(':STSUBNO', $keyD['sd_statement_sub_no'], PDO::PARAM_STR);
  //     //     $sth1->bindValue(':ESTSUBNO', $keyD['sd_estimate_sub_no'], PDO::PARAM_STR);
  //     //     $sth1->bindValue(':SHIPSUBNO', $keyD['sd_shipment_sub_no'], PDO::PARAM_STR);
  //     //     $sth1->execute();
  //     //     $sumData = $sth1->fetchAll(PDO::FETCH_ASSOC);
  //     //     // 納品数
  //     //     $sumDeliveryNum = $sumData[0]['sum_qty'];
  //     //     // 納品書フラグ
  //     //     $delivFlg = $sumData[0]['deliv_status'];
  //     //     // 納品金額
  //     //     $sumDelvPrice = $sumData[0]['sum_price'];
  //     //     // history
  //     //     $sth2 = $dbh->prepare('
  //     //     INSERT INTO t_estimatedetails 
  //     //     SELECT * FROM estimatedetails 
  //     //     WHERE ed_belong_cd = :BELONGCD 
  //     //     AND ed_estimate_no = :ESTNO 
  //     //     AND ed_estimate_sub_no = :SUBNO 
  //     //     AND ed_shipment_sub_no = :SHIPSUBNO
  //     //     ;');
  //     //     $sth2->bindValue(':BELONGCD', $exData['ed_belong_cd'], PDO::PARAM_STR);
  //     //     $sth2->bindValue(':ESTNO', $exData['ed_estimate_no'], PDO::PARAM_STR);
  //     //     $sth2->bindValue(':SUBNO', $exData['ed_estimate_sub_no'], PDO::PARAM_STR);
  //     //     $sth2->bindValue(':SHIPSUBNO', $exData['ed_shipment_sub_no'], PDO::PARAM_STR);
  //     //     $sth2->execute();
  //     //     // 更新
  //     //     $sth3 = $dbh->prepare('
  //     //       UPDATE estimatedetails SET
  //     //       ed_update_cnt = :CNT,
  //     //       ed_qty_delivery = :DELIVQTY,
  //     //       ed_delivery_price = :DELIVPRICE,
  //     //       ed_delivery_sign = :DELIVSIGN,
  //     //       ed_deliv_create_date = :CREATEDATE,
  //     //       ed_update_at = :UPDATEAT,
  //     //       ed_update_cd = :UPDATECD
  //     //       WHERE ed_belong_cd = :BELONGCD AND 
  //     //       ed_estimate_no = :ESTNO AND 
  //     //       ed_estimate_sub_no = :ESTSUBNO AND 
  //     //       ed_shipment_sub_no = :SHIPSUBNO         
  //     //     ;');
  //     //     $sth3->bindValue(':CNT', ((int)$exData['ed_update_cnt'] + 1), PDO::PARAM_INT);
  //     //     $sth3->bindValue(':DELIVQTY', $sumDeliveryNum, PDO::PARAM_STR);
  //     //     $sth3->bindValue(':DELIVPRICE', $sumDelvPrice, PDO::PARAM_STR);
  //     //     $sth3->bindValue(':DELIVSIGN', $delivFlg, PDO::PARAM_STR);
  //     //     $sth3->bindValue(':CREATEDATE', $keyD['sd_update_at'], PDO::PARAM_STR);
  //     //     $sth3->bindValue(':UPDATEAT', $keyD['sd_update_at'], PDO::PARAM_STR);
  //     //     $sth3->bindValue(':UPDATECD', $keyD['sd_update_cd'], PDO::PARAM_STR);
  //     //     $sth3->bindValue(':BELONGCD', $keyD['sd_belong_cd'], PDO::PARAM_STR);
  //     //     $sth3->bindValue(':ESTNO', $keyD['sd_e_estimate_no'], PDO::PARAM_STR);
  //     //     // $sth->bindValue(':STSUBNO', $keyD['sd_statement_sub_no'], PDO::PARAM_STR);
  //     //     $sth3->bindValue(':ESTSUBNO', $keyD['sd_estimate_sub_no'], PDO::PARAM_STR);
  //     //     $sth3->bindValue(':SHIPSUBNO', $keyD['sd_shipment_sub_no'], PDO::PARAM_STR);
  //     //     $sth3->execute();
  //     //   } else {
  //     //     // 新規
  //     //     $e = '見積書データ更新エラー';
  //     //     throw new $e;
  //     //   }

  //     // }
  //     return $resp;
  //   } catch (Exception $e) {
  //     $resp['msg'] = self::getDBErrorMsg($e);
  //     $resp['succeed'] = false;
  //     return $resp;
  //   }
  // }

  /**
   * 受払明細にデータをインサートする
   */
  public static function insertStock($process, $dat, $dbh) {
    try {
      // 共通項目
      $updateDate = self::currentDate();
      $updateTime = self::currentTime();
      $updateCD = $_SESSION['usercd'];
      // カラム定義取得&ヘッダ定義
      $columnsH = self::getColumnDefs('stock');
      self::markAsHeaderPK($columnsH, 'stc_belong_cd');
      self::markAsHeaderPK($columnsH, 'stc_month');
      self::markAsHeaderPK($columnsH, 'stc_arrange_type');
      self::markAsHeaderPK($columnsH, 'stc_report_no');
      self::markAsHeaderPK($columnsH, 'stc_sub_no_01');
      self::markAsHeaderPK($columnsH, 'stc_sub_no_02');
      self::markAsHeaderPK($columnsH, 'stc_sub_no_03');
      self::markAsHeaderPK($columnsH, 'stc_sub_no_04');
      self::markAsHeaderPK($columnsH, 'stc_update_cnt');
      // 登録データ格納用
      $arUpData = [];
      switch ($process) {
        case 'statement':
          // 該当データを取得 更新回数
          $sth = $dbh->prepare('
          SELECT *, MAX(stc_update_cnt) AS maxno 
            FROM stock
          WHERE stc_belong_cd = :BELONGCD AND
            stc_arrange_type = :ARRANGETYPE AND
            stc_report_no = :REPORTNO AND
            stc_sub_no_01 = :SUBNO01 AND
            stc_sub_no_02 = :SUBNO02 AND
            stc_sub_no_03 = :SUBNO03 
          GROUP BY stc_arrange_type,stc_report_no,stc_sub_no_01,stc_sub_no_02
          ;');
          $sth->bindValue(':BELONGCD', $dat['sd_belong_cd'] , PDO::PARAM_STR);
          $sth->bindValue(':ARRANGETYPE', '510', PDO::PARAM_STR);
          $sth->bindValue(':REPORTNO', $dat['sd_e_estimate_no'] , PDO::PARAM_STR);
          $sth->bindValue(':SUBNO01', $dat['sd_statement_sub_no'] , PDO::PARAM_STR);
          $sth->bindValue(':SUBNO02', $dat['sd_estimate_sub_no'] , PDO::PARAM_STR);
          $sth->bindValue(':SUBNO03', $dat['sd_shipment_sub_no'] , PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($result) > 0) {
            // 既存なので、更新回数の最大値を取得
            $arUpData[0]['stc_update_cnt'] = (int)$result[0]['maxno'] + 1;
          } else {
            $arUpData[0]['stc_update_cnt'] = 1;
          }
          // 更新用データ取得
          $sth = $dbh->prepare('
          SELECT sd.*, s.*,
            SUBSTR(sd.sd_desired_delivery_date, 3, 4) AS invmonth,
            pd.pd_proj_cd AS pjcd,
            pd.pd_place_cd AS placecd,
            ed.ed_sub_01 AS sub01,
            ed.ed_sub_02 AS sub02,
            ed.ed_sub_12 AS sub12,
            ed.ed_sub_13 AS sub13,
            ed.ed_sub_03 AS sub03,
            ed.ed_sub_04 AS sub04,
            ed.ed_sub_05 AS sub05,
            ed.ed_sub_06 AS sub06,
            ed.ed_sub_08 AS sub08,
            ed.ed_sub_10 AS sub10,
            ed.ed_sub_09 AS sub09,
            ed.ed_sub_11 AS sub11,
            IF((LEFT(p.p_type, 1) = "1"), ecd.ecd_quantity, 1) AS evaqty,
             IF((LEFT(p.p_type, 1) = "1"), ecd.ecd_proc_cost, p.p_standard_cost) AS evaunitprice,
            p.p_type_01 AS invtype       
          FROM  statementdetails AS sd
          LEFT JOIN statement AS s ON
            s.s_belong_cd = sd.sd_belong_cd AND s.s_estimate_no = sd.sd_e_estimate_no 
          LEFT JOIN estimatedetails AS ed ON
            ed.ed_belong_cd = sd.sd_belong_cd AND ed.ed_estimate_no = sd.sd_e_estimate_no AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no
          LEFT JOIN estimate AS e ON 
            e.e_belong_cd = sd.sd_belong_cd AND e.e_estimate_no = sd.sd_e_estimate_no
          LEFT JOIN estimatedetails_calc AS ecd ON
            ecd.ecd_belong_cd = sd.sd_belong_cd AND ecd.ecd_estimate_no = sd.sd_e_estimate_no AND ecd.ecd_estimate_sub_no = sd.sd_estimate_sub_no
          LEFT JOIN prodplans AS pd ON
            pd.pd_belong_cd = sd.sd_belong_cd AND pd.pd_e_estimate_no = sd.sd_e_estimate_no AND pd.pd_e_estimate_sub_no = sd.sd_estimate_sub_no
          LEFT JOIN product AS p ON
            p.p_belong_cd = sd.sd_belong_cd AND p.p_cd = sd.sd_p_cd 
          WHERE 
            sd.sd_belong_cd = :BELONGCD AND
            sd.sd_e_estimate_no = :ESTNO AND
            sd.sd_statement_sub_no = :STSUBNO AND
            sd.sd_estimate_sub_no = :ESTSUBNO AND
            sd.sd_shipment_sub_no = :SHIPNO
          ;');
          $sth->bindValue(':BELONGCD', $dat['sd_belong_cd'] , PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $dat['sd_e_estimate_no'] , PDO::PARAM_STR);
          $sth->bindValue(':STSUBNO', $dat['sd_statement_sub_no'] , PDO::PARAM_STR);
          $sth->bindValue(':ESTSUBNO', $dat['sd_estimate_sub_no'] , PDO::PARAM_STR);
          $sth->bindValue(':SHIPNO', $dat['sd_shipment_sub_no'] , PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);

          // 受払明細のデータ項目 
          // $dat:登録するデータ　$result:見積・製造指示・納品書までの結合データ　$exData:
          $arUpData[0]['stc_belong_cd'] = $dat['sd_belong_cd'];
          $arUpData[0]['stc_month'] = $result[0]['invmonth'];
          $arUpData[0]['stc_arrange_type'] = '510';
          $arUpData[0]['stc_report_no'] = $dat['sd_e_estimate_no'];
          $arUpData[0]['stc_sub_no_01'] = $dat['sd_statement_sub_no'];
          $arUpData[0]['stc_sub_no_02'] = $dat['sd_estimate_sub_no'];
          $arUpData[0]['stc_sub_no_03'] = $dat['sd_shipment_sub_no'];;
          $arUpData[0]['stc_sub_no_04'] = '00';
          // 更新回数は上の処理にて取得したため省略。
          $arUpData[0]['stc_report_date'] = $result[0]['sd_desired_delivery_date'];
          $arUpData[0]['stc_pjcd'] = $result[0]['pjcd'];
          $arUpData[0]['stc_target_id'] = $result[0]['s_customer_cd'];
          $arUpData[0]['stc_place_cd'] = $result[0]['placecd'];
          $arUpData[0]['stc_customer_post_cd'] = $result[0]['s_customer_post_cd'];
          $arUpData[0]['stc_product_cd'] = $result[0]['sd_p_cd'];
          $arUpData[0]['stc_sub_01'] = (float)$result[0]['sub01'];
          $arUpData[0]['stc_sub_02'] = (float)$result[0]['sub02'];
          $arUpData[0]['stc_sub_12'] = $result[0]['sub12'];
          $arUpData[0]['stc_sub_13'] = $result[0]['sub13'];
          $arUpData[0]['stc_sub_04'] = (float)$result[0]['sub04'];
          $arUpData[0]['stc_sub_05'] = (float)$result[0]['sub05'];
          $arUpData[0]['stc_sub_06'] = $result[0]['sub06'];
          $arUpData[0]['stc_sub_08'] = (float)$result[0]['sub08'];
          $arUpData[0]['stc_sub_10'] = $result[0]['sub10'];
          $arUpData[0]['stc_sub_09'] = (float)$result[0]['sub09'];
          $arUpData[0]['stc_sub_11'] = $result[0]['sub11'];
          $arUpData[0]['stc_qty_trans'] = $dat['sd_qty_delivery'];
          $arUpData[0]['stc_price_trans'] = $dat['sd_delivery_price'];
          $arUpData[0]['stc_price_tax'] = $dat['sd_tax'];
          $arUpData[0]['stc_inventory_type'] = $result['p_type_01'];
          $arUpData[0]['stc_recv_type'] = '1';
          $arUpData[0]['stc_pay_type'] = '0';
          $arUpData[0]['stc_expence_type'] = '0';
          $arUpData[0]['stc_cost_type'] = '0';
          // 金網ならば見積計算テーブル参照だが、金網以外は品名マスタを参照
          $arUpData[0]['stc_cost_eva_qty'] = $result[0]['sd_qty_delivery'];  // $result[0]['evaqty'];
          $arUpData[0]['stc_unit_price'] = $result[0]['sd_cost'];        // $result[0]['evaunitprice'];
          $arUpData[0]['stc_type_01'] = '0';  // 初期登録なので０。棚卸で1がたつ
          $arUpData[0]['stc_type_02'] = '1';
          $arUpData[0]['stc_type_03'] = '';
          $arUpData[0]['stc_type_04'] = '0';
          $arUpData[0]['stc_type_05'] = '0';
          $arUpData[0]['stc_update_at'] = $updateDate;
          $arUpData[0]['stc_update_time'] = $updateTime;
          $arUpData[0]['stc_update_cd'] = $updateCD;
          // insert
          $sth = $dbh->prepare(self::makeInsertSQL('stock', $columnsH));
          self::bindInsertKeys($sth, $columnsH, $arUpData[0]);
          $sth->execute();
          break;
      }
    } catch (Exception $e) {
      throw $e;
    }
  }

  /***
   * 受払予定データ
   * $delflg: 受払明細にデータ変換時true
   */
  private static function issueStockPlan($process, $issueDate, $localData, $dbh, $delflg = false) {
    $arUpData = [];
    $updateDate = self::currentDate();    // 更新日
    $updateTime = self::currentTime();    // 更新時刻
    $columnsH = self::getColumnDefs('stockplan');
    self::markAsHeaderPK($columnsH, 'sp_belong_cd');
    self::markAsHeaderPK($columnsH, 'sp_month');
    self::markAsHeaderPK($columnsH, 'sp_arrange_type');
    self::markAsHeaderPK($columnsH, 'sp_report_no');
    self::markAsHeaderPK($columnsH, 'sp_sub_no_01');
    self::markAsHeaderPK($columnsH, 'sp_sub_no_02');
    self::markAsHeaderPK($columnsH, 'sp_update_cnt');
    try {
     
      switch ($process) {
        case 'ED':
          if (preg_match('/^26/', $localData['ed_p_cd'])) {
            // 大分類26の製品は入出庫にかかわらないため除外する
            return;
          }
          if (preg_match('/竹中金網/', $localData['e_customer_name'])) {
            // 自社在庫の場合は、製造指示で入庫予定データが作成され、製造完了とともにデータが予定データは削除される
            return;
          }
          $arUpData['sp_belong_cd'] = $localData['ed_belong_cd'];
          $arUpData['sp_month'] = '0000';
          $arUpData['sp_arrange_type'] = '510';   // 出庫予定品
          $arUpData['sp_report_no'] = $localData['ed_estimate_no'];
          $arUpData['sp_sub_no_01'] = $localData['ed_estimate_sub_no'];
          $arUpData['sp_sub_no_02'] = $localData['ed_shipment_sub_no'];
          $arUpData['sp_update_cnt'] = 0;
          $arUpData['sp_report_date'] = $issueDate;
          $arUpData['sp_pjcd'] = '';
          $arUpData['sp_target_id'] = $localData['ed_customer_cd'];
          $arUpData['sp_place_cd'] = $localData['ed_warehouse_cd'];  
          $arUpData['sp_customer_post_cd'] = $localData['ed_customer_post_cd'];
          $arUpData['sp_product_cd'] = $localData['ed_p_cd'];
          $arUpData['sp_sub_01'] = (float)$localData['ed_sub_01'];
          $arUpData['sp_sub_02'] = (float)$localData['ed_sub_02'];
          $arUpData['sp_sub_03'] = $localData['ed_sub_03'];
          $arUpData['sp_sub_04'] = (float)$localData['ed_sub_04'];
          $arUpData['sp_sub_05'] = (float)$localData['ed_sub_05'];
          $arUpData['sp_sub_06'] = $localData['ed_sub_06'];
          $arUpData['sp_sub_08'] = is_numeric($localData['ed_sub_08']) ? number_format($localData['ed_sub_08'], 1, '.', '') : $localData['ed_sub_08'];     // (float)$localData['ed_sub_08'];
          $arUpData['sp_sub_09'] = is_numeric($localData['ed_sub_09']) ? number_format($localData['ed_sub_09'], 1, '.', '') : $localData['ed_sub_09'];     // (float)$localData['ed_sub_09'];
          $arUpData['sp_sub_10'] = $localData['ed_sub_10'];   
          $arUpData['sp_sub_11'] = $localData['ed_sub_11'];   
          $arUpData['sp_sub_12'] = is_numeric($localData['ed_sub_12']) ? number_format($localData['ed_sub_12'], 1, '.', '') : $localData['ed_sub_12'];   
          $arUpData['sp_sub_13'] = is_numeric($localData['ed_sub_13']) ? number_format($localData['ed_sub_13'], 1, '.', '') : $localData['ed_sub_13'];  
          $arUpData['sp_qty_trans'] = $localData['ed_quantity'];
          $arUpData['sp_price_trans'] = $localData['ed_price'];
          $arUpData['sp_inventory_type'] = $localData['ed_inventory_type'];
          $arUpData['sp_recv_type'] = '1';
          $arUpData['sp_pay_type'] = '0';
          $arUpData['sp_expence_type'] = '0';
          $arUpData['sp_cost_type'] = '0';
          $arUpData['sp_cost_eva_qty'] = $localData['ed_quantity'];
          $arUpData['sp_unit_price'] = $localData['ed_cost'];
          $arUpData['sp_type_01'] = '0';  // 棚卸締め
          $arUpData['sp_type_02'] = '0';  // 売掛金元帳
          $arUpData['sp_type_03'] = '0';  // 元帳締め
          $arUpData['sp_type_04'] = $localData['ed_lot_no'];
          $arUpData['sp_type_05'] = '0';
          $arUpData['sp_update_at'] = $localData['ed_update_at'];
          $arUpData['sp_update_time'] = $updateTime;
          $arUpData['sp_update_cd'] = $localData['ed_update_cd'];
          $arUpData['sp_unit_tran'] = $localData['ed_unit_tran'];
          $arUpData['sp_type_subject'] = $localData['ed_type_subject'];
          $arUpData['sp_unit_eval'] = $localData['ed_unit_eval'];
          $arUpData['sp_sub_07'] = $localData['ed_sub_07'];
          $arUpData['sp_parrangement_cd'] = $localData['ed_parrangement_cd'];
          break;
        // case 'ASSIGNSTOCK':
        //   // 在庫引当
        //   $arUpData['sp_belong_cd'] = $localData['ed_belong_cd'];
        //   $arUpData['sp_month'] = '0000';
        //   $arUpData['sp_arrange_type'] = '810'; 
        //   $arUpData['sp_report_no'] = $localData['ed_estimate_no'];
        //   $arUpData['sp_sub_no_01'] = $localData['ed_estimate_sub_no'];
        //   $arUpData['sp_sub_no_02'] = $localData['ed_shipment_sub_no'];
        //   $arUpData['sp_update_cnt'] = $localData['ed_update_cnt'];
        //   $arUpData['sp_report_date'] = $localData['e_estimate_date'];
        //   $arUpData['sp_pjcd'] = '';
        //   $arUpData['sp_target_id'] = $localData['e_customer_cd'];
        //   $arUpData['sp_place_cd'] = $localData[''];   // 場所コードを指定すること
        //   $arUpData['sp_customer_post_cd'] = $localData['e_customer_post_cd']; // 
        //   $arUpData['sp_product_cd'] = $localData['ed_p_cd'];
        //   $arUpData['sp_sub_01'] = $localData['ed_sub_01'];
        //   $arUpData['sp_sub_02'] = $localData['ed_sub_02'];
        //   $arUpData['sp_sub_03'] = $localData['ed_sub_03'];
        //   $arUpData['sp_sub_04'] = $localData['ed_sub_04'];
        //   $arUpData['sp_sub_05'] = $localData['ed_sub_05'];
        //   $arUpData['sp_sub_06'] = $localData['ed_sub_06'];
        //   $arUpData['sp_sub_08'] = $localData['ed_sub_08'];
        //   $arUpData['sp_sub_09'] = $localData['ed_sub_09'];
        //   $arUpData['sp_sub_10'] = $localData['ed_sub_10'];  
        //   $arUpData['sp_sub_11'] = $localData['ed_sub_11'];   
        //   $arUpData['sp_sub_12'] = $localData['ed_sub_12'];   
        //   $arUpData['sp_sub_13'] = $localData['ed_sub_07'];   
        //   $arUpData['sp_qty_trans'] = $localData['ed_quantity'];
        //   $arUpData['sp_price_trans'] = $localData['ed_price'];
        //   $arUpData['sp_inventory_type'] = '1';
        //   $arUpData['sp_recv_type'] = '0';
        //   $arUpData['sp_pay_type'] = '1';
        //   $arUpData['sp_expence_type'] = '0';
        //   $arUpData['sp_cost_type'] = '1';
        //   $arUpData['sp_cost_eva_qty'] = $localData[''];    // 原価評価数量
        //   $arUpData['sp_unit_price'] = $localData['ed_cost'];
        //   $arUpData['sp_type_01'] = '0';  // 棚卸締め
        //   $arUpData['sp_type_02'] = '';
        //   $arUpData['sp_type_03'] = '';  // 元帳締め
        //   $arUpData['sp_type_04'] = '1';
        //   $arUpData['sp_type_05'] = '';
        //   $arUpData['sp_update_at'] = $updateDate;
        //   $arUpData['sp_update_time'] = $updateTime;
        //   $arUpData['sp_update_cd'] = $localData['ed_update_cd'];
        //   break;
        case 'MOD':
          if (preg_match('/^26/', $localData['moed_product_cd'])) {
            // 大分類26の製品は入出庫にかかわらないため除外する
            return;
          }
          $arUpData['sp_belong_cd'] = $localData['moed_belong_cd'];
          $arUpData['sp_month'] = '0000';
          $arUpData['sp_arrange_type'] = '110'; 
          $arUpData['sp_report_no'] = $localData['moed_order_no'];
          $arUpData['sp_sub_no_01'] = $localData['moed_sub_no'];
          $arUpData['sp_sub_no_02'] = $localData['moed_accept_sub_no'];
          $arUpData['sp_update_cnt'] = 0;
          $arUpData['sp_report_date'] = $issueDate;
          $arUpData['sp_pjcd'] = '';
          $arUpData['sp_target_id'] = $localData['moed_customer_cd'];
          $arUpData['sp_place_cd'] = $localData['moed_customer_charge_cd'];   // 場所コードは部署コード欄に登録されているため注意
          $arUpData['sp_customer_post_cd'] = $localData['moed_customer_post_cd']; // 
          $arUpData['sp_product_cd'] = $localData['moed_product_cd'];
          $arUpData['sp_sub_01'] = (float)$localData['moed_sub_01'];
          $arUpData['sp_sub_02'] = (float)$localData['moed_sub_02'];
          $arUpData['sp_sub_03'] = $localData['moed_sub_03'];
          $arUpData['sp_sub_04'] = (float)$localData['moed_sub_04'];
          $arUpData['sp_sub_05'] = (float)$localData['moed_sub_05'];
          $arUpData['sp_sub_06'] = $localData['moed_sub_06'];
          $arUpData['sp_sub_07'] = $localData['moed_sub_07'];   // コイル
          $arUpData['sp_sub_08'] = $localData['moed_sub_08'];
          $arUpData['sp_sub_09'] = $localData['moed_sub_09'];
          $arUpData['sp_sub_10'] = $localData['moed_sub_10'];   // メーカーロット番号
          $arUpData['sp_sub_11'] = $localData['moed_sub_11'];   // 製鋼番号
          $arUpData['sp_sub_12'] = $localData['moed_sub_12'];   // 荷姿
          $arUpData['sp_sub_13'] = $localData['moed_sub_13'];
          $arUpData['sp_qty_trans'] = (float)$localData['moed_quantity'];
          $arUpData['sp_price_trans'] = $localData['moed_money'];
          $arUpData['sp_inventory_type'] = '1';
          $arUpData['sp_recv_type'] = '0';
          $arUpData['sp_pay_type'] = '1';
          $arUpData['sp_expence_type'] = '0';
          $arUpData['sp_cost_type'] = '1';
          $arUpData['sp_cost_eva_qty'] = $localData['moed_unit_qty'] === '' ? 0 : $localData['moed_unit_qty'];
          $arUpData['sp_unit_price'] = $localData['moed_unit_price'];
          $arUpData['sp_type_01'] = '0';  // 棚卸締め
          $arUpData['sp_type_02'] = '';
          $arUpData['sp_type_03'] = '0';  // 元帳締め
          $arUpData['sp_type_04'] = $localData['moed_type_03'];
          $arUpData['sp_type_05'] = $localData['moed_type_06'];      // 国産材か外国産材か登録するように変更@20220912    '0';
          $arUpData['sp_update_at'] = $localData['moed_update_at'];
          $arUpData['sp_update_time'] = $updateTime;
          $arUpData['sp_update_cd'] = $localData['moed_update_cd'];
          $arUpData['sp_unit_tran'] = $localData['moed_unit_tran'];
          $arUpData['sp_type_subject'] = $localData['moed_type_subject'];
          $arUpData['sp_unit_eval'] = $localData['moed_unit_eval'];
          $arUpData['sp_stock_qty'] = $localData['moed_stock_qty'];
          $arUpData['sp_parrangement_cd'] = $localData['moed_parrangement_cd'];
          break;
        case 'PRODPLAN':
          if (preg_match('/^26/', $localData['pd_p_cd'])) {
            // 大分類26の製品は入出庫にかかわらないため除外する
            return;
          }
          $arUpData['sp_belong_cd'] = $localData['pd_belong_cd'];
          $arUpData['sp_month'] = '0000';
          $arUpData['sp_arrange_type'] = '210';   // 出来高
          $arUpData['sp_report_no'] = $localData['pd_prod_plan_no'];
          $arUpData['sp_sub_no_01'] = $localData['pd_prod_plan_sub_no'];
          $arUpData['sp_sub_no_02'] = $localData['pd_process_cd'];
          $arUpData['sp_update_cnt'] = 0;
          $arUpData['sp_report_date'] = $issueDate;
          $arUpData['sp_pjcd'] = $localData['pd_proj_cd'];
          $arUpData['sp_target_id'] = $localData['pd_prod_plan_no'];
          $arUpData['sp_place_cd'] = $localData['pd_place_cd'];  
          $arUpData['sp_product_cd'] = $localData['pd_p_cd'];
          $arUpData['sp_customer_post_cd'] = $localData['pd_e_customer_charge_cd'];
          $arUpData['sp_sub_01'] = $localData['pd_ed_sub_01'];
          $arUpData['sp_sub_02'] = $localData['pd_ed_sub_02'];
          $arUpData['sp_sub_03'] = $localData['pd_ed_sub_03'];
          $arUpData['sp_sub_04'] = $localData['pd_ed_sub_04'];
          $arUpData['sp_sub_05'] = $localData['pd_ed_sub_05'];
          $arUpData['sp_sub_06'] = $localData['pd_ed_sub_06'];
          $arUpData['sp_sub_08'] = is_numeric($localData['pd_ed_sub_08']) ? number_format($localData['pd_ed_sub_08'], 1, '.', '') : $localData['pd_ed_sub_08'];
          $arUpData['sp_sub_09'] = is_numeric($localData['pd_ed_sub_09']) ? number_format($localData['pd_ed_sub_09'], 1, '.', '') : $localData['pd_ed_sub_09'];
          $arUpData['sp_sub_10'] = $localData['pd_ed_sub_10'];   
          $arUpData['sp_sub_11'] = $localData['pd_ed_sub_11'];   
          $arUpData['sp_sub_12'] = is_numeric($localData['pd_ed_sub_12']) ? number_format($localData['pd_ed_sub_12'], 1, '.', '') : $localData['pd_ed_sub_12'];   
          $arUpData['sp_sub_13'] = is_numeric($localData['pd_ed_sub_13']) ? number_format($localData['pd_ed_sub_13'], 1, '.', '') : $localData['pd_ed_sub_13'];    
          $arUpData['sp_qty_trans'] = $localData['pd_ed_quantity'];
          $arUpData['sp_price_trans'] = $localData['pd_price'];   // 取引金額
          $arUpData['sp_inventory_type'] = $localData['ed_inventory_type'];
          $arUpData['sp_recv_type'] = '1';
          $arUpData['sp_pay_type'] = '0';
          $arUpData['sp_expence_type'] = '0';
          $arUpData['sp_cost_type'] = '0';
          $arUpData['sp_cost_eva_qty'] = $localData['pd_ed_quantity']; 
          $arUpData['sp_unit_price'] = $localData['pd_material_unit_cost'];
          $arUpData['sp_type_01'] = '0';  // 棚卸締め
          $arUpData['sp_type_02'] = '';  // 売掛金元帳
          $arUpData['sp_type_03'] = '';  // 元帳締め
          $arUpData['sp_type_04'] = $localData['pd_lotno'];  // 自社ロット
          $arUpData['sp_type_05'] = '0';
          $arUpData['sp_update_at'] = $localData['pd_update_at'];
          $arUpData['sp_update_time'] = $updateTime;
          $arUpData['sp_update_cd'] = $localData['pd_update_cd'];
          $arUpData['sp_unit_tran'] = $localData['pd_unit'];
          $arUpData['sp_parrangement_cd'] = '';
          break;

        case 'STATUSUPD':
          // ステータス変更。製造機能開発前までのデータを扱う用のコード
          if (preg_match('/^26/', $localData['ed_p_cd'])) {
            // 大分類26の製品は入出庫にかかわらないため除外する
            return;
          }
          $arUpData['sp_belong_cd'] = $localData['ed_belong_cd'];
          $arUpData['sp_month'] = '0000';
          $arUpData['sp_arrange_type'] = '510';   // 出庫予定品
          $arUpData['sp_report_no'] = $localData['ed_estimate_no'];
          $arUpData['sp_sub_no_01'] = $localData['ed_estimate_sub_no'];
          $arUpData['sp_sub_no_02'] = $localData['ed_shipment_sub_no'];
          $arUpData['sp_update_cnt'] = 0;
          $arUpData['sp_report_date'] = $issueDate;
          $arUpData['sp_pjcd'] = '';
          $arUpData['sp_target_id'] = $localData['ed_customer_cd'];
          $arUpData['sp_place_cd'] = $localData['ed_warehouse_cd'];  
          $arUpData['sp_customer_post_cd'] = $localData['ed_customer_post_cd'];
          $arUpData['sp_product_cd'] = $localData['ed_p_cd'];
          $arUpData['sp_sub_01'] = (float)$localData['ed_sub_01'];
          $arUpData['sp_sub_02'] = (float)$localData['ed_sub_02'];
          $arUpData['sp_sub_03'] = $localData['ed_sub_03'];
          $arUpData['sp_sub_04'] = (float)$localData['ed_sub_04'];
          $arUpData['sp_sub_05'] = (float)$localData['ed_sub_05'];
          $arUpData['sp_sub_06'] = $localData['ed_sub_06'];
          $arUpData['sp_sub_08'] = is_numeric($localData['ed_sub_08']) ? number_format($localData['ed_sub_08'], 1, '.', '') : $localData['ed_sub_08'];     // (float)$localData['ed_sub_08'];
          $arUpData['sp_sub_09'] = is_numeric($localData['ed_sub_09']) ? number_format($localData['ed_sub_09'], 1, '.', '') : $localData['ed_sub_09'];     // (float)$localData['ed_sub_09'];
          $arUpData['sp_sub_10'] = $localData['ed_sub_10'];   
          $arUpData['sp_sub_11'] = $localData['ed_sub_11'];   
          $arUpData['sp_sub_12'] = is_numeric($localData['ed_sub_12']) ? number_format($localData['ed_sub_12'], 1, '.', '') : $localData['ed_sub_12'];   
          $arUpData['sp_sub_13'] = is_numeric($localData['ed_sub_13']) ? number_format($localData['ed_sub_13'], 1, '.', '') : $localData['ed_sub_13'];  
          $arUpData['sp_qty_trans'] = $localData['ed_quantity'];
          $arUpData['sp_price_trans'] = $localData['ed_price'];
          $arUpData['sp_inventory_type'] = $localData['ed_inventory_type'];
          $arUpData['sp_recv_type'] = '1';
          $arUpData['sp_pay_type'] = '0';
          $arUpData['sp_expence_type'] = '0';
          $arUpData['sp_cost_type'] = '0';
          $arUpData['sp_cost_eva_qty'] = $localData['ed_quantity'];
          $arUpData['sp_unit_price'] = $localData['ed_cost'];
          $arUpData['sp_type_01'] = '0';  // 棚卸締め
          $arUpData['sp_type_02'] = '0';  // 売掛金元帳
          $arUpData['sp_type_03'] = '0';  // 元帳締め
          $arUpData['sp_type_04'] = $localData['ed_lot_no'];
          $arUpData['sp_type_05'] = '0';
          $arUpData['sp_update_at'] = $localData['ed_update_at'];
          $arUpData['sp_update_time'] = $updateTime;
          $arUpData['sp_update_cd'] = $localData['ed_update_cd'];
          $arUpData['sp_unit_tran'] = $localData['pd_unit'];
          $arUpData['sp_sub_07'] = $localData['ed_sub_07'];
          $arUpData['sp_parrangement_cd'] = $localData['ed_parrangement_cd'];
          break;
          case 'STPlanReceive':
            // 在庫引当新規登録/更新登録
            $arUpData['sp_belong_cd'] = $localData['stc_belong_cd'];
            $arUpData['sp_month'] = '0000';
            $arUpData['sp_arrange_type'] = '515';   // 出庫予定品　2023/2/21　「未受注引当」に変更
            $arUpData['sp_report_no'] = $localData['stc_report_no'];
            $arUpData['sp_sub_no_01'] = $localData['stc_sub_no_01'];
            $arUpData['sp_sub_no_02'] = $localData['stc_sub_no_02'];
            $arUpData['sp_update_cnt'] = 0;
            $arUpData['sp_report_date'] = $issueDate;
            $arUpData['sp_pjcd'] = '';
            $arUpData['sp_target_id'] = $localData['stc_target_id'];
            $arUpData['sp_place_cd'] = $localData['stc_place_cd'];  
            $arUpData['sp_customer_post_cd'] = $localData['stc_customer_post_cd'];
            $arUpData['sp_product_cd'] = $localData['stc_product_cd'];
            $arUpData['sp_sub_01'] = $localData['stc_sub_01'];
            $arUpData['sp_sub_02'] = $localData['stc_sub_02'];
            $arUpData['sp_sub_03'] = $localData['stc_sub_03'];
            $arUpData['sp_sub_04'] = $localData['stc_sub_04'];
            $arUpData['sp_sub_05'] = $localData['stc_sub_05'];
            $arUpData['sp_sub_06'] = $localData['stc_sub_06'];
            $arUpData['sp_sub_08'] = $localData['stc_sub_08'];   
            $arUpData['sp_sub_09'] = $localData['stc_sub_09'];
            $arUpData['sp_sub_10'] = $localData['stc_sub_10'];   
            $arUpData['sp_sub_11'] = $localData['stc_sub_11'];   
            $arUpData['sp_sub_12'] = $localData['stc_sub_12'];
            $arUpData['sp_sub_13'] = $localData['stc_sub_13'];
            $arUpData['sp_qty_trans'] = $localData['stc_qty_trans'];
            $arUpData['sp_price_trans'] = $localData['stc_price_trans'] ? $localData['stc_price_trans'] : 0;
            $arUpData['sp_inventory_type'] = '1';
            $arUpData['sp_recv_type'] = '0';
            $arUpData['sp_pay_type'] = '0';
            $arUpData['sp_expence_type'] = '0';
            $arUpData['sp_cost_type'] = '0';
            $arUpData['sp_cost_eva_qty'] = $localData['stc_qty_trans'];
            $arUpData['sp_unit_price'] = $localData['stc_unit_price'] ? $localData['stc_unit_price'] : 0;
            $arUpData['sp_type_01'] = '0';  // 棚卸締め
            $arUpData['sp_type_02'] = '0';  // 売掛金元帳
            $arUpData['sp_type_03'] = '0';  // 元帳締め
            $arUpData['sp_type_04'] = $localData['stc_type_04'];
            $arUpData['sp_type_05'] = '0';
            $arUpData['sp_update_at'] = $localData['stc_update_at'];
            $arUpData['sp_update_time'] = $localData['stc_update_time'];
            $arUpData['sp_update_cd'] = $localData['stc_update_cd'];
            $arUpData['sp_unit_tran'] = $localData['stc_unit_tran'];
            $arUpData['sp_unit_eval'] = $localData['stc_unit_eval'];
            $arUpData['sp_sub_07'] = $localData['stc_sub_07'];
            $arUpData['sp_parrangement_cd'] = $localData['stc_parrangement_cd'];
            break;
          case 'STPlanProduce':
            // 製造使用
            // 在庫引当新規登録/更新登録
            $arUpData['sp_belong_cd'] = $localData['stc_belong_cd'];
            $arUpData['sp_month'] = '0000';
            $arUpData['sp_arrange_type'] = $localData['stc_arrange_type'];
            $arUpData['sp_report_no'] = $localData['stc_report_no'];
            $arUpData['sp_sub_no_01'] = $localData['stc_sub_no_01'];
            $arUpData['sp_sub_no_02'] = $localData['stc_sub_no_02'];
            $arUpData['sp_update_cnt'] = 0;
            $arUpData['sp_report_date'] = $localData['stc_report_date'];
            $arUpData['sp_pjcd'] = '';
            $arUpData['sp_target_id'] = $localData['stc_target_id'];
            $arUpData['sp_place_cd'] = $localData['stc_place_cd'];  
            $arUpData['sp_customer_post_cd'] = $localData['stc_customer_post_cd'];
            $arUpData['sp_product_cd'] = $localData['stc_product_cd'];
            $arUpData['sp_sub_01'] = $localData['stc_sub_01'];
            $arUpData['sp_sub_02'] = $localData['stc_sub_02'];
            $arUpData['sp_sub_03'] = $localData['stc_sub_03'];
            $arUpData['sp_sub_04'] = $localData['stc_sub_04'];
            $arUpData['sp_sub_05'] = $localData['stc_sub_05'];
            $arUpData['sp_sub_06'] = $localData['stc_sub_06'];
            $arUpData['sp_sub_08'] = $localData['stc_sub_08'];   
            $arUpData['sp_sub_09'] = $localData['stc_sub_09'];
            $arUpData['sp_sub_10'] = $localData['stc_sub_10'];   
            $arUpData['sp_sub_11'] = $localData['stc_sub_11'];   
            $arUpData['sp_sub_12'] = $localData['stc_sub_12'];
            $arUpData['sp_sub_13'] = $localData['stc_sub_13'];
            $arUpData['sp_qty_trans'] = $localData['stc_qty_trans'];
            $arUpData['sp_price_trans'] = $localData['stc_price_trans'] ? $localData['stc_price_trans'] : 0;
            $arUpData['sp_inventory_type'] = '1';
            $arUpData['sp_recv_type'] = '0';
            $arUpData['sp_pay_type'] = '0';
            $arUpData['sp_expence_type'] = '0';
            $arUpData['sp_cost_type'] = '1';
            $arUpData['sp_cost_eva_qty'] = $localData['stc_qty_trans'];
            $arUpData['sp_unit_price'] = $localData['stc_unit_price'] ? $localData['stc_unit_price'] : 0;
            $arUpData['sp_type_01'] = '0';  // 棚卸締め
            $arUpData['sp_type_02'] = '0';  // 売掛金元帳
            $arUpData['sp_type_03'] = '0';  // 元帳締め
            $arUpData['sp_type_04'] = $localData['stc_type_04'];
            $arUpData['sp_type_05'] = '0';
            $arUpData['sp_update_at'] = $localData['stc_update_at'];
            $arUpData['sp_update_time'] = $localData['stc_update_time'];
            $arUpData['sp_update_cd'] = $localData['stc_update_cd'];
            $arUpData['sp_unit_tran'] = $localData['stc_unit_tran'];
            $arUpData['sp_unit_eval'] = $localData['stc_unit_eval'];
            $arUpData['sp_sub_07'] = $localData['stc_sub_07'];
            $arUpData['sp_parrangement_cd'] = $localData['stc_parrangement_cd'];
            break;
      }
      
      // 既存かどうか確認
      $sth = $dbh->prepare('
      SELECT * FROM stockplan
      WHERE sp_belong_cd = :BELONGCD AND 
      sp_month = "0000" AND 
      sp_arrange_type = :ARTYPE AND 
      sp_report_no = :REPORTNO AND 
      sp_sub_no_01 = :SUB01 AND 
      sp_sub_no_02 = :SUB02 AND 
      sp_update_cnt = :CNT
      ;');
      $sth->bindValue(':BELONGCD', $arUpData['sp_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue(':ARTYPE', $arUpData['sp_arrange_type'], PDO::PARAM_STR);
      $sth->bindValue(':REPORTNO', $arUpData['sp_report_no'], PDO::PARAM_STR);
      $sth->bindValue(':SUB01', $arUpData['sp_sub_no_01'], PDO::PARAM_STR);
      $sth->bindValue(':SUB02', $arUpData['sp_sub_no_02'], PDO::PARAM_STR);
      $sth->bindValue(':CNT', $arUpData['sp_update_cnt'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      if (count($result) > 0) {
        // 既存は更新。受払予定は最新のみ保持。各業務確定後、データ削除
        if ($delflg) {
          $sth = $dbh->prepare('
          DELETE FROM stockplan 
          WHERE sp_belong_cd = :BELONGCD AND 
          sp_month = "0000" AND 
          sp_arrange_type = :ARTYPE AND 
          sp_report_no = :REPORTNO AND 
          sp_sub_no_01 = :SUB01 AND 
          sp_sub_no_02 = :SUB02 AND 
          sp_update_cnt = :CNT
          ;');
          $sth->bindValue(':BELONGCD', $arUpData['sp_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':ARTYPE', $arUpData['sp_arrange_type'], PDO::PARAM_STR);
          $sth->bindValue(':REPORTNO', $arUpData['sp_report_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUB01', $arUpData['sp_sub_no_01'], PDO::PARAM_STR);
          $sth->bindValue(':SUB02', $arUpData['sp_sub_no_02'], PDO::PARAM_STR);
          $sth->bindValue(':CNT', $arUpData['sp_update_cnt'], PDO::PARAM_STR);
          $sth->execute();
        } else {
          $sth = $dbh->prepare(self::makeUpdateSQL('stockplan', $columnsH));
          self::bindValueToUpdate($sth, $columnsH, $arUpData);
          $sth->execute();
        }
      } else {
        // 新規データ
        $sth = $dbh->prepare(self::makeInsertSQL('stockplan', $columnsH));
        self::bindInsertKeys($sth, $columnsH, $arUpData);
        $sth->execute();
      }
    } catch (Exception $e) {
      throw $e;
    }
  }

  /**
   * 受払明細への登録
   * トランザクション処理は上位で行う。1レコード更新。
   * $process: 登録業務
   * $issuedate: 整理年月算出用
   * $localData: 更新用1レコードデータ
   * $dbh: DBアクセス
   */
  private static function issueStock($process, $issueDate, $dat, $dbh, $delFlg = false) {
    $arUpData = [];
    $updateTime = self::currentTime();    // 更新時刻
    $updateDate = self::currentDate();    // 更新日時
    $sthMonth = '';                       // 処理する月
    $delFactor = $delFlg === true ? (-1) : 1;
    $columnsH = self::getColumnDefs('stock');
    $shouldInsert = true;
    // $minusFlg = false;
    self::markAsHeaderPK($columnsH, 'stc_belong_cd');
    self::markAsHeaderPK($columnsH, 'stc_month');
    self::markAsHeaderPK($columnsH, 'stc_arrange_type');
    self::markAsHeaderPK($columnsH, 'stc_report_no');
    self::markAsHeaderPK($columnsH, 'stc_sub_no_01');
    self::markAsHeaderPK($columnsH, 'stc_sub_no_02');
    self::markAsHeaderPK($columnsH, 'stc_sub_no_03');
    self::markAsHeaderPK($columnsH, 'stc_sub_no_04');
    self::markAsHeaderPK($columnsH, 'stc_update_cnt');
    try {
      if ($issueDate === '') {
        throw new Exception('データが指定されていません。');
      }
      // 自社マスタから整理月取得
      $sth = $dbh->prepare('
      SELECT * FROM housecompany
      ;');
      $sth->execute();
      $housecompany = $sth->fetchAll(PDO::FETCH_ASSOC);

      // 該当整理年月取得
      if (self::checkNotSet($issueDate) === true) {
        // 空だったら、自社整理年月をセット
        $acDate = new DateTime($housecompany[0]['H_ACCONTING_MONTH'] . '01');
        $acDate->modify('+1 month');
        $strDate = $acDate->format('Y-m-d');
        $strDate = str_replace('-', '', $strDate);
        $strMonth = substr($strDate, 2, 4);
      } else if (substr($issueDate, 0, 6) <= $housecompany[0]['H_ACCONTING_MONTH']) {
        // 自社マスタの整理年月以前の場合,自社マスタの整理年月＋１でセット
        $acDate = new DateTime($housecompany[0]['H_ACCONTING_MONTH'] . '01');
        $acDate->modify('+1 month');
        $strDate = $acDate->format('Y-m-d');
        $strDate = str_replace('-', '', $strDate);
        $strMonth = substr($strDate, 2, 4);
      } else {
        // 該当業務の取引年月をセット
        $strMonth = substr($issueDate, 2, 4);
      }

      switch ($process) {
        case 'SD':
          // 納品確定
          // 納品確定においては、客先締日での整理年月とする。
          // 締日が納品日後なら、納品日の月。締日が納品日より前なら、納品日の翌月。
          $strDate = self::getCustomerFinalDay($issueDate, $dat['s_customer_cd'], $dbh);
          $strMonthCus = substr($strDate, 2, 4);
          // ただし、既に自社の売掛を締めている場合、前月分の処理にしたい場合は、締め戻しをしてもらう必要がある。
          if ($strMonth < $strMonthCus) {
            $strMonth = $strMonthCus;
          }
          $arUpData['stc_belong_cd'] = $dat['sd_belong_cd'];
          $arUpData['stc_month'] = $strMonth;
          $arUpData['stc_report_no'] = $dat['sd_e_estimate_no'];
          $arUpData['stc_sub_no_01'] = $dat['sd_statement_sub_no'];
          $arUpData['stc_sub_no_02'] = $dat['sd_estimate_sub_no'];
          $arUpData['stc_sub_no_03'] = $dat['sd_shipment_sub_no'];
          $arUpData['stc_sub_no_04'] = '000';
          $arUpData['stc_update_cnt'] = 0;  // 更新回数については、datainsert前に確認する
          if ($delFlg) {
            // データ取消時のレポート日
            // 既に締めたデータの取消時は、登録変更日をセット。
            if (substr($issueDate, 0, 6) <= $housecompany[0]['H_ACCONTING_MONTH']) {
              $arUpData['stc_report_date'] = self::currentDate();
            } else {
              $arUpData['stc_report_date'] = $issueDate;
            }
          } else {
            $arUpData['stc_report_date'] = $issueDate;
          }

          // 入力されたコード種別により書き込むデータを区分け
          if ($dat['sd_p_cd'] === '26002') {
            // 値引きの場合のみ、金銭授受のデータレコードとして処理
            $minusFlg = true;
            $arUpData['stc_arrange_type'] = '520'; 
            $arUpData['stc_target_id'] = $dat['s_customer_cd'];
            $arUpData['stc_place_cd'] = '';
            $arUpData['stc_customer_post_cd'] = '';
            $arUpData['stc_product_cd'] =  '00000000';
            $arUpData['stc_price_trans'] = $delFactor * $dat['sd_delivery_price'];         
            // $delFlg ? $dat['sd_delivery_price'] : ((-1) * $dat['sd_delivery_price']);
            $arUpData['stc_price_tax'] = $delFactor * $dat['sd_tax']; 
            // $delFlg ? $dat['sd_tax'] : ((-1)  * $dat['sd_tax']);
            $arUpData['stc_inventory_type'] = '0';    // 製品マスタからデータ取得　棚卸管理区分
            $arUpData['stc_recv_type'] = '1';
            $arUpData['stc_pay_type'] = '0';
            $arUpData['stc_expence_type'] = '0';
            $arUpData['stc_cost_type'] = '0';
            $arUpData['stc_type_01'] = '';
            $arUpData['stc_type_03'] = '1';
            $arUpData['stc_type_04'] = '0';    
            $arUpData['stc_type_05'] = '0';
            $arUpData['stc_update_at'] = $updateDate;
            $arUpData['stc_update_time'] = $updateTime;
            $arUpData['stc_update_cd'] = $dat['sd_update_cd'];

          } else {
            if ($dat['sd_p_cd'] === '26001' || $dat['sd_p_cd'] === '26004') {
              // 梱包料金 運送料金
              $arUpData['stc_arrange_type'] = '510';
            } else if ($dat['sd_qty_delivery'] < 0) {
              // 数量がマイナスの場合を返品とみなす
              // 返品だったら数量、金額が本来マイナスだが、正の値として登録
              $arUpData['stc_arrange_type'] = '519'; // 返品
            } else {
              $arUpData['stc_arrange_type'] = '510'; // 納品
            }
            $arUpData['stc_target_id'] = $dat['s_customer_cd'];
            $arUpData['stc_place_cd'] = $dat['ed_warehouse_cd'];
            $arUpData['stc_customer_post_cd'] = $dat['s_customer_post_cd'];
            $arUpData['stc_product_cd'] = $dat['sd_p_cd'];
            $arUpData['stc_sub_01'] = self::setNumberData($dat['ed_sub_01']);
            $arUpData['stc_sub_02'] = self::setNumberData($dat['ed_sub_02']);
            $arUpData['stc_sub_12'] = is_numeric($dat['ed_sub_12']) ? number_format($dat['ed_sub_12'], 1, '.', '') : $dat['ed_sub_12'];   
            $arUpData['stc_sub_13'] = is_numeric($dat['ed_sub_13']) ? number_format($dat['ed_sub_13'], 1, '.', '') : $dat['ed_sub_13'];  
            $arUpData['stc_sub_03'] = $dat['ed_sub_03'];
            $arUpData['stc_sub_04'] = self::setNumberData($dat['ed_sub_04']);
            $arUpData['stc_sub_05'] = self::setNumberData($dat['ed_sub_05']);
            $arUpData['stc_sub_06'] = $dat['ed_sub_06'];
            $arUpData['stc_sub_08'] = is_numeric($dat['ed_sub_08']) ? number_format($dat['ed_sub_08'], 1, '.', '') : $dat['ed_sub_08'];  
            $arUpData['stc_sub_10'] = $dat['ed_sub_10'];
            $arUpData['stc_sub_09'] = is_numeric($dat['ed_sub_09']) ? number_format($dat['ed_sub_09'], 1, '.', '') : $dat['ed_sub_09']; 
            $arUpData['stc_sub_11'] = $dat['ed_sub_11'];
            if ($arUpData['stc_arrange_type'] === '519') {
              // 返品データの場合
              $arUpData['stc_qty_trans'] = $delFactor * $dat['sd_qty_delivery'];
              // $dat['sd_qty_delivery'] > 0 ? ($delFactor * $dat['sd_qty_delivery']) : ($delFactor * (-1) * $dat['sd_qty_delivery']);
              $arUpData['stc_price_trans'] = $delFactor * $dat['sd_delivery_price'];
              // $dat['sd_delivery_price'] > 0 ? ($delFactor * $dat['sd_delivery_price']) : ($delFactor * (-1) * $dat['sd_delivery_price']);
              $arUpData['stc_price_tax'] = 0;
            } else {
              $arUpData['stc_qty_trans'] = $delFactor * $dat['sd_qty_delivery'];
              $arUpData['stc_price_trans'] = $delFactor * $dat['sd_delivery_price'];
              $arUpData['stc_price_tax'] = $delFactor * $dat['sd_tax'];
            }
            $arUpData['stc_inventory_type'] = '1';    // 製品マスタからデータ取得　棚卸管理区分
            $arUpData['stc_recv_type'] = '1';
            $arUpData['stc_pay_type'] = '0';
            $arUpData['stc_expence_type'] = '0';
            $arUpData['stc_cost_type'] = '0';
            $arUpData['stc_cost_eva_qty'] = $delFactor * $dat['sd_estimate_quantity'];
            $arUpData['stc_unit_price'] = $delFactor * $dat['sd_cost'];
            $arUpData['stc_type_01'] = '0';
            $arUpData['stc_type_03'] = '1';
            $arUpData['stc_type_04'] = $dat['sd_type_03'];    // 自社ロット
            $arUpData['stc_type_05'] = '0';
            $arUpData['stc_update_at'] = $updateDate;
            $arUpData['stc_update_time'] = $updateTime;
            $arUpData['stc_update_cd'] = $dat['sd_update_cd'];
            $arUpData['stc_unit_tran'] = $dat['sd_unit_tran'];
            $arUpData['stc_parrangement_cd'] = $dat['sd_parrangement_cd'];
            
          }
          
          break;

        case 'ACCEPTUP':
          // 検収登録　現データが渡されてくる
          $arUpData['stc_belong_cd'] = $dat['moed_belong_cd'];
          $arUpData['stc_month'] = $strMonth;
          $arUpData['stc_arrange_type'] = '110'; // 入荷
          $arUpData['stc_report_no'] = $dat['moed_order_no'];
          $arUpData['stc_sub_no_01'] = $dat['moed_sub_no'];
          $arUpData['stc_sub_no_02'] = $dat['moed_accept_sub_no'];
          $arUpData['stc_sub_no_03'] = '000';
          $arUpData['stc_sub_no_04'] = '000';
          $arUpData['stc_update_cnt'] = $dat['moed_update_cnt'];
          $arUpData['stc_report_date'] = $dat['moed_accept_date'];
          // $arUpData['stc_pjcd'] = $dat[''];
          $arUpData['stc_target_id'] = $dat['moed_customer_cd'];
          $arUpData['stc_place_cd'] = $dat['moed_customer_charge_cd'];  // 客先担当カラムだが保管場所CDが入ってる
          $arUpData['stc_customer_post_cd'] = $dat['moed_customer_post_cd'];
          $arUpData['stc_product_cd'] = $dat['moed_product_cd'];
          $arUpData['stc_sub_01'] = self::setNumberData($dat['moed_sub_01']);
          $arUpData['stc_sub_02'] = self::setNumberData($dat['moed_sub_02']);
          $arUpData['stc_sub_12'] = $dat['moed_sub_12'];
          $arUpData['stc_sub_13'] = $dat['moed_sub_13'] ? $dat['moed_sub_13'] : '';
          $arUpData['stc_sub_03'] = $dat['moed_sub_03'];
          $arUpData['stc_sub_04'] = self::setNumberData($dat['moed_sub_04']);
          $arUpData['stc_sub_05'] = self::setNumberData($dat['moed_sub_05']);
          $arUpData['stc_sub_06'] = $dat['moed_sub_06'];
          $arUpData['stc_sub_07'] = $dat['moed_sub_07'] ? $dat['moed_sub_07'] : '';
          $arUpData['stc_sub_08'] = $dat['moed_sub_08'] ? $dat['moed_sub_08'] : '';   
          $arUpData['stc_sub_10'] = $dat['moed_sub_10'];
          $arUpData['stc_sub_09'] = $dat['moed_sub_09'] ? $dat['moed_sub_09'] : '';   
          $arUpData['stc_sub_11'] = $dat['moed_sub_11'];
          $arUpData['stc_qty_trans'] = $dat['moed_quantity'];
          $arUpData['stc_price_trans'] = $dat['moed_money'];
          $arUpData['stc_price_tax'] = $dat['moed_money_tax'];
          $arUpData['stc_inventory_type'] = '1';
          $arUpData['stc_recv_type'] = '0';
          $arUpData['stc_pay_type'] = '0';
          $arUpData['stc_expence_type'] = '1';
          $arUpData['stc_cost_type'] = '1';
          $arUpData['stc_cost_eva_qty'] = $dat['moed_unit_qty'];
          $arUpData['stc_unit_price'] = $dat['moed_money'];     // 原価
          $arUpData['stc_type_01'] = '0';
          // $arUpData['stc_type_02'] = $dat[''];
          $arUpData['stc_type_03'] = '1';
          $arUpData['stc_type_04'] = $dat['moed_type_03'];
          $arUpData['stc_type_05'] = $dat['moed_type_06'];     // 国産材か外国材か登録するように変更@20220912　　'0';
          $arUpData['stc_update_at'] = $updateDate;
          $arUpData['stc_update_time'] = $updateTime;
          $arUpData['stc_update_cd'] = $dat['moed_update_cd'];
          $arUpData['stc_unit_tran'] = $dat['moed_unit_tran'];
          $arUpData['stc_type_subject'] = $dat['moed_type_subject'];
          // メーカーが入力されている場合、メーカーCDを設定 発注先データも保持
          $arUpData['stc_maker_cd'] = $dat['moed_customer_cd'] . $dat['moed_manufacture_cd'];
           
          $arUpData['stc_parrangement_cd'] = is_null($dat['moed_parrangement_cd']) || $dat['moed_parrangement_cd'] === '' ? '001' : $dat['moed_parrangement_cd'];

          if ($dat['moed_type_04'] === '2') {
            $shouldInsert = false;
          }
          break;
        case 'ACCEPTDEL':
          // 検収解除　旧データが渡されてくる
          $arUpData['stc_belong_cd'] = $dat['moed_belong_cd'];
          $arUpData['stc_month'] = $strMonth;
          $arUpData['stc_arrange_type'] = '110'; // 入荷
          $arUpData['stc_report_no'] = $dat['moed_order_no'];
          $arUpData['stc_sub_no_01'] = $dat['moed_sub_no'];
          $arUpData['stc_sub_no_02'] = $dat['moed_accept_sub_no'];
          $arUpData['stc_sub_no_03'] = '000';
          $arUpData['stc_sub_no_04'] = '000';
          $arUpData['stc_update_cnt'] = $dat['moed_update_cnt'];
          $arUpData['stc_report_date'] = $dat['moed_accept_date'];
          // $arUpData['stc_pjcd'] = $dat[''];
          $arUpData['stc_target_id'] = $dat['moed_customer_cd'];
          $arUpData['stc_place_cd'] = $dat['moed_customer_charge_cd'];  // 客先担当カラムだが保管場所CDが入ってる
          $arUpData['stc_customer_post_cd'] = $dat['moed_customer_post_cd'];
          $arUpData['stc_product_cd'] = $dat['moed_product_cd'];
          $arUpData['stc_sub_01'] = self::setNumberData($dat['moed_sub_01']);
          $arUpData['stc_sub_02'] = self::setNumberData($dat['moed_sub_02']);
          $arUpData['stc_sub_12'] = $dat['moed_sub_12'];
          $arUpData['stc_sub_13'] = $dat['moed_sub_13'] ? $dat['moed_sub_13'] : '';
          $arUpData['stc_sub_03'] = $dat['moed_sub_03'];
          $arUpData['stc_sub_04'] = self::setNumberData($dat['moed_sub_04']);
          $arUpData['stc_sub_05'] = self::setNumberData($dat['moed_sub_05']);
          $arUpData['stc_sub_06'] = $dat['moed_sub_06'];
          $arUpData['stc_sub_07'] = $dat['moed_sub_07'] ? $dat['moed_sub_07'] : '';
          $arUpData['stc_sub_08'] = $dat['moed_sub_08'] ? $dat['moed_sub_08'] : '';    // self::setNumberData($dat['moed_sub_08']);
          $arUpData['stc_sub_10'] = $dat['moed_sub_10'];
          $arUpData['stc_sub_09'] = $dat['moed_sub_09'] ? $dat['moed_sub_09'] : '';    // self::setNumberData($dat['moed_sub_09']);
          $arUpData['stc_sub_11'] = $dat['moed_sub_11'];
          $arUpData['stc_qty_trans'] = (-1) * $dat['moed_quantity'];
          $arUpData['stc_price_trans'] = (-1) * $dat['moed_money'];
          $arUpData['stc_price_tax'] = (-1) * $dat['moed_money_tax'];
          $arUpData['stc_inventory_type'] = '1';
          $arUpData['stc_recv_type'] = '0';
          $arUpData['stc_pay_type'] = '0';
          $arUpData['stc_expence_type'] = '1';
          $arUpData['stc_cost_type'] = '1';
          $arUpData['stc_cost_eva_qty'] = $dat['moed_unit_qty'];
          $arUpData['stc_unit_price'] = $dat['moed_money'];     //  $dat['moed_unit_price'];
          $arUpData['stc_type_01'] = '0';
          // $arUpData['stc_type_02'] = $dat[''];
          $arUpData['stc_type_03'] = '1';
          $arUpData['stc_type_04'] = $dat['moed_type_03'];
          $arUpData['stc_type_05'] = $dat['moed_type_06'];     // 国産材か外国材か登録するように変更@20220912　　'0';
          $arUpData['stc_update_at'] = $updateDate;
          $arUpData['stc_update_time'] = $updateTime;
          $arUpData['stc_update_cd'] = $dat['moed_update_cd'];
          $arUpData['stc_unit_tran'] = $dat['moed_unit_tran'];
          $arUpData['stc_type_subject'] = $dat['moed_type_subject'];
          // メーカーが入力されている場合、メーカーCDを設定 
          $arUpData['stc_maker_cd'] = $dat['moed_customer_cd'] . $dat['moed_manufacture_cd'];
          $arUpData['stc_parrangement_cd'] = is_null($dat['moed_parrangement_cd']) || $dat['moed_parrangement_cd'] === '' ? '001' : $dat['moed_parrangement_cd'];
          
          if ($dat['moed_type_04'] === '2') {
            $shouldInsert = false;
          }
          break;
        case 'MOD':
          // 材料発注
          $arUpData['stc_pay_type'] = '1';
          $arUpData['stc_expence_type'] = '0';
          $arUpData['stc_belong_cd'] = $dat['moed_belong_cd'];
          $arUpData['stc_month'] = $strMonth;
          // if ($dat['moed_money'] <= 0) {
          //   $arUpData['stc_arrange_type'] = '111'; // 無償入荷
          // } else {
          $arUpData['stc_arrange_type'] = '110'; // 入荷
          // }
          $arUpData['stc_report_no'] = $dat['moed_order_no'];
          $arUpData['stc_sub_no_01'] = $dat['moed_sub_no'];
          $arUpData['stc_sub_no_02'] = $dat['moed_accept_sub_no'];
          $arUpData['stc_sub_no_03'] = '000';
          $arUpData['stc_sub_no_04'] = '000';
          $arUpData['stc_update_cnt'] = $dat['moed_update_cnt'];
          $arUpData['stc_report_date'] = $dat['moed_accept_date'];
          // $arUpData['stc_pjcd'] = $dat[''];
          $arUpData['stc_target_id'] = $dat['moed_customer_cd'];
          $arUpData['stc_place_cd'] = $dat['moed_customer_charge_cd'];
          $arUpData['stc_customer_post_cd'] = $dat['moed_customer_post_cd'];
          $arUpData['stc_product_cd'] = $dat['moed_product_cd'];
          $arUpData['stc_sub_01'] = self::setNumberData($dat['moed_sub_01']);
          $arUpData['stc_sub_02'] = self::setNumberData($dat['moed_sub_02']);
          $arUpData['stc_sub_12'] = $dat['moed_sub_12'];
          $arUpData['stc_sub_13'] = $dat['moed_sub_13'] ? $dat['moed_sub_13'] : '';
          $arUpData['stc_sub_03'] = $dat['moed_sub_03'];
          $arUpData['stc_sub_04'] = self::setNumberData($dat['moed_sub_04']);
          $arUpData['stc_sub_05'] = self::setNumberData($dat['moed_sub_05']);
          $arUpData['stc_sub_06'] = $dat['moed_sub_06'];
          $arUpData['stc_sub_08'] = $dat['moed_sub_08'] ? $dat['moed_sub_08'] : '';      // self::setNumberData($dat['moed_sub_08']);
          $arUpData['stc_sub_10'] = $dat['moed_sub_10'];
          $arUpData['stc_sub_09'] = $dat['moed_sub_09'] ? $dat['moed_sub_09'] : '';      // self::setNumberData($dat['moed_sub_09']);
          $arUpData['stc_sub_11'] = $dat['moed_sub_11'];
          $arUpData['stc_qty_trans'] = $dat['moed_quantity'];
          $arUpData['stc_price_trans'] = $dat['moed_money'];
          $arUpData['stc_price_tax'] = $dat['moed_money_tax'];
          $arUpData['stc_inventory_type'] = '1';
          $arUpData['stc_recv_type'] = '0';
          $arUpData['stc_cost_type'] = '1';
          $arUpData['stc_cost_eva_qty'] = $dat['moed_unit_qty'];
          $arUpData['stc_unit_price'] =  $dat['moed_money'];     // $dat['moed_unit_price'];
          $arUpData['stc_type_01'] = '0';
          // $arUpData['stc_type_02'] = $dat[''];
          $arUpData['stc_type_03'] = '1';
          $arUpData['stc_type_04'] = $dat['moed_type_03'];
          $arUpData['stc_type_05'] = $dat['moed_type_06'];     // 国産材か外国材か登録するように変更@20220912　　'0';
          $arUpData['stc_update_at'] = $updateDate;
          $arUpData['stc_update_time'] = $updateTime;
          $arUpData['stc_update_cd'] = $dat['moed_update_cd'];
          $arUpData['stc_unit_tran'] = $dat['moed_unit_tran'];
          $arUpData['stc_type_subject'] = $dat['moed_type_subject'];
          // メーカーが入力されている場合、メーカーCDを設定
          $arUpData['stc_maker_cd'] = $dat['moed_customer_cd'] . $dat['moed_manufacture_cd'];

          $arUpData['stc_parrangement_cd'] = self::checkNotSet($dat['moed_parrangement_cd']) ? '001' : $dat['moed_parrangement_cd'];
          break;
        case 'OOD':
          // 外注委託
          $arUpData['stc_pay_type'] = '0';
          $arUpData['stc_expence_type'] = '1';
          // 発注は共通部分はこのブロックを使用。注意。
          $arUpData['stc_belong_cd'] = $dat['moed_belong_cd'];
          $arUpData['stc_month'] = $strMonth;
          $arUpData['stc_arrange_type'] = '110'; // 入荷
          $arUpData['stc_report_no'] = $dat['moed_order_no'];
          $arUpData['stc_sub_no_01'] = $dat['moed_sub_no'];
          $arUpData['stc_sub_no_02'] = $dat['moed_accept_sub_no'];
          $arUpData['stc_sub_no_03'] = '000';
          $arUpData['stc_sub_no_04'] = '000';
          $arUpData['stc_update_cnt'] = $dat['moed_update_cnt'];
          $arUpData['stc_report_date'] = $dat['moed_accept_date'];
          // $arUpData['stc_pjcd'] = $dat[''];
          $arUpData['stc_target_id'] = $dat['moed_customer_cd'];
          $arUpData['stc_place_cd'] = $dat['moed_customer_charge_cd'];
          $arUpData['stc_customer_post_cd'] = $dat['moed_customer_post_cd'];
          $arUpData['stc_product_cd'] = $dat['moed_product_cd'];
          $arUpData['stc_sub_01'] = self::setNumberData($dat['moed_sub_01']);
          $arUpData['stc_sub_02'] = self::setNumberData($dat['moed_sub_02']);
          $arUpData['stc_sub_12'] = $dat['moed_sub_12'];
          $arUpData['stc_sub_13'] = $dat['moed_sub_13'] ? $dat['moed_sub_13'] : '';
          $arUpData['stc_sub_03'] = $dat['moed_sub_03'];
          $arUpData['stc_sub_04'] = self::setNumberData($dat['moed_sub_04']);
          $arUpData['stc_sub_05'] = self::setNumberData($dat['moed_sub_05']);
          $arUpData['stc_sub_06'] = $dat['moed_sub_06'];
          $arUpData['stc_sub_08'] = $dat['moed_sub_08'] ? $dat['moed_sub_08'] : '';    // self::setNumberData($dat['moed_sub_08']);
          $arUpData['stc_sub_10'] = $dat['moed_sub_10'];
          $arUpData['stc_sub_09'] = $dat['moed_sub_09'] ? $dat['moed_sub_09'] : '';     // self::setNumberData($dat['moed_sub_09']);
          $arUpData['stc_sub_11'] = $dat['moed_sub_11'];
          $arUpData['stc_qty_trans'] = $dat['moed_quantity'];
          $arUpData['stc_price_trans'] = $dat['moed_money'];
          $arUpData['stc_price_tax'] = $dat['moed_money_tax'];
          $arUpData['stc_inventory_type'] = '1';
          $arUpData['stc_recv_type'] = '0';
          $arUpData['stc_cost_type'] = '1';
          $arUpData['stc_cost_eva_qty'] = $dat['moed_unit_qty'];
          $arUpData['stc_unit_price'] =  $dat['moed_money'];     // $dat['moed_unit_price'];
          $arUpData['stc_type_01'] = '0';
          // $arUpData['stc_type_02'] = $dat[''];
          $arUpData['stc_type_03'] = '1';
          $arUpData['stc_type_04'] = $dat['moed_type_03'];
          $arUpData['stc_type_05'] = $dat['moed_type_06'];     // 国産材か外国材か登録するように変更@20220912　　'0';
          $arUpData['stc_update_at'] = $updateDate;
          $arUpData['stc_update_time'] = $updateTime;
          $arUpData['stc_update_cd'] = $dat['moed_update_cd'];
          $arUpData['stc_unit_tran'] = $dat['moed_unit_tran'];
          $arUpData['stc_type_subject'] = $dat['moed_type_subject'];
          $arUpData['stc_maker_cd'] = '';
          $arUpData['stc_parrangement_cd'] = self::checkNotSet($dat['moed_parrangement_cd']) ? '001' : $dat['moed_parrangement_cd'];
          break;
        case 'STOCK':
          // 材料発注
          // 入出庫データの連番取得
          $maxno = 0;
          $sth = $dbh->prepare('
          SELECT *,MAX(stc_report_no) AS maxno FROM stock
          WHERE stc_report_no LIKE :STOCKDATE
          ;');
          $sth->bindValue(':STOCKDATE', 'U' . substr($issueDate, 2, 6) . '%', PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (self::checkNotSet($result[0]['maxno']) === false) {
            // 指定日の伝票番号あったらmaxnoにセット
            $maxno = substr($result[0]['maxno'], 8, 3);
            $maxno = (int)$maxno;
          }
          // 連番設定          
          $serialNo = sprintf('%03d', (int)$maxno + 1);

          $arUpData['stc_belong_cd'] = $dat['moed_belong_cd'];
          $arUpData['stc_month'] = $strMonth;
          $arUpData['stc_arrange_type'] = '410'; // 倉庫入庫
          $arUpData['stc_report_no'] = 'U' . substr($issueDate, 2, 6) . $serialNo;
          $arUpData['stc_sub_no_01'] = $dat['moed_sub_no'];
          $arUpData['stc_sub_no_02'] = $dat['moed_accept_sub_no'];
          $arUpData['stc_sub_no_03'] = '000';
          $arUpData['stc_sub_no_04'] = '000';
          $arUpData['stc_update_cnt'] = $dat['moed_update_cnt'];
          $arUpData['stc_report_date'] = $issueDate;
          // $arUpData['stc_pjcd'] = $dat[''];
          $arUpData['stc_target_id'] = '';  // 保管移動先  
          $arUpData['stc_place_cd'] = $dat['moed_customer_charge_cd'];  // 保管場所
          $arUpData['stc_customer_post_cd'] = '';   // 発注データの客先部署は該当カラム無し
          $arUpData['stc_product_cd'] = $dat['moed_product_cd'];
          $arUpData['stc_sub_01'] = self::setNumberData($dat['moed_sub_01']);
          $arUpData['stc_sub_02'] = self::setNumberData($dat['moed_sub_02']);
          $arUpData['stc_sub_03'] = $dat['moed_sub_03'];
          $arUpData['stc_sub_04'] = self::setNumberData($dat['moed_sub_04']);
          $arUpData['stc_sub_05'] = self::setNumberData($dat['moed_sub_05']);
          $arUpData['stc_sub_06'] = $dat['moed_sub_06'];
          $arUpData['stc_sub_08'] = $dat['moed_sub_08'];      // self::setNumberData($dat['moed_sub_08']);
          $arUpData['stc_sub_09'] = $dat['moed_sub_09'];      // self::setNumberData($dat['moed_sub_09']);
          $arUpData['stc_sub_10'] = $dat['moed_sub_10'];
          $arUpData['stc_sub_11'] = $dat['moed_sub_11'];
          $arUpData['stc_sub_12'] = $dat['moed_sub_12'];
          $arUpData['stc_sub_13'] = $dat['moed_sub_13'];
          $arUpData['stc_qty_trans'] = $dat['moed_quantity'];
          $arUpData['stc_price_trans'] = $dat['moed_money'];
          $arUpData['stc_price_tax'] = $dat['moed_money_tax'];
          $arUpData['stc_inventory_type'] = '1';
          $arUpData['stc_recv_type'] = '0';
          $arUpData['stc_pay_type'] = '0';
          $arUpData['stc_expence_type'] = '0';
          $arUpData['stc_cost_type'] = '1';
          $arUpData['stc_cost_eva_qty'] = $dat['moed_unit_qty'];
          $arUpData['stc_unit_price'] =  $dat['moed_money'];     // $dat['moed_unit_price'];
          $arUpData['stc_type_01'] = '0';
          $arUpData['stc_type_02'] = '0';
          $arUpData['stc_type_03'] = '1';
          $arUpData['stc_type_04'] = $dat['moed_type_03'];
          $arUpData['stc_type_05'] = '0';
          $arUpData['stc_update_at'] = $updateDate;
          $arUpData['stc_update_time'] = $updateTime;
          $arUpData['stc_update_cd'] = $dat['moed_update_cd'];
          $arUpData['stc_unit_tran'] = $dat['moed_unit_tran'];
          $arUpData['stc_type_subject'] = $dat['moed_type_subject'];
          // メーカーが入力されている場合、メーカーCDを設定
          $arUpData['stc_maker_cd'] = $dat['moed_customer_cd'] . $dat['moed_manufacture_cd'];
          $arUpData['stc_parrangement_cd'] = is_null($dat['moed_parrangement_cd']) || $dat['moed_parrangement_cd'] === '' ? '001' : $dat['moed_parrangement_cd'];
          break;
        case 'STOREDAFTERACCEPT':
          // 検収後入庫データ登録の場合、先にデータ確認。検収時1レコードだったものが複数レコードに更新された場合が下記
          $sth = $dbh->prepare('
          SELECT * FROM stock
          WHERE stc_belong_cd = :BELONGCD 
           AND stc_month = :MONTH
           AND stc_arrange_type = :ARRANGETYPE
           AND stc_report_no = :REPORTNO
           AND stc_sub_no_01 = :SUB01
           AND stc_sub_no_02 = :SUB02
           AND stc_sub_no_03 = :SUB03
           AND stc_sub_no_04 = :SUB04 
           AND stc_update_cnt = (SELECT MAX(stc_update_cnt) FROM stock 
           WHERE stc_belong_cd = :WBELONGCD 
           AND stc_month = :WMONTH
           AND stc_arrange_type = :WARRANGETYPE
           AND stc_report_no = :WREPORTNO
           AND stc_sub_no_01 = :WSUB01
           AND stc_sub_no_02 = :WSUB02
           AND stc_sub_no_03 = :WSUB03
           AND stc_sub_no_04 = :WSUB04 )      
          ;');
          $sth->bindValue(':BELONGCD', $dat['moed_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':MONTH', substr($dat['moed_accept_date'], 2, 4),PDO::PARAM_STR);
          $sth->bindValue(':ARRANGETYPE', '110', PDO::PARAM_STR);
          $sth->bindValue(':REPORTNO', $dat['moed_order_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUB01', $dat['moed_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUB02', $dat['moed_accept_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUB03', '000', PDO::PARAM_STR);
          $sth->bindValue(':SUB04', '000', PDO::PARAM_STR);
          $sth->bindValue(':WBELONGCD', $dat['moed_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':WMONTH', substr($dat['moed_accept_date'], 2, 4), PDO::PARAM_STR);
          $sth->bindValue(':WARRANGETYPE', '110', PDO::PARAM_STR);
          $sth->bindValue(':WREPORTNO', $dat['moed_order_no'], PDO::PARAM_STR);
          $sth->bindValue(':WSUB01', $dat['moed_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':WSUB02', $dat['moed_accept_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':WSUB03', '000', PDO::PARAM_STR);
          $sth->bindValue(':WSUB04', '000', PDO::PARAM_STR);
          $sth->execute();

          $result = $sth->fetchAll(PDO::FETCH_ASSOC);

          if ($result[0]['stc_month'] !== substr($issueDate, 2, 4)) {
            // 整理年月が異なる場合は、該当行削除
            $sth = $dbh->prepare('
            DELETE FROM stock
            WHERE stc_belong_cd = :WBELONGCD 
            AND stc_month = :WMONTH
            AND stc_arrange_type = :WARRANGETYPE
            AND stc_report_no = :WREPORTNO
            AND stc_sub_no_01 = :WSUB01
            AND stc_sub_no_02 = :WSUB02
            AND stc_sub_no_03 = :WSUB03
            AND stc_sub_no_04 = :WSUB04
            ;');
            $sth->bindValue(':WBELONGCD', $dat['moed_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':WMONTH', $result[0]['stc_month'],PDO::PARAM_STR);
            $sth->bindValue(':WARRANGETYPE', '110', PDO::PARAM_STR);
            $sth->bindValue(':WREPORTNO', $dat['moed_order_no'], PDO::PARAM_STR);
            $sth->bindValue(':WSUB01', $dat['moed_sub_no'], PDO::PARAM_STR);
            $sth->bindValue(':WSUB02', $dat['moed_accept_sub_no'], PDO::PARAM_STR);
            $sth->bindValue(':WSUB03', '000', PDO::PARAM_STR);
            $sth->bindValue(':WSUB04', '000', PDO::PARAM_STR);
            $sth->execute();

            $dat['moed_accept_date'] = $issueDate;
            self::issueStock('ACCEPTUP', $issueDate, $dat, $dbh);
          } else if (count($result) > 0) {
            // 資産管理を行うためには、各レコード毎の金額管理が必要なので、更新をかける
            $sth = $dbh->prepare('
            UPDATE stock
            SET stc_report_date = :REPORTDATE
            ,stc_sub_01 = :SUB01 
            ,stc_sub_02 = :SUB02 
            ,stc_sub_03 = :SUB03
            ,stc_sub_04 = :SUB04
            ,stc_sub_05 = :SUB05
            ,stc_sub_06 = :SUB06
            ,stc_sub_07 = :SUB07
            ,stc_sub_08 = :SUB08
            ,stc_sub_09 = :SUB09
            ,stc_sub_10 = :SUB10
            ,stc_sub_11 = :SUB11
            ,stc_sub_12 = :SUB12
            ,stc_sub_13 = :SUB13
            ,stc_qty_trans = :QTY
            ,stc_price_trans = :PRICETRAN
            ,stc_price_tax = :TAX
            ,stc_cost_eva_qty = :COST
            ,stc_unit_price = :UNITPRICE
            ,stc_update_at = :UPDATEDATE
            ,stc_update_cd = :UPDATECD
            ,stc_update_time = :UPDATETIME
            WHERE stc_belong_cd = :BELONGCD 
            AND stc_month = :MONTH
            AND stc_arrange_type = :ARRANGETYPE
            AND stc_report_no = :REPORTNO
            AND stc_sub_no_01 = :SUBNO1
            AND stc_sub_no_02 = :SUBNO2
            AND stc_sub_no_03 = :SUBNO3
            AND stc_sub_no_04 = :SUBNO4 
            AND stc_update_cnt = :UPDCNT    
            ;');
            $sth->bindValue(':REPORTDATE', $issueDate, PDO::PARAM_STR);
            $sth->bindValue(':SUB01', self::setNumberData($dat['moed_sub_01']), PDO::PARAM_STR);
            $sth->bindValue(':SUB02', self::setNumberData($dat['moed_sub_02']), PDO::PARAM_STR);
            $sth->bindValue(':SUB03', $dat['moed_sub_03'], PDO::PARAM_STR);
            $sth->bindValue(':SUB04', self::setNumberData($dat['moed_sub_04']), PDO::PARAM_STR);
            $sth->bindValue(':SUB05', self::setNumberData($dat['moed_sub_05']), PDO::PARAM_STR);
            $sth->bindValue(':SUB06', $dat['moed_sub_06'], PDO::PARAM_STR);
            $sth->bindValue(':SUB07', $dat['moed_sub_07'] ? $dat['moed_sub_07'] : '', PDO::PARAM_STR);
            $sth->bindValue(':SUB08', $dat['moed_sub_08'] ? $dat['moed_sub_08'] : '', PDO::PARAM_STR);
            $sth->bindValue(':SUB09', $dat['moed_sub_09'] ? $dat['moed_sub_09'] : '', PDO::PARAM_STR);
            $sth->bindValue(':SUB10', $dat['moed_sub_10'], PDO::PARAM_STR);
            $sth->bindValue(':SUB11', $dat['moed_sub_11'], PDO::PARAM_STR);
            $sth->bindValue(':SUB12', $dat['moed_sub_12'], PDO::PARAM_STR);
            $sth->bindValue(':SUB13', $dat['moed_sub_13'] ? $dat['moed_sub_13'] : '', PDO::PARAM_STR);
            $sth->bindValue(':QTY', (float)$dat['moed_quantity'], PDO::PARAM_INT);
            $sth->bindValue(':PRICETRAN', (int)$dat['moed_money'], PDO::PARAM_INT);
            $sth->bindValue(':TAX', (int)$dat['moed_money_tax'], PDO::PARAM_INT);
            $sth->bindValue(':COST', (float)$dat['moed_unit_qty'], PDO::PARAM_INT);
            $sth->bindValue(':UNITPRICE', (int)$dat['moed_money'], PDO::PARAM_INT);
            $sth->bindValue(':TYPEMANUFACTURE', $dat['moed_type_06'], PDO::PARAM_INT);
            $sth->bindValue(':UPDATEDATE', $updateDate, PDO::PARAM_STR);
            $sth->bindValue(':UPDATECD', $_SESSION['usercd'], PDO::PARAM_STR);
            $sth->bindValue(':UPDATETIME', $updateTime, PDO::PARAM_STR);
            $sth->bindValue(':BELONGCD', $dat['moed_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':MONTH', $strMonth,PDO::PARAM_STR);
            $sth->bindValue(':ARRANGETYPE', '110', PDO::PARAM_STR);
            $sth->bindValue(':REPORTNO', $dat['moed_order_no'], PDO::PARAM_STR);
            $sth->bindValue(':SUBNO1', $dat['moed_sub_no'], PDO::PARAM_STR);
            $sth->bindValue(':SUBNO2', $dat['moed_accept_sub_no'], PDO::PARAM_STR);
            $sth->bindValue(':SUBNO3', '000', PDO::PARAM_STR);
            $sth->bindValue(':SUBNO4', '000', PDO::PARAM_STR);
            $sth->bindValue(':UPDCNT', $result[0]['stc_update_cnt'], PDO::PARAM_STR);
            $sth->execute();
          } else {
            // 入庫時、行分割がされた場合はINSERT処理
            self::issueStock('ACCEPTUP', $issueDate, $dat, $dbh);
          }
          $shouldInsert = false;
          break;
          case 'STPLANPROD':
            // 製造完了時
            $arUpData['stc_belong_cd'] = $dat['stc_belong_cd'];
            $arUpData['stc_month'] = $strMonth;
            $arUpData['stc_arrange_type'] = $dat['stc_arrange_type'];
            $arUpData['stc_report_no'] = $dat['stc_report_no'];
            if ($dat['stc_arrange_type'] === '210' || $dat['stc_arrange_type'] === '211') {
              $arUpData['stc_sub_no_01'] = $dat['stc_sub_no_01'];
              $arUpData['stc_sub_no_02'] = $dat['stc_sub_no_02'];
              $arUpData['stc_sub_no_03'] = $dat['stc_belong_cd'];
              $arUpData['stc_sub_no_04'] = '000';
            } else {
              $arUpData['stc_sub_no_01'] = '0000';
              $arUpData['stc_sub_no_02'] = $dat['stc_sub_no_02'];
              $arUpData['stc_sub_no_03'] = $dat['stc_belong_cd'];
              $arUpData['stc_sub_no_04'] = '000';
            }
            $arUpData['stc_update_cnt'] = 0;
            $arUpData['stc_report_date'] = $dat['stc_report_date'];
            $arUpData['stc_pjcd'] = '';
            $arUpData['stc_target_id'] = $dat['stc_target_id'];
            $arUpData['stc_place_cd'] = $dat['stc_place_cd'];
            $arUpData['stc_customer_post_cd'] = $dat['stc_customer_post_cd'];
            $arUpData['stc_product_cd'] = $dat['stc_product_cd'];
            $arUpData['stc_sub_01'] = $dat['stc_sub_01'];
            $arUpData['stc_sub_02'] = $dat['stc_sub_02'];
            $arUpData['stc_sub_03'] = $dat['stc_sub_03'];
            $arUpData['stc_sub_04'] = $dat['stc_sub_04'];
            $arUpData['stc_sub_05'] = $dat['stc_sub_05'];
            $arUpData['stc_sub_06'] = $dat['stc_sub_06'];
            $arUpData['stc_sub_07'] = $dat['stc_sub_07'];
            $arUpData['stc_sub_08'] = $dat['stc_sub_08'];
            $arUpData['stc_sub_09'] = $dat['stc_sub_09'];
            $arUpData['stc_sub_10'] = $dat['stc_sub_10'];
            $arUpData['stc_sub_11'] = $dat['stc_sub_11'];
            $arUpData['stc_sub_12'] = $dat['stc_sub_12'];
            $arUpData['stc_sub_13'] = $dat['stc_sub_13'];
            $arUpData['stc_qty_trans'] = $dat['stc_qty_trans'];
            $arUpData['stc_price_trans'] = $dat['stc_price_trans'];
            $arUpData['stc_price_tax'] = $dat['stc_price_tax'];
            $arUpData['stc_inventory_type'] = '1';
            $arUpData['stc_recv_type'] = '0';
            $arUpData['stc_pay_type'] = '0';
            $arUpData['stc_expence_type'] = '0';
            $arUpData['stc_cost_type'] = '1';
            $arUpData['stc_cost_eva_qty'] = $dat['stc_cost_eva_qty'];
            $arUpData['stc_unit_price'] = $dat['stc_unit_price'];
            $arUpData['stc_type_01'] = '1';
            // $arUpData['stc_type_02'] = $dat['stc_type_02'];  // null
            // $arUpData['stc_type_03'] = $dat['stc_type_03'];  // null
            $arUpData['stc_type_04'] = $dat['stc_type_04'];
            $arUpData['stc_type_05'] = '0';
            $arUpData['stc_update_at'] = $dat['stc_update_at'];
            $arUpData['stc_update_time'] = $dat['stc_update_time'];
            $arUpData['stc_update_cd'] = $dat['stc_update_cd'];
            $arUpData['stc_unit_tran'] = $dat['stc_unit_tran'];
            $arUpData['stc_type_subject'] = $dat['stc_type_subject'];
            $arUpData['stc_parrangement_cd'] = $dat['stc_parrangement_cd'];
            $arUpData['stc_maker_cd'] = $dat['stc_maker_cd'];
  
            $shouldInsert = true;
            break;
      }
      // 登録前のチェック
      if (!isset($arUpData['stc_sub_01']) || $arUpData['stc_sub_01'] === '') {
        $arUpData['stc_sub_01'] = 0;
      }
      if (!isset($arUpData['stc_sub_02']) || $arUpData['stc_sub_01'] === '') {
        $arUpData['stc_sub_02'] = 0;
      }
      if (!isset($arUpData['stc_sub_04']) || $arUpData['stc_sub_01'] === '') {
        $arUpData['stc_sub_04'] = 0;
      }
      if (!isset($arUpData['stc_sub_05']) || $arUpData['stc_sub_01'] === '') {
        $arUpData['stc_sub_05'] = 0;
      }

      
      if ($shouldInsert) {
        // 既存かどうか
        $sth = $dbh->prepare('
        SELECT MAX(stc_update_cnt) AS maxno FROM stock
        WHERE stc_month = :MONTH AND 
        stc_arrange_type = :TYPE AND
        stc_report_no = :REPNO AND 
        stc_sub_no_01 = :SUB1 AND 
        stc_sub_no_02 = :SUB2 AND 
        stc_sub_no_03 = :SUB3 AND 
        stc_sub_no_04 = :SUB4
        ;');
        $sth->bindValue(':MONTH', $arUpData['stc_month'], PDO::PARAM_STR);
        $sth->bindValue(':TYPE', $arUpData['stc_arrange_type'], PDO::PARAM_STR);
        $sth->bindValue(':REPNO', $arUpData['stc_report_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUB1', $arUpData['stc_sub_no_01'], PDO::PARAM_STR);
        $sth->bindValue(':SUB2', $arUpData['stc_sub_no_02'], PDO::PARAM_STR);
        $sth->bindValue(':SUB3', $arUpData['stc_sub_no_03'], PDO::PARAM_STR);
        $sth->bindValue(':SUB4', $arUpData['stc_sub_no_04'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (count($result) > 0) {
          $arUpData['stc_update_cnt'] = $result[0]['maxno'] + 1;
        } 

        // 新規データ
        $sth = $dbh->prepare(self::makeInsertSQL('stock', $columnsH));
        self::bindInsertKeys($sth, $columnsH, $arUpData);
        $sth->execute();

        // 検収登録時の出庫登録
        // 検収登録 → stc_arrange_type=810, 検収取消 → stc_arrange_type=410で登録
        if (($process === 'ACCEPTUP' || $process === 'ACCEPTDEL') && $dat['moed_type_04'] === '1') {
          $arUpData['stc_belong_cd'] = $_SESSION['companycd'];
          $arUpData['stc_month'] = $strMonth;
          $arUpData['stc_arrange_type'] = $process === 'ACCEPTUP' ? '810' : '410';
          $arUpData['stc_report_no'] = $dat['moed_order_no'];
          $arUpData['stc_sub_no_01'] = $dat['moed_sub_no'];
          $arUpData['stc_sub_no_02'] = $dat['moed_accept_sub_no'];
          $arUpData['stc_sub_no_03'] = '000';
          $arUpData['stc_sub_no_04'] = '000';
          $arUpData['stc_report_date'] = $dat['moed_accept_date'];
          $arUpData['stc_target_id'] = '';  // 社内入出庫なので、移動先
          $arUpData['stc_place_cd'] = $dat['moed_customer_charge_cd'];  // 客先担当カラムだが保管場所CDが入ってる
          $arUpData['stc_customer_post_cd'] = '';   // 発注データに客先部署に該当するカラムはない。
          $arUpData['stc_product_cd'] = $dat['moed_product_cd'];
          $arUpData['stc_sub_01'] = self::setNumberData($dat['moed_sub_01']);
          $arUpData['stc_sub_02'] = self::setNumberData($dat['moed_sub_02']);
          $arUpData['stc_sub_12'] = $dat['moed_sub_12'];
          $arUpData['stc_sub_13'] = $dat['moed_sub_13'] ? $dat['moed_sub_13'] : '';
          $arUpData['stc_sub_03'] = $dat['moed_sub_03'];
          $arUpData['stc_sub_04'] = self::setNumberData($dat['moed_sub_04']);
          $arUpData['stc_sub_05'] = self::setNumberData($dat['moed_sub_05']);
          $arUpData['stc_sub_06'] = $dat['moed_sub_06'];
          $arUpData['stc_sub_07'] = self::checkNotSet($dat['moed_sub_07']) === false ? $dat['moed_sub_07'] : '';
          $arUpData['stc_sub_08'] = self::checkNotSet($dat['moed_sub_08']) === false ? $dat['moed_sub_08'] : '';    
          $arUpData['stc_sub_10'] = $dat['moed_sub_10'];
          $arUpData['stc_sub_09'] = self::checkNotSet($dat['moed_sub_09']) === false ? $dat['moed_sub_09'] : '';    
          $arUpData['stc_sub_11'] = $dat['moed_sub_11'];
          $arUpData['stc_qty_trans'] = $process === 'ACCEPTDEL' ? -$dat['moed_quantity'] : $dat['moed_quantity']; // $dat['moed_quantity'];
          $arUpData['stc_price_trans'] = 0;
          $arUpData['stc_price_tax'] = 0;
          $arUpData['stc_inventory_type'] = '1';
          $arUpData['stc_recv_type'] = '0';
          $arUpData['stc_pay_type'] = '0';
          $arUpData['stc_expence_type'] = '0';
          $arUpData['stc_cost_type'] = '1';
          $arUpData['stc_cost_eva_qty'] = $dat['moed_unit_qty'];
          $arUpData['stc_unit_price'] = $dat['moed_money'];     // 原価
          $arUpData['stc_type_01'] = '0';
          $arUpData['stc_type_02'] = '1';
          $arUpData['stc_type_03'] = '1';
          $arUpData['stc_type_04'] = $dat['moed_type_03'];
          $arUpData['stc_type_05'] = '0';
          $arUpData['stc_update_at'] = $updateDate;
          $arUpData['stc_update_time'] = $updateTime;
          $arUpData['stc_update_cd'] = $dat['moed_update_cd'];
          $arUpData['stc_unit_tran'] = $dat['moed_unit_tran'];
          $arUpData['stc_type_subject'] = $dat['moed_type_subject'];
          $arUpData['stc_maker_cd'] = $dat['moed_customer_cd'] . $dat['moed_manufacture_cd'];      
          $arUpData['stc_parrangement_cd'] = self::checkNotSet($dat['moed_parrangement_cd']) ? '001' : $dat['moed_parrangement_cd'];

          // 既存かどうか
          $sth = $dbh->prepare('
          SELECT MAX(stc_update_cnt) AS maxno FROM stock
          WHERE stc_month = :MONTH AND 
          stc_arrange_type = :TYPE AND
          stc_report_no = :REPNO AND 
          stc_sub_no_01 = :SUB1 AND 
          stc_sub_no_02 = :SUB2 AND 
          stc_sub_no_03 = :SUB3 AND 
          stc_sub_no_04 = :SUB4
          ;');
          $sth->bindValue(':MONTH', $arUpData['stc_month'], PDO::PARAM_STR);
          $sth->bindValue(':TYPE', $arUpData['stc_arrange_type'], PDO::PARAM_STR);
          $sth->bindValue(':REPNO', $arUpData['stc_report_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUB1', $arUpData['stc_sub_no_01'], PDO::PARAM_STR);
          $sth->bindValue(':SUB2', $arUpData['stc_sub_no_02'], PDO::PARAM_STR);
          $sth->bindValue(':SUB3', $arUpData['stc_sub_no_03'], PDO::PARAM_STR);
          $sth->bindValue(':SUB4', $arUpData['stc_sub_no_04'], PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($result) > 0) {
            $arUpData['stc_update_cnt'] = $result[0]['maxno'] + 1;
          } 

          $sth = $dbh->prepare(self::makeInsertSQL('stock', $columnsH));
          self::bindInsertKeys($sth, $columnsH, $arUpData);
          $sth->execute();

          // moed_refer_noが同じデータを取得
          $sth = $dbh->prepare('
          SELECT * FROM morderestimate
          WHERE moed_refer_no = :REFERNO
          GROUP BY moed_belong_cd, moed_order_no, moed_sub_no
          ;');
          $sth->bindValue(':REFERNO', $dat['moed_refer_no'], PDO::PARAM_STR);
          $sth->execute();
          $moedDatas = $sth->fetchAll(PDO::FETCH_ASSOC);
          
          if (count($moedDatas) > 0) {
            $isAllAccepted = false;
            $acceptCount = 0;
            // 今回検収するデータ以外がすべて検収済みかチェック
            foreach ($moedDatas as $moedRecord) {
              if ($moedRecord['moed_order_no'] !== $dat['moed_order_no'] || $moedRecord['moed_sub_no'] !== $dat['moed_sub_no']) {
                if ($moedRecord['moed_accept_date']) {
                  $acceptCount += 1;
                }
              }
            }
          }
          if (count($moedDatas) - 1 === $acceptCount) {
            $isAllAccepted = true;
          }

          // すべて検収済みの場合、データを登録
          $sth = $dbh->prepare('
          SELECT * FROM estimatedetails
          WHERE ed_belong_cd = :BELONGCD
          AND ed_estimate_no = :ESTNO
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $dat['moed_refer_no'], PDO::PARAM_STR);
          $sth->execute();
          $estimateRslts = $sth->fetchAll(PDO::FETCH_ASSOC);


          // 検収登録 → stc_arrange_type=410, 検収取消 → stc_arrange_type=810で登録
          if ($isAllAccepted) {

            foreach ($estimateRslts as $estimateRecord) {
              // 品名CDが「26」から始まる場合はデータ登録を行わない
              // if (substr($estimateRecord['ed_p_cd'], 0, 2) !== '26') {
                $arUpData['stc_belong_cd'] = $_SESSION['companycd'];
                $arUpData['stc_month'] = $strMonth;
                $arUpData['stc_arrange_type'] = $process === 'ACCEPTUP' ? '410' : '810';
                $arUpData['stc_report_no'] = $dat['moed_order_no'];
                $arUpData['stc_sub_no_01'] = $estimateRecord['ed_estimate_sub_no'];
                $arUpData['stc_sub_no_02'] = $estimateRecord['ed_shipment_sub_no'];
                $arUpData['stc_sub_no_03'] = '000';
                $arUpData['stc_sub_no_04'] = '000';
                $arUpData['stc_report_date'] = $dat['moed_accept_date'];
                $arUpData['stc_target_id'] = '';    // 移動先場所
                $arUpData['stc_place_cd'] = $dat['moed_customer_charge_cd'];  // 客先担当カラムだが保管場所CDが入ってる
                $arUpData['stc_customer_post_cd'] = $dat['moed_customer_post_cd'];
                $arUpData['stc_product_cd'] = $estimateRecord['ed_p_cd'];
                $arUpData['stc_sub_01'] = self::setNumberData($estimateRecord['ed_sub_01']);
                $arUpData['stc_sub_02'] = self::setNumberData($estimateRecord['ed_sub_02']);
                $arUpData['stc_sub_12'] = $estimateRecord['ed_sub_12'];
                $arUpData['stc_sub_13'] = $estimateRecord['ed_sub_13'] ? $estimateRecord['ed_sub_13'] : '';
                $arUpData['stc_sub_03'] = $estimateRecord['ed_sub_03'];
                $arUpData['stc_sub_04'] = self::setNumberData($estimateRecord['ed_sub_04']);
                $arUpData['stc_sub_05'] = self::setNumberData($estimateRecord['ed_sub_05']);
                $arUpData['stc_sub_06'] = $estimateRecord['ed_sub_06'];
                $arUpData['stc_sub_07'] = self::checkNotSet($estimateRecord['ed_sub_07']) === false ? $estimateRecord['ed_sub_07'] : '';
                $arUpData['stc_sub_08'] = self::checkNotSet($estimateRecord['ed_sub_08']) === false ? $estimateRecord['ed_sub_08'] : '';    
                $arUpData['stc_sub_10'] = $dat['ed_sub_10'];
                $arUpData['stc_sub_09'] = self::checkNotSet($estimateRecord['ed_sub_09']) === false ? $estimateRecord['ed_sub_09'] : '';    
                $arUpData['stc_sub_11'] = $estimateRecord['ed_sub_11'];
                // 検収取り消しの場合はマイナスにする
                $arUpData['stc_qty_trans'] = $process === 'ACCEPTDEL' ? -$estimateRecord['ed_quantity'] : $estimateRecord['ed_quantity'];
                $arUpData['stc_price_trans'] = 0;
                $arUpData['stc_price_tax'] = 0;
                $arUpData['stc_inventory_type'] = '1';
                $arUpData['stc_recv_type'] = '0';
                $arUpData['stc_pay_type'] = '0';
                $arUpData['stc_expence_type'] = '0';
                $arUpData['stc_cost_type'] = '1';
                $arUpData['stc_cost_eva_qty'] = 0;
                $arUpData['stc_unit_price'] = 0;     
                $arUpData['stc_type_01'] = '0';
                $arUpData['stc_type_02'] = '1';
                $arUpData['stc_type_03'] = '1';
                $arUpData['stc_type_04'] = $dat['moed_type_03'];
                $arUpData['stc_type_05'] = '0';
                $arUpData['stc_update_at'] = $updateDate;
                $arUpData['stc_update_time'] = $updateTime;
                $arUpData['stc_update_cd'] = $dat['moed_update_cd'];
                $arUpData['stc_unit_tran'] = $estimateRecord['ed_unit_tran'];
                $arUpData['stc_type_subject'] = $dat['moed_type_subject'];
                $arUpData['stc_maker_cd'] = $dat['moed_customer_cd'] . $dat['moed_manufacture_cd'];      
                $arUpData['stc_parrangement_cd'] = self::checkNotSet($estimateRecord['ed_parrangement_cd']) ? '001' : $estimateRecord['ed_parrangement_cd'];

                // 存在確認
                $sth = $dbh->prepare('
                SELECT MAX(stc_update_cnt) AS maxno FROM stock
                WHERE stc_month = :MONTH AND 
                stc_arrange_type = :TYPE AND
                stc_report_no = :REPNO AND 
                stc_sub_no_01 = :SUB1 AND 
                stc_sub_no_02 = :SUB2 AND 
                stc_sub_no_03 = :SUB3 AND 
                stc_sub_no_04 = :SUB4
                ;');
                $sth->bindValue(':MONTH', $arUpData['stc_month'], PDO::PARAM_STR);
                $sth->bindValue(':TYPE', $arUpData['stc_arrange_type'], PDO::PARAM_STR);
                $sth->bindValue(':REPNO', $arUpData['stc_report_no'], PDO::PARAM_STR);
                $sth->bindValue(':SUB1', $arUpData['stc_sub_no_01'], PDO::PARAM_STR);
                $sth->bindValue(':SUB2', $arUpData['stc_sub_no_02'], PDO::PARAM_STR);
                $sth->bindValue(':SUB3', $arUpData['stc_sub_no_03'], PDO::PARAM_STR);
                $sth->bindValue(':SUB4', $arUpData['stc_sub_no_04'], PDO::PARAM_STR);
                $sth->execute();
                $result = $sth->fetchAll(PDO::FETCH_ASSOC);
                if (count($result) > 0) {
                  $arUpData['stc_update_cnt'] = $result[0]['maxno'] + 1;
                } 

                // 新規登録
                $sth = $dbh->prepare(self::makeInsertSQL('stock', $columnsH));
                self::bindInsertKeys($sth, $columnsH, $arUpData);
                $sth->execute();
              // }
            }
          }
        }
      }
    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 消費税額をinsert、deleteする。インボイス対応
   * issueDate
   */
  private static function issueStockTaxValue($dbh, $record, $issueDate, $mode) {
    $arUpData = [];

    $columnsH = self::getColumnDefs('stock');
    self::markAsHeaderPK($columnsH, 'stc_belong_cd');
    self::markAsHeaderPK($columnsH, 'stc_month');
    self::markAsHeaderPK($columnsH, 'stc_arrange_type');
    self::markAsHeaderPK($columnsH, 'stc_report_no');
    self::markAsHeaderPK($columnsH, 'stc_sub_no_01');
    self::markAsHeaderPK($columnsH, 'stc_sub_no_02');
    self::markAsHeaderPK($columnsH, 'stc_sub_no_03');
    self::markAsHeaderPK($columnsH, 'stc_sub_no_04');
    self::markAsHeaderPK($columnsH, 'stc_update_cnt');
    try {
      if ($mode) {
        // insert
        // 自社マスタから整理月取得
        $sth = $dbh->prepare('
        SELECT * FROM housecompany
        ;');
        $sth->execute();
        $housecompany = $sth->fetchAll(PDO::FETCH_ASSOC);

        // 該当整理年月取得
        if (self::checkNotSet($issueDate) === true) {
          // 空だったら、自社整理年月をセット
          $acDate = new DateTime($housecompany[0]['H_ACCONTING_MONTH'] . '01');
          $acDate->modify('+1 month');
          $strDate = $acDate->format('Y-m-d');
          $strDate = str_replace('-', '', $strDate);
          $strMonth = substr($strDate, 2, 4);
        } else if (substr($issueDate, 0, 6) <= $housecompany[0]['H_ACCONTING_MONTH']) {
          // 自社マスタの整理年月以前の場合,自社マスタの整理年月＋１でセット
          $acDate = new DateTime($housecompany[0]['H_ACCONTING_MONTH'] . '01');
          $acDate->modify('+1 month');
          $strDate = $acDate->format('Y-m-d');
          $strDate = str_replace('-', '', $strDate);
          $strMonth = substr($strDate, 2, 4);
        } else {
          // 該当業務の取引年月をセット
          $strMonth = substr($issueDate, 2, 4);
        }
        
        $arUpData['stc_belong_cd'] = $_SESSION['companycd'];
        $arUpData['stc_month'] = $strMonth;
        $arUpData['stc_arrange_type'] = '526';
        $arUpData['stc_report_no'] = $record['b_bill_no'];
        $arUpData['stc_sub_no_01'] = '0000';
        $arUpData['stc_sub_no_02'] = '000';
        $arUpData['stc_sub_no_03'] = '00';
        $arUpData['stc_sub_no_04'] = '000';
        $arUpData['stc_update_cnt'] = 0;
        $arUpData['stc_report_date'] = $record['b_final_date'];
        $arUpData['stc_target_id'] = $record['b_customer_cd'];
        $arUpData['stc_place_cd'] = '';
        $arUpData['stc_customer_post_cd'] = '';
        $arUpData['stc_product_cd'] = '00000000';
        $arUpData['stc_sub_01'] = 0;
        $arUpData['stc_sub_02'] = 0;
        $arUpData['stc_sub_03'] = '';
        $arUpData['stc_sub_04'] = 0;
        $arUpData['stc_sub_05'] = 0;
        $arUpData['stc_sub_06'] = '';
        $arUpData['stc_sub_07'] = '';
        $arUpData['stc_sub_08'] = 0;
        $arUpData['stc_sub_09'] = 0;
        $arUpData['stc_sub_10'] = '';
        $arUpData['stc_price_tax'] = $record['b_tax'];
        $arUpData['stc_update_at'] = self::currentDate();
        $arUpData['stc_update_time'] = self::currentTime();
        $arUpData['stc_update_cd'] = $_SESSION['usercd'];

        // 現状措置だと、該当客先のデータを再度回っていくため
        $sth = $dbh->prepare('
        SELECT * FROM stock
        WHERE stc_belong_cd = :BELONGCD AND stc_arrange_type = :ARRANGECD AND stc_report_no = :REPORTNO 
        AND stc_sub_no_01 = :SUB01 AND stc_sub_no_02 = :SUB02 AND stc_sub_no_03 = :SUB03 AND stc_sub_no_04 = :SUB04 
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':ARRANGECD', '526', PDO::PARAM_STR);
        $sth->bindValue(':REPORTNO', $record['b_bill_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUB01', '0000', PDO::PARAM_STR);
        $sth->bindValue(':SUB02', '000', PDO::PARAM_STR);
        $sth->bindValue(':SUB03', '00', PDO::PARAM_STR);
        $sth->bindValue(':SUB04', '000', PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) <= 0) {
          // 現状処理だと、請求書作成時は、全対象顧客を読み込むため
          $sth = $dbh->prepare(self::makeInsertSQL('stock', $columnsH));
          self::bindInsertKeys($sth, $columnsH, $arUpData);
          $sth->execute(); 

        }

      } else {
        // delete 
        $sth = $dbh->prepare('
        SELECT * FROM stock
        WHERE stc_belong_cd = :BELONGCD AND stc_arrange_type = :ARRANGECD AND stc_report_no = :REPORTNO AND stc_report_date = :ISSUEDATE AND stc_target_id = :CUSTOMERCD
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':ARRANGECD', '526', PDO::PARAM_STR);
        $sth->bindValue(':REPORTNO', $record['b_bill_no'], PDO::PARAM_STR);
        $sth->bindValue(':ISSUEDATE', $record['b_final_date'], PDO::PARAM_STR);
        $sth->bindValue(':CUSTOMERCD', $record['b_customer_cd'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {
          $sth = $dbh->prepare('
          DELETE FROM stock
          WHERE stc_belong_cd = :BELONGCD AND stc_arrange_type = :ARRANGECD AND stc_report_no = :REPORTNO AND stc_report_date = :ISSUEDATE AND stc_sub_no_01 = :SUB01 AND stc_sub_no_02 = :SUB02 AND stc_sub_no_03 = :SUB03 AND stc_sub_no_04 = :SUB04 AND stc_target_id = :CUSTOMERCD
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':ARRANGECD', '526', PDO::PARAM_STR);
          $sth->bindValue(':REPORTNO', $record['b_bill_no'], PDO::PARAM_STR);
          $sth->bindValue(':ISSUEDATE', $record['b_final_date'], PDO::PARAM_STR);
          $sth->bindValue(':SUB01', '0000', PDO::PARAM_STR);
          $sth->bindValue(':SUB02', '000', PDO::PARAM_STR);
          $sth->bindValue(':SUB03', '00', PDO::PARAM_STR);
          $sth->bindValue(':SUB04', '000', PDO::PARAM_STR);
          $sth->bindValue(':CUSTOMERCD', $record['b_customer_cd'], PDO::PARAM_STR);
          $sth->execute();

        }

      }
    } catch (Exception $e) {
      throw $e;
    }
  }

  /***
   * 発注側消費税レコードをstockテーブルに登録
   * 2023/5/26 データ編集画面のヘッダー消費税額の項目を削除により、受払明細に消費税額の値は入ってこなくなる。
   * （仕入先元帳などの集計も発注ごとの消費税額ではなく、複数の発注金額の合計に消費税を計算するため現状問題はないと思われる）
   */
  private static function issueStockMODTaxValue($dbh, $record, $issueDate, $mode) {
    $arUpData = [];

    $columnsH = self::getColumnDefs('stock');
    self::markAsHeaderPK($columnsH, 'stc_belong_cd');
    self::markAsHeaderPK($columnsH, 'stc_month');
    self::markAsHeaderPK($columnsH, 'stc_arrange_type');
    self::markAsHeaderPK($columnsH, 'stc_report_no');
    self::markAsHeaderPK($columnsH, 'stc_sub_no_01');
    self::markAsHeaderPK($columnsH, 'stc_sub_no_02');
    self::markAsHeaderPK($columnsH, 'stc_sub_no_03');
    self::markAsHeaderPK($columnsH, 'stc_sub_no_04');
    self::markAsHeaderPK($columnsH, 'stc_update_cnt');
    try {
      if ($mode) {
        // insert
        // 自社マスタから整理月取得
        $sth = $dbh->prepare('
        SELECT * FROM housecompany
        ;');
        $sth->execute();
        $housecompany = $sth->fetchAll(PDO::FETCH_ASSOC);

        // 該当整理年月取得
        if (self::checkNotSet($issueDate) === true) {
          // 空だったら、自社整理年月をセット
          $acDate = new DateTime($housecompany[0]['H_ACCONTING_MONTH'] . '01');
          $acDate->modify('+1 month');
          $strDate = $acDate->format('Y-m-d');
          $strDate = str_replace('-', '', $strDate);
          $strMonth = substr($strDate, 2, 4);
        } else if (substr($issueDate, 0, 6) <= $housecompany[0]['H_ACCONTING_MONTH']) {
          // 自社マスタの整理年月以前の場合,自社マスタの整理年月＋１でセット
          $acDate = new DateTime($housecompany[0]['H_ACCONTING_MONTH'] . '01');
          $acDate->modify('+1 month');
          $strDate = $acDate->format('Y-m-d');
          $strDate = str_replace('-', '', $strDate);
          $strMonth = substr($strDate, 2, 4);
        } else {
          // 該当業務の取引年月をセット
          $strMonth = substr($issueDate, 2, 4);
        }
        
        $arUpData['stc_belong_cd'] = $_SESSION['companycd'];
        $arUpData['stc_month'] = $strMonth;
        $arUpData['stc_arrange_type'] = '126';
        $arUpData['stc_report_no'] = $record['moed_order_no'];
        $arUpData['stc_sub_no_01'] = '0000';
        $arUpData['stc_sub_no_02'] = '000';
        $arUpData['stc_sub_no_03'] = '00';
        $arUpData['stc_sub_no_04'] = '000';
        $arUpData['stc_update_cnt'] = 0;
        $arUpData['stc_report_date'] = $record['moed_accept_date'];
        $arUpData['stc_target_id'] = $record['moed_customer_cd'];
        $arUpData['stc_place_cd'] = '';
        $arUpData['stc_customer_post_cd'] = '';
        $arUpData['stc_product_cd'] = '00000000';
        $arUpData['stc_sub_01'] = 0;
        $arUpData['stc_sub_02'] = 0;
        $arUpData['stc_sub_03'] = '';
        $arUpData['stc_sub_04'] = 0;
        $arUpData['stc_sub_05'] = 0;
        $arUpData['stc_sub_06'] = '';
        $arUpData['stc_sub_07'] = '';
        $arUpData['stc_sub_08'] = 0;
        $arUpData['stc_sub_09'] = 0;
        $arUpData['stc_sub_10'] = '';
        $arUpData['stc_price_tax'] = $record['moed_tax_sum']; // 上記のコメントより、消費税の金額は入ってこない。
        $arUpData['stc_update_at'] = self::currentDate();
        $arUpData['stc_update_time'] = self::currentTime();
        $arUpData['stc_update_cd'] = $_SESSION['usercd'];

        // 現状措置だと、該当客先のデータを再度回っていくため PKにreportdateは入っていないため、敢えて抽出条件から外す。
        $sth = $dbh->prepare('
        SELECT * FROM stock
        WHERE stc_belong_cd = :BELONGCD AND stc_arrange_type = :ARRANGECD AND stc_report_no = :REPORTNO 
        AND stc_sub_no_01 = :SUB01 AND stc_sub_no_02 = :SUB02 AND stc_sub_no_03 = :SUB03 AND stc_sub_no_04 = :SUB04 
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':ARRANGECD', '126', PDO::PARAM_STR);
        $sth->bindValue(':REPORTNO', $record['moed_order_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUB01', '0000', PDO::PARAM_STR);
        $sth->bindValue(':SUB02', '000', PDO::PARAM_STR);
        $sth->bindValue(':SUB03', '00', PDO::PARAM_STR);
        $sth->bindValue(':SUB04', '000', PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) <= 0) {
          // 現状処理だと、請求書作成時は、全対象顧客を読み込むため
          $sth = $dbh->prepare(self::makeInsertSQL('stock', $columnsH));
          self::bindInsertKeys($sth, $columnsH, $arUpData);
          $sth->execute(); 

        }

      } else {
        // delete 
        $sth = $dbh->prepare('
        SELECT * FROM stock
        WHERE stc_belong_cd = :BELONGCD AND stc_arrange_type = :ARRANGECD AND stc_report_no = :REPORTNO AND stc_report_date = :ISSUEDATE AND stc_target_id = :CUSTOMERCD
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':ARRANGECD', '126', PDO::PARAM_STR);
        $sth->bindValue(':REPORTNO', $record['moed_order_no'], PDO::PARAM_STR);
        $sth->bindValue(':ISSUEDATE', $record['moed_accept_date'], PDO::PARAM_STR);
        $sth->bindValue(':CUSTOMERCD', $record['moed_customer_cd'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {
          $sth = $dbh->prepare('
          DELETE FROM stock
          WHERE stc_belong_cd = :BELONGCD AND stc_arrange_type = :ARRANGECD AND stc_report_no = :REPORTNO AND stc_report_date = :ISSUEDATE 
          AND stc_sub_no_01 = :SUB01 AND stc_sub_no_02 = :SUB02 AND stc_sub_no_03 = :SUB03 AND stc_sub_no_04 = :SUB04 AND stc_target_id = :CUSTOMERCD
          ;');
          $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
          $sth->bindValue(':ARRANGECD', '126', PDO::PARAM_STR);
          $sth->bindValue(':REPORTNO', $record['moed_order_no'], PDO::PARAM_STR);
          $sth->bindValue(':ISSUEDATE', $record['moed_accept_date'], PDO::PARAM_STR);
          $sth->bindValue(':SUB01', '0000', PDO::PARAM_STR);
          $sth->bindValue(':SUB02', '000', PDO::PARAM_STR);
          $sth->bindValue(':SUB03', '00', PDO::PARAM_STR);
          $sth->bindValue(':SUB04', '000', PDO::PARAM_STR);
          $sth->bindValue(':CUSTOMERCD', $record['moed_customer_cd'], PDO::PARAM_STR);
          $sth->execute();

        }

      }
    } catch (Exception $e) {
      throw $e;
    }
  }


/****************************************************************************************
   * 出荷引当データ作成
   */
  private static function updateShippingAssign($process, $dat, $dbh) {
    $columns = self::getColumnDefs('shippingassign');
    self::markAsHeaderPK($columns, 'sas_belong_cd');
    self::markAsHeaderPK($columns, 'sas_estimate_no');
    self::markAsHeaderPK($columns, 'sas_estimate_sub_no');
    self::markAsHeaderPK($columns, 'sas_shipment_sub_no');
    self::markAsHeaderPK($columns, 'sas_serial_no');
    $arUpData = [];
    $maxno = '01';    // 最大番号 Default 01

    try {
      switch ($process) {
        case 'MOD':
          if (preg_match('/^26/', $dat['moed_product_cd'])) {
            // 大分類26の製品は入出庫にかかわらないため除外する
            return;
          }
          /***
           * 発注の入庫の場合は、①入荷が別々になった場合と、②受注番号に紐づく、別の製品が発生しうる
           * ①の場合は、受注枝番同じで、引当連番インクリメント。
           * ②の場合は、受注枝番000で、引当連番インクリメント。
           */ 
          // 新規・更新で共通して必要なデータ
          $arUpData['sas_belong_cd'] = $dat['moed_belong_cd'];
          $arUpData['sas_estimate_no'] = $dat['moed_refer_no'];
          $arUpData['sas_statement_sub_no'] = '0000';
          $arUpData['sas_estimate_sub_no'] = $dat['moed_refer_sub_no'] === '' ? '000' : $dat['moed_refer_sub_no'];
          $arUpData['sas_shipment_sub_no'] = '01';  //Default値  
          $arUpData['sas_p_cd'] = $dat['moed_product_cd'];    // 発注データにはないので前もって取得
          $arUpData['sas_location'] = $dat['moed_customer_charge_cd'];
          $arUpData['sas_lot_no'] = $dat['moed_type_03'];
          $arUpData['sas_quantity'] = ((float)$dat['moed_stock_qty'] === 0.000) ? $dat['moed_quantity'] : $dat['moed_stock_qty'];
          $arUpData['sas_type_01'] = '0';
          $arUpData['sas_type_02'] = '';
          $arUpData['sas_type_03'] = '';
          $arUpData['sas_type_04'] = '';
          $arUpData['sas_type_05'] = '';
          $arUpData['sas_update_at'] = self::currentdate();
          $arUpData['sas_update_cd'] = $_SESSION['usercd'];
          $arUpData['sas_unit_tran'] = $dat['moed_unit_eval'] === '' ? $dat['moed_unit_tran'] : $dat['moed_unit_eval'];
          $arUpData['sas_parrangement_cd'] = $dat['moed_parrangement_cd'];
          if (self::checkNotSet($dat['moed_type_subject'])) {
            // その都度設定値は変わるが、default値として、通常は仕入品=原材料品、受注紐づきの仕入れ=リセール品と設定する。
            // (受注紐づきの場合、基本的には、受注引継ぎでデータが入っている)
            if ($dat['moed_refer_no'] !== '') {
              $dat['moed_type_subject'] = '4';
            } else {
              $dat['moed_type_subject'] = '2';
            }
          }
          $arUpData['sas_type_subject'] = $dat['moed_type_subject'];
          $arUpData['sas_serial_no'] = '01';    // Default値
          
          // 規格文字列作成
          $sth = $dbh->prepare('
          SELECT * FROM estimatedetails 
          WHERE ed_belong_cd = :BELONGCD AND 
          ed_estimate_no = :ESTNO AND 
          ed_estimate_sub_no = :ESTSUBNO        
          ;');
          $sth->bindValue(':BELONGCD', $arUpData['sas_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $arUpData['sas_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':ESTSUBNO', $arUpData['sas_estimate_sub_no'], PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($result) > 0) {
            $arUpData['sas_sub_cd'] = self::storageSetPadding($result[0], $dbh, true);
          }

          // 上記デフォルト値から変更になるケースを取得 *******************************
          // 最大枝番取得
          $sth = $dbh->prepare('
          SELECT 
          sas_belong_cd, sas_estimate_no, sas_statement_sub_no, sas_estimate_sub_no, sas_shipment_sub_no, 
          MAX(sas_serial_no) AS maxno
          FROM shippingassign
          WHERE sas_belong_cd = :BELONGCD AND 
          sas_estimate_no = :ESTNO AND 
          sas_estimate_sub_no = :ETSUBNO AND
          sas_shipment_sub_no = :SHIPSUB 
          GROUP BY sas_belong_cd, sas_estimate_no, sas_statement_sub_no, sas_estimate_sub_no, sas_shipment_sub_no
          ;');
          $sth->bindValue(':BELONGCD', $dat['moed_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $dat['moed_refer_no'], PDO::PARAM_STR);
          $sth->bindValue(':ETSUBNO', $dat['moed_refer_sub_no'] === '' ? '000' : $dat['moed_refer_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':SHIPSUB', '01', PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);

          if (count($result) > 0) {
            // 既存値の場合は更新
            $arUpData['sas_serial_no'] = sprintf('%02d', (int)$result[0]['maxno'] + 1);

            // 既存値の場合、該当の発注での引当データが既存かどうか確認
            $sth = $dbh->prepare('
            SELECT *  FROM shippingassign
            WHERE sas_belong_cd = :BELONGCD AND 
                  sas_estimate_no = :ESTNO AND 
                  sas_statement_sub_no = :SDNO AND 
                  sas_estimate_sub_no = :ETSUBNO AND
                  sas_shipment_sub_no = :SHIPSUB AND 
                  sas_lot_no = :LOTNO
            ;');
            $sth->bindValue(':BELONGCD', $dat['moed_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':ESTNO', $dat['moed_refer_no'], PDO::PARAM_STR);
            $sth->bindValue(':SDNO', '0000', PDO::PARAM_STR);
            $sth->bindValue(':ETSUBNO', $dat['moed_refer_sub_no'], PDO::PARAM_STR);
            $sth->bindValue(':SHIPSUB', '01', PDO::PARAM_STR);
            $sth->bindValue(':LOTNO', $dat['moed_type_03'], PDO::PARAM_STR);
            $sth->execute();
            $resultLot = $sth->fetchAll(PDO::FETCH_ASSOC);

            if (count($resultLot) > 0) {
              // 更新データの場合は、シリアル番号をインクリメントしない
              $arUpData['sas_serial_no'] = $resultLot[0]['sas_serial_no'];

              $sth = $dbh->prepare(self::makeUpdateSQL('shippingassign', $columns));
              self::bindUpdateKeys($sth, $columns, $arUpData);
              $sth->execute();

              break;
            }
          }
          // 該当受注番号の引当データがない　OR　該当発注明細の引当データがない場合
          $sth = $dbh->prepare(self::makeInsertSQL('shippingassign', $columns));
          self::bindInsertKeys($sth, $columns, $arUpData);
          $sth->execute();
      
          break;
          // if (count($result) > 0) {   // 新規はDefaultの01
          //   $maxno = sprintf('%01d', (int)$result[0]['maxno'] + 1);

          //   // 同じ見積番号のデータが存在する時、同じ発注データの引当データがあるか確認
          //   $sth = $dbh->prepare('
          //   SELECT *  FROM shippingassign
          //   WHERE sas_belong_cd = :BELONGCD AND 
          //         sas_estimate_no = :ESTNO AND 
          //         sas_statement_sub_no = :SDNO AND 
          //         sas_estimate_sub_no = :ETSUBNO AND
          //         sas_shipment_sub_no = :SHIPSUB AND 
          //         sas_lot_no = :LOTNO
          //   ;');
          //   $sth->bindValue(':BELONGCD', $dat['moed_belong_cd'], PDO::PARAM_STR);
          //   $sth->bindValue(':ESTNO', $dat['moed_refer_no'], PDO::PARAM_STR);
          //   $sth->bindValue(':SDNO', '0000', PDO::PARAM_STR);
          //   $sth->bindValue(':ETSUBNO', $dat['moed_refer_sub_no'], PDO::PARAM_STR);
          //   $sth->bindValue(':SHIPSUB', '01', PDO::PARAM_STR);
          //   $sth->bindValue(':LOTNO', $dat['moed_type_03'], PDO::PARAM_STR);
          //   $sth->execute();
          //   $resultLot = $sth->fetchAll(PDO::FETCH_ASSOC);

          // } 
          

        }
      //     $arUpData['sas_belong_cd'] = $dat['moed_belong_cd'];
      //     $arUpData['sas_estimate_no'] = $dat['moed_refer_no'];
      //     $arUpData['sas_statement_sub_no'] = '0000';
      //     $arUpData['sas_estimate_sub_no'] = $dat['moed_refer_sub_no'];
      //     $arUpData['sas_shipment_sub_no'] = '01';  //Default値  
      //     $arUpData['sas_p_cd'] = $dat['moed_product_cd'];    // 発注データにはないので前もって取得
      //     $arUpData['sas_location'] = $dat['moed_customer_charge_cd'];
      //     $arUpData['sas_lot_no'] = $dat['moed_type_03'];
      //     $arUpData['sas_quantity'] = ((float)$dat['moed_stock_qty'] === 0.000) ? $dat['moed_quantity'] : $dat['moed_stock_qty'];
      //     $arUpData['sas_type_01'] = '0';
      //     $arUpData['sas_type_02'] = '';
      //     $arUpData['sas_type_03'] = '';
      //     $arUpData['sas_type_04'] = '';
      //     $arUpData['sas_type_05'] = '';
      //     $arUpData['sas_update_at'] = $dat['moed_update_at'];
      //     $arUpData['sas_update_cd'] = $dat['moed_update_cd'];
      //     $arUpData['sas_unit_tran'] = $dat['moed_unit_eval'] === '' ? $dat['moed_unit_tran'] : $dat['moed_unit_eval'];
      //     $arUpData['sas_parrangement_cd'] = '';
      //     if ($dat['moed_type_subject'] === '' || !isset($dat['moed_type_subject'])) {
      //       // その都度設定値は変わるが、default値として、通常は仕入品=原材料品、受注紐づきの仕入れ=リセール品と設定する。
      //       // (受注紐づきの場合、基本的には、受注引継ぎでデータが入っている)
      //       if ($dat['moed_refer_no'] !== '') {
      //         $dat['moed_type_subject'] = '4';
      //       } else {
      //         $dat['moed_type_subject'] = '2';
      //       }
      //     }
      //     $arUpData['sas_type_subject'] = $dat['moed_type_subject'];
      //     $arUpData['sas_serial_no'] = $maxno;  // '01';
      //     // 規格文字列作成
      //     $sth = $dbh->prepare('
      //     SELECT * FROM estimatedetails 
      //     WHERE ed_belong_cd = :BELONGCD AND 
      //     ed_estimate_no = :ESTNO AND 
      //     ed_estimate_sub_no = :ESTSUBNO        
      //     ;');
      //     $sth->bindValue(':BELONGCD', $arUpData['sas_belong_cd'], PDO::PARAM_STR);
      //     $sth->bindValue(':ESTNO', $arUpData['sas_estimate_no'], PDO::PARAM_STR);
      //     $sth->bindValue(':ESTSUBNO', $arUpData['sas_estimate_sub_no'], PDO::PARAM_STR);
      //     $sth->execute();
      //     $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      //     if (count($result) > 0) {
      //       $arUpData['sas_sub_cd'] = self::storageSetPadding($result, $dbh, true);
      //     }
      //   break;
      // }
      // // 既存データかどうか確認後、データを更新、もしくは登録する
      // $sth = $dbh->prepare('
      // SELECT * FROM shippingassign
      // WHERE sas_belong_cd = :BELONGCD AND 
      // sas_estimate_no = :ESTNO AND 
      // sas_statement_sub_no = :SDNO AND 
      // sas_estimate_sub_no = :ETSUBNO AND
      // sas_shipment_sub_no = (SELECT MAX(sas_shipment_sub_no) FROM shippingassign 
      //   WHERE sas_belong_cd = :BELONGCD2 AND 
      //   sas_estimate_no = :ESTNO2 AND 
      //   sas_statement_sub_no = :SDNO2 AND 
      //   sas_estimate_sub_no = :ETSUBNO2 );
      // ;');
      // $sth->bindValue(':BELONGCD', $arUpData['sas_belong_cd'], PDO::PARAM_STR);
      // $sth->bindValue(':ESTNO', $arUpData['sas_estimate_no'], PDO::PARAM_STR);
      // $sth->bindValue(':SDNO', $arUpData['sas_statement_sub_no'], PDO::PARAM_STR);
      // $sth->bindValue(':ETSUBNO', $arUpData['sas_estimate_sub_no'], PDO::PARAM_STR);
      // $sth->bindValue(':BELONGCD2', $arUpData['sas_belong_cd'], PDO::PARAM_STR);
      // $sth->bindValue(':ESTNO2', $arUpData['sas_estimate_no'], PDO::PARAM_STR);
      // $sth->bindValue(':SDNO2', $arUpData['sas_statement_sub_no'], PDO::PARAM_STR);
      // $sth->bindValue(':ETSUBNO2', $arUpData['sas_estimate_sub_no'], PDO::PARAM_STR);
      // $sth->execute();
      // $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      // if (count($result) > 0) {
      //   $rec['sas_shipment_sub_no'] = sprintf('%02d', ((int)$result[0]['sas_shipment_sub_no'] + 1));
      //   $sth = $dbh->prepare(self::makeUpdateSQL('shippingassign', $columns));
      //   self::bindUpdateKeys($sth, $columns, $arUpData);
      //   $sth->execute();
      // }  else {      
      //   $sth = $dbh->prepare(self::makeInsertSQL('shippingassign', $columns));
      //   self::bindInsertKeys($sth, $columns, $arUpData);
      //   $sth->execute();
      // }
      
    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 入出庫データ登録ー客先引当データ登録(未受注)
   * $mode　0:初回登録、1:データ更新
   */
  public static function updateSTPlanReceive($datHeader, $datDetail, $mode) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();

      $currentDate = self::currentDate();
      $currentTime = self::currentTime();
      $reportNo = '';
      $recordCnt = 0;

      // 2023/2/21 更新登録時の処理が未完成のため、修正開始
      if ($mode === 0) { 
        // 未受注データなので、仮番号を取得する
        $sth = $dbh->prepare('SELECT MAX(sp_report_no) AS reportno FROM stockPlan
        WHERE sp_belong_cd = :BELONGCD AND 
        sp_month = :SPMONTH AND 
        sp_arrange_type = :ARRANGETYPE AND 
        sp_sub_no_01 = :SUBNO AND 
        sp_update_cnt = :CNT AND 
        sp_report_no LIKE :REPORTNO 
        ;');
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':SPMONTH', '0000', PDO::PARAM_STR);
        $sth->bindValue(':ARRANGETYPE', '515', PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', '0001', PDO::PARAM_STR);
        $sth->bindValue(':CNT', 0, PDO::PARAM_INT);
        $sth->bindValue(':REPORTNO', 'P' . $datHeader[0]['stc_target_id'] . substr($currentDate, 2, 4) . '%', PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0 && isset($result[0]['reportno'])) {
          // 伝票番号有り
          $reportNo = substr($result[0]['reportno'], 0, 8) . sprintf('%03d', (int)substr($result[0]['reportno'], -3) + 1); 
        } else {
          $reportNo = 'P' . $datHeader[0]['stc_target_id'] . substr($currentDate, 2, 4) . '001';
        }
      } elseif ($mode === 1) {
        $reportNo = $datHeader[0]['stc_report_no'];
      }
 
      // 初期実装時の都合上、stockテーブルのカラム名で表示しているため注意
      foreach($datDetail as $record) {
        $record['stc_belong_cd'] = $_SESSION['companycd'];
        $record['stc_report_no'] = $reportNo;
        $record['stc_report_date'] = $mode ? $datHeader[0]['stc_report_date'] : $currentDate; // 編集時は前回記載日をセット
        $record['stc_target_id'] = $datHeader[0]['stc_target_id'];
        $record['stc_sub_no_01'] = $record['stc_sub_no_01'] ? $record['stc_sub_no_01'] : '0001';
        $record['stc_sub_no_02'] = $record['stc_sub_no_02'] ? $record['stc_sub_no_02'] : sprintf('%03d', $recordCnt);
        $record['stc_arrange_type'] = $record['stc_arrange_type'] ? $record['stc_arrange_type'] : '515';
        $record['stc_customer_post_cd'] = $record['stc_customer_post_cd'] ? $record['stc_customer_post_cd'] : '';
        $record['stc_product_cd'] = $record['productcd'];
        $record['stc_sub_01'] = $record['sub01'] ? $record['sub01'] : $record['stc_sub_01'];
        $record['stc_sub_02'] = $record['sub02'] ? $record['sub02'] : $record['stc_sub_02'];
        $record['stc_sub_03'] = $record['sub03'] ? $record['sub03'] : $record['stc_sub_03'];
        $record['stc_sub_04'] = $record['sub04'] ? $record['sub04'] : $record['stc_sub_04'];
        $record['stc_sub_05'] = $record['sub05'] ? $record['sub05'] : $record['stc_sub_05'];
        $record['stc_sub_06'] = $record['sub06'] ? $record['sub06'] : $record['stc_sub_06'];
        $record['stc_sub_07'] = $record['sub07'] ? $record['sub07'] : $record['stc_sub_07'];
        $record['stc_sub_08'] = $record['sub08'] ? $record['sub08'] : $record['stc_sub_08'];
        $record['stc_sub_10'] = $record['sub09'] ? $record['sub09'] : $record['stc_sub_09'];
        $record['stc_sub_09'] = $record['sub10'] ? $record['sub10'] : $record['stc_sub_10'];
        $record['stc_sub_11'] = $record['sub11'] ? $record['sub11'] : $record['stc_sub_11'];
        $record['stc_sub_12'] = $record['sub12'] ? $record['sub12'] : $record['stc_sub_12'];
        $record['stc_sub_13'] = $record['sub13'] ? $record['sub13'] : $record['stc_sub_13'];

        $record['stc_update_at'] = $currentDate;
        $record['stc_update_time'] = $currentTime;
        $record['stc_update_cd'] = $_SESSION['usercd'];

        self::issueStockPlan('STPlanReceive', $currentDate, $record, $dbh);

        $recordCnt++;
      }

      $dbh->commit();
      echo json_encode($resp);
      return;
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['succeed'] = false;
      $resp['msg'] = '登録に失敗しました';
      echo json_encode($resp);
      return;
    }

  }


  /***
   * 入出庫予定(未受注引当取消)
   */
  public static function deleteSTPlanReceive($datHeader) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();

      $sth = $dbh->prepare('
      DELETE FROM stockPlan
      WHERE sp_report_no = :REPORTNO
      ;');
      $sth->bindValue(':REPORTNO', $datHeader[0]['stc_report_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      $dbh->commit();
      echo json_encode($resp);
      return;
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['succeed'] = false;
      $resp['msg'] = '引当取消に失敗しました';
      echo json_encode($resp);
      return;
    }
  }


  /***
   * 入出庫予定データで、製造使用データ登録
   */
  public static function updateSTPlanProduce($datHeader, $datDetail) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();

      $currentDate = self::currentDate();
      $currentTime = self::currentTime();
      $reportNo = '';
      $recordCnt1 = 1;
      $recordCnt2 = 1;

      $ARRANGEMENTCD_PRODUCE = '210';   // 製造出来高
      $ARRANGEMENTCD_PROD_USE = '610';   // 製造使用
      $ARRANGEMENTCD_PROD_OTH = '611';   // その他使用

      // 製造指示番号の存在確認
      $sth = $dbh->prepare('
      SELECT * FROM estimatedetails
      WHERE ed_estimate_no = :ESTNO
      AND (ed_ar_cd = "1" OR ed_ar_cd = "2")
      ;');
      $sth->bindValue(':ESTNO', $datHeader[0]['stc_report_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($result) <= 0) {
        // 製造指示番号がなかったらエラー
        $resp['succeed'] = false;
        $resp['msg'] = '該当の受注番号が存在しませんでした。';
        echo json_encode($resp);
        return;
      }

      // 初期実装時の都合上、stockテーブルのカラム名で表示しているため注意
      foreach($datDetail as $record) {
        $record['stc_belong_cd'] = $_SESSION['companycd'];
        $record['stc_report_no'] = $datHeader[0]['stc_report_no'];
        $record['stc_report_date'] = self::paddingDate($datHeader[0]['stc_report_date']);
        $record['stc_target_id'] = $datHeader[0]['stc_report_no'];  // 製造使用の場合は、ターゲットは指示番号

        if ($datHeader[0]['stc_arrange_type'] === $ARRANGEMENTCD_PRODUCE) {
          // 製造出来高
          $record['stc_arrange_type'] = $record['stc_arrange_type'] ? $record['stc_arrange_type'] : '210';
          $record['stc_sub_no_01'] = $record['stc_sub_no_01'] ? $record['stc_sub_no_01'] : sprintf('%03d', $recordCnt1);
          $record['stc_sub_no_02'] = $record['stc_sub_no_02'] ? $record['stc_sub_no_02'] : '00';
          $recordCnt1++;
        } else if ($datHeader[0]['stc_arrange_type'] === $ARRANGEMENTCD_PROD_USE) {
          // 製造使用
          $record['stc_arrange_type'] = $record['stc_arrange_type'] ? $record['stc_arrange_type'] : '610';
          $record['stc_sub_no_01'] = $record['stc_sub_no_01'] ? $record['stc_sub_no_01'] : '00';
          $record['stc_sub_no_02'] = $record['stc_sub_no_02'] ? $record['stc_sub_no_02'] : sprintf('%03d', $recordCnt2);
          $recordCnt2++;
        } else if ($datHeader[0]['stc_arrange_type'] === $ARRANGEMENTCD_PROD_OTH) {
          // その他。梱包材などの使用があれば。
          $record['stc_arrange_type'] = $record['stc_arrange_type'] ? $record['stc_arrange_type'] : '611';
          $record['stc_sub_no_01'] = $record['stc_sub_no_01'] ? $record['stc_sub_no_01'] : '00';
          $record['stc_sub_no_02'] = $record['stc_sub_no_02'] ? $record['stc_sub_no_02'] : sprintf('%03d', $recordCnt2);
          $recordCnt2++;
        }
        $record['stc_customer_post_cd'] = $record['stc_customer_post_cd'] ? $record['stc_customer_post_cd'] : '';
        $record['stc_product_cd'] = $record['productcd'];
        $record['stc_sub_01'] = $record['sub01'] ? $record['sub01'] : $record['stc_sub_01'];
        $record['stc_sub_02'] = $record['sub02'] ? $record['sub02'] : $record['stc_sub_02'];
        $record['stc_sub_03'] = $record['sub03'] ? $record['sub03'] : $record['stc_sub_03'];
        $record['stc_sub_04'] = $record['sub04'] ? $record['sub04'] : $record['stc_sub_04'];
        $record['stc_sub_05'] = $record['sub05'] ? $record['sub05'] : $record['stc_sub_05'];
        $record['stc_sub_06'] = $record['sub06'] ? $record['sub06'] : $record['stc_sub_06'];
        $record['stc_sub_07'] = $record['sub07'] ? $record['sub07'] : $record['stc_sub_07'];
        $record['stc_sub_08'] = $record['sub08'] ? $record['sub08'] : $record['stc_sub_08'];
        $record['stc_sub_10'] = $record['sub09'] ? $record['sub09'] : $record['stc_sub_09'];
        $record['stc_sub_09'] = $record['sub10'] ? $record['sub10'] : $record['stc_sub_10'];
        $record['stc_sub_11'] = $record['sub11'] ? $record['sub11'] : $record['stc_sub_11'];
        $record['stc_sub_12'] = $record['sub12'] ? $record['sub12'] : $record['stc_sub_12'];
        $record['stc_sub_13'] = $record['sub13'] ? $record['sub13'] : $record['stc_sub_13'];

        $record['stc_update_at'] = $currentDate;
        $record['stc_update_time'] = $currentTime;
        $record['stc_update_cd'] = $_SESSION['usercd'];

        self::issueStockPlan('STPlanProduce', $currentDate, $record, $dbh);

      }


      $dbh->commit();
      echo json_encode($resp);
      return;
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['succeed'] = false;
      $resp['msg'] = '登録に失敗しました';
      echo json_encode($resp);
      return;
    }
  }


  /***
   * 入出庫予定データから入出庫データへ移動。製造使用と製造出来高実績。
   * 製造完了処理。製造処理実装までの代替処理。
   */
  public static function transPlanToStock($datHeader, $datDetail) {
    $resp = array('succeed' => true, 'msg' => '');

    $columns = self::getColumnDefs('prodplans');    
    $columnsT = self::getColumnDefs('t_prodplans');

    self::markAsHeaderPK($columns, 'pd_belong_cd');
    self::markAsHeaderPK($columns, 'pd_prod_plan_no');
    self::markAsHeaderPK($columns, 'pd_prod_plan_sub_no');
    self::markAsHeaderPK($columns, 'pd_process_cd'); 
    self::markAsHeaderPK($columnsT, 'pd_belong_cd');
    self::markAsHeaderPK($columnsT, 'pd_prod_plan_no');
    self::markAsHeaderPK($columnsT, 'pd_prod_plan_sub_no');
    self::markAsHeaderPK($columnsT, 'pd_process_cd'); 
    self::markAsHeaderPK($columnsT, 'pd_update_cnt'); 

    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();

      $ARRANGEMENTCD_PRODUCE = '210';
      $ARRANGEMENTCD_PROD_USE = '610';
      $ARRANGEMENTCD_SUB_PRODUCE = '211';

      $currentDate = self::currentDate();
      $currentTime = self::currentTime();
      $reportNo = '';
      $recordCnt1 = 1;
      $recordCnt2 = 1;
      $isProduct = false;
      $lotno = '';
      $estimateNo = '';
      $estimateSubNo = '';
      $productDate = '';
      $estimateShipNo = [];
      $typeManufacture = 'U';     // 材料の原産国データ用。UはUnknown
      
      // 初期実装時の都合上、stockテーブルのカラム名で表示しているため注意

      // 先んじて、製造材料の原産国データを取得する
      foreach ($datDetail as $rec) {
        if (self::checkNotSet($record['stc_arrange_type']) === false && $record['stc_arrange_type'] === $ARRANGEMENTCD_PROD_USE) {
          // 受払種別コードが製造材料の場合、材料の原産国データ取得
          $typeManufacture = self::checkNotSet($rec['stc_type_05']) ? 'U' : $rec['stc_type_05'];
        } 
      }

      foreach($datDetail as $record) {
        // 入出庫テーブルに実績登録
        if (self::checkNotSet($record['stc_report_date'])) {
          $record['stc_report_date'] = $currentDate;
        } else {
          $record['stc_report_date'] = self::paddingDate($record['stc_report_date']);
        }

        // // 製造指示番号の存在確認
        // $sth = $dbh->prepare('
        // SELECT * FROM prodplans
        // WHERE pd_prod_plan_no = :PRODNO;
        // ');
        // $sth->bindValue(':PRODNO', $datHeader[0]['stc_report_no'], PDO::PARAM_STR);
        // $sth->execute();
        // $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        // if (count($result) <= 0) {
        //   // 製造指示番号がなかったらエラー
        //   $resp['succeed'] = false;
        //   $resp['msg'] = '製造指示データが存在しませんでした。';
        //   echo json_encode($resp);
        //   return;
        // }

        if (self::checkNotSet($datHeader[0]['stc_arrange_type'])) {
          $resp['succeed'] = false;
          $resp['msg'] = '種別コードを入力してください。';
          echo json_encode($resp);
          return;
        }


        // *********************************************************************************************************
        // 画面表示していないデータをセット
        $record['stc_belong_cd'] = $_SESSION['companycd'];
        $record['stc_report_no'] = $datHeader[0]['stc_report_no'];
        $record['stc_report_date'] = self::paddingDate($datHeader[0]['stc_report_date']);
        $record['stc_target_id'] = $datHeader[0]['stc_report_no'];  // 製造使用の場合は、ターゲットは指示番号

        if ($datHeader[0]['stc_arrange_type'] === $ARRANGEMENTCD_PRODUCE) {
          // 製造出来高
          $record['stc_sub_no_01'] = $record['stc_sub_no_01'] ? $record['stc_sub_no_01'] : sprintf('%03d', $recordCnt1);
          $record['stc_sub_no_02'] = $record['stc_sub_no_02'] ? $record['stc_sub_no_02'] : '00';

          $record['stc_type_05'] = $typeManufacture;
          $isProduct = true;
          // if ($record['stc_qty_trans'] > 0) {
          //   $isProduct = true;
          // } else {
          //   $isProduct = false;
          // }
          $recordCnt1++;
        } else if ($datHeader[0]['stc_arrange_type'] === $ARRANGEMENTCD_PROD_USE) {
          // 製造使用
          $record['stc_sub_no_01'] = $record['stc_sub_no_01'] ? $record['stc_sub_no_01'] : '00';
          $record['stc_sub_no_02'] = $record['stc_sub_no_02'] ? $record['stc_sub_no_02'] : sprintf('%03d', $recordCnt2);
          
          $isProduct = false;
          $recordCnt2++;
        } else {
          // その他。副次生成品や梱包材など
          $record['stc_sub_no_01'] = $record['stc_sub_no_01'] ? $record['stc_sub_no_01'] : '00';
          $record['stc_sub_no_02'] = $record['stc_sub_no_02'] ? $record['stc_sub_no_02'] : sprintf('%03d', $recordCnt2);
          
          $isProduct = false;
          $recordCnt2++;
        }
        
        $record['stc_arrange_type'] = $record['stc_arrange_type'] ? $record['stc_arrange_type'] : '610';
        $record['stc_customer_post_cd'] = $record['stc_customer_post_cd'] ? $record['stc_customer_post_cd'] : '';
        $record['stc_product_cd'] = $record['productcd'];
        $record['stc_sub_01'] = $record['stc_sub_01'] ? $record['stc_sub_01'] : 0;
        $record['stc_sub_02'] = $record['stc_sub_02'] ? $record['stc_sub_02'] : 0;
        $record['stc_sub_03'] = $record['stc_sub_03'] ? $record['stc_sub_03'] : '';
        $record['stc_sub_04'] = $record['stc_sub_04'] ? $record['stc_sub_04'] : 0;
        $record['stc_sub_05'] = $record['stc_sub_05'] ? $record['stc_sub_05'] : 0;
        $record['stc_sub_06'] = $record['stc_sub_06'] ? $record['stc_sub_06'] : '';
        $record['stc_sub_07'] = $record['stc_sub_07'] ? $record['stc_sub_07'] : '';
        $record['stc_sub_08'] = $record['stc_sub_08'] ? $record['stc_sub_08'] : '';
        $record['stc_sub_10'] = $record['stc_sub_10'] ? $record['stc_sub_10'] : '';
        $record['stc_sub_09'] = $record['stc_sub_09'] ? $record['stc_sub_09'] : '';
        $record['stc_sub_11'] = $record['stc_sub_11'] ? $record['stc_sub_11'] : '';
        $record['stc_sub_12'] = $record['stc_sub_12'] ? $record['stc_sub_12'] : '';
        $record['stc_sub_13'] = $record['stc_sub_13'] ? $record['stc_sub_13'] : '';

        $record['stc_update_at'] = $currentDate;
        $record['stc_update_time'] = $currentTime;
        $record['stc_update_cd'] = $_SESSION['usercd'];
        // *********************************************************************************************************************** 

        if ($record['stc_qty_trans'] > 0) {
          // 数量が0より多いレコードを最終的な製造実績とみなす
          self::issueStock('STPLANPROD', $record['stc_report_date'], $record, $dbh);

          self::decreaseProductStorageRecord($record, $dbh);

        } 

        self::issueStockPlan('STPlanProduce', $record['stc_report_date'], $record, $dbh, true);
        
        // 製造品については、各テーブルにLotnoをセットする。
        // if ($isProduct) {
        //   // 該当する受注番号を取得 
        //   $sth = $dbh->prepare('SELECT * FROM prodplans
        //   WHERE pd_prod_plan_no = :PLANNO AND pd_prod_plan_sub_no = :SUBNO AND pd_process_cd = :PROCCD;');
        //   $sth->bindValue(':PLANNO', $record['stc_report_no'], PDO::PARAM_STR);
        //   $sth->bindValue(':SUBNO', $record['stc_su+b_no_01'], PDO::PARAM_STR);
        //   $sth->bindValue(':PROCCD', $record['stc_sub_no_02'], PDO::PARAM_STR);
        //   $sth->execute();
        //   $rsltProd = $sth->fetchAll(PDO::FETCH_ASSOC);

        //   if (count($rsltProd) > 0) {
        //     $estimateNo = $rsltProd[0]['pd_e_estimate_no'];
        //     $estimateSubNo = $rsltProd[0]['pd_e_estimate_sub_no'];
        //     $lotno = $rsltProd[0]['pd_prod_plan_no'] . $rsltProd[0]['pd_prod_plan_sub_no'] . $rsltProd[0]['pd_process_cd'];
        //     $productDate = self::paddingDate($record['stc_report_date']);

        //     $rsltProd[0]['pd_finish_date'] = self::paddingDate($record['stc_report_date']);
        //     $rsltProd[0]['pd_prod_qty'] = $record['stc_qty_trans'];
        //     $rsltProd[0]['pd_update_at'] = $record['stc_update_at'];
        //     $rsltProd[0]['pd_update_cd'] = $record['stc_update_cd'];
        //     $rsltProd[0]['pd_update_cnt'] = $rsltProd[0]['pd_update_cnt'] + 1;
        //   } else {
        //     continue;
        //   }

        //   // 製造指図テーブル更新 
        //   $sth = $dbh->prepare(self::makeUpdateSQL('prodplans', $columns));
        //   self::bindValueToUpdate($sth, $columns, $rsltProd[0]);
        //   $sth->execute();

        //   // 製造指図履歴テーブル更新 
        //   $sth = $dbh->prepare(self::makeInsertSQL('t_prodplans', $columnsT));
        //   self::bindInsertKeys($sth, $columnsT, $rsltProd[0]);
        //   $sth->execute();

        //   // 出荷引当テーブル更新
        //   $sth = $dbh->prepare('
        //   UPDATE shippingassign
        //   SET sas_lot_no = :LOTNO
        //   WHERE sas_belong_cd = :BELONGCD AND 
        //   sas_estimate_no = :ESTNO AND 
        //   sas_estimate_sub_no = :ESTSUBNO AND
        //   sas_shipment_sub_no IN (
        //     SELECT ed_shipment_sub_no FROM estimatedetails 
        //     WHERE ed_belong_cd = :BELONGCD2 AND 
        //     ed_estimate_no = :ESTNO2 AND 
        //     ed_estimate_sub_no = :ESTSUBNO2 /*AND 
        //     ed_prod_plan_sign = :STATUSFLAG*/
        //   )
        //   ;');
        //   $sth->bindValue(':LOTNO', $lotno, PDO::PARAM_STR);
        //   $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        //   $sth->bindValue(':ESTNO', $estimateNo, PDO::PARAM_STR);
        //   $sth->bindValue(':ESTSUBNO', $estimateSubNo, PDO::PARAM_STR);
        //   $sth->bindValue(':BELONGCD2', $_SESSION['companycd'], PDO::PARAM_STR);
        //   $sth->bindValue(':ESTNO2', $estimateNo, PDO::PARAM_STR);
        //   $sth->bindValue(':ESTSUBNO2', $estimateSubNo, PDO::PARAM_STR);
        //   // $sth->bindValue(':STATUSFLAG', '1', PDO::PARAM_STR);   
        //   $sth->execute();

        //   $cnt1 = $sth->rowCount();  

        //   // 入出庫予定テーブルの出荷予定データにロット番号をセット
        //   $sth = $dbh->prepare('
        //   UPDATE stockplan
        //   SET sp_type_04 = :LOTNO
        //   WHERE sp_belong_cd = :BELONGCD AND sp_month = :TREATMONTH AND sp_arrange_type = :ARRANGETYPE AND
        //     sp_report_no = :REPORTNO AND sp_sub_no_01 = :SUBNO AND sp_sub_no_02  IN (
        //       SELECT ed_shipment_sub_no FROM estimatedetails 
        //       WHERE ed_belong_cd = :BELONGCD2 AND 
        //       ed_estimate_no = :ESTNO2 AND 
        //       ed_estimate_sub_no = :ESTSUBNO2 /*AND 
        //       ed_prod_plan_sign = :STATUSFLAG*/
        //     )
        //   ;');
        //   $sth->bindValue(':LOTNO', $lotno, PDO::PARAM_STR);
        //   $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        //   $sth->bindValue(':TREATMONTH', '0000', PDO::PARAM_STR);
        //   $sth->bindValue(':ARRANGETYPE', '510', PDO::PARAM_STR); // 出荷予定固定
        //   $sth->bindValue(':REPORTNO', $estimateNo, PDO::PARAM_STR);
        //   $sth->bindValue(':SUBNO', $estimateSubNo, PDO::PARAM_STR);
        //   $sth->bindValue(':BELONGCD2', $_SESSION['companycd'], PDO::PARAM_STR);
        //   $sth->bindValue(':ESTNO2', $estimateNo, PDO::PARAM_STR);
        //   $sth->bindValue(':ESTSUBNO2', $estimateSubNo, PDO::PARAM_STR);
        //   // $sth->bindValue(':STATUSFLAG', '1', PDO::PARAM_STR);   
        //   $sth->execute();
          
        //   $cnt2 = $sth->rowCount();

        //   self::updateStatusCompleteProduction($rsltProd[0], $dbh);

        //   $cnt3 = $sth->rowCount();
        // }
      }

      $dbh->commit();
      echo json_encode($resp);
      return;
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['succeed'] = false;
      $resp['msg'] = '登録に失敗しました';
      echo json_encode($resp);
      return;
    }
  }



  // /****************************************************************************************
  //  * 出荷引当データ作成
  //  */
  // private static function updateShippingAssign($process, $dat, $dbh) {
  //   $columns = self::getColumnDefs('shippingassign');
  //   self::markAsHeaderPK($columns, 'sas_belong_cd');
  //   self::markAsHeaderPK($columns, 'sas_estimate_no');
  //   self::markAsHeaderPK($columns, 'sas_estimate_sub_no');
  //   self::markAsHeaderPK($columns, 'sas_shipment_sub_no');
  //   self::markAsHeaderPK($columns, 'sas_serial_no');
  //   $arUpData = [];
  //   $maxno = '01';    // 最大番号 Default 01

  //   try {
  //     switch ($process) {
  //       case 'MOD':
  //         if (preg_match('/^26/', $dat['moed_product_cd'])) {
  //           // 大分類26の製品は入出庫にかかわらないため除外する
  //           return;
  //         }
  //         /***
  //          * 発注の入庫の場合は、①入荷が別々になった場合と、②受注番号に紐づく、別の製品が発生しうる
  //          * ①の場合は、受注枝番同じで、引当連番インクリメント。
  //          * ②の場合は、受注枝番000で、引当連番インクリメント。
  //          */ 
  //         // 新規・更新で共通して必要なデータ
  //         $arUpData['sas_belong_cd'] = $dat['moed_belong_cd'];
  //         $arUpData['sas_estimate_no'] = $dat['moed_refer_no'];
  //         $arUpData['sas_statement_sub_no'] = '0000';
  //         $arUpData['sas_estimate_sub_no'] = $dat['moed_refer_sub_no'] === '' ? '000' : $dat['moed_refer_sub_no'];
  //         $arUpData['sas_shipment_sub_no'] = '01';  //Default値  
  //         $arUpData['sas_p_cd'] = $dat['moed_product_cd'];    
  //         $arUpData['sas_location'] = $dat['moed_customer_charge_cd'];
  //         $arUpData['sas_lot_no'] = $dat['moed_type_03'];
  //         $arUpData['sas_quantity'] = ((float)$dat['moed_stock_qty'] === 0.000) ? $dat['moed_quantity'] : $dat['moed_stock_qty'];
  //         $arUpData['sas_type_01'] = '0';
  //         $arUpData['sas_type_02'] = '';
  //         $arUpData['sas_type_03'] = '';
  //         $arUpData['sas_type_04'] = '';
  //         $arUpData['sas_type_05'] = '';
  //         $arUpData['sas_update_at'] = self::currentdate();
  //         $arUpData['sas_update_cd'] = $_SESSION['usercd'];
  //         $arUpData['sas_unit_tran'] = $dat['moed_unit_eval'] === '' ? $dat['moed_unit_tran'] : $dat['moed_unit_eval'];
  //         $arUpData['sas_parrangement_cd'] = $dat['moed_parrangement_cd'];
  //         if (self::checkNotSet($dat['moed_type_subject'])) {
  //           // その都度設定値は変わるが、default値として、通常は仕入品=原材料品、受注紐づきの仕入れ=リセール品と設定する。
  //           // (受注紐づきの場合、基本的には、受注引継ぎでデータが入っている)
  //           if ($dat['moed_refer_no'] !== '') {
  //             $dat['moed_type_subject'] = '4';
  //           } else {
  //             $dat['moed_type_subject'] = '2';
  //           }
  //         }
  //         $arUpData['sas_type_subject'] = $dat['moed_type_subject'];
  //         $arUpData['sas_serial_no'] = '01';    // Default値
          
  //         // 規格文字列作成
  //         $sth = $dbh->prepare('
  //         SELECT * FROM morderestimate
  //         WHERE moed_order_no = :ORDERNO AND moed_sub_no = :SUBNO 
  //         ;');
  //         $sth->bindValue(':ORDERNO', $dat['moed_order_no'], PDO::PARAM_STR);
  //         $sth->bindValue(':SUBNO', $dat['moed_sub_no'], PDO::PARAM_STR);
  //         $sth->execute();
  //         $result = $sth->fetchAll(PDO::FETCH_ASSOC);
  //         $arUpData['sas_sub_cd'] = self::storageSetPaddingAllArea($result[0], $dbh, true);
  //         // $sth = $dbh->prepare('
  //         // SELECT * FROM estimatedetails 
  //         // WHERE ed_belong_cd = :BELONGCD AND 
  //         // ed_estimate_no = :ESTNO AND 
  //         // ed_estimate_sub_no = :ESTSUBNO        
  //         // ;');
  //         // $sth->bindValue(':BELONGCD', $arUpData['sas_belong_cd'], PDO::PARAM_STR);
  //         // $sth->bindValue(':ESTNO', $arUpData['sas_estimate_no'], PDO::PARAM_STR);
  //         // $sth->bindValue(':ESTSUBNO', $arUpData['sas_estimate_sub_no'], PDO::PARAM_STR);
  //         // $sth->execute();
  //         // $result = $sth->fetchAll(PDO::FETCH_ASSOC);
  //         // if (count($result) > 0) {
  //         //   $arUpData['sas_sub_cd'] = self::storageSetPadding($result, $dbh, true);
  //         // }

  //         // 上記デフォルト値から変更になるケースを取得 *******************************
  //         // 最大枝番取得
  //         $sth = $dbh->prepare('
  //         SELECT 
  //         sas_belong_cd, sas_estimate_no, sas_statement_sub_no, sas_estimate_sub_no, sas_shipment_sub_no, 
  //         MAX(sas_serial_no) AS maxno
  //         FROM shippingassign
  //         WHERE sas_belong_cd = :BELONGCD AND 
  //         sas_estimate_no = :ESTNO AND 
  //         sas_estimate_sub_no = :ETSUBNO AND
  //         sas_shipment_sub_no = :SHIPSUB 
  //         GROUP BY sas_belong_cd, sas_estimate_no, sas_statement_sub_no, sas_estimate_sub_no, sas_shipment_sub_no
  //         ;');
  //         $sth->bindValue(':BELONGCD', $dat['moed_belong_cd'], PDO::PARAM_STR);
  //         $sth->bindValue(':ESTNO', $dat['moed_refer_no'], PDO::PARAM_STR);
  //         $sth->bindValue(':ETSUBNO', $dat['moed_refer_sub_no'] === '' ? '000' : $dat['moed_refer_sub_no'], PDO::PARAM_STR);
  //         $sth->bindValue(':SHIPSUB', '01', PDO::PARAM_STR);
  //         $sth->execute();
  //         $result = $sth->fetchAll(PDO::FETCH_ASSOC);

  //         if (count($result) > 0) {
  //           // 既存値の場合は更新
  //           $arUpData['sas_serial_no'] = sprintf('%02d', (int)$result[0]['maxno'] + 1);

  //           // 既存値の場合、該当の発注での引当データが既存かどうか確認
  //           $sth = $dbh->prepare('
  //           SELECT *  FROM shippingassign
  //           WHERE sas_belong_cd = :BELONGCD AND 
  //                 sas_estimate_no = :ESTNO AND 
  //                 sas_statement_sub_no = :SDNO AND 
  //                 sas_estimate_sub_no = :ETSUBNO AND
  //                 sas_shipment_sub_no = :SHIPSUB AND 
  //                 sas_lot_no = :LOTNO
  //           ;');
  //           $sth->bindValue(':BELONGCD', $dat['moed_belong_cd'], PDO::PARAM_STR);
  //           $sth->bindValue(':ESTNO', $dat['moed_refer_no'], PDO::PARAM_STR);
  //           $sth->bindValue(':SDNO', '0000', PDO::PARAM_STR);
  //           $sth->bindValue(':ETSUBNO', $dat['moed_refer_sub_no'], PDO::PARAM_STR);
  //           $sth->bindValue(':SHIPSUB', '01', PDO::PARAM_STR);
  //           $sth->bindValue(':LOTNO', $dat['moed_type_03'], PDO::PARAM_STR);
  //           $sth->execute();
  //           $resultLot = $sth->fetchAll(PDO::FETCH_ASSOC);

  //           if (count($resultLot) > 0) {
  //             // 更新データの場合は、シリアル番号をインクリメントしない
  //             $arUpData['sas_serial_no'] = $resultLot[0]['sas_serial_no'];

  //             $sth = $dbh->prepare(self::makeUpdateSQL('shippingassign', $columns));
  //             self::bindUpdateKeys($sth, $columns, $arUpData);
  //             $sth->execute();

  //             break;
  //           }
  //         }
  //         // 該当受注番号の引当データがない　OR　該当発注明細の引当データがない場合
  //         $sth = $dbh->prepare(self::makeInsertSQL('shippingassign', $columns));
  //         self::bindInsertKeys($sth, $columns, $arUpData);
  //         $sth->execute();
      
  //         break;

  //       }
  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }


  /**
   * 見積番号採番
   * 引数2こめはyymmddプラス客先CD
   */
  public static function ajaxGetEstimateNo($dat) {
    $dbh = self::dbPDO();
    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    try {
      $dbh->beginTransaction();
      // 見積書が存在するか ヘッダ  |||||||||||||||||||||||||||||||||||||||||||||||||||||| 
      $sth = $dbh->prepare('SELECT MAX(e_estimate_no) AS maxno FROM estimate 
      WHERE e_belong_cd = :BELONGCD AND e_estimate_no LIKE CONCAT(:ESTIMATENO, "%") 
      ;' );
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':ESTIMATENO', $dat, PDO::PARAM_STR);
      $sth->execute();
      $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
      echo $result;
    } catch (Exception $e) {
      $dbh->rollBack();
    }
  }

  /**
   * 製造指示番号取得
   */
  public static function getProdPlanNo() {
    $dbh = self::dbPDO();
    try {
      $today = self::currentDate();
      $prodPlanNo = 'S' . substr($today, 2, 6) . '001';

      $sth = $dbh->prepare('
      SELECT MAX(pd_prod_plan_no) AS planno FROM t_prodplans 
      WHERE pd_prod_plan_no LIKE :ISSUEDATE;
      ');
      $sth->bindValue(':ISSUEDATE', 'S' . substr($today, 2, 6) . '%', PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($result) > 0 && isset($result[0]['planno'])) {
        $no = sprintf('%03d', (int)substr($result[0]['planno'], 7, 3) + 1);
        $prodPlanNo = substr($result[0]['planno'], 0, 7) . $no;
      }

      echo json_encode($prodPlanNo);
    } catch (Exception $e) {
      throw $e;
    }
  }


  // 各種ヘッダ及び明細に対応するDB更新処理を実行する
  public static function editHeaderAndDetailHistory($tblnameH, $columnsH, $tblnameD, $columnsD, $datHeader, $datdetail, $dbh = null) {
    $resp = array('succeed' => true, 'msg' => '');
    $usenewdbh = false;
    if ($dbh === null) {
      $dbh = self::dbPDO();
      $usenewdbh = true;
    }
    try {
      if ($usenewdbh) {
        $dbh->beginTransaction();
      }
      // ヘッダ(1行のみ)
      $keyH = $datHeader[0];
      // 明細行全てが削除対象の場合、ヘッダも同時に削除する
      $detailsDelCount = 0;
      foreach ($datdetail as $keyD) {
        $detailsDelCount += self::checkDeleteRowRequired($keyD) ? 1 : 0;
      }
      if ($detailsDelCount >= count($datdetail)) {
        $keyH['isDeleted'] = true;
      }
      $deleteflagH = self::checkDeleteRowRequired($keyH);
      if ($deleteflagH === false) {
        // ヘッダを更新又は新規登録
        if (self::hasPrevPK($columnsH, $keyH)) {
          // 主キー前回値の行を更新
          $sth = $dbh->prepare(self::makeUpdateSQL($tblnameH, $columnsH));
          self::bindUpdateKeys($sth, $columnsH, $keyH);
          $sth->execute();
        } else {
          // 新規登録
          $sth = $dbh->prepare(self::makeInsertSQL($tblnameH, $columnsH));
          self::bindInsertKeys($sth, $columnsH, $keyH);
          $sth->execute();
        }
        // 明細行
        foreach ($datdetail as $keyD) {
          $deleteflagD = self::checkDeleteRowRequired($keyD);
          if ($deleteflagD === false) {
            if (self::hasPrevPK($columnsD, $keyD)) {
              // 明細を更新
              $sth = $dbh->prepare(self::makeUpdateSQL($tblnameD, $columnsD));
              self::bindUpdateKeys($sth, $columnsD, $keyD);
              $sth->execute();
            } else {
              // 明細を新規登録
              $sth = $dbh->prepare(self::makeInsertSQL($tblnameD, $columnsD));
              self::bindInsertKeys($sth, $columnsD, $keyD);
              $sth->execute();
            }
          } else {
            // 明細行削除フラグtrueの場合、更新せず行削除
            $sth = $dbh->prepare(self::makeDeleteSQL($tblnameD, $columnsD));
            self::bindDeleteKeys($sth, $columnsD, $keyD, true);
            $sth->execute();
          }
        }
      } else {
        // ヘッダ削除フラグtrueの場合、更新せずヘッダ及び全明細行を削除
        $sth = $dbh->prepare(self::makeDeleteSQL($tblnameH, $columnsH));
        self::bindDeleteKeys($sth, $columnsH, $keyH, false);
        $sth->execute();
        $sth = $dbh->prepare(self::makeDeleteAllDetailsSQL($tblnameD, $columnsD));
        self::bindDeleteAllDetailsKeys($sth, $columnsD, $keyH, true);
        $sth->execute();
      }
      if ($usenewdbh) {
        $dbh->commit();
      }
    } catch (Exception $e) {
      if ($usenewdbh) {
        $dbh->rollBack();
      }
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
    }
    echo json_encode($resp);
    return true;
  }

  /**
   * 見積計算　読込
   */
  public static function readEDCalc($dat) {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('
      SELECT 
      ec.*,ecd.*,
      p_name,
      e_desired_delivery_date,
      SUBSTR(p.p_cd,3,3) AS m_cd,
      SUBSTR(p.p_cd,6,3) AS w_cd,
      SUBSTR(ec.ec_reserve,1,1) AS ec_reserve_01,
      1.00 AS ec_factor,
      0 AS ec_loss_area,
      0 AS ec_unit_price,
      IF(ec_ed_sub_01=ec_ed_sub_02, round(w1.wm_weight * m.m_s_gravity_fe, 2), round((w1.wm_weight * m.m_s_gravity_fe + w2.wm_weight * m.m_s_gravity_fe)/2,2)) AS ec_area_weight,      
      m.*,
      ecd.*,
      w1.*,
      w2.*,
      w1.wm_weight AS wm_weight_01,
      w2.wm_weight AS wm_weight_02
      FROM estimatedetails_calc AS ecd 
      LEFT JOIN estimate_calc AS ec ON ecd.ecd_belong_cd= ec.ec_belong_cd AND ecd.ecd_estimate_no = ec.ec_estimate_no AND ecd.ecd_estimatecalc_no = ec.ec_estimatecalc_no
      LEFT JOIN estimate AS e ON e.e_estimate_no = ecd.ecd_estimate_no
      LEFT JOIN estimatedetails AS ed ON ed.ed_estimate_no = ecd.ecd_estimate_no AND ed.ed_estimate_sub_no = ecd.ecd_estimate_sub_no
      LEFT JOIN product AS p ON ec.ec_p_cd = p.p_cd
      LEFT JOIN weight AS w1 ON w1.wm_belong_cd = ed.ed_belong_cd AND w1.wm_cd = SUBSTR(ec.ec_p_cd,6,3) AND CAST(w1.wm_dia AS SIGNED) = (ec.ec_ed_sub_01 * 10) 
      AND IF(w1.wm_type_mesh="0", ec.ec_ed_sub_03="", ec.ec_ed_sub_03="P") AND CAST(w1.wm_mesh AS SIGNED) = (ec.ec_ed_sub_04 * 10)   AND w1.wm_unit_cd = ec.ec_ed_sub_06 
      LEFT JOIN weight AS w2 ON w2.wm_belong_cd = ed.ed_belong_cd AND w2.wm_cd = SUBSTR(ec.ec_p_cd,6,3) AND CAST(w2.wm_dia AS SIGNED) = (ec.ec_ed_sub_02 * 10) 
      AND IF(w2.wm_type_mesh="0", ec.ec_ed_sub_03="", ec.ec_ed_sub_03="P") AND CAST(w2.wm_mesh AS SIGNED) = (ec.ec_ed_sub_05 * 10)   AND w2.wm_unit_cd = ec.ec_ed_sub_06 
      LEFT JOIN material AS m ON m.m_belong_cd = ec.ec_belong_cd AND m.m_cd = SUBSTR(ec.ec_p_cd,6,3)
      WHERE ecd.ecd_belong_cd = :BELONGCD AND 
      ecd.ecd_estimate_no = :ESTIMATENO AND 
      ecd.ecd_estimatecalc_no = :CALCNO
      ;');
      $sth->bindValue( ':BELONGCD', $dat['ed_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue( ':ESTIMATENO', $dat['ed_estimate_no'], PDO::PARAM_STR);
      $sth->bindValue( ':CALCNO', $dat['calcno'], PDO::PARAM_STR);
      $sth->execute();
      $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
      echo $result;
    } catch (Exception $e) {
      throw $e;
    }
    return;
  }


  /**
   * 指図金網データ読込
   */
  public static function readProdPlansWire($dat) {
    $result = [];
    $dbh = self::dbPDO();
    try {

      $sth = $dbh->prepare('
      SELECT 
      pw.*, pp.*, substring(pp.pp_p_cd, 3, 3) AS pp_p_material,
        substring(pp.pp_p_cd, 1, 8) AS pp_p_weave,
        pd.pd_material_unit_cost
      FROM prodplandetailsw AS pw
      LEFT JOIN prodplansw AS pp ON pw.pw_belong_cd = pp.pp_belong_cd AND pw.pw_prod_plan_no = pp.pp_prod_plan_no
      LEFT JOIN prodplans AS pd ON pd.pd_prod_plan_no = pp.pp_prod_plan_no AND pd.pd_prod_plan_sub_no = pw.pw_prod_plan_sub_no AND pd.pd_process_cd = "00"
      WHERE pp.pp_belong_cd = :BELONGCD AND 
      pp.pp_prod_plan_no = :PLANNO
      /*
      SELECT *,
      pcm.prc_name AS materialname,
      pcw.prc_name AS weavename,
      ml1.ml_gear_num AS ml_gear_num_01,
      ml1.ml_pitch AS ml_pitch_01,
      ml1.ml_pitch_factor AS ml_pitch_factor_01,
      ml1.ml_apply AS ml_apply_01,
      ml2.ml_gear_num AS ml_gear_num_02,
      ml2.ml_pitch AS ml_pitch_02,
      ml2.ml_pitch_factor AS ml_pitch_factor_02,
      ml2.ml_apply AS ml_apply_02,
      ed.ed_cost AS pp_cost,
      p.p_unit_tran AS pp_unit
      FROM prodplandetailsw AS pw 
      LEFT JOIN prodplansw AS pp ON pp.pp_belong_cd = pw.pw_belong_cd AND pp.pp_prod_plan_no = pw.pw_prod_plan_no
      LEFT JOIN prodplans AS pd ON pd.pd_belong_cd = pw.pw_belong_cd AND pd.pd_prod_plan_no = pw.pw_prod_plan_no AND pd.pd_prod_plan_sub_no = pw.pw_prod_plan_sub_no AND pd.pd_process_cd = pw.pw_process_cd
      LEFT JOIN product AS p ON p.p_belong_cd = pp.pp_belong_cd AND  p.p_cd = pp.pp_p_cd
      LEFT JOIN productcategory AS pcm ON pcm.prc_cd = "2" AND CONCAT(pcm.prc_cat_01_cd,pcm.prc_cat_02_cd) = SUBSTR(p.p_cd,1,5)
      LEFT JOIN productcategory AS pcw ON pcw.prc_cd = "3" AND CONCAT(pcw.prc_cat_01_cd,pcw.prc_cat_02_cd, pcw.prc_cat_03_cd) = SUBSTR(p.p_cd,1,8) 
      LEFT JOIN mold AS ml1 ON ml1.ml_cd = pp.pp_mold_01
      LEFT JOIN mold AS ml2 ON ml2.ml_cd = pp.pp_mold_02 
      LEFT JOIN estimatedetails AS ed ON ed.ed_estimate_no = pw.pw_estimate_no AND ed.ed_estimate_sub_no = pw.pw_estimate_sub_no
      WHERE pp.pp_belong_cd = :BELONGCD AND 
      pp.pp_prod_plan_no = :PLANNO
      */
      ;');
      $sth->bindValue( ':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue( ':PLANNO', $dat[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      
      echo json_encode($result);
      return;
    } catch (Exception $e) {
      throw $e;
    }
  }

  /***
   * 製造引当のデータ表示
   */
  public static function readManufacturingUseProduct($row) {
    $dbh = self::dbPDO();
    try {
      // 製造使用においては、受払予定データから使用データを表示する。
      $sth = $dbh->prepare('
        SELECT 
          sp_sub_01 AS sub01,
          sp_sub_02 AS sub02,
          sp_sub_03 AS sub03,
          sp_sub_04 AS sub04,
          sp_sub_05 AS sub05,
          sp_sub_06 AS sub06,
          sp_sub_07 AS sub07,
          sp_sub_08 AS sub08,
          sp_sub_09 AS sub09,
          sp_sub_10 AS sub10,
          sp_sub_11 AS sub11,
          sp_sub_12 AS sub12,
          sp_sub_13 AS sub13,
          sp_product_cd,
          sp_product_cd AS productcd,
          p_name AS sp_product_name,
          p_name AS productname,
          ar_name AS sp_parrangement_name,
          ar_name,
          "" AS sp_product_supple,
          sp_place_cd,
          w_name AS sp_place_name,
          sp_type_04, /* lotno */
          sp_update_at,
          sp_qty_trans,
          sp_unit_tran       
        FROM stockplan
        LEFT JOIN product ON p_cd = sp_product_cd
        LEFT JOIN arrangement ON ar_sub_cd = sp_parrangement_cd
        LEFT JOIN warehouse ON w_cd = sp_place_cd
        WHERE sp_belong_cd = :BELONGCD AND 
        sp_month = :TREATMONTH AND 
        sp_arrange_type = :ARRANGETYPE AND 
        sp_report_no = :PLANNO
      ;');
      $sth->bindValue( ':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue( ':TREATMONTH', '0000', PDO::PARAM_STR);
      $sth->bindValue( ':ARRANGETYPE', '610', PDO::PARAM_STR);
      $sth->bindValue( ':PLANNO', $row['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      for ($i = 0; $i < count($result); $i++) {
        $result[$i]['sub08'] = self::convertStrRoundDownToNumber($result[$i]['sub08']);
        $result[$i]['sub09'] = self::convertStrRoundDownToNumber($result[$i]['sub09']);
        $result[$i]['sp_qty_trans'] = self::convertStrRoundDownToNumber($result[$i]['sp_qty_trans']);
        $item = BookMaker::makeArrayProductSpec($result[$i]);
        $result[$i]['sp_product_supple'] = $item[1] . ' ' . $item[2];
      }
      
      echo json_encode($result);
    } catch (Exception $e) {
      throw $e;
    }
  } 


  // 各種マスタに対応するDB更新処理
  public static function editMasterDB($tblname, $columns, $sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      foreach ($sdat as $key) {
        $deleteflag = self::checkDeleteRowRequired($key);
        if ($deleteflag === false) {
          // 主キーの前回値が存在する場合、Updateで新キーに更新する
          // 主キーの前回値が存在しない場合、Insertを行う
          if (self::hasPrevPK($columns, $key)) {
            // 主キー前回値の行を更新
            $sth = $dbh->prepare(self::makeUpdateSQL($tblname, $columns));
            self::bindUpdateKeys($sth, $columns, $key);
            $sth->execute();
          } else {
            // 新規登録
            $sth = $dbh->prepare(self::makeInsertSQL($tblname, $columns));
            self::bindInsertKeys($sth, $columns, $key);
            $sth->execute();
          }
        } else {
          // 削除フラグtrueの場合、主キー前回値の行を削除
          $sth = $dbh->prepare(self::makeDeleteSQL($tblname, $columns));
          self::bindDeleteKeys($sth, $columns, $key, true);
          $sth->execute();
        }
      }
      $dbh->commit();
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      // error_log($e, "3", "C:/Apache24/htdocs/wbs/log/log_sono.log");
      error_log($e);
    }
    echo json_encode($resp);
    return true;
  }


  /***
   * マスタ　連続登録処理用
   */
  public static function serialEditMasterDB($tblname, $columns, $sdat, $dbh) {
    $result = [];
    try {
      foreach ($sdat as $key) {
        if ($tblname === 'product') {
          $sth = $dbh->prepare('
          SELECT * FROM product
          WHERE p_belong_cd = :BELONGCD AND p_cd = :PCD
          ;');
          $sth->bindValue(':BELONGCD', $key['p_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':PCD', $key['p_cd'], PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        } else if ($tblname === 'productcategory') {
          $sth = $dbh->prepare('
          SELECT * FROM productcategory
          WHERE prc_belong_cd = :BELONGCD AND prc_cd = :PRCCD AND prc_cat_01_cd = :P1CD AND prc_cat_02_cd = :P2CD AND prc_cat_03_cd = :P3CD
          ;');
          $sth->bindValue(':BELONGCD', $key['prc_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':PRCCD', $key['prc_cd'], PDO::PARAM_STR);
          $sth->bindValue(':P1CD', $key['prc_cat_01_cd'], PDO::PARAM_STR);
          $sth->bindValue(':P2CD', $key['prc_cat_02_cd'], PDO::PARAM_STR);
          $sth->bindValue(':P3CD', $key['prc_cat_03_cd'], PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        } 

        if (count($result) > 0) {
          // 既存値は書き換えなし
          // $sth = $dbh->prepare(self::makeUpdateSQL($tblname, $columns));
          // self::bindUpdateKeys($sth, $columns, $key);
          // $sth->execute();
        } else {
          // 新規登録   
          $sth = $dbh->prepare(self::makeInsertSQL($tblname, $columns));
          self::bindInsertKeys($sth, $columns, $key);
          $sth->execute();
        }
      }
    } catch (Exception $e) {
      return false;
    }
    return true;
  }

  private static function editMasterDataProduct($columns, $rec, $dbh) {
    $result = [];

    try {
      $sth = $dbh->prepare('
      SELECT * FROM product
      WHERE p_belong_cd = :BELONGCD AND p_cd = :PCD
      ;');
      $sth->bindValue(':BELONGCD', $rec['p_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue(':PCD', $rec['p_cd'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      
      if (count($result) > 0) {
        // 既存値は書き換えなし
        // $sth = $dbh->prepare(self::makeUpdateSQL($tblname, $columns));
        // self::bindUpdateKeys($sth, $columns, $key);
        // $sth->execute();
      } else {
        // 新規登録
        if (mb_strlen($rec['p_short_name']) > 10) {
          $rec['p_short_name'] = mb_substr($rec['p_short_name'], 0, 10);
        }
        $sth = $dbh->prepare(self::makeInsertSQL('product', $columns));
        self::bindInsertKeys($sth, $columns, $rec);
        $sth->execute();
      }
      return true;
    } catch (Exception $e) {
      return false;
    }
  }

  private static function editMasterDataPCategory($columns, $rec, $dbh) {
    $result = [];
    $str = '';

    try {
      $sth = $dbh->prepare('
      SELECT * FROM productcategory
      WHERE prc_belong_cd = :BELONGCD AND prc_cd = :PRCCD AND prc_cat_01_cd = :P1CD AND prc_cat_02_cd = :P2CD AND prc_cat_03_cd = :P3CD
      ;');
      $sth->bindValue(':BELONGCD', $rec['prc_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue(':PRCCD', $rec['prc_cd'], PDO::PARAM_STR);
      $sth->bindValue(':P1CD', $rec['prc_cat_01_cd'], PDO::PARAM_STR);
      $sth->bindValue(':P2CD', $rec['prc_cat_02_cd'], PDO::PARAM_STR);
      $sth->bindValue(':P3CD', $rec['prc_cat_03_cd'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      
      if (count($result) > 0) {
        // 既存→無視
      } else {
        // 新規登録
        // 中分類＆小分類の連結用名称取得
        if ($rec['prc_cd'] === '2') {
          $sth = $dbh->prepare('
          SELECT * FROM productcategory
          WHERE prc_belong_cd = :BELONGCD AND prc_cd = :PRCCD AND prc_cat_01_cd = :P1CD 
          ;');
          $sth->bindValue(':BELONGCD', $rec['prc_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':PRCCD', '1', PDO::PARAM_STR);
          $sth->bindValue(':P1CD', $rec['prc_cat_01_cd'], PDO::PARAM_STR);
          $sth->execute();
          $resultCat01 = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($resultCat01) <= 0) {
            return false;
          } 
          $str = $resultCat01[0]['prc_short_name'] . ' ' . $rec['prc_cat_02_name'];
        } else if ($rec['prc_cd'] === '3') {
          $sth = $dbh->prepare('
          SELECT * FROM productcategory
          WHERE prc_belong_cd = :BELONGCD AND prc_cd = :PRCCD AND prc_cat_01_cd = :P1CD AND prc_cat_02_cd = :P2CD
          ;');
          $sth->bindValue(':BELONGCD', $rec['prc_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':PRCCD', '2', PDO::PARAM_STR);
          $sth->bindValue(':P1CD', $rec['prc_cat_01_cd'], PDO::PARAM_STR);
          $sth->bindValue(':P2CD', $rec['prc_cat_02_cd'], PDO::PARAM_STR);
          $sth->execute();
          $resultCat02 = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($resultCat02) <= 0) {
            // なかったら、
            $str .= $rec['prc_cat_02_name'];
          } else {
            $str .= $resultCat02[0]['prc_short_name'];
          }
          $str .= ' ' . $rec['prc_cat_03_name'];
  
        } 
        
        if (mb_strlen($str) > 50) {
          $rec['prc_short_name'] = mb_substr($str, 0, 50);
        } else {
          $rec['prc_short_name'] = $str;
        }

        $sth = $dbh->prepare(self::makeInsertSQL('productcategory', $columns));
        self::bindInsertKeys($sth, $columns, $rec);
        $sth->execute();
      }
      return true;
    } catch (Exception $e) {
      return false;
    }
  }

  public static function existData($tblname, $columns, $key, $dbh) {
    $str = 'SELECT * FROM ' . $tblname . '';
    $isFirstCol = true;
    foreach ($columns as $col) {
      if ($col->pk === 'PRI' && $col->isHeaderPK === true) {
        $str .= ($isFirstCol === false ? ' AND ' : ' WHERE ') . '`' . $col->field . '`=:' . $col->field;
        $isFirstCol = false;
      }
    }
    return $str;
  }


  /**
   * 見積書ファイルを作成する
   */
  public static function makeEstimateFile($sdat) {
    $results = null;
    // システムCDを取得
    $belongCd = $_SESSION['companycd'];
    try {
      // データベースから出力に使用するデータを取得
      $dbh = self::dbPDO();
      $sth = $dbh->prepare('
      SELECT ed.*,e.*,
        c.C_ADDRESS_NO,
        c.C_ADDRESS_01,
        c.C_ADDRESS_02,
        p.p_type_subject,
        c.C_CUSTOMER_NAME,
        cp.CP_POST_NAME,
        e.e_estimate_date,
        cc.CC_CHARGE_NAME, 
        e.e_estimate_no,
        REPLACE(DATE_ADD(DATE_FORMAT(e.e_estimate_date, "%Y-%m-%d" ), INTERVAL CAST(e.e_valid_month AS SIGNED) MONTH), "-", "") AS deadline,
        IF(e.e_customer_order_no = "", e.e_estimate_no, e.e_customer_order_no) AS orderno,
        IF(ed.ed_customer_p_name = "", p.p_name, "") AS productname,
        IF(ed.ed_customer_p_name = "", "", ed.ed_customer_p_name) AS customerpname,
        p_type,
        p_name,
        us.USER_NAME AS salesmanname,
        cpst.CP_POST_NAME AS stname,
        cpsh.CP_POST_NAME AS shname,
        TRIM(SUBSTR(e_remarks, 31, 30)) AS e_remark_01,
        (CURDATE() + 0) AS curdate,
        ed.ed_sub_01 AS sub01,
        ed.ed_sub_02 AS sub02,
        ed.ed_sub_03 AS sub03,
        ed.ed_sub_04 AS sub04,
        ed.ed_sub_05 AS sub05,
        ed.ed_sub_06 AS sub06,
        ed.ed_sub_07 AS sub07,
        ed.ed_sub_08 AS sub08,
        ed.ed_sub_09 AS sub09,
        ed.ed_sub_10 AS sub10,
        ed.ed_sub_11 AS sub11,
        ed.ed_sub_12 AS sub12,
        ed.ed_sub_13 AS sub13, 
        ar_name,
        ed.ed_sub_num_03 AS wireno,
        e.e_customer_order_no
      FROM estimatedetails AS ed
      LEFT JOIN estimate AS e ON 
        e.e_belong_cd = ed.ed_belong_cd AND e.e_estimate_no = ed.ed_estimate_no
      LEFT JOIN customer AS c ON 
        c.c_customer_cd = e.e_customer_cd
      LEFT JOIN customerpost AS cp ON 
        cp.cp_customer_cd = e.e_customer_cd AND cp.cp_post_cd = e.e_customer_post_cd
      LEFT JOIN customercharge AS cc ON 
        cc.CC_CUSTOMER_CD = e.e_customer_cd AND cc.CC_POST_CD = e.e_customer_post_cd AND cc.CC_CHARGE_CD = e.e_customer_charge_cd
      LEFT JOIN customerpost AS cpst ON 
        cpst.CP_CUSTOMER_CD = e.e_customer_cd AND cpst.CP_POST_CD = e.e_delivery_cd
      LEFT JOIN customerpost AS cpsh ON 
        cpsh.CP_CUSTOMER_CD = e.e_customer_cd  AND cpsh.CP_POST_CD = e.e_shipper_cd
      LEFT JOIN product AS p ON 
        p.p_belong_cd = ed.ed_belong_cd AND p.p_cd = ed.ed_p_cd AND p_type_continue = "0"
      LEFT JOIN unit AS u ON 
        u.u_belong_cd = p.p_belong_cd AND u.u_cd = p.p_unit_tran
      LEFT JOIN user AS us ON
        us.USER_CD = e.e_salesman_cd
      LEFT JOIN arrangement AS ar ON 
        ar.ar_sub_cd = ed.ed_parrangement_cd
        WHERE ed.ed_belong_cd = :BELONGCD AND ed_estimate_no = :ESTIMATENO
        ORDER BY ed_estimate_sub_no 
      ;');
      $sth->bindValue(':BELONGCD', $belongCd, PDO::PARAM_STR);
      $sth->bindValue(':ESTIMATENO', $sdat['e_estimate_no'], PDO::PARAM_STR);
      $sth->execute();
      $results = $sth->fetchAll(PDO::FETCH_ASSOC);
      // ファイル出力処理を実行
      BookMaker::issueEstimateFile($results);
    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 注文請書作成
   */
  public static function makeEstimateAcceptFile($sdat) {
    $results = null;
    // システムCDを取得
    $belongCd = $_SESSION['companycd'];
    try {
      // データベースから出力に使用するデータを取得
      $dbh = self::dbPDO();
      $sth = $dbh->prepare('
        SELECT ed.*,e.*,
        c.C_ADDRESS_NO,
        c.C_ADDRESS_01,
        c.C_ADDRESS_02,
        p.p_type_subject,
        c.C_CUSTOMER_NAME,
        cp.CP_POST_NAME,
        e.e_estimate_date,
        cc.CC_CHARGE_NAME, 
        e.e_estimate_no,
        REPLACE(DATE_ADD(DATE_FORMAT(e.e_estimate_date, "%Y-%m-%d" ), INTERVAL CAST(e.e_valid_month AS SIGNED) MONTH), "-", "") AS deadline,
        IF( e.e_customer_order_no = "", e.e_estimate_no, e.e_customer_order_no) AS orderno,
        IF(ed.ed_customer_p_name = "", p.p_name, "") AS productname,
        IF(ed.ed_customer_p_name = "", "", ed.ed_customer_p_name) AS customerpname,
        p_name,
        TRIM(SUBSTR(e_remarks, 31, 30)) AS e_remark_01, 
        us.USER_NAME AS salesmanname,
        cpdelv.CP_POST_NAME AS delvname,
        cpdelv.CP_ADDRESS_NO AS delvaddno,
        cpdelv.CP_ADDRESS_01 AS delvadd1,
        cpdelv.CP_ADDRESS_02 AS delvadd2,
        cpdelv.CP_TEL AS delvtel,
        cpdelv.CP_FAX AS delvfax,
        cpst.CP_POST_NAME AS stname,
        cpst.CP_ADDRESS_01 AS stadd1,
        cpst.CP_ADDRESS_02 AS stadd2,
        cpst.CP_TEL AS sttel,
        cpst.CP_FAX AS stfax,
        cpsh.CP_POST_NAME AS shname,
        cpsh.CP_ADDRESS_NO AS shaddno,
        cpsh.CP_ADDRESS_01 AS shadd1,
        cpsh.CP_ADDRESS_02 AS shadd2,
        cpsh.CP_TEL AS shtel,
        cpsh.CP_FAX AS shfax,
        (CURDATE() + 0) AS curdate,
        ed.ed_sub_01 AS sub01,
        ed.ed_sub_02 AS sub02,
        ed.ed_sub_03 AS sub03,
        ed.ed_sub_04 AS sub04,
        ed.ed_sub_05 AS sub05,
        ed.ed_sub_06 AS sub06,
        ed.ed_sub_07 AS sub07,
        ed.ed_sub_08 AS sub08,
        ed.ed_sub_09 AS sub09,
        ed.ed_sub_10 AS sub10,
        ed.ed_sub_11 AS sub11,
        ed.ed_sub_12 AS sub12,
        ed.ed_sub_13 AS sub13,
        ed.ed_sub_num_03 AS wireno,
        p_type,
        ar_name,
        e.e_customer_order_no
      FROM estimatedetails AS ed
      LEFT JOIN estimate AS e ON 
        e.e_belong_cd = ed.ed_belong_cd AND e.e_estimate_no = ed.ed_estimate_no
      LEFT JOIN customer AS c ON 
        c.c_customer_cd = e.e_customer_cd
      LEFT JOIN customerpost AS cp ON 
        cp.cp_customer_cd = e.e_customer_cd AND cp.cp_post_cd = e.e_customer_post_cd
      LEFT JOIN customercharge AS cc ON 
        cc.CC_CUSTOMER_CD = e.e_customer_cd AND cc.CC_POST_CD = e.e_customer_post_cd AND cc.CC_CHARGE_CD = e.e_customer_charge_cd
      LEFT JOIN customerpost AS cpdelv ON 
        cpdelv.CP_CUSTOMER_CD = e.e_customer_cd AND cpdelv.CP_POST_CD = e.e_delivery_cd
      LEFT JOIN customerpost AS cpst ON 
        cpst.CP_CUSTOMER_CD = e.e_customer_cd  AND cpst.CP_POST_CD = e.e_stay_cd
      LEFT JOIN customerpost AS cpsh ON 
        cpsh.CP_CUSTOMER_CD = e.e_customer_cd  AND cpsh.CP_POST_CD = e.e_shipper_cd
      LEFT JOIN product AS p ON 
        p.p_belong_cd = ed.ed_belong_cd AND p.p_cd = ed.ed_p_cd AND p_type_continue = "0"
      LEFT JOIN user AS us ON
        us.USER_CD = e.e_salesman_cd
      LEFT JOIN arrangement AS ar ON 
        ar.ar_sub_cd = ed.ed_parrangement_cd
        WHERE ed.ed_belong_cd = :BELONGCD AND ed_estimate_no = :ESTIMATENO
        ORDER BY ed_estimate_sub_no 
      ;');
      $sth->bindValue(':BELONGCD', $belongCd, PDO::PARAM_STR);
      $sth->bindValue(':ESTIMATENO', $sdat['e_estimate_no'], PDO::PARAM_STR);
      $sth->execute();
      $results = $sth->fetchAll(PDO::FETCH_ASSOC);
      // ファイル出力処理を実行
      BookMaker::issueEstimateConfirmationFile($results);
    } catch (Exception $e) {
      throw $e;
    }
  }

  
  /***
   * 指示用受注ファイル作成
   */
  public static function makeEstimateLPFile($sdat) {
    $results = null;
    // システムCDを取得
    $belongCd = $_SESSION['companycd'];
    try {
      // データベースから出力に使用するデータを取得
      $dbh = self::dbPDO();
      $sth = $dbh->prepare('
      SELECT *,
          c.C_ADDRESS_NO AS customeraddno,
          c.C_ADDRESS_01 AS customeradd01,
          c.C_ADDRESS_02 AS customeradd02,
          c.C_CUSTOMER_NAME AS customername,
          cp.CP_POST_NAME AS postname,
          cc.CC_CHARGE_NAME AS chargename, 
          REPLACE(DATE_ADD(DATE_FORMAT(e.e_estimate_date, "%Y-%m-%d" ), INTERVAL CAST(e.e_valid_month AS SIGNED) MONTH), "-", "") AS deadline,
          IF(ed.ed_customer_order_no = "", IF( e.e_customer_order_no = "", e.e_estimate_no, e.e_customer_order_no), ed.ed_customer_order_no) AS orderno,
          IF(ed.ed_customer_p_name = "", p.p_name, ed.ed_customer_p_name) AS p_name,
          IF(ed.ed_customer_p_name = "", p.p_name, "") AS productname,
          IF(ed.ed_customer_p_name = "", "", ed.ed_customer_p_name) AS customerpname,
          p_type,
          u.u_name AS u_name,
          us.USER_NAME AS salesmanname,
          cd.CP_POST_NAME AS delvname,
          cd.CP_ADDRESS_NO AS delvaddno,
          cd.CP_ADDRESS_01 AS delvadd1,
          cd.CP_ADDRESS_02 AS delvadd2,
          cd.CP_TEL AS delvtel,
          cd.CP_FAX AS delvfax,
          cst.CP_POST_NAME AS stname,
          cst.CP_ADDRESS_01 AS stadd1,
          cst.CP_ADDRESS_02 AS stadd2,
          cst.CP_TEL AS sttel,
          cst.CP_FAX AS stfax,
          cs.CP_POST_NAME AS shname,
          cs.CP_ADDRESS_NO AS shaddno,
          cs.CP_ADDRESS_01 AS shadd1,
          cs.CP_ADDRESS_02 AS shadd2,
          cs.CP_TEL AS shtel,
          cs.CP_FAX AS shfax,
        ed.ed_sub_01 AS sub01,
        ed.ed_sub_02 AS sub02,
        ed.ed_sub_03 AS sub03,
        ed.ed_sub_04 AS sub04,
        ed.ed_sub_05 AS sub05,
        ed.ed_sub_06 AS sub06,
        ed.ed_sub_07 AS sub07,
        ed.ed_sub_08 AS sub08,
        ed.ed_sub_09 AS sub09,
        ed.ed_sub_10 AS sub10,
        ed.ed_sub_11 AS sub11,
        ed.ed_sub_12 AS sub12,
        ed.ed_sub_13 AS sub13,
        ed.ed_price,
      (CURDATE() + 0) AS curdate
        FROM prodplandetailsw AS pdw 
        LEFT JOIN prodplansw AS pw ON pw.pp_belong_cd = pdw.pw_belong_cd AND pw.pp_prod_plan_no = pdw.pw_prod_plan_no
        LEFT JOIN estimatedetails AS ed ON ed.ed_estimate_no = pdw.pw_estimate_no AND ed.ed_estimate_sub_no = pdw.pw_estimate_sub_no
        LEFT JOIN estimate AS e ON e.e_estimate_no = ed.ed_estimate_no
        LEFT JOIN product AS p ON p.p_belong_cd = pw.pp_belong_cd AND  p.p_cd = pw.pp_p_cd
        LEFT JOIN customer AS c ON c.C_CUSTOMER_CD = e.e_customer_cd
        LEFT JOIN customerpost AS cp ON cp.cp_customer_cd = e.e_customer_cd AND cp.cp_post_cd = e.e_customer_post_cd
        LEFT JOIN customercharge AS cc ON cc.CC_CUSTOMER_CD = e.e_customer_cd AND cc.CC_POST_CD = e.e_customer_post_cd AND cc.CC_CHARGE_CD = e.e_customer_charge_cd
        LEFT JOIN customerpost AS cs ON cs.CP_CUSTOMER_CD = e.e_customer_cd AND cs.CP_POST_CD =  e.e_shipper_cd
        LEFT JOIN customerpost AS cd ON cd.CP_CUSTOMER_CD = e.e_customer_cd AND cd.CP_POST_CD = e.e_delivery_cd
        LEFT JOIN customerpost AS cst ON cst.CP_CUSTOMER_CD = e.e_customer_cd AND cst.CP_POST_CD = e.e_stay_cd
        /*LEFT JOIN unit AS u ON u.u_belong_cd = p.p_belong_cd AND u.u_cd = p.p_unit_tran*/
        LEFT JOIN user AS us ON us.USER_CD = e.e_salesman_cd
        LEFT JOIN arrangement AS ar ON 
        ar.ar_sub_cd = ed.ed_parrangement_cd
      WHERE 
      pdw.pw_prod_plan_no = :PLANNO AND pw_process_cd = "24" 
      ORDER BY ed_estimate_sub_no 
        /*SELECT ed.*,e.*,
        c.C_ADDRESS_NO,
        c.C_ADDRESS_01,
        c.C_CUSTOMER_NAME,
        cp.CP_POST_NAME,
        e.e_estimate_date,
        cc.CC_CHARGE_NAME, 
        REPLACE(DATE_ADD(DATE_FORMAT(e.e_estimate_date, "%Y-%m-%d" ), INTERVAL CAST(e.e_valid_month AS SIGNED) MONTH), "-", "") AS deadline,
        IF(ed.ed_customer_order_no = "", IF( e.e_customer_order_no = "", e.e_estimate_no, e.e_customer_order_no), ed.ed_customer_order_no) AS orderno,
        IF(ed.ed_customer_p_name = "", p.p_name, ed.ed_customer_p_name) AS p_name,
        u.u_name AS u_name,
        us.USER_NAME AS salesmanname,
        cpdelv.CP_POST_NAME AS delvname,
        cpdelv.CP_ADDRESS_01 AS delvadd1,
        cpdelv.CP_ADDRESS_02 AS delvadd2,
        cpdelv.CP_TEL AS delvtel,
        cpdelv.CP_FAX AS delvfax,
        cpst.CP_POST_NAME AS stname,
        cpst.CP_ADDRESS_01 AS stadd1,
        cpst.CP_ADDRESS_02 AS stadd2,
        cpst.CP_TEL AS sttel,
        cpst.CP_FAX AS stfax,
        cpsh.CP_POST_NAME AS shname,
        cpsh.CP_ADDRESS_01 AS shadd1,
        cpsh.CP_ADDRESS_02 AS shadd2,
        cpsh.CP_TEL AS shtel,
        cpsh.CP_FAX AS shfax,
        (CURDATE() + 0) AS curdate,
        ed.ed_sub_01 AS sub01,
        ed.ed_sub_02 AS sub02,
        ed.ed_sub_03 AS sub03,
        ed.ed_sub_04 AS sub04,
        ed.ed_sub_05 AS sub05,
        ed.ed_sub_06 AS sub06,
        ed.ed_sub_07 AS sub07,
        ed.ed_sub_08 AS sub08,
        ed.ed_sub_09 AS sub09,
        ed.ed_sub_10 AS sub10,
        ed.ed_sub_11 AS sub11,
        ed.ed_sub_12 AS sub12,
        ed.ed_sub_13 AS sub13
      FROM estimatedetails AS ed
      LEFT JOIN estimate AS e ON 
        e.e_belong_cd = ed.ed_belong_cd AND e.e_estimate_no = ed.ed_estimate_no
      LEFT JOIN customer AS c ON 
        c.c_customer_cd = e.e_customer_cd
      LEFT JOIN customerpost AS cp ON 
        cp.cp_customer_cd = e.e_customer_cd AND cp.cp_post_cd = e.e_customer_post_cd
      LEFT JOIN customercharge AS cc ON 
        cc.CC_CUSTOMER_CD = e.e_customer_cd AND cc.CC_POST_CD = e.e_customer_post_cd AND cc.CC_CHARGE_CD = e.e_customer_charge_cd
      LEFT JOIN customerpost AS cpdelv ON 
        cpdelv.CP_CUSTOMER_CD = e.e_customer_cd AND cpdelv.CP_POST_CD = e.e_delivery_cd
      LEFT JOIN customerpost AS cpst ON 
        cpst.CP_CUSTOMER_CD = e.e_customer_cd  AND cpst.CP_POST_CD = e.e_stay_cd
      LEFT JOIN customerpost AS cpsh ON 
        cpsh.CP_CUSTOMER_CD = e.e_customer_cd  AND cpsh.CP_POST_CD = e.e_shipper_cd
      LEFT JOIN product AS p ON 
        p.p_belong_cd = ed.ed_belong_cd AND p.p_cd = ed.ed_p_cd AND p_type_continue = "0"
      LEFT JOIN unit AS u ON 
        u.u_belong_cd = p.p_belong_cd AND u.u_cd = p.p_unit_tran
      LEFT JOIN user AS us ON
        us.USER_CD = e.e_salesman_cd
        WHERE ed.ed_belong_cd = :BELONGCD AND ed_estimate_no = :ESTIMATENO        */
      ;');
      $sth->bindValue(':PLANNO', $sdat['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();
      $results = $sth->fetchAll(PDO::FETCH_ASSOC);

      $resultArray = array();
      for ($i = 0; $i < 20; $i++) {
        $resultArray = array_merge($resultArray, $results);
      }

      // ファイル出力処理を実行
      BookMaker::issueEstimateLPFile($resultArray);
    } catch (Exception $e) {
      throw $e;
    }
  }


  /**
   * 取込用ファイル出力
   */
  public static function makeEstimateOutput($sdat) {
    $results = null;
    // システムCDを取得
    $belongCd = $_SESSION['companycd'];
    try {
      // データベースから出力に使用するデータを取得
      $dbh = self::dbPDO();
      $sth = $dbh->prepare('
      SELECT ed_estimate_sub_no, ed_p_cd, p_name, ed_parrangement_cd, ed_sub_01, ed_sub_12, ed_sub_02, ed_sub_13,
      ed_sub_num_03, ed_sub_03, ed_sub_04, ed_sub_05, ed_sub_06, ed_sub_08, ed_sub_10, ed_sub_09, ed_sub_11,
      ed_quantity, ed_unit_tran, ed_type_subject, ed_type_04, ed_sub_num_01, ed_unit_price, ed_price, ed_cost,
      ed_desired_delivery_date, ed_customer_order_no, ed_customer_p_name, ed_ar_cd, ed_warehouse_cd, ed_prod_plan_sign,
      ed_packing_group, ed_packing_size, ed_packing_num, ed_packing_cd, ed_packing_content, ed_remarks, ed_estimate_no
      FROM estimatedetails AS ed
      LEFT JOIN product AS p ON
        p.p_belong_cd = ed.ed_belong_cd AND p.p_cd = ed.ed_p_cd AND p_type_continue = "0"
      LEFT JOIN unit AS u ON
        u.u_belong_cd = p.p_belong_cd AND u.u_cd = p.p_unit_tran
      WHERE ed.ed_belong_cd = :BELONGCD AND ed_estimate_no = :ESTIMATENO
      ORDER BY ed_estimate_sub_no
      ;');
      $sth->bindValue(':BELONGCD', $belongCd, PDO::PARAM_STR);
      $sth->bindValue(':ESTIMATENO', $sdat['e_estimate_no'], PDO::PARAM_STR);
      $sth->execute();
      $results = $sth->fetchAll(PDO::FETCH_ASSOC);
      // ファイル出力処理を実行
      BookMaker::issueEstimateOutputFile($results);
    } catch (Exception $e) {
      throw $e;
    }
  }


  /**
   * 製造指示書
   */
  public static function makeProductPlanSheet($sdat) {
    $results = null;
    $dbh = self::dbPDO();
    try {
      // ファイル出力用データを取得
      $sth = $dbh->prepare('
      SELECT pdw.*, pw.*,
      e.e_estimate_date,
      ed.ed_estimate_no,
      pcm.prc_name AS materialname,
      pcw.prc_name AS weavename,
      wv.wv_name AS wvmachinename,
      c.C_CUSTOMER_NAME AS customername,
      cs.CP_POST_NAME  AS  shippername,
      cd.CP_POST_NAME  AS delivname,
      cst.CP_POST_NAME  AS stayname,
      cc.C_CUSTOMER_NAME  AS purchasename,
      gr.g_name AS crimpmachinename,
      pp_mold_01 AS m1cd,
      pp_mold_02 AS m2cd,
      m1.ml_mark_01 AS m1ml_mark_01,
      m1.ml_mark_02 AS m1ml_mark_02,
      m1.ml_gear_num AS m1ml_gear_num,
      m1.ml_pitch AS m1ml_pitch,
      m1.ml_apply AS m1ml_apply,
      m2.ml_mark_01 AS m2ml_mark_01,
      m2.ml_mark_02 AS m2ml_mark_02,
      m2.ml_gear_num AS m2ml_gear_num,
      m2.ml_pitch AS m2ml_pitch,
      m2.ml_apply AS m2ml_apply,
      ed.ed_sub_01 AS sub01,
      ed.ed_sub_02 AS sub02,
      ed.ed_sub_03 AS sub03,
      ed.ed_sub_04 AS sub04,
      ed.ed_sub_05 AS sub05,
      ed.ed_sub_06 AS sub06,
      ed.ed_sub_07 AS sub07,
      pdw.pw_ed_sub_08 AS sub08,
      pdw.pw_ed_sub_09 AS sub09,
      ed.ed_sub_10 AS sub10,
      ed.ed_sub_11 AS sub11,
      ed.ed_sub_12 AS sub12,
      pm.p_name AS materialname
      FROM prodplandetailsw AS pdw 
      LEFT JOIN prodplansw AS pw ON pw.pp_belong_cd = pdw.pw_belong_cd AND pw.pp_prod_plan_no = pdw.pw_prod_plan_no
      LEFT JOIN estimatedetails AS ed ON ed.ed_estimate_no = pdw.pw_estimate_no AND ed.ed_estimate_sub_no = pdw.pw_estimate_sub_no
      LEFT JOIN estimate AS e ON e.e_estimate_no = ed.ed_estimate_no
      LEFT JOIN product AS p ON p.p_belong_cd = pw.pp_belong_cd AND  p.p_cd = pw.pp_p_cd
      LEFT JOIN product AS pm ON pm.p_belong_cd = pw.pp_belong_cd AND  pm.p_cd = pw.pp_material_cd_01
      LEFT JOIN productcategory AS pcm ON pcm.prc_belong_cd = "001" AND pcm.prc_cd = "2" AND pcm.prc_cat_01_cd = SUBSTR(p.p_cd, 1, 2) AND pcm.prc_cat_02_cd= SUBSTR(p.p_cd, 3, 3)
      LEFT JOIN productcategory AS pcw ON pcw.prc_belong_cd = "001" AND pcw.prc_cd = "3" AND pcw.prc_cat_01_cd = SUBSTR(p.p_cd, 1, 2) AND pcw.prc_cat_02_cd = SUBSTR(p.p_cd, 3, 3) AND pcw.prc_cat_03_cd = SUBSTR(p.p_cd, 6, 3) 
      LEFT JOIN customer AS c ON c.C_CUSTOMER_CD = e.e_customer_cd
      LEFT JOIN customerpost AS cs ON cs.CP_CUSTOMER_CD = e.e_customer_cd AND cs.CP_POST_CD =  e.e_shipper_cd
      LEFT JOIN customerpost AS cd ON cd.CP_CUSTOMER_CD = e.e_customer_cd AND cd.CP_POST_CD = e.e_delivery_cd
      LEFT JOIN customerpost AS cst ON cst.CP_CUSTOMER_CD = e.e_customer_cd AND cst.CP_POST_CD = e.e_stay_cd
      LEFT JOIN customer AS cc ON cc.C_CUSTOMER_CD = pw.pp_purchase_cd
      LEFT JOIN mold AS m1 ON m1.ml_cd = pw.pp_mold_01
      LEFT JOIN mold AS m2 ON m2.ml_cd = pw.pp_mold_02
      LEFT JOIN gari AS gr ON gr.g_cd = pw.pp_gari_cd
      LEFT JOIN weave AS wv ON wv.wv_cd = pw.pp_weave_cd
      WHERE 
      pdw.pw_prod_plan_no = :PLANNO
      ORDER BY pw_prod_plan_no,pw_process_cd DESC,pw_group_sign
      ;');      
      $sth->bindValue( ':PLANNO', $sdat['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();
      $results = $sth->fetchAll(PDO::FETCH_ASSOC);

      // ファイル出力処理を実行
      BookMaker::issueProductPlanSheet($results);
    } catch (Exception $e) {
      throw $e;
    }
  }

  /**
   * 検査記録表
   */
  public static function makeInspectionLPSheet($sdat) {
    $results = null;
    $dbh = self::dbPDO();
    try {
      // ファイル出力用データを取得
      $sth = $dbh->prepare('
      SELECT *,
      par_name,
      c.C_CUSTOMER_NAME AS customername,
      cship.CP_POST_NAME AS shippername,
      cstay.CP_POST_NAME AS stayname,
      cdeliv.CP_POST_NAME AS delivname
      FROM prodplans AS pd
      LEFT JOIN estimatedetails AS ed ON ed.ed_estimate_no = pd.pd_e_estimate_no AND ed.ed_estimate_sub_no = pd.pd_e_estimate_sub_no AND ed.ed_shipment_sub_no = "00"
      LEFT JOIN estimate AS e ON ed.ed_estimate_no = e.e_estimate_no
      LEFT JOIN customer AS c ON c.C_CUSTOMER_CD = e.e_customer_cd
      LEFT JOIN customerpost AS cship ON cship.CP_CUSTOMER_CD = e.e_customer_cd AND cship.CP_POST_CD = e.e_shipper_cd
      LEFT JOIN customerpost AS cstay ON cstay.CP_CUSTOMER_CD = e.e_customer_cd AND cstay.CP_POST_CD = e.e_stay_cd
      LEFT JOIN customerpost AS cdeliv ON cdeliv.CP_CUSTOMER_CD = e.e_customer_cd AND cdeliv.CP_POST_CD = e.e_delivery_cd
      LEFT JOIN parrangement AS p ON p.par_cd = pd.pd_par_cd
      LEFT JOIN product AS pr ON pr.p_cd = ed.ed_p_cd
      WHERE pd_prod_plan_no = :PLANNO AND pd_process_cd = "00"
      ;');      
      $sth->bindValue( ':PLANNO', $sdat['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();
      $results1 = $sth->fetchAll(PDO::FETCH_ASSOC);

      $sth = $dbh->prepare('
      SELECT * FROM prodplansproc
      LEFT JOIN inspectionitem AS ini ON ini.ini_cd = ppr_ins_cd_01
      WHERE ppr_prod_plan_no = :PLANNO
      ;');
      $sth->bindValue( ':PLANNO', $sdat['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();
      $results2 = $sth->fetchAll(PDO::FETCH_ASSOC);

      $sth = $dbh->prepare('
      SELECT *,
      pd.pd_ed_sub_01 AS sub01,
      pd.pd_ed_sub_02 AS sub02,
      pd.pd_ed_sub_03 AS sub03,
      pd.pd_ed_sub_04 AS sub04,
      pd.pd_ed_sub_05 AS sub05,
      pd.pd_ed_sub_06 AS sub06,
      pd.pd_ed_sub_07 AS sub07,
      pd.pd_ed_sub_08 AS sub08,
      pd.pd_ed_sub_09 AS sub09,
      pd.pd_ed_sub_10 AS sub10,
      pd.pd_ed_sub_11 AS sub11,
      pd.pd_ed_sub_12 AS sub12,
      pd.pd_ed_sub_13 AS sub13 FROM statementdetails AS sd
      LEFT JOIN statement AS s ON s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
      LEFT JOIN prodplans AS pd ON pd.pd_e_estimate_no = sd.sd_e_estimate_no AND pd.pd_e_estimate_sub_no = sd.sd_estimate_sub_no AND pd_process_cd = "00"
      LEFT JOIN packing AS pac ON pac.pkg_cd = sd.sd_packing_cd
      WHERE pd.pd_prod_plan_no = :PLANNO
      ORDER BY sd.sd_packing_group ASC
      ;');
      $sth->bindValue( ':PLANNO', $sdat['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();
      $results3 = $sth->fetchAll(PDO::FETCH_ASSOC);

      // ファイル出力処理を実行
      BookMaker::issueInspectionSheet($results1, $results2, $results3);
    } catch (Exception $e) {
      throw $e;
    }
  }

  // /**
  //  * 製作指示書ファイル(製造リーフベース)を作成する
  //  */
  // public static function makeLPFile($sdat) {
  //   $results = null;
  //   $dbh = self::dbPDO();
  //   try {
  //     $sth = $dbh->prepare('SELECT LP.*, PPR.*, PPD.*, PP.*, ED.*, E.*, C.*, CC.*, P.*,
  //       PPR.p_name AS parent_p_name, B.b_proc_name, U1.USER_NAME AS SALESMAN_NAME, M.name AS WORKER_NAME
  //     FROM leafprod AS LP
  //     LEFT JOIN prodplans AS PP
  //       ON PP.pp_id = LP.l_ppd_prodplan_id
  //     LEFT JOIN prodplandetails AS PPD
  //       ON PPD.ppd_prodplan_id = LP.l_ppd_prodplan_id
  //       AND PPD.ppd_row = LP.l_ppd_row
  //     LEFT JOIN estimatedetails AS ED
  //       ON ED.ED_CUSTOMER_ID = PPD.ppd_ed_customer_id AND ED.ED_CUSTOMER_CD = PPD.ppd_ed_customer_cd
  //       AND ED.ED_CUSTOMER_POST_ID = PPD.ppd_ed_customer_post_id AND ED.ED_ESTIMATE_DATE = PPD.ppd_ed_estimate_date
  //       AND ED.ED_SALESMAN_ID = PPD.ppd_ed_salesman_id AND ED.ED_SALESMAN_CD = PPD.ppd_ed_salesman_cd
  //       AND ED.ED_ESTIMATE_SEQ_NO = PPD.ppd_ed_estimate_seq_no AND ED.ED_ESTIMATE_VER = PPD.ppd_ed_estimate_ver
  //       AND ED.ED_ESTIMATE_DETAILS_NO = PPD.ppd_ed_estimate_details_no
  //     LEFT JOIN estimate AS E
  //       ON E.E_CUSTOMER_ID = PPD.ppd_ed_customer_id AND E.E_CUSTOMER_CD = PPD.ppd_ed_customer_cd
  //       AND E.E_CUSTOMER_POST_ID = PPD.ppd_ed_customer_post_id AND E.E_ESTIMATE_DATE = PPD.ppd_ed_estimate_date
  //       AND E.E_SALESMAN_ID = PPD.ppd_ed_salesman_id AND E.E_SALESMAN_CD = PPD.ppd_ed_salesman_cd
  //       AND E.E_ESTIMATE_SEQ_NO = PPD.ppd_ed_estimate_seq_no AND E.E_ESTIMATE_VER = PPD.ppd_ed_estimate_ver
  //     LEFT JOIN customer AS C
  //       ON E.E_CUSTOMER_ID = C.C_CUSTOMER_ID
  //       AND E.E_CUSTOMER_CD = C.C_CUSTOMER_CD
  //     LEFT JOIN customercharge AS CC
  //       ON E.E_CUSTOMER_ID = CC.CC_CUSTOMER_ID
  //       AND E.E_CUSTOMER_CD = CC.CC_CUSTOMER_CD
  //       AND E.E_CUSTOMER_POST_ID = CC.CC_POST_CD
  //       AND E.E_CUSTOMER_CHARGE_ID = CC.CC_CHARGE_CD
  //     LEFT JOIN product AS P ON LP.l_p_id = P.p_cd
  //     LEFT JOIN product AS PPR ON PPD.ppd_products_id = PPR.p_cd
  //     LEFT JOIN bom AS B
  //       ON B.b_parent_id = LP.l_p_id AND B.b_child_id = 0
  //     LEFT JOIN members AS M
  //       ON LP.l_worker_member_id = M.id
  //     LEFT JOIN user AS U1
  //       ON E.E_SALESMAN_ID = U1.USER_ID
  //       AND E.E_SALESMAN_CD = U1.USER_CD
  //     WHERE LP.l_ppd_prodplan_id = :l_ppd_prodplan_id
  //       AND LP.l_ppd_row = :l_ppd_row
  //     ORDER BY LP.l_id ASC');
  //     $sth->bindValue(':l_ppd_prodplan_id', $sdat['l_ppd_prodplan_id'], PDO::PARAM_INT);
  //     $sth->bindValue(':l_ppd_row', $sdat['l_ppd_row'], PDO::PARAM_INT);
  //     $sth->execute();
  //     $results = $sth->fetchAll(PDO::FETCH_ASSOC);
  //     BookMaker::issueLPFile($results);
  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }

  // /**
  //  * 製作指示書ファイル(旧)を作成する
  //  */
  // public static function makeLeafFile($sdat) {
  //   $results = null;
  //   $dbh = self::dbPDO();
  //   try {
  //     $sth = $dbh->prepare('SELECT H1.*, C1.C_CUSTOMER_NAME, CP.CP_POST_NAME, (SELECT CC.CC_CHARGE_NAME FROM customercharge AS CC WHERE H1.L_CUSTOMER_ID = CC.CC_CUSTOMER_ID AND H1.L_CUSTOMER_CD = CC.CC_CUSTOMER_CD
  //     AND H1.L_CUSTOMER_POST_ID = CC.CC_POST_CD AND CC.CC_CHARGE_CD = H1.L_CUSTOMER_CHARGE_CD) AS CC_CHARGE_NAME,
  //           U1.USER_NAME AS SALESMAN, U1.USER_ID,U1.USER_CD,U1.USER_COLOR_R,U1.USER_COLOR_G,U1.USER_COLOR_B, U2.USER_NAME AS CREATER, U3.USER_NAME AS CONFIRM1, U4.USER_NAME AS LASTMAN,
  //           C2.C_CUSTOMER_NAME AS VENDER_NAME,C3.C_CUSTOMER_NAME AS SUPPLIER_NAME, P.PROCESS_NAME
  //     FROM (SELECT *, SUM(L_PROCESS_TIME) AS PROCSUM FROM leaflist
  //       GROUP BY L_CUSTOMER_ID, L_CUSTOMER_CD, L_CUSTOMER_POST_ID, L_ESTIMATE_DATE, L_SALESMAN_ID,
  //         L_SALESMAN_CD, L_ESTIMATE_SEQ_NO, L_ESTIMATE_VER, L_ESTIMATE_DETAILS_NO, L_LEAF_SEQ_NO, L_LEAF_VER, L_PROCESS_NO) AS H1
  //          JOIN user         AS U1 ON H1.L_SALESMAN_ID = U1.USER_ID   AND H1.L_SALESMAN_CD = U1.USER_CD
  //     LEFT JOIN user         AS U2 ON H1.L_REGISTRANT_ID = U2.USER_ID AND H1.L_REGISTRANT_CD = U2.USER_CD
  //     LEFT JOIN user         AS U3 ON H1.L_WORK_END_CONFIRMATION_MAN1_ID = U3.USER_ID AND H1.L_WORK_END_CONFIRMATION_MAN1_CD = U3.USER_CD
  //     LEFT JOIN user         AS U4 ON H1.L_LAST_CONFIRMATION_MAN_ID      = U4.USER_ID AND H1.L_LAST_CONFIRMATION_MAN_CD = U4.USER_CD
  //          JOIN customer     AS C1 ON H1.L_CUSTOMER_ID = C1.C_CUSTOMER_ID   AND H1.L_CUSTOMER_CD = C1.C_CUSTOMER_CD
  //     LEFT JOIN customer     AS C2 ON H1.L_VENDER_ID   = C2.C_CUSTOMER_ID   AND H1.L_VENDER_CD = C2.C_CUSTOMER_CD
  //     LEFT JOIN customer     AS C3 ON H1.L_SUPPLIER_ID = C3.C_CUSTOMER_ID   AND H1.L_SUPPLIER_CD = C3.C_CUSTOMER_CD
  //          JOIN customerpost AS CP ON H1.L_CUSTOMER_ID = CP.CP_CUSTOMER_ID  AND H1.L_CUSTOMER_CD = CP.CP_CUSTOMER_CD AND H1.L_CUSTOMER_POST_ID = CP.CP_POST_CD
  //          JOIN process      AS P  ON H1.L_PROCESS_ID  = P.pc_cd       AND H1.L_PROCESS_CD = P.pc_cd
  //     WHERE L_CUSTOMER_ID         = :L_CUSTOMER_ID         AND L_CUSTOMER_CD   = :L_CUSTOMER_CD
  //       AND L_CUSTOMER_POST_ID    = :L_CUSTOMER_POST_ID    AND L_ESTIMATE_DATE = :L_ESTIMATE_DATE
  //       AND L_SALESMAN_ID         = :L_SALESMAN_ID         AND L_SALESMAN_CD   = :L_SALESMAN_CD
  //       AND L_ESTIMATE_SEQ_NO     = :L_ESTIMATE_SEQ_NO     AND L_ESTIMATE_VER  = :L_ESTIMATE_VER
  //       AND L_ESTIMATE_DETAILS_NO = :L_ESTIMATE_DETAILS_NO AND L_LEAF_SEQ_NO   = :L_LEAF_SEQ_NO
  //       AND L_LEAF_VER            = :L_LEAF_VER
  //     ORDER BY H1.L_CUSTOMER_CD, H1.L_CUSTOMER_POST_ID, H1.L_ESTIMATE_DATE, H1.L_SALESMAN_CD, H1.L_ESTIMATE_SEQ_NO, H1.L_ESTIMATE_VER,
  //       H1.L_LEAF_VER, H1.L_ESTIMATE_DETAILS_NO, H1.L_LEAF_SEQ_NO, CAST(H1.L_PROCESS_NO AS SIGNED);');
  //     $sth->bindValue(':L_CUSTOMER_ID', $sdat['L_CUSTOMER_CD'] . '  ', PDO::PARAM_STR);
  //     $sth->bindValue(':L_CUSTOMER_CD', $sdat['L_CUSTOMER_CD'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_CUSTOMER_POST_ID', $sdat['L_CUSTOMER_POST_ID'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_ESTIMATE_DATE', $sdat['L_ESTIMATE_DATE'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_SALESMAN_ID', $sdat['L_SALESMAN_CD'] . '  ', PDO::PARAM_STR);
  //     $sth->bindValue(':L_SALESMAN_CD', $sdat['L_SALESMAN_CD'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_ESTIMATE_SEQ_NO', $sdat['L_ESTIMATE_SEQ_NO'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_ESTIMATE_VER', $sdat['L_ESTIMATE_VER'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_ESTIMATE_DETAILS_NO', $sdat['L_ESTIMATE_DETAILS_NO'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_LEAF_SEQ_NO', $sdat['L_LEAF_SEQ_NO'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_LEAF_VER', $sdat['L_LEAF_VER'], PDO::PARAM_STR);
  //     $sth->execute();
  //     $results = $sth->fetchAll(PDO::FETCH_ASSOC);
  //     $sth = $dbh->prepare('SELECT * FROM estimate
  //       WHERE E_CUSTOMER_ID      = :E_CUSTOMER_ID
  //         AND E_CUSTOMER_CD      = :E_CUSTOMER_CD
  //         AND E_CUSTOMER_POST_ID = :E_CUSTOMER_POST_ID
  //         AND E_ESTIMATE_DATE    = :E_ESTIMATE_DATE
  //         AND E_SALESMAN_ID      = :E_SALESMAN_ID
  //         AND E_SALESMAN_CD      = :E_SALESMAN_CD
  //         AND E_ESTIMATE_SEQ_NO  = :E_ESTIMATE_SEQ_NO
  //         AND E_ESTIMATE_VER     = :E_ESTIMATE_VER;');
  //     $sth->bindValue(':E_CUSTOMER_ID', $sdat['L_CUSTOMER_CD'] . '  ', PDO::PARAM_STR);
  //     $sth->bindValue(':E_CUSTOMER_CD', $sdat['L_CUSTOMER_CD'], PDO::PARAM_STR);
  //     $sth->bindValue(':E_CUSTOMER_POST_ID', $sdat['L_CUSTOMER_POST_ID'], PDO::PARAM_STR);
  //     $sth->bindValue(':E_ESTIMATE_DATE', $sdat['L_ESTIMATE_DATE'], PDO::PARAM_STR);
  //     $sth->bindValue(':E_SALESMAN_ID', $sdat['L_SALESMAN_CD'] . '  ', PDO::PARAM_STR);
  //     $sth->bindValue(':E_SALESMAN_CD', $sdat['L_SALESMAN_CD'], PDO::PARAM_STR);
  //     $sth->bindValue(':E_ESTIMATE_SEQ_NO', $sdat['L_ESTIMATE_SEQ_NO'], PDO::PARAM_STR);
  //     $sth->bindValue(':E_ESTIMATE_VER', $sdat['L_ESTIMATE_VER'], PDO::PARAM_STR);
  //     $sth->execute();
  //     $estimateData = $sth->fetchAll(PDO::FETCH_ASSOC);
  //     $repeatData = null;
  //     $repeatEstimateNo = isset($sdat['E_REPEAT_ESTIMATE_NO']) ? $sdat['E_REPEAT_ESTIMATE_NO'] : '';
  //     if ($repeatEstimateNo <> '') {
  //       $sth = $dbh->prepare('SELECT H1.*, H1.L_PROCESS_CD, L_WORKER_CD, WORKER_NAME, PROCRESULTTIME, E_REPEAT_ESTIMATE_NO
  //       FROM (SELECT L_CUSTOMER_ID, L_CUSTOMER_CD, L_CUSTOMER_POST_ID, L_ESTIMATE_DATE, L_SALESMAN_ID, L_SALESMAN_CD, L_ESTIMATE_SEQ_NO, L_ESTIMATE_VER, L_ESTIMATE_DETAILS_NO,
  //         L_LEAF_SEQ_NO, L_LEAF_VER, L_PROCESS_NO, L_PROCESS_ID, L_PROCESS_CD, L_LEAF_SUB_NO, L_VENDER_ID,
  //         L_VENDER_CD, L_SUPPLIER_ID, L_SUPPLIER_CD, L_PRODUCTS_NAME, L_PIC_NO, L_WORK_DIVISION, L_WORK_PRICE, L_WORKER_CD,
  //         SUM(L_PROCESS_TIME) AS PROCSUM,
  //         SUM(L_OPERATION_TIME) AS PROCRESULTTIME,
  //         MAX(L_FINISH_DATE) AS FINISHDT,
  //         GROUP_CONCAT(L_WORK_NAME) AS WORKNAME,
  //         GROUP_CONCAT(U3.USER_NAME) AS WORKER_NAME
  //           FROM leaflist AS H2
  //           LEFT JOIN user AS U3 ON H2.L_WORKER_ID = U3.USER_ID
  //             AND H2.L_WORKER_CD = U3.USER_CD
  //           GROUP BY H2.L_CUSTOMER_ID, H2.L_CUSTOMER_CD, H2.L_CUSTOMER_POST_ID, H2.L_ESTIMATE_DATE ,
  //             H2.L_SALESMAN_ID, H2.L_SALESMAN_CD, H2.L_ESTIMATE_SEQ_NO, H2.L_ESTIMATE_VER ,
  //             H2.L_ESTIMATE_DETAILS_NO, H2.L_LEAF_SEQ_NO, H2.L_LEAF_VER, H2.L_PROCESS_NO) AS H1
  //       LEFT JOIN estimate AS E ON
  //         ON L_CUSTOMER_ID = E_CUSTOMER_ID
  //         AND L_CUSTOMER_CD = E_CUSTOMER_CD
  //         AND L_CUSTOMER_POST_ID = E_CUSTOMER_POST_ID
  //         AND L_ESTIMATE_DATE = E_ESTIMATE_DATE
  //         AND L_SALESMAN_ID = E_SALESMAN_ID
  //         AND L_SALESMAN_CD = E_SALESMAN_CD
  //         AND L_ESTIMATE_SEQ_NO = E_ESTIMATE_SEQ_NO
  //         AND L_ESTIMATE_VER = E_ESTIMATE_VER
  //       WHERE (
  //         (L_CUSTOMER_ID,
  //           L_CUSTOMER_CD,
  //           L_CUSTOMER_POST_ID,
  //           L_ESTIMATE_DATE,
  //           L_SALESMAN_ID,
  //           L_SALESMAN_CD,
  //           L_ESTIMATE_SEQ_NO,
  //           L_ESTIMATE_VER,
  //           L_ESTIMATE_DETAILS_NO,
  //           L_LEAF_SEQ_NO,
  //           CAST(L_LEAF_VER AS SIGNED)
  //         ) IN (SELECT
  //           b.L_CUSTOMER_ID,
  //           b.L_CUSTOMER_CD,
  //           b.L_CUSTOMER_POST_ID,
  //           b.L_ESTIMATE_DATE,
  //           b.L_SALESMAN_ID,
  //           b.L_SALESMAN_CD,
  //           b.L_ESTIMATE_SEQ_NO,
  //           b.L_ESTIMATE_VER,
  //           b.L_ESTIMATE_DETAILS_NO,
  //           b.L_LEAF_SEQ_NO,
  //           MAX(CAST(b.L_LEAF_VER AS SIGNED))
  //         FROM leaflist b
  //         GROUP BY b.L_CUSTOMER_ID, b.L_CUSTOMER_CD, b.L_CUSTOMER_POST_ID,
  //           b.L_ESTIMATE_DATE, b.L_SALESMAN_ID, b.L_SALESMAN_CD, b.L_ESTIMATE_SEQ_NO,
  //           b.L_ESTIMATE_VER, b.L_ESTIMATE_DETAILS_NO, b.L_LEAF_SEQ_NO)
  //       )
  //       AND L_CUSTOMER_ID = :L_CUSTOMER_ID
  //       AND L_CUSTOMER_CD = :L_CUSTOMER_CD
  //       AND L_CUSTOMER_POST_ID = :L_CUSTOMER_POST_ID
  //       AND L_ESTIMATE_DATE = :L_ESTIMATE_DATE
  //       AND L_SALESMAN_ID = :L_SALESMAN_ID
  //       AND L_SALESMAN_CD = :L_SALESMAN_CD
  //       AND L_ESTIMATE_SEQ_NO = :L_ESTIMATE_SEQ_NO
  //       AND L_ESTIMATE_VER = :L_ESTIMATE_VER
  //       AND L_ESTIMATE_DETAILS_NO = :L_ESTIMATE_DETAILS_NO');
  //       $sth->bindValue(':L_CUSTOMER_ID', substr($repeatEstimateNo, 1, 5), PDO::PARAM_STR);
  //       $sth->bindValue(':L_CUSTOMER_CD', substr($repeatEstimateNo, 6, 3), PDO::PARAM_STR);
  //       $sth->bindValue(':L_CUSTOMER_POST_ID', substr($repeatEstimateNo, 9, 4), PDO::PARAM_STR);
  //       $sth->bindValue(':L_ESTIMATE_DATE', substr($repeatEstimateNo, 13, 6), PDO::PARAM_STR);
  //       $sth->bindValue(':L_SALESMAN_ID', substr($repeatEstimateNo, 19, 5), PDO::PARAM_STR);
  //       $sth->bindValue(':L_SALESMAN_CD', substr($repeatEstimateNo, 24, 3), PDO::PARAM_STR);
  //       $sth->bindValue(':L_ESTIMATE_SEQ_NO', substr($repeatEstimateNo, 27, 3), PDO::PARAM_STR);
  //       $sth->bindValue(':L_ESTIMATE_VER', substr($repeatEstimateNo, 30, 1), PDO::PARAM_STR);
  //       $sth->bindValue(':L_ESTIMATE_DETAILS_NO', $results[0]['L_ESTIMATE_DETAILS_NO'], PDO::PARAM_STR);
  //       $sth->execute();
  //       $repeatData = $sth->fetchAll(PDO::FETCH_ASSOC);
  //     }
  //     BookMaker::issueLeafFile($results, $repeatData);
  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }

  // /**
  //  * 製作金額明細表ファイルを作成する
  //  */
  // public static function makeLeafCostFile($sdat) {
  //   $results = null;
  //   $dbh = self::dbPDO();
  //   try {
  //     $sth = $dbh->prepare('SELECT H1.*, C1.C_CUSTOMER_NAME, CP.CP_POST_NAME, (SELECT CC.CC_CHARGE_NAME FROM customercharge AS CC WHERE H1.L_CUSTOMER_ID = CC.CC_CUSTOMER_ID AND H1.L_CUSTOMER_CD = CC.CC_CUSTOMER_CD
  //     AND H1.L_CUSTOMER_POST_ID = CC.CC_POST_CD AND CC.CC_CHARGE_CD = H1.L_CUSTOMER_CHARGE_CD) AS CC_CHARGE_NAME,
  //           U1.USER_NAME AS SALESMAN, U1.USER_ID,U1.USER_CD,U1.USER_COLOR_R,U1.USER_COLOR_G,U1.USER_COLOR_B, U2.USER_NAME AS CREATER, U3.USER_NAME AS CONFIRM1, U4.USER_NAME AS LASTMAN,
  //           C2.C_CUSTOMER_NAME AS VENDER_NAME,C3.C_CUSTOMER_NAME AS SUPPLIER_NAME, P.pc_name
  //     FROM (SELECT *, SUM(L_PROCESS_TIME) AS PROCSUM FROM leaflist
  //       GROUP BY L_CUSTOMER_ID, L_CUSTOMER_CD, L_CUSTOMER_POST_ID, L_ESTIMATE_DATE, L_SALESMAN_ID,
  //         L_SALESMAN_CD, L_ESTIMATE_SEQ_NO, L_ESTIMATE_VER, L_ESTIMATE_DETAILS_NO, L_LEAF_SEQ_NO, L_LEAF_VER, L_PROCESS_NO) AS H1
  //          JOIN user         AS U1 ON H1.L_SALESMAN_ID = U1.USER_ID   AND H1.L_SALESMAN_CD = U1.USER_CD
  //     LEFT JOIN user         AS U2 ON H1.L_REGISTRANT_ID = U2.USER_ID AND H1.L_REGISTRANT_CD = U2.USER_CD
  //     LEFT JOIN user         AS U3 ON H1.L_WORK_END_CONFIRMATION_MAN1_ID = U3.USER_ID AND H1.L_WORK_END_CONFIRMATION_MAN1_CD = U3.USER_CD
  //     LEFT JOIN user         AS U4 ON H1.L_LAST_CONFIRMATION_MAN_ID      = U4.USER_ID AND H1.L_LAST_CONFIRMATION_MAN_CD = U4.USER_CD
  //          JOIN customer     AS C1 ON H1.L_CUSTOMER_ID = C1.C_CUSTOMER_ID   AND H1.L_CUSTOMER_CD = C1.C_CUSTOMER_CD
  //     LEFT JOIN customer     AS C2 ON H1.L_VENDER_ID   = C2.C_CUSTOMER_ID   AND H1.L_VENDER_CD = C2.C_CUSTOMER_CD
  //     LEFT JOIN customer     AS C3 ON H1.L_SUPPLIER_ID = C3.C_CUSTOMER_ID   AND H1.L_SUPPLIER_CD = C3.C_CUSTOMER_CD
  //          JOIN customerpost AS CP ON H1.L_CUSTOMER_ID = CP.CP_CUSTOMER_ID  AND H1.L_CUSTOMER_CD = CP.CP_CUSTOMER_CD AND H1.L_CUSTOMER_POST_ID = CP.CP_POST_CD
  //          JOIN process      AS P  ON H1.L_PROCESS_ID  = P.pc_cd       AND H1.L_PROCESS_CD = P.pc_cd
  //     WHERE L_CUSTOMER_ID         = :L_CUSTOMER_ID         AND L_CUSTOMER_CD   = :L_CUSTOMER_CD
  //       AND L_CUSTOMER_POST_ID    = :L_CUSTOMER_POST_ID    AND L_ESTIMATE_DATE = :L_ESTIMATE_DATE
  //       AND L_SALESMAN_ID         = :L_SALESMAN_ID         AND L_SALESMAN_CD   = :L_SALESMAN_CD
  //       AND L_ESTIMATE_SEQ_NO     = :L_ESTIMATE_SEQ_NO     AND L_ESTIMATE_VER  = :L_ESTIMATE_VER
  //       AND L_ESTIMATE_DETAILS_NO = :L_ESTIMATE_DETAILS_NO AND L_LEAF_SEQ_NO   = :L_LEAF_SEQ_NO
  //       AND L_LEAF_VER            = :L_LEAF_VER
  //     ORDER BY H1.L_CUSTOMER_CD, H1.L_CUSTOMER_POST_ID, H1.L_ESTIMATE_DATE, H1.L_SALESMAN_CD, H1.L_ESTIMATE_SEQ_NO, H1.L_ESTIMATE_VER,
  //       H1.L_LEAF_VER, H1.L_ESTIMATE_DETAILS_NO, H1.L_LEAF_SEQ_NO, CAST(H1.L_PROCESS_NO AS SIGNED);');
  //     $sth->bindValue(':L_CUSTOMER_ID', $sdat['L_CUSTOMER_CD'] . '  ', PDO::PARAM_STR);
  //     $sth->bindValue(':L_CUSTOMER_CD', $sdat['L_CUSTOMER_CD'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_CUSTOMER_POST_ID', $sdat['L_CUSTOMER_POST_ID'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_ESTIMATE_DATE', $sdat['L_ESTIMATE_DATE'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_SALESMAN_ID', $sdat['L_SALESMAN_CD'] . '  ', PDO::PARAM_STR);
  //     $sth->bindValue(':L_SALESMAN_CD', $sdat['L_SALESMAN_CD'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_ESTIMATE_SEQ_NO', $sdat['L_ESTIMATE_SEQ_NO'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_ESTIMATE_VER', $sdat['L_ESTIMATE_VER'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_ESTIMATE_DETAILS_NO', $sdat['L_ESTIMATE_DETAILS_NO'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_LEAF_SEQ_NO', $sdat['L_LEAF_SEQ_NO'], PDO::PARAM_STR);
  //     $sth->bindValue(':L_LEAF_VER', $sdat['L_LEAF_VER'], PDO::PARAM_STR);
  //     $sth->execute();
  //     $results = $sth->fetchAll(PDO::FETCH_ASSOC);
  //     BookMaker::issueLeafCostFile($results);
  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }

  /**
   * 材料注文書ファイルを作成する  
   */
  public static function makeMaterialOrderFile($sdat) {
    $results = null;
    // システムCDを取得
    $belongCd = $_SESSION['companycd'];
    $dbh = self::dbPDO();
    try {
      
      $dbh->beginTransaction();
      // 発行日更新
      $sth = $dbh->prepare('
      UPDATE morderestimate
      SET moed_order_date = :ORDERDATE,
      moed_update_at = :UPDATEAT,
      moed_update_cd = :UPDATECD
      WHERE moed_belong_cd = :BELONGCD AND 
      moed_order_no = :ORDERNO 
      ;');
      $sth->bindValue(':ORDERDATE', self::currentDate(), PDO::PARAM_STR);
      $sth->bindValue(':UPDATEAT', self::currentDate(), PDO::PARAM_STR);
      $sth->bindValue(':UPDATECD', $_SESSION['usercd'], PDO::PARAM_STR);
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':ORDERNO', $sdat['moed_order_no'], PDO::PARAM_STR);
      $sth->execute();
      $dbh->commit();

      $sth = $dbh->prepare('
      SELECT 
        moed_belong_cd,
        moed_type_subject,
        moed_order_no,
        moed_sub_no,
        moed_accept_sub_no,
        moed_buy_type,
        moed_customer_cd,
        moed_customer_post_cd,
        moed_customer_charge_cd,
        moed_salesman_cd,
        moed_order_date,
        moed_arrival_hd_date,
        moed_refer_no,
        moed_report_remarks,
        moed_product_cd,
        moed_quantity,
        moed_unit_qty,
        moed_unit_price,
        moed_money,
        moed_money_tax,
        moed_money_inc_tax,
        moed_dt_remarks,
        moed_remarks,
        moed_sub_01,
        moed_sub_02,
        moed_sub_03,
        moed_sub_04,
        moed_sub_05,
        moed_sub_06,
        moed_sub_07,
        moed_sub_08,
        moed_sub_09,
        moed_sub_10,
        moed_sub_11,
        moed_sub_12,
        moed_sub_13,
        moed_sub_num_01,
        moed_sub_num_02,
        moed_sub_num_03,
        moed_sub_num_04,
        moed_type_01,
        moed_type_02,
        moed_type_03,
        moed_refer_sub_no,
        moed_manufacture_cd,
        moed_customer_charge_cd AS moed_warehouse_cd,
        moed_unit_tran,
        moed_type_subject,
        moed_inventory_type,
        moed_product_name AS productname,
        moed_product_name AS p_name,
        moed_unit_eval,
        moed_stock_qty,
        moed_shipper_cd,
        moed_delivery_cd,
        moed_parrangement_cd,  
        moed_update_at,
        moed_update_cd,
        (CURDATE() + 0) AS curdate,
        c.C_ADDRESS_NO,
        c.C_ADDRESS_01,
        c.C_ADDRESS_02,
        c.C_CUSTOMER_NAME,
        us.user_name AS salesmanname,
        moed_remarks,
        cdlv.CP_ADDRESS_NO AS delivzip,
        cdlv.CP_ADDRESS_01 AS delivadd1,
        cdlv.CP_ADDRESS_02 AS delivadd2,
        cdlv.CP_POST_NAME AS delivname,
        cdlv.CP_TEL AS delivtel,
        h.H_NO,
        h.H_ADDRESS,
        h.H_COMPANY_NAME,
        h.H_TEL,      
        csh.CP_ADDRESS_NO AS shipzip,
        csh.CP_ADDRESS_01 AS shipadd1,
        csh.CP_ADDRESS_02 AS shipadd2,
        csh.CP_POST_NAME AS shipname,
        csh.CP_TEL AS shiptel,    
        "" AS customerpname,
        par.ar_name,
        moed_sub_01 AS sub01,
        moed_sub_02 AS sub02,
        moed_sub_03 AS sub03,
        moed_sub_04 AS sub04,
        moed_sub_05 AS sub05,
        moed_sub_06 AS sub06,
        moed_sub_07 AS sub07,
        moed_sub_08 AS sub08,
        moed_sub_09 AS sub09,
        moed_sub_10 AS sub10,
        moed_sub_11 AS sub11,
        moed_sub_12 AS sub12,
        moed_sub_13 AS sub13,
        ""  AS wireno,
        p.p_type 
        , cp.CP_POST_NAME,
        cc.CC_CHARGE_NAME,
        e.e_customer_order_no
      FROM morderestimate AS m
      LEFT JOIN CUSTOMER AS c ON c.C_CUSTOMER_CD = moed_customer_cd
      LEFT JOIN user AS us ON us.user_cd = moed_salesman_cd
      LEFT JOIN product AS p ON p.p_cd = moed_product_cd
      LEFT JOIN customerpost AS cdlv ON cdlv.CP_CUSTOMER_CD = moed_customer_cd  AND cdlv.CP_POST_CD = moed_delivery_cd
      LEFT JOIN customerpost AS csh ON csh.CP_CUSTOMER_CD = moed_customer_cd  AND csh.CP_POST_CD = moed_shipper_cd
      LEFT JOIN housecompany AS h ON h.H_COMPANY_CD = m.moed_belong_cd 
      LEFT JOIN arrangement AS par ON par.ar_sub_cd = m.moed_parrangement_cd
      LEFT JOIN customerpost AS cp ON cp.CP_CUSTOMER_CD = m.moed_customer_cd AND cp.CP_POST_CD = m.moed_customer_post_cd
      LEFT JOIN customercharge AS cc ON cc.CC_CUSTOMER_CD = m.moed_customer_cd AND cc.CC_POST_CD = m.moed_customer_post_cd AND cc.CC_CHARGE_CD = m.moed_customer_charge_cd
      LEFT JOIN estimate AS e ON m.moed_refer_no = e.e_estimate_no
      WHERE moed_order_no = :ORDERNO       
      ORDER BY moed_order_no, moed_sub_no, moed_accept_sub_no
      ;');
      $sth->bindValue(':ORDERNO', $sdat['moed_order_no'], PDO::PARAM_STR);
      $sth->execute();
      $results = $sth->fetchAll(PDO::FETCH_ASSOC);

      // 新規登録の場合、受払予定明細にデータ追加
      foreach($results as $rec) {
        self::issueStockPlan('MOD', self::currentDate(), $rec, $dbh);
      }
      
      BookMaker::issueMaterialOrderFile($results, 0);
    } catch (Exception $e) {
      $dbh->rollBack();
      throw $e;
    }
  }

  /**
   * 外注注文書ファイルを作成する
   */
  public static function makeOutsideOrderFile($sdat) {
    $results = null;
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      
      // 委託発注書発行フラグを立てる
      $sth = $dbh->prepare('
      UPDATE morderestimate
      SET moed_order_date = :ORDERDATE,
      moed_update_at = :UPDATEAT,
      moed_update_cd = :UPDATECD
      WHERE moed_belong_cd = :BELONGCD AND 
      moed_order_no = :ORDERNO 
      ;');
      $sth->bindValue(':ORDERDATE', self::currentDate(), PDO::PARAM_STR);
      $sth->bindValue(':UPDATEAT', self::currentDate(), PDO::PARAM_STR);
      $sth->bindValue(':UPDATECD', $_SESSION['usercd'], PDO::PARAM_STR);
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':ORDERNO', $sdat['moed_order_no'], PDO::PARAM_STR);
      $sth->execute();
      $dbh->commit();

      $sth = $dbh->prepare('
      SELECT 
        moed_belong_cd,
        moed_type_subject,
        moed_order_no,
        moed_sub_no,
        moed_accept_sub_no,
        moed_buy_type,
        moed_customer_cd,
        moed_customer_post_cd,
        moed_customer_charge_cd,
        moed_salesman_cd,
        moed_order_date,
        moed_arrival_hd_date,
        moed_refer_no,
        moed_report_remarks,
        moed_product_cd,
        moed_quantity,
        moed_unit_qty,
        moed_unit_price,
        moed_money,
        moed_money_tax,
        moed_money_inc_tax,
        moed_dt_remarks,
        moed_remarks,
        moed_sub_01,
        moed_sub_02,
        moed_sub_03,
        moed_sub_04,
        moed_sub_05,
        moed_sub_06,
        moed_sub_07,
        moed_sub_08,
        moed_sub_09,
        moed_sub_10,
        moed_sub_11,
        moed_sub_12,
        moed_sub_13,
        moed_sub_num_01,
        moed_sub_num_02,
        moed_sub_num_03,
        moed_sub_num_04,
        moed_type_01,
        moed_type_02,
        moed_type_03,
        moed_refer_sub_no,
        moed_manufacture_cd,
        moed_customer_charge_cd AS moed_warehouse_cd,
        moed_unit_tran,
        moed_type_subject,
        moed_inventory_type,
        moed_product_name AS productname,
        moed_product_name AS p_name,
        moed_unit_eval,
        moed_stock_qty,
        moed_shipper_cd,
        moed_delivery_cd,
        moed_parrangement_cd,  
        moed_update_at,
        moed_update_cd,  
        (CURDATE() + 0) AS curdate,
        c.C_ADDRESS_NO,
        c.C_ADDRESS_01,
        c.C_ADDRESS_02,
        c.C_CUSTOMER_NAME,
        us.user_name AS salesmanname,
        moed_remarks,
        cdlv.CP_ADDRESS_NO AS delivzip,
        cdlv.CP_ADDRESS_01 AS delivadd1,
        cdlv.CP_ADDRESS_02 AS delivadd2,
        cdlv.CP_POST_NAME AS delivname,
        cdlv.CP_TEL AS delivtel,
        h.H_NO,
        h.H_ADDRESS,
        h.H_COMPANY_NAME,
        h.H_TEL,      
        csh.CP_ADDRESS_NO AS shipzip,
        csh.CP_ADDRESS_01 AS shipadd1,
        csh.CP_ADDRESS_02 AS shipadd2,
        csh.CP_POST_NAME AS shipname,
        csh.CP_TEL AS shiptel,    
        "" AS customerpname,
        par.ar_name,
        moed_sub_01 AS sub01,
        moed_sub_02 AS sub02,
        moed_sub_03 AS sub03,
        moed_sub_04 AS sub04,
        moed_sub_05 AS sub05,
        moed_sub_06 AS sub06,
        moed_sub_07 AS sub07,
        moed_sub_08 AS sub08,
        moed_sub_09 AS sub09,
        moed_sub_10 AS sub10,
        moed_sub_11 AS sub11,
        moed_sub_12 AS sub12,
        moed_sub_13 AS sub13,
        ""  AS wireno,
        p.p_type
      FROM morderestimate AS m
      LEFT JOIN CUSTOMER AS c ON c.C_CUSTOMER_CD = moed_customer_cd
      LEFT JOIN user AS us ON us.user_cd = moed_salesman_cd
      LEFT JOIN product AS p ON p.p_cd = moed_product_cd
      LEFT JOIN customerpost AS cdlv ON cdlv.CP_CUSTOMER_CD = moed_customer_cd  AND cdlv.CP_POST_CD = moed_delivery_cd
      LEFT JOIN customerpost AS csh ON csh.CP_CUSTOMER_CD = moed_customer_cd  AND csh.CP_POST_CD = moed_shipper_cd
      LEFT JOIN housecompany AS h ON h.H_COMPANY_CD = m.moed_belong_cd 
      LEFT JOIN arrangement AS par ON par.ar_sub_cd = m.moed_parrangement_cd
      WHERE moed_belong_cd = :BELONGCD AND 
      moed_order_no = :ORDERNO AND 
      (moed_buy_type = "3" OR moed_buy_type = "4")
      ORDER BY moed_order_no,
      moed_sub_no,
      moed_accept_sub_no,
      moed_buy_type,
      moed_customer_cd,
      moed_customer_post_cd
      ;');
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      $sth->bindValue(':ORDERNO', $sdat['moed_order_no'], PDO::PARAM_STR);
      $sth->execute();
      $results = $sth->fetchAll(PDO::FETCH_ASSOC);
      
      // 新規登録の場合、受払予定明細にデータ追加
      foreach($results as $rec) {
        self::issueStockPlan('MOD', self::currentDate(), $rec, $dbh);
      }

      BookMaker::issueMaterialOrderFile($results, 1);
      // BookMaker::issueOutsideOrderFile($results);
    } catch (Exception $e) {
      $dbh->rollBack();
      throw $e;
    }
  }

  /**
   * 納品書ファイルを作成する
   * $flg=trueが納品書ファイルB（受領書アリ）
   * $ver='0'が通常納品書、'1'が再発行納品書
   */
  public static function makeStatementFile($sdat, $flg, $ver) {
    // $resp = array('succeed' => true, 'msg' => '');
    $results = null;
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      $sth = $dbh->prepare('
      SELECT 
      s_tc_short_name,
      s_customer_cd,
      s_customer_post_cd,
      s_customer_charge_cd,
      cc.CC_CHARGE_NAME AS chargename,
      cp.CP_POST_NAME,
      s_estimate_no,
      s_serial_no,
      s_title,
      s_desired_delivery_date,
      s_shipping_plan_date,
      sd_belong_cd,
      sd_e_estimate_no,
      sd_estimate_sub_no,
      sd_shipment_sub_no,
      sd_statement_sub_no,
      sd_unit_tran,
      sd_deliv_create_date,
      sd_p_cd,
      sd_p_name_supple,
      sd_p_name,
      sd_customer_order_no,
      sd_customer_p_name,    
      sd_qty_delivery AS qty,      
      sd_unit_price AS unitprice,      
      sd_delivery_price AS price,      
      sd_tax AS taxprice,      
      sd_bill_close_date,
      sd_payment_close_date,
      sd_deliv_create_date,
      sd_detail_remarks,
      IF(p.p_tax_rate_cd IS NULL, t2.t_rate,  t.t_rate) AS t_rate,
      user_name AS salesmanname,
      IF(s.s_customer_post_cd <> "",  cp.cp_ADDRESS_NO, c.C_ADDRESS_NO) AS dest_zipcd,
      IF(s.s_customer_post_cd <> "",  cp.CP_ADDRESS_01, c.C_ADDRESS_01) AS dest_address_01,
      IF(s.s_customer_post_cd <> "",  cp.CP_ADDRESS_02, c.C_ADDRESS_02) AS dest_address_02,
      c.C_CUSTOMER_NAME AS dest_name,
      cp.CP_POST_NAME AS dest_post,            
      dlv.CP_POST_NAME  AS deliv_name,
      par.ar_name
      , s_customer_order_no,
      s_remarks,
      p.p_name,
      p.p_type, 
      ed.ed_p_cd, 
      p.p_name AS productname,
      "" AS customerpname,
      ed.ed_sub_01 AS sub01,
      ed.ed_sub_02 AS sub02,
      ed.ed_sub_03 AS sub03,
      ed.ed_sub_04 AS sub04,
      ed.ed_sub_05 AS sub05,
      ed.ed_sub_06 AS sub06,
      ed.ed_sub_07 AS sub07,
      ed.ed_sub_08 AS sub08,
      ed.ed_sub_09 AS sub09,
      ed.ed_sub_10 AS sub10,
      ed.ed_sub_11 AS sub11,
      ed.ed_sub_12 AS sub12,
      ed.ed_sub_13 AS sub13,
      ed.ed_sub_num_03  AS wireno
        FROM statementdetails AS sd 
      LEFT JOIN statement AS s ON s.s_belong_cd = sd.sd_belong_cd AND s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
      LEFT JOIN customer AS c ON c.c_customer_cd = s.s_customer_cd 
      LEFT JOIN customerpost AS cp ON cp.cp_customer_cd = s.s_customer_cd AND cp.cp_post_cd = s.s_customer_post_cd
      LEFT JOIN customercharge AS cc ON cc.cc_customer_cd = s.s_customer_cd AND cc.cc_post_cd = s.s_customer_post_cd AND cc.cc_charge_cd = s.s_customer_charge_cd      
      LEFT JOIN customerpost AS dlv ON dlv.cp_customer_cd = s.s_customer_cd AND dlv.cp_post_cd = s.s_delivery_cd
      LEFT JOIN product AS p ON p.p_belong_cd = sd.sd_belong_cd AND p.p_cd = sd.sd_p_cd
      LEFT JOIN tax AS t ON t.t_belong_cd = p.p_belong_cd AND t.t_cd = p.p_tax_rate_cd  
      LEFT JOIN arrangement AS par ON ar_sub_cd = sd_parrangement_cd
      LEFT JOIN (SELECT * FROM tax WHERE t_rate_change_date = (SELECT MAX(t_rate_change_date) FROM tax)) AS t2 ON 1     
      LEFT JOIN user ON user_cd = s.s_salesman_cd
      LEFT JOIN estimatedetails AS ed ON 
      ed.ed_belong_cd = sd.sd_belong_cd AND 
      ed.ed_estimate_no = sd.sd_e_estimate_no AND 
      ed.ed_estimate_sub_no = sd.sd_estimate_sub_no AND 
      ed.ed_shipment_sub_no = sd.sd_shipment_sub_no
      WHERE sd_belong_cd = :BELONGCD AND sd_e_estimate_no = :ESTIMATENO AND sd.sd_statement_sub_no = :SUBNO
      ORDER BY sd_e_estimate_no, sd_estimate_sub_no
      ;');
      $sth->bindValue(':BELONGCD', $sdat['sd_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue(':ESTIMATENO', $sdat['sd_e_estimate_no'], PDO::PARAM_STR);
      $sth->bindValue(':SUBNO', $sdat['sd_statement_sub_no'], PDO::PARAM_STR);
      $sth->execute();
      $results = $sth->fetchAll(PDO::FETCH_ASSOC);

      // 2023/4/27　再発行納品書を追加（※再発行時は以下の処理を実施しない）
      if ($ver == '0') {
        // データ更新用
        $sdat['sd_belong_cd'] = $_SESSION['companycd'];
        $sdat['sd_update_at'] = self::currentDate();
        $sdat['sd_update_cd'] = $_SESSION['usercd'];
        $sdat['sd_deliv_create_date'] = self::currentDate();
        $columnsD = self::getColumnDefs('t_estimatedetails');
        self::markAsHeaderPK($columnsD, 'ed_belong_cd');
        self::markAsHeaderPK($columnsD, 'ed_estimate_no');
        self::markAsHeaderPK($columnsD, 'ed_estimate_sub_no');
        self::markAsHeaderPK($columnsD, 'ed_shipment_sub_no');
        self::markAsHeaderPK($columnsD, 'ed_update_cnt');
        // 納品明細更新 
        foreach ($results as $recordSD) {
          $sth = $dbh->prepare('
          UPDATE statementdetails AS sd
                SET sd_deliv_create_date = :CREATEDATE,
                sd_bill_close_date = :BCLOSEDATE,
                sd_payment_close_date = :PCLOSEDATE,
                sd_update_at = :UPDATEAT,
                sd_update_cd = :UPDATECD
                WHERE sd.sd_belong_cd = :BELONGCD AND 
                sd.sd_e_estimate_no = :ESTNO AND
                sd.sd_statement_sub_no = :STSUBNO AND 
                sd.sd_estimate_sub_no = :ESTSUBNO AND 
                sd.sd_shipment_sub_no = :SDNO
          ;');    
          $sth->bindValue(':CREATEDATE', $sdat['sd_deliv_create_date'], PDO::PARAM_STR);
          // 請求締日、入金予定日は、入力値が正
          $sth->bindValue(':BCLOSEDATE', $results[0]['sd_bill_close_date'], PDO::PARAM_STR);
          $sth->bindValue(':PCLOSEDATE', $results[0]['sd_payment_close_date'], PDO::PARAM_STR);
          $sth->bindValue(':UPDATEAT', $sdat['sd_update_at'], PDO::PARAM_STR);
          $sth->bindValue(':UPDATECD', $sdat['sd_update_cd'], PDO::PARAM_STR);
          $sth->bindValue(':BELONGCD', $sdat['sd_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $recordSD['sd_e_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':STSUBNO', $recordSD['sd_statement_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':ESTSUBNO', $recordSD['sd_estimate_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':SDNO', $recordSD['sd_shipment_sub_no'], PDO::PARAM_STR);
          $sth->execute();  
        }
  
        foreach($results as $rec) {
          // 見積書明細から現在のデータを取得
          $sth = $dbh->prepare('
          SELECT * FROM estimatedetails 
          WHERE ed_belong_cd = :BELONGCD AND
          ed_estimate_no = :ESTNO AND 
          ed_estimate_sub_no = :SUBNO AND 
          ed_shipment_sub_no = :SHIPNO
          ;');
          $sth->bindValue(':BELONGCD', $rec['sd_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTNO', $rec['sd_e_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', $rec['sd_estimate_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':SHIPNO', $rec['sd_shipment_sub_no'], PDO::PARAM_STR);
          $sth->execute();
          $exData = $sth->fetchAll(PDO::FETCH_ASSOC);
  
          // 受注データ更新
          if ($rec['sd_deliv_create_date'] === '') {
            // 納品書新規発行時のみ数量update
            $exData[0]['ed_qty_delivery'] = (String)((float)$exData[0]['ed_qty_delivery'] + (float)$rec['qty']);
            $exData[0]['ed_delivery_price'] = (String)((int)$exData[0]['ed_delivery_price'] + (int)$rec['price']);
            // $exData[0]['ed_delivery_sign'] = self::setStatusSign('statement', (float)$exData[0]['ed_quantity'], (float)$exData[0]['ed_qty_delivery'], (float)$exData[0]['ed_qty_shipment']);
          }        
          $exData[0]['ed_deliv_create_date'] = $sdat['sd_deliv_create_date'];
          $exData[0]['ed_bill_close_date'] = $results[0]['sd_bill_close_date'];
          $exData[0]['ed_payment_close_date'] = $results[0]['sd_payment_close_date'];
          $exData[0]['ed_update_cnt'] += 1;
          $exData[0]['ed_update_at'] = $sdat['sd_update_at'];
          $exData[0]['ed_update_cd'] = $sdat['sd_update_cd'];
          $sth = $dbh->prepare('
          UPDATE estimatedetails 
          SET ed_update_cnt = :CNT,
            ed_qty_delivery = :QTY,
            ed_delivery_price = :DELIVPRICE,
            /* ed_delivery_sign = :DELIVSIGN, */
            ed_deliv_create_date = :ISSUEDATE,
            ed_bill_close_date = :BCLOSEDATE,
            ed_payment_close_date = :PCLOSEDATE,
            ed_update_at = :UPDATEAT,
            ed_update_cd = :UPDATECD
          WHERE ed_belong_cd = :BELONGCD AND 
            ed_estimate_no = :ESTIMATENO AND 
            ed_estimate_sub_no = :SUBNO AND 
            ed_shipment_sub_no = :SHIPNO
          ');
          $sth->bindValue(':CNT', $exData[0]['ed_update_cnt'], PDO::PARAM_INT);
          $sth->bindValue(':QTY', $exData[0]['ed_qty_delivery'], PDO::PARAM_INT);
          $sth->bindValue(':DELIVPRICE', $exData[0]['ed_delivery_price'], PDO::PARAM_STR);
          // $sth->bindValue(':DELIVSIGN', $exData[0]['ed_delivery_sign'], PDO::PARAM_STR);
          $sth->bindValue(':ISSUEDATE', $exData[0]['ed_deliv_create_date'], PDO::PARAM_STR);
          $sth->bindValue(':BCLOSEDATE', $exData[0]['ed_bill_close_date'], PDO::PARAM_STR);
          $sth->bindValue(':PCLOSEDATE', $exData[0]['ed_payment_close_date'], PDO::PARAM_STR);
          $sth->bindValue(':UPDATEAT', $exData[0]['ed_update_at'], PDO::PARAM_STR);
          $sth->bindValue(':UPDATECD', $exData[0]['ed_update_cd'], PDO::PARAM_STR);
          $sth->bindValue(':BELONGCD', $rec['sd_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':ESTIMATENO', $rec['sd_e_estimate_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', $rec['sd_estimate_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':SHIPNO', $rec['sd_shipment_sub_no'], PDO::PARAM_STR);
          $sth->execute();
  
          // 受注履歴登録 
          $sth = $dbh->prepare(self::makeInsertSQL('t_estimatedetails', $columnsD));
          self::bindInsertKeys($sth, $columnsD, $exData[0]);
          $sth->execute();
        } 
        $dbh->commit();
      }
      // 納品書Bの場合true
      BookMaker::issueStatementFile($results, $flg, $ver);
    } catch (Exception $e) {
      $dbh->rollBack();
      throw $e;
    }
  }

  /***
   * LIXIL納品書用エクセルファイル出力
   */
  public static function makeStatementFileLIXIL($sdat) {
    $results = null;
    $dbh = self::dbPDO();
    try {
      // 仕様変更のため出荷予定日を追加
      // 2023/1/20:抽出条件のSQL修正（品名CD「26～」データも含める）
      // $dbh->beginTransaction();
      $sth = $dbh->prepare('
      SELECT s_customer_order_no,
      s_shipping_plan_date,
      sd_e_estimate_no,
      sd_statement_sub_no,
      sd_estimate_sub_no,
      sd_shipment_sub_no,
      sd_desired_delivery_date,
      sd_p_cd,
      sd_p_name_supple,
      sd_estimate_quantity,
      sd_unit_price,
      sd_price,
      sd_delivery_price,
      sd_qty_delivery,
      sd_detail_remarks,
      h.H_NO,
      h.H_ADDRESS,
      h.H_TEL,
      H_COMPANY_NAME,
      sd_customer_order_no,
      sd_customer_p_name FROM statementdetails AS  sd
      LEFT JOIN statement AS s ON s.s_belong_cd = sd.sd_belong_cd AND s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
      LEFT JOIN housecompany AS h ON h.H_COMPANY_CD = sd.sd_belong_cd
      WHERE sd_belong_cd = :BELONGCD AND sd_e_estimate_no = :ESTIMATENO AND sd.sd_statement_sub_no = :SUBNO AND sd_estimate_quantity > 0
      ORDER BY sd_e_estimate_no, sd_estimate_sub_no
      ;');
      $sth->bindValue(':BELONGCD', $sdat['sd_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue(':ESTIMATENO', $sdat['sd_e_estimate_no'], PDO::PARAM_STR);
      $sth->bindValue(':SUBNO', $sdat['sd_statement_sub_no'], PDO::PARAM_STR);
      $sth->execute();
      $results = $sth->fetchAll(PDO::FETCH_ASSOC);

      BookMaker::issueStatementFileLIXIL($results);
    } catch (Exception $e) {
      $dbh->rollBack();
      throw $e;
    }
  }

  /***
   * 材料ミルシート出力
   */
  public static function makeMaterialMillSheet($sdat) {
    $resultList = null;
    $dbh = self::dbPDO();
    try {
      // 納品明細取得
      $sth = $dbh->prepare('
      SELECT * 
      FROM 
      statementdetails AS sd 
      LEFT JOIN 
      statement AS s 
      ON  
      sd.sd_belong_cd = s.s_belong_cd 
      AND 
      sd.sd_e_estimate_no = s.s_estimate_no 
      AND 
      sd.sd_statement_sub_no = s.s_serial_no 
      LEFT JOIN 
      customer AS c 
      ON 
      s.s_customer_cd = c.C_CUSTOMER_CD 
      LEFT JOIN 
      customercharge AS cc 
      ON 
      s.s_customer_cd = cc.CC_CUSTOMER_CD 
      AND 
      s.s_customer_post_cd = cc.CC_POST_CD 
      AND 
      s.s_customer_charge_cd = cc.CC_CHARGE_CD 
      WHERE 
      sd_belong_cd = :BELONGCD 
      AND 
      sd_e_estimate_no = :ESTIMATENO 
      AND 
      sd_statement_sub_no = :SUBNO
      AND NOT sd_p_cd LIKE "26%"
      ORDER BY sd_belong_cd,
      sd_e_estimate_no,  
      sd_statement_sub_no 
      ;');
      $sth->bindValue(':BELONGCD', $sdat['sd_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue(':ESTIMATENO', $sdat['sd_e_estimate_no'], PDO::PARAM_STR);
      $sth->bindValue(':SUBNO', $sdat['sd_statement_sub_no'], PDO::PARAM_STR);
      $sth->execute();
      $sdList = $sth->fetchAll(PDO::FETCH_ASSOC);
      
      $results = [];
      foreach ($sdList as $record) {
        // 半角スペースなしへ編集
        $productCd = str_replace(' ', '', $record['sd_p_cd']);
        // 材質マスタ取得
        $sth = $dbh->prepare('
        SELECT * 
        FROM 
        material 
        WHERE 
        m_belong_cd = :BELONGCD 
        AND 
        m_cd = :MCD
        ;');
        $sth->bindValue(':BELONGCD', $record['sd_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':MCD', substr($productCd, 2, 3), PDO::PARAM_STR);
        $sth->execute();
        $mList = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (count($mList) > 0) {
          $record = array_merge($record, $mList[0]);
        }
        array_push($results, $record);
      }

      BookMaker::makeMaterialMillSheet($results);
    } catch (Exception $e) {
      throw $e;
    }
  }

  /***
   * チャーター用送状発行
   */
  public static function makeCharterInvoice($sdat) {
    $dbh = self::dbPDO();
    try {
      // 納品明細取得
      $sth = $dbh->prepare('
      SELECT 
      *, 
      cp1.CP_POST_NAME AS CP_DELIVERY_NAME, 
      cp1.CP_ADDRESS_01 AS CP_DELIVERY_ADDRESS_01, 
      cp1.CP_ADDRESS_02 AS CP_DELIVERY_ADDRESS_02, 
      cp1.CP_TEL AS CP_DELIVERY_TEL, 
      cp2.CP_POST_NAME AS CP_SHIPPER_NAME, 
      cp2.CP_ADDRESS_01 AS CP_SHIPPER_ADDRESS_01, 
      cp2.CP_ADDRESS_02 AS CP_SHIPPER_ADDRESS_02, 
      cp2.CP_TEL AS CP_SHIPPER_TEL, 
      ed.ed_sub_01 AS sub01, 
      ed.ed_sub_02 AS sub02, 
      ed.ed_sub_03 AS sub03, 
      ed.ed_sub_04 AS sub04, 
      ed.ed_sub_05 AS sub05, 
      ed.ed_sub_06 AS sub06, 
      ed.ed_sub_07 AS sub07, 
      ed.ed_sub_08 AS sub08, 
      ed.ed_sub_09 AS sub09, 
      ed.ed_sub_10 AS sub10, 
      ed.ed_sub_11 AS sub11, 
      ed.ed_sub_12 AS sub12, 
      ed.ed_sub_13 AS sub13, 
      IF(ed.ed_customer_p_name = "", p.p_name, "") AS productname, 
      IF(ed.ed_customer_p_name = "", "", ed.ed_customer_p_name) AS customerpname, 
      ed.ed_sub_num_03 AS wireno, 
      ar_name
      FROM 
      statementdetails AS sd 
      LEFT JOIN 
      statement AS s 
      ON 
      sd.sd_belong_cd = s.s_belong_cd 
      AND 
      sd.sd_e_estimate_no = s.s_estimate_no 
      AND 
      sd.sd_statement_sub_no = s.s_serial_no 
      LEFT JOIN 
      customerpost AS cp1 
      ON 
      s.s_customer_cd = cp1.CP_CUSTOMER_CD 
      AND 
      s.s_delivery_cd = cp1.CP_POST_CD 
      LEFT JOIN 
      customerpost AS cp2 
      ON 
      s.s_customer_cd = cp2.CP_CUSTOMER_CD 
      AND 
      s.s_shipper_cd = cp2.CP_POST_CD 
      LEFT JOIN 
      estimatedetails AS ed 
      ON 
      sd.sd_belong_cd = ed.ed_belong_cd 
      AND 
      sd.sd_e_estimate_no = ed.ed_estimate_no 
      AND 
      sd.sd_estimate_sub_no = ed.ed_estimate_sub_no 
      AND 
      sd.sd_shipment_sub_no = ed.ed_shipment_sub_no 
      LEFT JOIN 
      product AS p  
      ON 
      ed.ed_belong_cd = p.p_belong_cd 
      AND 
      ed.ed_p_cd = p.p_cd       
      LEFT JOIN 
      arrangement AS ar 
      ON 
      ar.ar_sub_cd = ed.ed_parrangement_cd
      WHERE 
      sd_belong_cd = :BELONGCD 
      AND 
      sd_e_estimate_no = :ESTIMATENO 
      AND 
      sd_statement_sub_no = :SUBNO
      AND NOT sd_p_cd LIKE "26%"
      ORDER BY sd_belong_cd,
      sd_e_estimate_no,  
      sd_statement_sub_no 
      ;');
      $sth->bindValue(':BELONGCD', $sdat['sd_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue(':ESTIMATENO', $sdat['sd_e_estimate_no'], PDO::PARAM_STR);
      $sth->bindValue(':SUBNO', $sdat['sd_statement_sub_no'], PDO::PARAM_STR);
      $sth->execute();
      $results = $sth->fetchAll(PDO::FETCH_ASSOC);

      BookMaker::makeCharterInvoice($results);
    } catch (Exception $e) {
      throw $e;
    }
  }




  /**
   * 送状発行　全運輸会社対応
   */
  public static function makeShippingLabel($sdat) {

    $dbh = self::dbPDO();
    $str = '';
    try {
      for ($i = 0; $i < count($sdat); $i++) {
        if ($i === 0) {
          continue;
        } 
        if ($str === '' ) {
          $str = '(' . $sdat['str' . ($i - 1)]  . ')';
        } else {
          $str .= ',(' . $sdat['str' . ($i - 1)]  . ')';
        }
      }
      
      $strSql = '
      SELECT 
      s.s_tc_short_name AS transcomp,
      sd.sd_packing_group,
	    CONCAT(sd.sd_e_estimate_no, sd.sd_statement_sub_no, sd.sd_estimate_sub_no, sd.sd_shipment_sub_no) AS reportno,
      SUM(sd_packing_num) AS packnum,
      UPPER(sd.sd_e_estimate_no) AS estimateno,
      sd.sd_statement_sub_no AS statementno,
      sd.sd_estimate_sub_no AS estsubno,
      sd.sd_p_name AS pname,
      sd.sd_p_name_supple,
      sd.sd_customer_p_name AS cuspname,
      TRUNCATE(sd.sd_qty_delivery, 0) AS qty,
      sd.sd_unit_tran AS unit,
      h.H_COMPANY_NAME AS housename,
      h.H_TEL AS housetel,
      sd.sd_desired_delivery_date AS deliverydate,
      LEFT(sd.sd_desired_delivery_date, 4) AS year,
      SUBSTR(sd.sd_desired_delivery_date, 5, 2) AS month,
      SUBSTR(sd.sd_desired_delivery_date, 7, 2) AS day,
      h.H_COMPANY_NAME AS compname,
      h.H_TEL AS comptel,
      IF(s.s_shipper_cd<>"", cpship.cp_post_name, h.H_COMPANY_NAME) AS shipname,
      IF(s.s_shipper_cd<>"", cpship.CP_ADDRESS_NO, h.H_NO) AS destinationzip,
      LEFT(IF(s.s_shipper_cd<>"", cpship.CP_ADDRESS_NO, h.H_NO), 3) AS destinationzip01,
      RIGHT(IF(s.s_shipper_cd<>"", cpship.CP_ADDRESS_NO, h.H_NO), 4) AS destinationzip02,
      IF(s.s_shipper_cd<>"", cpship.CP_ADDRESS_01, h.H_ADDRESS) AS shipadd1,
      IF(s.s_shipper_cd<>"", cpship.CP_ADDRESS_02, "") AS shipadd2,
      IF(s.s_shipper_cd<>"", cpship.CP_TEL, h.H_TEL) AS shiptel,
      IF(s.s_stay_cd<>"", cpstay.CP_POST_NAME, IF(s.s_delivery_cd<>"", cpdeliv.CP_POST_NAME, cp.CP_POST_NAME)) AS stayname,
      IF(s.s_stay_cd<>"", cpstay.CP_ADDRESS_NO, IF(s.s_delivery_cd<>"", cpdeliv.CP_ADDRESS_NO, cp.CP_ADDRESS_NO)) AS receivezip,
      LEFT(IF(s.s_stay_cd<>"", cpstay.CP_ADDRESS_NO, IF(s.s_delivery_cd<>"", cpdeliv.CP_ADDRESS_NO, cp.CP_ADDRESS_NO)), 3) AS receivezip01,
      RIGHT(IF(s.s_stay_cd<>"", cpstay.CP_ADDRESS_NO, IF(s.s_delivery_cd<>"", cpdeliv.CP_ADDRESS_NO, cp.CP_ADDRESS_NO)), 4) AS receivezip02,
      IF(s.s_stay_cd<>"", cpstay.CP_ADDRESS_01, IF(s.s_delivery_cd<>"", cpdeliv.CP_ADDRESS_01, cp.CP_ADDRESS_01)) AS stayadd1,
      IF(s.s_stay_cd<>"", cpstay.CP_ADDRESS_02, IF(s.s_delivery_cd<>"", cpdeliv.CP_ADDRESS_02, cp.CP_ADDRESS_02)) AS stayadd2,
      IF(s.s_stay_cd<>"", cpstay.CP_TEL, IF(s.s_delivery_cd<>"", cpdeliv.CP_TEL, cp.CP_TEL)) AS staytel,
      user_name AS salesmanname,
      IF(sd.sd_customer_order_no<>"", sd.sd_customer_order_no, s.s_customer_order_no) AS orderno,
      c.c_customer_name AS customer,
      ed.ed_type_02,
      s.s_shipping_plan_date,
      s.s_stay_cd,
      arr.ar_name
     FROM statementdetails AS sd
    LEFT JOIN statement AS s ON s.s_belong_cd = sd.sd_belong_cd AND s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
    LEFT JOIN
    estimatedetails AS ed ON ed.ed_belong_CD = sd.sd_belong_cd
        AND ed.ed_estimate_no = sd.sd_e_estimate_no
        AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no
        AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no
    LEFT JOIN customer AS c ON c.c_customer_cd = s.s_customer_cd
    LEFT JOIN customerpost AS cp ON
    cp.cp_customer_cd = s.s_customer_cd AND cp.CP_POST_CD = s.s_customer_post_cd
    LEFT JOIN customerpost AS cpship ON
    cpship.cp_customer_cd = s.s_customer_cd AND cpship.CP_POST_CD = s.s_shipper_cd
    LEFT JOIN customerpost AS cpstay ON
    cpstay.cp_customer_cd = s.s_customer_cd AND cpstay.CP_POST_CD = s.s_stay_cd
    LEFT JOIN customerpost AS cpdeliv ON
    cpdeliv.cp_customer_cd = s.s_customer_cd AND cpdeliv.CP_POST_CD = s.s_delivery_cd
    LEFT JOIN user ON
    user_cd = s_salesman_cd
    LEFT JOIN arrangement AS arr ON arr.ar_sub_cd = sd.sd_parrangement_cd
    LEFT JOIN housecompany AS h 
    ON h.H_COMPANY_CD = sd.sd_belong_cd
        WHERE ( sd.sd_e_estimate_no, sd.sd_statement_sub_no, sd_estimate_sub_no, sd_shipment_sub_no) IN 
        ';      
      $strSql .= '(' . $str . ')' . ' GROUP BY sd_belong_cd, sd_e_estimate_no, sd_statement_sub_no, sd_packing_group
      ORDER BY transcomp, estimateno, statementno;';
      $sth = $dbh->prepare($strSql);
      $sth->execute();
      $items = $sth->fetchAll(PDO::FETCH_ASSOC);
      BookMaker::exportShippingLabel($items);
    } catch (Exception $e) {
      throw $e;
    }
  }

  /**
   * 送状発行　CSVファイルの運送会社対応
   * ex.福通(mode=1) , 佐川(mode=2)
   */
  public static function makeShippingLabelCSV($sdat, $mode) {

    $dbh = self::dbPDO();
    $str = '';
    $hasPackage = false;     // 梱包情報があるか
    $strSql1 = '';
    $strSql = '';
    try {
      // WHERE句条件作成
      for ($i = 0; $i < count($sdat); $i++) {
        if ($i === 0) {
          continue;
        } 
        if ($str === '' ) {
          $str = '(' . $sdat['str' . ($i - 1)]  . ')';
        } else {
          $str .= ',(' . $sdat['str' . ($i - 1)]  . ')';
        }
      }
      // 梱包Gがある場合とない場合で、伝票データ出力を変更
      $strSql1 = '
      SELECT sd_e_estimate_no,
      sd_statement_sub_no,
      sd_estimate_sub_no,
      sd_shipment_sub_no,
      sd_packing_group,
      s.s_tc_short_name AS transcomp,
      tpc.tc_type_report FROM statementdetails AS sd
      LEFT JOIN statement AS s ON s.s_belong_cd = sd.sd_belong_cd AND s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
      LEFT JOIN transportcompany AS tpc ON tpc.tc_short_name = s.s_tc_short_name
      WHERE tpc.tc_type_report = "2" AND ( sd.sd_e_estimate_no, sd.sd_statement_sub_no, sd.sd_estimate_sub_no, sd.sd_shipment_sub_no) IN ';
      $strSql1 .= '(' . $str . ') ORDER BY sd_statement_sub_no,
      sd_estimate_sub_no,
      sd_shipment_sub_no,
      sd_packing_group;';
      $sth = $dbh->prepare($strSql1);
      $sth->execute();
      $data = $sth->fetchAll(PDO::FETCH_ASSOC);

      foreach ($data as $rec) {
        if (self::checkNotSet($rec['sd_packing_group']) === false) {
          // 梱包グループあり
          $hasPackage = true;
          break;
        }
      }

      if ($hasPackage) {
        
        $strSql = '
          SELECT
          s.s_tc_short_name,
          c.C_CUSTOMER_NAME,
          c.C_ADDRESS_01,
          c.C_ADDRESS_02,
          c.C_ADDRESS_NO,
          c.C_TEL,
          s.s_stay_cd,
          s.s_delivery_cd,
          s.s_shipper_cd,
          s.s_shipping_plan_date,
          s.s_tc_short_name AS transcomp,
          sd.sd_packing_group,
          IF(sd.sd_packing_group IS NULL OR sd.sd_packing_group="", CONCAT(sd.sd_e_estimate_no, sd.sd_statement_sub_no, "101"), 
            IF(sd.sd_packing_group IS NULL OR sd.sd_packing_group="", CONCAT(sd.sd_e_estimate_no, sd.sd_statement_sub_no, sd.sd_packing_num, "01"),
              CONCAT(sd.sd_e_estimate_no, sd.sd_statement_sub_no, sd.sd_packing_num, LPAD(sd_packing_num, 2, "0")))) AS reportno,
          SUM(sd_packing_num) AS packnum,
          sd.sd_e_estimate_no AS estimateno,
          sd.sd_statement_sub_no AS statementno,
          sd.sd_estimate_sub_no AS estsubno,
          sd.sd_p_name AS pname,
          sd.sd_p_name_supple,
          sd.sd_customer_p_name AS cuspname,
          /*IF(sd.sd_customer_p_name IS NOT NULL, sd.sd_customer_p_name, p.p_name) AS pname,*/
          sd.sd_qty_delivery AS qty,
          sd.sd_unit_tran AS unit,
          h.H_COMPANY_NAME AS housename,
          h.H_TEL AS housetel,
          sd.sd_desired_delivery_date AS deliverydate,
          LEFT(sd.sd_desired_delivery_date, 4) AS year,
          SUBSTR(sd.sd_desired_delivery_date, 5, 2) AS month,
          SUBSTR(sd.sd_desired_delivery_date, 7, 2) AS day,
          h.H_COMPANY_NAME AS compname,
          h.H_TEL AS comptel,
          IF(s.s_shipper_cd <> "", cpship.cp_post_name, h.H_COMPANY_NAME) AS shipname,
          IF(s.s_shipper_cd <> "", cpship.CP_ADDRESS_NO, h.H_NO) AS destinationzip,
          LEFT(IF(s.s_shipper_cd <> "", cpship.CP_ADDRESS_NO, h.H_NO), 3) AS destinationzip01,
          RIGHT(IF(s.s_shipper_cd <> "", cpship.CP_ADDRESS_NO, h.H_NO), 4) AS destinationzip02,
          IF(s.s_shipper_cd <> "", cpship.CP_ADDRESS_01, h.H_ADDRESS) AS shipadd1,
          IF(s.s_shipper_cd <> "", cpship.CP_ADDRESS_02, "") AS shipadd2,
          IF(s.s_shipper_cd <> "", cpship.CP_TEL, h.H_TEL) AS shiptel,
          IF(s.s_stay_cd <> "", cpstay.CP_POST_NAME, IF(s.s_delivery_cd <> "", cpdeliv.CP_POST_NAME, cp.CP_POST_NAME)) AS stayname,
          IF(s.s_stay_cd <> "", cpstay.CP_ADDRESS_NO, IF(s.s_delivery_cd <> "", cpdeliv.CP_ADDRESS_NO, cp.CP_ADDRESS_NO)) AS receivezip,
          LEFT(IF(s.s_stay_cd <> "", cpstay.CP_ADDRESS_NO, IF(s.s_delivery_cd <> "", cpdeliv.CP_ADDRESS_NO, cp.CP_ADDRESS_NO)), 3) AS receivezip01,
          RIGHT(IF(s.s_stay_cd <> "", cpstay.CP_ADDRESS_NO, IF(s.s_delivery_cd <> "", cpdeliv.CP_ADDRESS_NO, cp.CP_ADDRESS_NO)), 4) AS receivezip02,
          IF(s.s_stay_cd <> "", cpstay.CP_ADDRESS_01, IF(s.s_delivery_cd <> "", cpdeliv.CP_ADDRESS_01, cp.CP_ADDRESS_01)) AS stayadd1,
          IF(s.s_stay_cd <> "", cpstay.CP_ADDRESS_02, IF(s.s_delivery_cd <> "", cpdeliv.CP_ADDRESS_02, cp.CP_ADDRESS_02)) AS stayadd2,
          IF(s.s_stay_cd <> "", cpstay.CP_TEL, IF(s.s_delivery_cd <> "", cpdeliv.CP_TEL, cp.CP_TEL)) AS staytel,
          user_name AS salesmanname,
          IF(sd.sd_customer_order_no <> "", sd.sd_customer_order_no, s.s_customer_order_no) AS orderno,
          c.c_customer_name AS customer,
          ed.ed_type_02,
          s.s_stay_cd
          ,s.s_shipping_date
        FROM statementdetails AS sd
        LEFT JOIN statement AS s ON s.s_belong_cd = sd.sd_belong_cd AND s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
            LEFT JOIN
        estimatedetails AS ed ON ed.ed_belong_CD = sd.sd_belong_cd
            AND ed.ed_estimate_no = sd.sd_e_estimate_no
            AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no
            AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no
        LEFT JOIN customer AS c ON c.c_customer_cd = s.s_customer_cd
        LEFT JOIN customerpost AS cp ON
        cp.cp_customer_cd = s.s_customer_cd AND cp.CP_POST_CD = s.s_customer_post_cd
        LEFT JOIN customerpost AS cpship ON
        cpship.cp_customer_cd = s.s_customer_cd AND cpship.CP_POST_CD = s.s_shipper_cd
        LEFT JOIN customerpost AS cpstay ON
        cpstay.cp_customer_cd = s.s_customer_cd AND cpstay.CP_POST_CD = s.s_stay_cd
        LEFT JOIN customerpost AS cpdeliv ON
        cpdeliv.cp_customer_cd = s.s_customer_cd AND cpdeliv.CP_POST_CD = s.s_delivery_cd
        LEFT JOIN user ON
        user_cd = s_salesman_cd
        LEFT JOIN housecompany AS h 
        ON h.H_COMPANY_CD = sd.sd_belong_cd
        LEFT JOIN transportcompany AS tpc ON tpc.tc_short_name = s.s_tc_short_name
          WHERE tpc.tc_type_report = "2" AND NOT sd_p_cd LIKE "26%" AND ( sd.sd_e_estimate_no, sd.sd_statement_sub_no, sd.sd_estimate_sub_no, sd.sd_shipment_sub_no) IN ';
        $strSql .= '(' . $str . ')' . '  GROUP BY sd_belong_cd , sd_e_estimate_no , sd_statement_sub_no , sd_packing_group
        ORDER BY transcomp , estimateno , statementno;';
      } else {
        $strSql = '
        SELECT 
        s.s_tc_short_name,
        c.C_CUSTOMER_NAME,
        c.C_ADDRESS_01,
        c.C_ADDRESS_02,
        c.C_ADDRESS_NO,
        c.C_TEL,
        s.s_stay_cd,
        s.s_delivery_cd,
        s.s_shipper_cd,
        IF(s.s_stay_cd <> "", cpstay.CP_POST_NAME, IF(s.s_delivery_cd <> "", cpdeliv.CP_POST_NAME, cp.CP_POST_NAME)) AS stayname,
        IF(s.s_stay_cd <> "", cpstay.CP_ADDRESS_NO, IF(s.s_delivery_cd <> "", cpdeliv.CP_ADDRESS_NO, cp.CP_ADDRESS_NO)) AS receivezip,
        LEFT(IF(s.s_stay_cd <> "", cpstay.CP_ADDRESS_NO, IF(s.s_delivery_cd <> "", cpdeliv.CP_ADDRESS_NO, cp.CP_ADDRESS_NO)), 3) AS receivezip01,
        RIGHT(IF(s.s_stay_cd <> "", cpstay.CP_ADDRESS_NO, IF(s.s_delivery_cd <> "", cpdeliv.CP_ADDRESS_NO, cp.CP_ADDRESS_NO)), 4) AS receivezip02,
		    IF(s.s_stay_cd <> "", cpstay.CP_ADDRESS_01, IF(s.s_delivery_cd <> "", cpdeliv.CP_ADDRESS_01, cp.CP_ADDRESS_01)) AS stayadd1,
        IF(s.s_stay_cd <> "", cpstay.CP_ADDRESS_02, IF(s.s_delivery_cd <> "", cpdeliv.CP_ADDRESS_02, cp.CP_ADDRESS_02)) AS stayadd2,
        IF(s.s_stay_cd <> "", cpstay.CP_TEL, IF(s.s_delivery_cd <> "", cpdeliv.CP_TEL, cp.CP_TEL)) AS staytel,
		    IF(s.s_shipper_cd <> "", cpship.cp_post_name, h.H_COMPANY_NAME) AS shipname,
        IF(s.s_shipper_cd <> "", cpship.CP_ADDRESS_NO, h.H_NO) AS destinationzip,
        LEFT(IF(s.s_shipper_cd <> "", cpship.CP_ADDRESS_NO, h.H_NO), 3) AS destinationzip01,
        RIGHT(IF(s.s_shipper_cd <> "", cpship.CP_ADDRESS_NO, h.H_NO), 4) AS destinationzip02,
        IF(s.s_shipper_cd <> "", cpship.CP_ADDRESS_01, h.H_ADDRESS) AS shipadd1,
        IF(s.s_shipper_cd <> "", cpship.CP_ADDRESS_02, "") AS shipadd2,
        IF(s.s_shipper_cd <> "", cpship.CP_TEL, h.H_TEL) AS shiptel,
		    s.s_shipping_plan_date,
        s.s_tc_short_name AS transcomp,
        sd.sd_packing_group,
        sd.sd_e_estimate_no AS estimateno,
        sd.sd_statement_sub_no AS statementno,
        sd.sd_estimate_sub_no AS estsubno,
        sd.sd_p_name AS pname,
        sd.sd_p_name_supple,
        sd.sd_customer_p_name AS cuspname,
        sd.sd_qty_delivery AS qty,
        sd.sd_unit_tran AS unit,
        h.H_COMPANY_NAME AS housename,
        h.H_TEL AS housetel,
        sd.sd_desired_delivery_date AS deliverydate,
        LEFT(sd.sd_desired_delivery_date, 4) AS year,
        SUBSTR(sd.sd_desired_delivery_date, 5, 2) AS month,
        SUBSTR(sd.sd_desired_delivery_date, 7, 2) AS day,
        h.H_COMPANY_NAME AS compname,
        h.H_TEL AS comptel,
        s.s_stay_cd
        ,s.s_shipping_date  
        FROM statementdetails AS sd
        LEFT JOIN statement AS s ON s.s_belong_cd = sd.sd_belong_cd AND s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
        LEFT JOIN estimatedetails AS ed ON ed.ed_belong_CD = sd.sd_belong_cd AND ed.ed_estimate_no = sd.sd_e_estimate_no AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no
        LEFT JOIN customer AS c ON c.c_customer_cd = s.s_customer_cd
        LEFT JOIN customerpost AS cp ON cp.cp_customer_cd = s.s_customer_cd AND cp.CP_POST_CD = s.s_customer_post_cd
        LEFT JOIN customerpost AS cpship ON cpship.cp_customer_cd = s.s_customer_cd AND cpship.CP_POST_CD = s.s_shipper_cd
        LEFT JOIN customerpost AS cpstay ON cpstay.cp_customer_cd = s.s_customer_cd AND cpstay.CP_POST_CD = s.s_stay_cd
        LEFT JOIN customerpost AS cpdeliv ON cpdeliv.cp_customer_cd = s.s_customer_cd AND cpdeliv.CP_POST_CD = s.s_delivery_cd
        LEFT JOIN housecompany AS h ON h.H_COMPANY_CD = sd.sd_belong_cd
        LEFT JOIN transportcompany AS tpc ON tpc.tc_short_name = s.s_tc_short_name
        WHERE tpc.tc_type_report = "2" AND NOT sd_p_cd LIKE "26%" AND ( sd.sd_e_estimate_no, sd.sd_statement_sub_no, sd.sd_estimate_sub_no, sd.sd_shipment_sub_no) IN 
        ';
        $strSql .= '(' . $str . ')' . '  GROUP BY sd_belong_cd , sd_e_estimate_no , sd_statement_sub_no
        ORDER BY transcomp , estimateno , statementno;';
      }      
      $sth = $dbh->prepare($strSql);
      $sth->execute();
      $items = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($items) <= 0) {
        throw new Exception('該当のデータが有りませんでした。');
      }

      // BookMaker::createShippingLabelCSV($items);
      if ($mode === '1') {  // 福通
        BookMaker::createShippingLabelCSV($items);
      } else if ($mode === '2') {   // 佐川
        BookMaker::createShippingLabelCSVSG($items);
      }
    } catch (Exception $e) {
      throw $e;
    }
  }


  /**
   * 現品票印刷 製品用
   */
  public static function makeIDSheet($sdat) {
    $str1 = '';
    $str2 = '';
    $i = 0;
    $strSql = '';
    $num = 0;
    $dbh = self::dbPDO();
    foreach ($sdat as $rec) {
      if (strpos($rec,'makeID') !== false) {
        continue;
      }
      if ($strSql === '') {
        $strSql = ':ESTNO' . $i;
      } else {
        $strSql .= ', :ESTNO' . $i;
      }
      $i++;
    }
    // リセット
    $i = 0;
    // 元々の仕様は出荷指示番号をロット番号にしているが、受注明細の出荷分割の番号は納品枝番と同時にインクリメントされるため、出荷枝番をqr_sub_noとしてセットする。ロット番号は、受注番号+受注枝番とする。
    try {
      $sth = $dbh->prepare('
      SELECT 
        e_title,
        e_customer_order_no,
        ed_customer_p_name,
        IF(e_remarks LIKE "STONE%" OR e_remarks LIKE "Takenaka Wire Cloth Co,.Ltd%" OR e_remarks LIKE "竹中金網 株式会社%", TRIM(CAST(substring(CAST(e_remarks AS BINARY), 1,30) AS char)),  TRIM(CAST(substring(CAST(e_remarks AS BINARY), 1,30) AS char))) AS e_remarks,
        ed_estimate_no,
        ed_estimate_sub_no,
        ed_shipment_sub_no,
        0 AS qrid,
        ed_p_cd,
        ed_sub_01 AS sub01,
        ed_sub_02 AS sub02,
        ed_sub_03 AS sub03,
        ed_sub_04 AS sub04,
        ed_sub_05 AS sub05,
        ed_sub_06 AS sub06,
        ed_sub_07 AS sub07,
        ed_sub_08 AS sub08,
        ed_sub_09 AS sub09,
        ed_sub_10 AS sub10,
        ed_sub_11 AS sub11,
        ed_sub_12 AS sub12,
        ed_sub_13 AS sub13,
        ed_customer_order_no,
        CONCAT(ed_estimate_no, ed_estimate_sub_no) AS lotno,
        ed_shipment_sub_no,
        /*IF(ed_type_subject = "2" OR ed_type_subject = "6", moed.moed_customer_cd, "") AS customercd,
        IF(ed_type_subject = "2" OR ed_type_subject = "6", moed.moed_type_03, "") AS serialno,
        IF(ed_type_subject = "2" OR ed_type_subject = "6", moed.moed_arrival_plan_date, "") AS arrivaldate,*/
        ed_parrangement_cd,
        ed_type_subject,
        ed_unit_eval,
        ed_customer_p_name AS customerpname,
        IF(ed_customer_p_name = "", p_name, ed_customer_p_name) AS productname,
        IF(ar.ar_name IS NULL, "", ar.ar_name) AS arname,
        IF(ar.ar_name IS NULL, p_name, CONCAT(p_name, "",ar.ar_name)) AS concpname,
        IF(e_customer_order_no = "", e_estimate_no, e_customer_order_no) AS estimateno,
        ed_type_04,
        ed_quantity,
        ed_unit_tran,
        ed_warehouse_cd,
        ed_sub_num_03 AS wireno,
        p_type,
        p_name,
        ar_name
      FROM estimatedetails AS ed 
      LEFT JOIN estimate AS e ON e.e_estimate_no = ed.ed_estimate_no
      /*LEFT JOIN morderestimate AS moed ON moed.moed_refer_no = ed.ed_estimate_no*/
      LEFT JOIN product AS p ON p.p_cd = ed.ed_p_cd
      LEFT JOIN arrangement AS ar ON ar.ar_sub_cd = ed.ed_parrangement_cd 
      WHERE 
      ed_belong_cd = :BELONGCD AND ed_p_cd NOT LIKE "26%" AND 
          CONCAT(ed_estimate_no, ed_estimate_sub_no) IN (' . $strSql .
       ')
      ORDER BY e_customer_order_no,
      ed_customer_p_name,
      ed_estimate_no,
      ed_estimate_sub_no,
      ed_shipment_sub_no
      ;');
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      foreach ($sdat as $rec) {
        if (strpos($rec, 'makeID') !== false) {
          continue;
        }
        $ar = explode(',', $rec);
        $sth->bindValue(':ESTNO' . $i, $ar[0] . $ar[1], PDO::PARAM_STR);
        // $sth->bindValue(':SUBNO' . $i, $ar[1], PDO::PARAM_STR);
        $i++;
      }
      $sth->execute();
      $items = $sth->fetchAll(PDO::FETCH_ASSOC);
      // QRデータ登録
      // QRIDにずれがないようにするために、リファレンス渡しで行う。注意。
      if (!self::insertQR($items, 'estimate', $dbh)['result']) {
        throw new Exception('データ登録失敗');
      }
      
      //現品票発行済みサイン「1」を登録
      $sth = $dbh->prepare('
      UPDATE estimatedetails SET ed_type_08 = \'1\' WHERE ed_belong_cd = :BELONGCD AND ed_p_cd NOT LIKE "26%" AND 
      CONCAT(ed_estimate_no, ed_estimate_sub_no) IN (' . $strSql .')');
      $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      //カウンタリセット
      $i = 0;
      foreach ($sdat as $rec) {
        if (strpos($rec, 'makeID') !== false) {
          continue;
        }
        $ar = explode(',', $rec);
        $sth->bindValue(':ESTNO' . $i, $ar[0] . $ar[1], PDO::PARAM_STR);
        // $sth->bindValue(':SUBNO' . $i, $ar[1], PDO::PARAM_STR);
        $i++;
      }
      $sth->execute();
      BookMaker::createIDSheet($items);
    } catch (Exception $e) {
      throw $e;
    }
  }


  /**
   * 現品票印刷　材料用 2023/6/22：在庫品の現品票発行を利用のため、使用しない
   */
  // public static function makeMATLIDSheet($sdat) {
  //   $strSql = '';
  //   $items = [];
  //   $morderno = '';

  //   $dbh = self::dbPDO();
  //   try {
  //     if (isset($sdat['moed_order_no'])) {
  //       $morderno = $sdat['moed_order_no'];
  //     } else {
  //       return false;
  //     }
      
  //     // 該当データ取得
  //     $sth = $dbh->prepare('
  //     SELECT  
  //       *,cp.cp_post_name AS moed_maker_name, 0 AS qrid, ar_name,
  //       moed_sub_01 AS sub01,
  //       moed_sub_02 AS sub02,
  //       moed_sub_03 AS sub03,
  //       moed_sub_04 AS sub04,
  //       moed_sub_05 AS sub05,
  //       moed_sub_06 AS sub06,
  //       moed_sub_07 AS sub07,
  //       moed_sub_08 AS sub08,
  //       moed_sub_09 AS sub09,
  //       moed_sub_10 AS sub10,
  //       moed_sub_11 AS sub11,
  //       moed_sub_12 AS sub12,
  //       moed_sub_13 AS sub13
  //     FROM morderestimate AS moed
  //     LEFT JOIN customerpost AS cp 
  //       ON moed.moed_manufacture_cd = cp.CP_POST_CD AND moed.moed_customer_cd = cp.cp_customer_cd
  //     LEFT JOIN arrangement AS ar ON moed_parrangement_cd = ar.ar_sub_cd
  //     WHERE moed_product_cd NOT LIKE "26%" AND moed.moed_order_no = :MORDERNO
  //     ORDER BY moed_order_no,moed_sub_no,moed_sub_no,moed_accept_sub_no
  //     ;');
  //     $sth->bindValue(':MORDERNO', $morderno, PDO::PARAM_STR);
  //     $sth->execute();
  //     $items = $sth->fetchAll(PDO::FETCH_ASSOC);
  //     // QRデータを登録する
  //     // QRIDにずれがないようにするために、リファレンス渡しで行う。注意。
  //     if (!self::insertQR($items, 'morder', $dbh)) {
  //       throw new Exception('データ登録失敗');
  //     }
  //     // 帳票発行
  //     BookMaker::createMATLIDSheet($items);
  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }


  /***
   * 在庫マスタからQRシート発行
   */
  public static function makeStorageIDSheet($sdat) {
    $i = 0;
    $strSql = '';
    $items = [];
    

    $dbh = self::dbPDO();
    foreach ($sdat as $rec) {
      if (strpos($rec,'makeStorageIDSheet') !== false) {
        continue;
      }
      if ($strSql === '') {
        $strSql = '(:WCD' . $i . ',:PCD' . $i . ',:SUBCD' . $i . ',:UNIT' . $i . ',:SUBJECT' . $i . ',:PARCD' . $i . ')';
      } else {
        $strSql .= ',(:WCD' . $i . ',:PCD' . $i . ',:SUBCD' . $i . ',:UNIT' . $i . ',:SUBJECT' . $i . ',:PARCD' . $i . ')';
      }
      $i++;
    }
    try {
      // カウンターリセット
      $i = 0;
      // 該当データ取得
      $sth = $dbh->prepare('
      SELECT  
        sr.*, p.p_name, p.p_name AS productname, ar_name, 
        c.c_customer_name AS customername,
        IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, "")) AS makername, 
        sr_sub_01 AS sub01, sr_sub_02 AS sub02, sr_sub_03 AS sub03, sr_sub_04 AS sub04, sr_sub_05 AS sub05,
        sr_sub_06 AS sub06, sr_sub_07 AS sub07, sr_sub_08 AS sub08, sr_sub_09 AS sub09, sr_sub_10 AS sub10, 
        sr_sub_11 AS sub11,sr_sub_12 AS sub12, sr_sub_12 AS sub13, "" AS customerpname
      FROM storage AS sr
      LEFT JOIN product AS p ON p.p_cd = sr_p_cd
      LEFT JOIN arrangement AS ar ON ar.ar_sub_cd = sr_parrangement_cd
      LEFT JOIN customer AS c ON c.C_CUSTOMER_CD = LEFT(sr_maker_cd, 3)
      LEFT JOIN customerpost AS cp ON cp.CP_CUSTOMER_CD = LEFT(sr_maker_cd, 3) AND cp.CP_POST_CD = TRIM(substr(sr_maker_cd, 4, 4))
      WHERE (sr_w_cd, sr_p_cd, sr_sub_cd, sr_unit_cd, sr_type_subject, sr_parrangement_cd) IN (' . $strSql . ');');
      foreach ($sdat as $rec) {
        if (strpos($rec, 'makeStorageIDSheet') !== false) {
          continue;
        }
        $ar = explode(',', $rec);
        $sth->bindValue(':WCD' . $i, $ar[0], PDO::PARAM_STR);
        $sth->bindValue(':PCD' . $i, $ar[1], PDO::PARAM_STR);
        $sth->bindValue(':SUBCD' . $i, $ar[2], PDO::PARAM_STR);
        $sth->bindValue(':UNIT' . $i, $ar[3], PDO::PARAM_STR);
        $sth->bindValue(':SUBJECT' . $i, $ar[4], PDO::PARAM_STR);
        $sth->bindValue(':PARCD' . $i, $ar[5], PDO::PARAM_STR);
        $i++;
      }

      $sth->execute();
      $items = $sth->fetchAll(PDO::FETCH_ASSOC);
      // QRデータを登録する
      // QRIDにずれがないようにするために、リファレンス渡しで行う。注意。
      if (!self::insertQR($items, 'storage', $dbh)) {
        throw new Exception('データ登録失敗');
      }
      // 帳票発行
      BookMaker::createStorageIDSheet($items);
    } catch (Exception $e) {
      throw $e;
    }
  }


  /**
   * QRデータをデータテーブルに登録
   * mode:estimate or morder
   */
  private static function insertQR(&$dat, $mode, $dbh) {
    $issueNum = 1;   // 現品票発行数　1:1レコード単位、2<:受注数単位
    $insDat = [];
    $num = 1;
    $qrID = '';
    $result = [
      'result'=> 'true',
      'comment'=> '',
    ];

    $columns = self::getColumnDefs('qr');
    self::markAsHeaderPK($columns, 'qr_belong_cd');
    self::markAsHeaderPK($columns, 'qr_id');

    $dbh->beginTransaction();
    try {
      // qrIDの最大値取得 作業によらず共通
      $sth = $dbh->prepare('
      SELECT MAX(qr_id) as maxnum FROM qr
      WHERE qr_id LIKE :QRID
      ;');
      $sth->bindValue(':QRID', substr(self::currentDate(), 2) . '%', PDO::PARAM_STR);
      $sth->execute();
      $qrDat = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (isset($qrDat[0]['maxnum'])) {
        // 発行日のデータがある
        $num = (int)(substr($qrDat[0]['maxnum'], 6)) + 1;        
      } 
      $qrID = substr(self::currentDate(), 2) . sprintf('%05d', $num);

      if ($mode === 'estimate') {
        // 元データを変換しつつ、全レコード書き込み
        foreach ($dat as &$rec) {
          // QRIDをセットする
          $rec['qrid'] = $qrID;
          if ($rec['ed_type_04'] === '1') {
            $issueNum = $rec['ed_quantity'];            
          } else {
            // 値リセット
            $issueNum = 1;
          }
          for ($i = 0; $i < $issueNum; $i++) {
            //各データを格納
            $insDat['qr_belong_cd'] = $_SESSION['companycd']; 
            $insDat['qr_id'] = $qrID;
            $insDat['qr_p_cd'] = $rec['ed_p_cd'];
            $insDat['qr_sub_12'] = $rec['sub12'];
            $insDat['qr_sub_13'] = $rec['sub13'];
            $insDat['qr_sub_01'] = $rec['sub01'];
            $insDat['qr_sub_02'] = $rec['sub02'];
            $insDat['qr_sub_03'] = $rec['sub03'];
            $insDat['qr_sub_04'] = $rec['sub04'];
            $insDat['qr_sub_05'] = $rec['sub05'];
            $insDat['qr_sub_06'] = $rec['sub06'];
            $insDat['qr_sub_07'] = isset($rec['sub07']) ? $rec['sub07'] : '';
            $insDat['qr_sub_08'] = $rec['sub08'];
            $insDat['qr_sub_10'] = $rec['sub10'];
            $insDat['qr_sub_09'] = $rec['sub09'];
            $insDat['qr_sub_11'] = $rec['sub11'];
            $insDat['qr_lot_no'] = $rec['lotno'];
            $insDat['qr_sub_no'] = $rec['ed_shipment_sub_no'];
            $insDat['qr_customer_cd'] = $rec['customercd'];
            $insDat['qr_serial_no'] = $rec['serialno'];
            $insDat['qr_ts'] = 0;
            $insDat['qr_arrival_date'] = $rec['arrivaldate'];
            $insDat['qr_parrangement_cd'] = $rec['ed_parrangement_cd'];
            $insDat['qr_p_type_subject'] = $rec['ed_type_subject'];
            $insDat['qr_unit_eval'] = $rec['ed_unit_eval'];
            $insDat['qr_remarks'] = '';
            $insDat['qr_update_at'] = self::currentDate();
            $insDat['qr_update_cd'] = $_SESSION['usercd'];
            $insDat['qr_report_no'] = $rec['lotno'] . $rec['ed_shipment_sub_no'];
            $insDat['qr_maker_cd'] = '';
            $insDat['qr_product_name'] = mb_strlen($rec['concpname']) > 50 ? mb_substr($rec['concpname'], 0, 50) : $rec['concpname'];     // 品名+加工内容名

            // 検索
            $sth = $dbh->prepare('
            SELECT * FROM qr
            WHERE qr_report_no = :REPORTNO AND
                  qr_lot_no = :LOTNO AND 
                  qr_p_cd = :PCD AND 
                  qr_sub_01 = :SUB01 AND 
                  qr_sub_02 = :SUB02 AND 
                  qr_sub_03 = :SUB03 AND
                  qr_sub_04 = :SUB04 AND 
                  qr_sub_05 = :SUB05 AND
                  qr_sub_06 = :SUB06 AND
                  qr_sub_07 = :SUB07 AND
                  qr_sub_08 = :SUB08 AND
                  qr_sub_09 = :SUB09 AND
                  qr_sub_10 = :SUB10 AND
                  qr_sub_11 = :SUB11 AND
                  qr_sub_12 = :SUB12 AND
                  qr_sub_13 = :SUB13 AND
                  qr_parrangement_cd = :PARCD AND
                  qr_type_subject = :SUBJECTCD AND
                  qr_unit_eval = :UNIT
                  ;' );
            $sth->bindValue(':REPORTNO', $insDat['qr_report_no'], PDO::PARAM_STR);
            $sth->bindValue(':LOTNO', $insDat['qr_lot_no'], PDO::PARAM_STR);
            $sth->bindValue(':PCD', $insDat['qr_p_cd'], PDO::PARAM_STR);
            $sth->bindValue(':SUB01', $insDat['qr_sub_01'], PDO::PARAM_STR);
            $sth->bindValue(':SUB02', $insDat['qr_sub_02'], PDO::PARAM_STR);
            $sth->bindValue(':SUB03', $insDat['qr_sub_03'], PDO::PARAM_STR);
            $sth->bindValue(':SUB04', $insDat['qr_sub_04'], PDO::PARAM_STR);
            $sth->bindValue(':SUB05', $insDat['qr_sub_05'], PDO::PARAM_STR);
            $sth->bindValue(':SUB06', $insDat['qr_sub_06'], PDO::PARAM_STR);
            $sth->bindValue(':SUB07', $insDat['qr_sub_07'], PDO::PARAM_STR);
            $sth->bindValue(':SUB08', $insDat['qr_sub_08'], PDO::PARAM_STR);
            $sth->bindValue(':SUB09', $insDat['qr_sub_09'], PDO::PARAM_STR);
            $sth->bindValue(':SUB10', $insDat['qr_sub_10'], PDO::PARAM_STR);
            $sth->bindValue(':SUB11', $insDat['qr_sub_11'], PDO::PARAM_STR);
            $sth->bindValue(':SUB12', $insDat['qr_sub_12'], PDO::PARAM_STR);
            $sth->bindValue(':SUB13', $insDat['qr_sub_13'], PDO::PARAM_STR);
            $sth->bindValue(':PARCD', $insDat['qr_parrangement_cd'], PDO::PARAM_STR);
            $sth->bindValue(':SUBJECTCD', $insDat['qr_type_subject'], PDO::PARAM_STR);
            $sth->bindValue(':UNIT', $insDat['qr_unit_eval'], PDO::PARAM_STR);
            $sth->execute();
            $rsltQR = $sth->fetchAll(PDO::FETCH_ASSOC);
            if (count($rsltQR) > 0 ) {
              // 既存はデータ追加せん
              $rec['qrid'] = $rsltQR[0]['qr_id'];
            } else {
              // 新規のみQRIDをインクリメント
              $num = ++$num;
              $qrID = substr(self::currentDate(), 2) . sprintf('%05d', $num);

              $sth = $dbh->prepare(self::makeInsertSQL('qr', $columns));
              self::bindInsertKeys($sth, $columns, $insDat);
              $sth->execute();
            }
          }       
        }
      } else if ($mode === 'morder') {
        foreach ($dat as &$rec) {          // QRIDをセットする
          $rec['qrid'] = $qrID;
          //各データを格納
          $insDat['qr_belong_cd'] = $_SESSION['companycd']; 
          $insDat['qr_id'] = $qrID;
          $insDat['qr_p_cd'] = $rec['moed_product_cd'];
          $insDat['qr_sub_12'] = $rec['moed_sub_12'];
          $insDat['qr_sub_13'] = $rec['moed_sub_13'];
          $insDat['qr_sub_01'] = $rec['moed_sub_01'];
          $insDat['qr_sub_02'] = $rec['moed_sub_02'];
          $insDat['qr_sub_03'] = $rec['moed_sub_03'];
          $insDat['qr_sub_04'] = $rec['moed_sub_04'];
          $insDat['qr_sub_05'] = $rec['moed_sub_05'];
          $insDat['qr_sub_06'] = $rec['moed_sub_06'];
          $insDat['qr_sub_07'] = $rec['moed_sub_07'];
          // 現在のデータではないはずだが、古いデータだとNullのケースがあるので、Nullは空文字に変換する。sub09も同様。
          $insDat['qr_sub_08'] = isset($rec['moed_sub_08']) ? $rec['moed_sub_08'] : '';
          $insDat['qr_sub_10'] = $rec['moed_sub_10'];
          $insDat['qr_sub_09'] = isset($$rec['moed_sub_09']) ? $rec['moed_sub_09'] : '';
          $insDat['qr_sub_11'] = $rec['moed_sub_11'];
          $insDat['qr_lot_no'] = $rec['moed_type_03'];    // 自社ロット番号
          $insDat['qr_sub_no'] = '00';
          $insDat['qr_customer_cd'] = $rec['moed_customer_cd'];
          $insDat['qr_serial_no'] = '';      // $rec['moed_sub_10'];
          $insDat['qr_steel_no'] = '';      // $rec['moed_sub_11']; 
          $insDat['qr_package'] = '';      // $rec['moed_sub_12'];
          $insDat['qr_coil_no'] = '';      // $rec['moed_sub_07'];
          $insDat['qr_ts'] = $rec['moed_sub_num_04'];;
          $insDat['qr_arrival_date'] = '';
          $insDat['qr_parrangement_cd'] = $rec['moed_parrangement_cd'];
          $insDat['qr_p_type_subject'] = $rec['moed_type_subject'];
          $insDat['qr_unit_eval'] = $rec['moed_unit_eval'];
          $insDat['qr_remarks'] = '';
          $insDat['qr_update_at'] = self::currentDate();
          $insDat['qr_update_cd'] = $_SESSION['usercd'];
          $insDat['qr_report_no'] = $rec['moed_order_no'] . $rec['moed_sub_no'] . $rec['moed_accept_sub_no'];
          $insDat['qr_maker_cd'] = $rec['moed_customer_post_cd'] === '' ? $rec['moed_customer_cd'] : ($rec['moed_customer_cd'] . $rec['moed_manufacture_cd']);
          $insDat['qr_product_name'] = mb_strlen($rec['moed_product_name']) > 50 ? mb_substr($rec['moed_product_name'], 0, 50) : $rec['moed_product_name'];
          // 検索
          $sth = $dbh->prepare('
          SELECT * FROM qr
          WHERE qr_report_no = :REPORTNO AND
                qr_lot_no = :LOTNO AND 
                qr_p_cd = :PCD AND 
                qr_sub_01 = :SUB01 AND 
                qr_sub_02 = :SUB02 AND 
                qr_sub_03 = :SUB03 AND
                qr_sub_04 = :SUB04 AND 
                qr_sub_05 = :SUB05 AND
                qr_sub_06 = :SUB06 AND
                qr_sub_07 = :SUB07 AND
                qr_sub_08 = :SUB08 AND
                qr_sub_09 = :SUB09 AND
                qr_sub_10 = :SUB10 AND
                qr_sub_11 = :SUB11 AND
                qr_sub_12 = :SUB12 AND
                qr_sub_13 = :SUB13 AND
                qr_parrangement_cd = :PARCD AND
                qr_type_subject = :SUBJECTCD AND
                qr_unit_eval = :UNIT
                ;' );
          $sth->bindValue(':REPORTNO', $insDat['qr_report_no'], PDO::PARAM_STR);
          $sth->bindValue(':LOTNO', $insDat['qr_lot_no'], PDO::PARAM_STR);
          $sth->bindValue(':PCD', $insDat['qr_p_cd'], PDO::PARAM_STR);
          $sth->bindValue(':SUB01', $insDat['qr_sub_01'], PDO::PARAM_STR);
          $sth->bindValue(':SUB02', $insDat['qr_sub_02'], PDO::PARAM_STR);
          $sth->bindValue(':SUB03', $insDat['qr_sub_03'], PDO::PARAM_STR);
          $sth->bindValue(':SUB04', $insDat['qr_sub_04'], PDO::PARAM_STR);
          $sth->bindValue(':SUB05', $insDat['qr_sub_05'], PDO::PARAM_STR);
          $sth->bindValue(':SUB06', $insDat['qr_sub_06'], PDO::PARAM_STR);
          $sth->bindValue(':SUB07', $insDat['qr_sub_07'], PDO::PARAM_STR);
          $sth->bindValue(':SUB08', $insDat['qr_sub_08'], PDO::PARAM_STR);
          $sth->bindValue(':SUB09', $insDat['qr_sub_09'], PDO::PARAM_STR);
          $sth->bindValue(':SUB10', $insDat['qr_sub_10'], PDO::PARAM_STR);
          $sth->bindValue(':SUB11', $insDat['qr_sub_11'], PDO::PARAM_STR);
          $sth->bindValue(':SUB12', $insDat['qr_sub_12'], PDO::PARAM_STR);
          $sth->bindValue(':SUB13', $insDat['qr_sub_13'], PDO::PARAM_STR);
          $sth->bindValue(':PARCD', $insDat['qr_parrangement_cd'], PDO::PARAM_STR);
          $sth->bindValue(':SUBJECTCD', $insDat['qr_type_subject'], PDO::PARAM_STR);
          $sth->bindValue(':UNIT', $insDat['qr_unit_eval'], PDO::PARAM_STR);
          $sth->execute();
          $rsltQR = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($rsltQR) > 0 ) {
            // 既存はデータ追加せん
            $rec['qrid'] = $rsltQR[0]['qr_id'];
            // $insDat['qr_id'] = $rsltQR[0]['qr_id'];
          } else {
            // 新規のみQRIDをインクリメント
            $num = ++$num;
            $qrID = substr(self::currentDate(), 2) . sprintf('%05d', $num);

            $sth = $dbh->prepare(self::makeInsertSQL('qr', $columns));
            self::bindInsertKeys($sth, $columns, $insDat);
            $sth->execute();
          }

          // $num = ++$num;
          // $qrID = substr(self::currentDate(), 2) . sprintf('%05d', $num);

          // $sth = $dbh->prepare(self::makeInsertSQL('qr', $columns));
          // self::bindInsertKeys($sth, $columns, $insDat);
          // $sth->execute();   
        }
      } else {
        // 現在庫のデータをQR発行
        // 元データを変換しつつ、全レコード書き込み
        foreach ($dat as &$rec) {          // QRIDをセットする
          $rec['qrid'] = $qrID;
          //各データを格納
          $insDat['qr_belong_cd'] = $rec['sr_belong_cd']; 
          $insDat['qr_id'] = $qrID;
          $insDat['qr_p_cd'] = $rec['sr_p_cd'];
          $insDat['qr_sub_12'] = $rec['sr_sub_12'];
          $insDat['qr_sub_13'] = $rec['sr_sub_13'];
          $insDat['qr_sub_01'] = $rec['sr_sub_01'];
          $insDat['qr_sub_02'] = $rec['sr_sub_02'];
          $insDat['qr_sub_03'] = $rec['sr_sub_03'];
          $insDat['qr_sub_04'] = $rec['sr_sub_04'];
          $insDat['qr_sub_05'] = $rec['sr_sub_05'];
          $insDat['qr_sub_06'] = $rec['sr_sub_06'];
          $insDat['qr_sub_07'] = $rec['sr_sub_07'];
          $insDat['qr_sub_08'] = $rec['sr_sub_08'];
          $insDat['qr_sub_10'] = $rec['sr_sub_10'];
          $insDat['qr_sub_09'] = $rec['sr_sub_09'];
          $insDat['qr_sub_11'] = $rec['sr_sub_11'];
          $insDat['qr_lot_no'] = $rec['sr_sub_14'];
          $insDat['qr_sub_no'] = $rec['sr_sub_cd']; // 2023/6/19 データ定義の桁数を変更＆品名補足内容を登録
          $insDat['qr_customer_cd'] = '';
          $insDat['qr_serial_no'] = '';
          $insDat['qr_steel_no'] = ''; 
          $insDat['qr_package'] = ''; 
          $insDat['qr_coil_no'] = ''; 
          $insDat['qr_ts'] = 0;
          $insDat['qr_arrival_date'] = $rec['sr_transfer_date'];
          $insDat['qr_w_cd'] = $rec['sr_w_cd'];
          $insDat['qr_parrangement_cd'] = $rec['sr_parrangement_cd'];
          $insDat['qr_p_type_subject'] = $rec['sr_type_subject'];
          $insDat['qr_unit_eval'] = $rec['sr_unit_cd'];
          $insDat['qr_remarks'] = $rec['sr_remarks'];
          $insDat['qr_type_01'] = ''; 
          $insDat['qr_type_02'] = ''; 
          $insDat['qr_type_03'] = ''; 
          $insDat['qr_type_04'] = ''; 
          $insDat['qr_type_05'] = ''; 
          $insDat['qr_update_at'] = self::currentDate();
          $insDat['qr_update_cd'] = $_SESSION['usercd'];
          $insDat['qr_report_no'] = $rec['ed_estimate_no']; 
          // 検索
          $sth = $dbh->prepare('
          SELECT * FROM qr
          WHERE qr_report_no = :REPORTNO AND
                qr_lot_no = :LOTNO AND 
                qr_p_cd = :PCD AND 
                qr_sub_01 = :SUB01 AND 
                qr_sub_02 = :SUB02 AND 
                qr_sub_03 = :SUB03 AND
                qr_sub_04 = :SUB04 AND 
                qr_sub_05 = :SUB05 AND
                qr_sub_06 = :SUB06 AND
                qr_sub_07 = :SUB07 AND
                qr_sub_08 = :SUB08 AND
                qr_sub_09 = :SUB09 AND
                qr_sub_10 = :SUB10 AND
                qr_sub_11 = :SUB11 AND
                qr_sub_12 = :SUB12 AND
                qr_sub_13 = :SUB13 AND
                qr_parrangement_cd = :PARCD AND
                qr_type_subject = :SUBJECTCD AND
                qr_unit_eval = :UNIT
                ;' );
          $sth->bindValue(':REPORTNO', $insDat['qr_report_no'], PDO::PARAM_STR);
          $sth->bindValue(':LOTNO', $insDat['qr_lot_no'], PDO::PARAM_STR);
          $sth->bindValue(':PCD', $insDat['qr_p_cd'], PDO::PARAM_STR);
          $sth->bindValue(':SUB01', $insDat['qr_sub_01'], PDO::PARAM_STR);
          $sth->bindValue(':SUB02', $insDat['qr_sub_02'], PDO::PARAM_STR);
          $sth->bindValue(':SUB03', $insDat['qr_sub_03'], PDO::PARAM_STR);
          $sth->bindValue(':SUB04', $insDat['qr_sub_04'], PDO::PARAM_STR);
          $sth->bindValue(':SUB05', $insDat['qr_sub_05'], PDO::PARAM_STR);
          $sth->bindValue(':SUB06', $insDat['qr_sub_06'], PDO::PARAM_STR);
          $sth->bindValue(':SUB07', $insDat['qr_sub_07'], PDO::PARAM_STR);
          $sth->bindValue(':SUB08', $insDat['qr_sub_08'], PDO::PARAM_STR);
          $sth->bindValue(':SUB09', $insDat['qr_sub_09'], PDO::PARAM_STR);
          $sth->bindValue(':SUB10', $insDat['qr_sub_10'], PDO::PARAM_STR);
          $sth->bindValue(':SUB11', $insDat['qr_sub_11'], PDO::PARAM_STR);
          $sth->bindValue(':SUB12', $insDat['qr_sub_12'], PDO::PARAM_STR);
          $sth->bindValue(':SUB13', $insDat['qr_sub_13'], PDO::PARAM_STR);
          $sth->bindValue(':PARCD', $insDat['qr_parrangement_cd'], PDO::PARAM_STR);
          $sth->bindValue(':SUBJECTCD', $insDat['qr_type_subject'], PDO::PARAM_STR);
          $sth->bindValue(':UNIT', $insDat['qr_unit_eval'], PDO::PARAM_STR);
          $sth->execute();
          $rsltQR = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($rsltQR) > 0 ) {
            // 既存はデータ追加せん
            $rec['qrid'] = $rsltQR[0]['qr_id'];
          } else {
            // 新規のみQRIDをインクリメント
            $num = ++$num;
            $qrID = substr(self::currentDate(), 2) . sprintf('%05d', $num);

            $sth = $dbh->prepare(self::makeInsertSQL('qr', $columns));
            self::bindInsertKeys($sth, $columns, $insDat);
            $sth->execute();
          } 
          // $num = ++$num;
          // $qrID = substr(self::currentDate(), 3) . sprintf('05d%', $num); 

          // $sth = $dbh->prepare(self::makeInsertSQL('qr', $columns));
          // self::bindInsertKeys($sth, $columns, $insDat);
          // $sth->execute();           
        }
      }
      $dbh->commit();
      return $result;
    } catch (Exception $e) {
      $result['result'] = false;
      $result['comment'] = $e;
      return $result;
    }    
  }

  /**
   * 納品書の情報から仮請求書ファイルを作成する
   */
  public static function makeBillFromStatementFile($sdat) {
    $results = null;
    $dbh = self::dbPDO();
    try {
      $sqlstr = 'SELECT H1.*, DT.*,E.ED_ORDER_SIGN,E.ED_END_SIGN, E.ED_STATEMENT_SIGN, E.ED_BILL_SIGN,E.ED_RECEIPT_MONEY_SIGN, EH.E_ORDER_DATE,
        C.*, CP.CP_POST_NAME, (SELECT CC.CC_CHARGE_NAME FROM customercharge AS CC WHERE H1.S_CUSTOMER_ID = CC.CC_CUSTOMER_ID AND H1.S_CUSTOMER_CD = CC.CC_CUSTOMER_CD
        AND H1.S_CUSTOMER_POST_ID = CC.CC_POST_CD AND CC.CC_CHARGE_CD = H1.S_CUSTOMER_CHARGE_ID) AS CC_CHARGE_NAME,
        (SELECT HC.H_TAXRATE_CURRENT FROM housecompany AS HC) AS TAXCUR, U1.USER_NAME
        FROM statement As H1 JOIN statementdetails AS DT ON H1.S_STATEMENT_NO = DT.SD_STATEMENT_NO
        LEFT JOIN estimatedetails  AS E  ON DT.SD_CUSTOMER_ID      = E.ED_CUSTOMER_ID      AND DT.SD_CUSTOMER_CD   = E.ED_CUSTOMER_CD
                                        AND DT.SD_CUSTOMER_POST_ID = E.ED_CUSTOMER_POST_ID AND DT.SD_ESTIMATE_DATE = E.ED_ESTIMATE_DATE
                                        AND DT.SD_SALESMAN_ID      = E.ED_SALESMAN_ID      AND DT.SD_SALESMAN_CD   = E.ED_SALESMAN_CD
                                        AND DT.SD_ESTIMATE_SEQ_NO   = E.ED_ESTIMATE_SEQ_NO AND DT.SD_ESTIMATE_VER  = E.ED_ESTIMATE_VER
                                        AND DT.SD_ESTIMATE_DETAILS_NO = E.ED_ESTIMATE_DETAILS_NO
        LEFT JOIN estimate        AS EH  ON DT.SD_CUSTOMER_ID      = EH.E_CUSTOMER_ID      AND DT.SD_CUSTOMER_CD   = EH.E_CUSTOMER_CD
                                        AND DT.SD_CUSTOMER_POST_ID = EH.E_CUSTOMER_POST_ID AND DT.SD_ESTIMATE_DATE = EH.E_ESTIMATE_DATE
                                        AND DT.SD_SALESMAN_ID      = EH.E_SALESMAN_ID      AND DT.SD_SALESMAN_CD   = EH.E_SALESMAN_CD
                                        AND DT.SD_ESTIMATE_SEQ_NO  = EH.E_ESTIMATE_SEQ_NO  AND DT.SD_ESTIMATE_VER  = EH.E_ESTIMATE_VER
              JOIN customer          AS C ON H1.S_CUSTOMER_ID = C.C_CUSTOMER_ID             AND H1.S_CUSTOMER_CD = C.C_CUSTOMER_CD
        LEFT JOIN customerpost     AS CP ON H1.S_CUSTOMER_ID = CP.CP_CUSTOMER_ID
                                        AND H1.S_CUSTOMER_CD = CP.CP_CUSTOMER_CD  AND H1.S_CUSTOMER_POST_ID = CP.CP_POST_CD
        LEFT JOIN user AS U1             ON H1.S_SALESMAN_ID = U1.USER_ID         AND H1.S_SALESMAN_CD = U1.USER_CD
        WHERE H1.S_STATEMENT_NO = :S_STATEMENT_NO';
      $sth = $dbh->prepare($sqlstr);
      $sth->bindValue(':S_STATEMENT_NO', $sdat['SD_STATEMENT_NO'], PDO::PARAM_STR);
      $sth->execute();
      $results = $sth->fetchAll(PDO::FETCH_ASSOC);
      BookMaker::issueBillFromStatementFile($results);
    } catch (Exception $e) {
      throw $e;
    }
  }

  
  /**
   * LIXIL請求書を作成
   */
  public static function makeBillFileLIXIL($sdat) {
    $dbh = self::dbPDO();
    try {
      // 請求明細、請求ヘッダ、納品ヘッダ、客先マスタ、部署マスタを取得
      $sth = $dbh->prepare('
      SELECT * 
      FROM billdetails AS bd 
      LEFT JOIN bill AS b 
      ON bd.bd_belong_cd = b.b_belong_cd 
      AND bd.bd_bill_no = b.b_bill_no 
      AND bd.bd_customer_cd = b.b_customer_cd 
      LEFT JOIN statement AS s 
      ON bd.bd_belong_cd = s.s_belong_cd 
      AND bd.bd_estimate_no = s.s_estimate_no 
      AND bd.bd_st_details_no = s.s_serial_no 
      LEFT JOIN customer AS c 
      ON s.s_customer_cd = c.C_CUSTOMER_CD
      LEFT JOIN customerpost AS cp 
      ON CP_CUSTOMER_CD = s.s_customer_cd 
      AND CP_POST_CD = s.s_delivery_cd
      ORDER BY bd_shipment_date,bd_belong_cd,bd_bill_no,bd_estimate_no
      ;');
      $sth->execute();
      $results = $sth->fetchAll(PDO::FETCH_ASSOC);

      // 自社マスタを取得
      $sth = $dbh->prepare('
      SELECT * FROM housecompany;');
      $sth->execute();
      $housecompanyResults = $sth->fetchAll(PDO::FETCH_ASSOC);

      // 請求書出力
      BookMaker::makeBillFileLIXIL($results, $housecompanyResults);
    } catch (Exception $e) {
      throw $e;
    }
  }

  /**
   * 在庫詳細データ取得
   */
  public static function readDetailStock($category, $row) {
    $result = [];
    $dbh = self::dbPDO();
    try {
      if ($category === 'CRSUS') {
        $nSub09 = 0;
        $madeCountry = '';   // [D]が国産、[O]が外国産、空は不明
        if ($row['domestic15'] > 0) {
          $nSub09 = 15000;
          $madeCountry = 'D';
        } else if ($row['overseas15'] > 0) {
          $nSub09 = 15000;
          $madeCountry = 'O';          
        } else if ($row['unknown15'] > 0) {
          $nSub09 = 15000;
          $madeCountry = '';  
        } else if ($row['domestic20'] > 0) {
          $nSub09 = 20000;
          $madeCountry = 'D';
        } else if ($row['overseas20'] > 0) {
          $nSub09 = 20000;
          $madeCountry = 'O';  
        } else if ($row['unknown20'] > 0) {
          $nSub09 = 20000;
          $madeCountry = '';  
        }

        $strSQL = '
        SELECT temp.*, CP_QUOTATION_TYPE, IF ( sub01 = 0.0, "", 
          CONCAT("φ", sub01, "×", CASE WHEN sub04 = FLOOR(sub04) THEN FLOOR(sub04) ELSE sub04 END, sub06)) AS psupple,
          IF(sub09 = 15000, "15M", "20M") AS sub09M, CASE WHEN sub08 = FLOOR(sub08) THEN FLOOR(sub08) ELSE sub08 END AS sub08, 
          IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, "")) AS makername
        FROM viewontimestorage AS temp
        LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD 
        LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD 
        WHERE productcd = :PCD AND (sub01 = :SUB01 AND sub04 = :SUB04 AND sub06 = :SUB06 AND sub01 = sub02 AND sub04 = sub05) 
          AND sub09 = :SUB09 AND sub08 = 1000 AND qty > 0 AND (customercd = "" or customercd is null) 
        ';
        if ($madeCountry === '') {
          $strSQL .= ' AND (typemanufacture IS NULL OR TRIM(typemanufacture) = "")';
        } else {
          $strSQL .= ' AND typemanufacture = :MADECOUNTRY;';
        }
        $sth = $dbh->prepare($strSQL);
        $sth->bindValue(':PCD', $row['productcd'], PDO::PARAM_STR);
        $sth->bindValue(':SUB01', $row['sub01'], PDO::PARAM_INT );
        $sth->bindValue(':SUB04', $row['sub04'], PDO::PARAM_INT );
        $sth->bindValue(':SUB06', $row['sub06'], PDO::PARAM_INT );
        $sth->bindValue(':SUB09', $nSub09, PDO::PARAM_INT );
        if ($madeCountry !== '') {
          $sth->bindValue(':MADECOUNTRY', $madeCountry, PDO::PARAM_STR);
        }
        $sth->execute();
        $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

        foreach ($rslt as $rec) {
          $rec['qty'] = self::convertStrRoundDownToNumber($rec['qty']);
          array_push($result, $rec);
        }
      } else if ($category === 'CRMZN') {
        $nSub08 = 0;
        $nSub09 = 0;
        $madeCountry = '';   // [D]が国産、[O]が外国産、空は不明
        // 910×15M
        if ($row['domestic15_910'] > 0) {
          $nSub08 = 910;
          $nSub09 = 15000;
          $madeCountry = 'D';
        } else if ($row['overseas15_910'] > 0) {
          $nSub08 = 910;
          $nSub09 = 15000;
          $madeCountry = 'O';          
        } else if ($row['unknown15_910'] > 0) {
          $nSub08 = 910;
          $nSub09 = 15000;
          $madeCountry = '';  
        // 1000×15M
        } else if ($row['domestic15_1000'] > 0) {
          $nSub08 = 1000;
          $nSub09 = 15000;
          $madeCountry = 'D';          
        } else if ($row['overseas15_1000'] > 0) {
          $nSub08 = 1000;
          $nSub09 = 15000;
          $madeCountry = 'O';          
        } else if ($row['unknown15_1000'] > 0) {
          $nSub08 = 1000;
          $nSub09 = 15000;
          $madeCountry = '';  
        // 20M
        } else if ($row['domestic20'] > 0) {
          $nSub08 = 1000;
          $nSub09 = 20000;
          $madeCountry = 'D';
        } else if ($row['overseas20'] > 0) {
          $nSub08 = 1000;
          $nSub09 = 20000;
          $madeCountry = 'O';  
        } else if ($row['unknown20'] > 0) {
          $nSub08 = 1000;
          $nSub09 = 20000;
          $madeCountry = '';  
        }

        $strSQL = '
        SELECT temp.*, CP_QUOTATION_TYPE, IF ( sub01 = 0.0, "", 
          CONCAT("φ", sub01, "×", CASE WHEN sub04 = FLOOR(sub04) THEN FLOOR(sub04) ELSE sub04 END, sub06)) AS psupple,
          IF(sub09 = 15000, "15M", "20M") AS sub09M, CASE WHEN sub08 = FLOOR(sub08) THEN FLOOR(sub08) ELSE sub08 END AS sub08, 
          IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, "")) AS makername
        FROM viewontimestorage AS temp
        LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD 
        LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD 
        WHERE productcd = :PCD AND (sub01 = :SUB01 AND sub04 = :SUB04 AND sub06 = :SUB06 AND sub01 = sub02 AND sub04 = sub05) 
          AND sub08 = :SUB08 AND sub09 = :SUB09 AND qty > 0 AND (customercd = "" or customercd is null) 
        ';
        if ($madeCountry === '') {
          $strSQL .= ' AND (typemanufacture IS NULL OR TRIM(typemanufacture) = "")';
        } else {
          $strSQL .= ' AND typemanufacture = :MADECOUNTRY;';
        }
        $sth = $dbh->prepare($strSQL);
        $sth->bindValue(':PCD', $row['productcd'], PDO::PARAM_STR);
        $sth->bindValue(':SUB01', $row['sub01'], PDO::PARAM_INT );
        $sth->bindValue(':SUB04', $row['sub04'], PDO::PARAM_INT );
        $sth->bindValue(':SUB06', $row['sub06'], PDO::PARAM_INT );
        $sth->bindValue(':SUB08', $nSub08, PDO::PARAM_INT );
        $sth->bindValue(':SUB09', $nSub09, PDO::PARAM_INT );
        if ($madeCountry !== '') {
          $sth->bindValue(':MADECOUNTRY', $madeCountry, PDO::PARAM_STR);
        }
        $sth->execute();
        $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

        foreach ($rslt as $rec) {
          $rec['qty'] = self::convertStrRoundDownToNumber($rec['qty']);
          array_push($result, $rec);
        }
      } else if ($category === 'MT') {
        $sth = $dbh->prepare('
        SELECT 
          st.*,
          "" AS diameter,
          IF(CP_POST_NAME <> "",
            CP_POST_NAME,
            IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, "")) AS makername,
          ROUND(unitprice) AS unitprice
        FROM viewontimestorage AS st     
        LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD 
        LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD 
        WHERE productcd = :PCD AND sub08 = :SUB08 AND unitname = :UNIT AND (customercd = "" or customercd is null) 
        ;');
        $sth->bindValue(':PCD', $row['productcd'], PDO::PARAM_STR);
        $sth->bindValue(':SUB08', $row['sub08'], PDO::PARAM_INT );
        $sth->bindValue(':UNIT', $row['unitname'], PDO::PARAM_STR);
        $sth->execute();
        $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

        foreach ($rslt as $rec) {
          $rec['diameter'] = BookMaker::makeArrayProductSpec($rec['diameter'])[1];
          array_push($result, $rec);
        }
        
      } else {
        $sth = $dbh->prepare('
        SELECT temp.*, "" AS psupple, SUBSTRING_INDEX(SUBSTRING_INDEX(productname, "_", -1), "×", 1) AS diameter, 
        IF(length(makercd) > 3, CP_POST_NAME, C_CUSTOMER_NAME) AS makername, ROUND(unitprice) AS unitprice,
        IF(CP_POST_NAME <> "", CP_POST_NAME, IF(C_CUSTOMER_NAME <> "", C_CUSTOMER_NAME, "")) AS makername 
        FROM viewontimestorage AS temp      
        LEFT JOIN customer ON left(makercd,3) = C_CUSTOMER_CD 
        LEFT JOIN customerpost ON left(makercd,3) = CP_CUSTOMER_CD AND substring(makercd,4,3) = CP_POST_CD 
        WHERE productcd = :PCD AND makercd = :MAKERCD AND unitname = :UNIT AND (customercd = "" or customercd is null) 
        ;');
        $sth->bindValue(':PCD', $row['productcd'], PDO::PARAM_STR);
        $sth->bindValue(':MAKERCD', $row['makercd'], PDO::PARAM_STR);
        $sth->bindValue(':UNIT', $row['unitname'], PDO::PARAM_STR);
        $sth->execute();
        $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);

        $temp = [];
        $arItem = [];
        foreach($rslt as $rec) {
          $temp = BookMaker::makeArrayProductSpec($rec);
          $rec['psupple'] = $temp[1];
          array_push($result, $rec);
        }
      }
      echo json_encode($result); 

    } catch (Exception $e) {
      throw $e;
    }
  }


  /**
   * 請求書ファイルを作成する　単一伝票
   * 中のSQLを修正する場合はsearchStatementData内部の請求書作成SQLも修正すること。
   */
  // public static function makeBillFile($sdat) {
  //   $results = null;
  //   $dbh = self::dbPDO();
  //   try {
  //     $strSql = '
  //       SELECT bd.*,b.*,dp.*,
  //       sr_sales_price,
  //       IF(sd.sd_customer_order_no IS NULL, s.s_customer_order_no, sd.sd_customer_order_no) AS order_no,
  //       u.u_name AS u_name,
  //       cu.cu_name,
  //     CONCAT(bd.bd_bill_no, "-", sd.sd_statement_sub_no) AS sdnumber,
  //       IF(s.s_stay_cd IS NULL, "", cp3.CP_POST_NAME) AS destplace,
  //       IF(s.s_stay_cd IS NULL, IF(s.s_delivery_cd IS NULL, cp1.CP_ADDRESS_NO, cp2.CP_ADDRESS_NO),cp3.CP_ADDRESS_NO) AS dest_zipcd,
  //     IF(s.s_stay_cd IS NULL, IF(s.s_delivery_cd IS NULL, cp1.CP_ADDRESS_01, cp2.CP_ADDRESS_01),cp3.CP_ADDRESS_01) AS dest_address_01,
  //     IF(s.s_stay_cd IS NULL, IF(s.s_delivery_cd IS NULL, cp1.CP_ADDRESS_02, cp2.CP_ADDRESS_02),cp3.CP_ADDRESS_02) AS dest_address_02,
  //         IF(s.s_stay_cd IS NULL, IF(s.s_delivery_cd IS NULL, cp1.CP_POST_NAME, cp2.CP_POST_NAME),cp3.CP_POST_NAME) AS dest_name,
  //       IF(s.s_stay_cd IS NULL, IF(s.s_delivery_cd IS NULL, cp1.CP_POST_NAME, ""), "") AS dest_post,
  //     IF(sd.sd_customer_p_name IS NULL, p.p_name, sd.sd_customer_p_name) AS prod_name
  //         FROM billdetails AS bd 
  //         LEFT JOIN bill AS b ON b.b_belong_cd = bd.bd_belong_cd 
  //         AND b.b_customer_cd = bd.bd_customer_cd 
  //         AND b.b_bill_no = bd.bd_bill_no 
  //     LEFT JOIN statementdetails AS sd ON sd.sd_belong_cd = bd.bd_belong_cd
  //         AND sd.sd_e_estimate_no = bd.bd_estimate_no
  //         AND sd.sd_estimate_sub_no = bd.bd_ed_details_no
  //         AND sd.sd_statement_sub_no = bd.bd_st_details_no
  //                 AND sd.sd_shipment_sub_no = bd.bd_shipment_div
  //     LEFT JOIN statement AS s ON sd.sd_belong_cd = s.s_belong_cd
  //         AND sd.sd_e_estimate_no = s.s_estimate_no
  //         AND sd.sd_statement_sub_no = s.s_serial_no
  //     LEFT JOIN estimatedetails AS ed ON ed.ed_belong_cd = sd.sd_belong_cd
  //         AND ed.ed_estimate_no = sd.sd_e_estimate_no
  //         AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no
  //     LEFT JOIN estimate AS e ON e.e_belong_cd = sd.sd_belong_cd
  //         AND e.e_estimate_no = sd.sd_e_estimate_no
  //     LEFT JOIN product AS p ON
  //       p.p_belong_cd = sd.sd_belong_cd AND  p.p_cd = sd.sd_p_cd
  //     LEFT JOIN unit AS u ON u.u_belong_cd = p.p_belong_cd  
  //       AND  u.u_cd = p.p_unit_tran
  //     LEFT JOIN customer AS c1 ON c1.c_customer_cd = s.s_customer_cd 
  //     LEFT JOIN customerpost AS cp1 ON cp1.cp_customer_cd = s.s_customer_cd 
  //       AND cp1.cp_post_cd = s.s_customer_post_cd
  //     LEFT JOIN customerpost AS cp2 ON cp2.cp_customer_cd = s.s_customer_cd 
  //       AND cp2.cp_post_cd = s.s_delivery_cd
  //     LEFT JOIN customerpost AS cp3 ON cp3.cp_customer_cd = s.s_customer_cd 
  //       AND cp3.cp_post_cd = s.s_stay_cd
  //     LEFT JOIN customercharge AS cc ON cc.cc_customer_cd = s.s_customer_cd 
  //       AND cc.cc_post_cd = s.s_customer_post_cd AND cc.cc_charge_cd = s.s_customer_charge_cd
  //     LEFT JOIN housecompany AS h ON h.H_COMPANY_CD = bd.bd_belong_cd 
  //     LEFT JOIN sumreceive AS sr ON sr.sr_belong_cd = h.H_COMPANY_CD 
  //       AND sr.sr_month = h.H_ACCONTING_MONTH      
  //     LEFT JOIN deposit AS dp ON
  //       bd.bd_belong_cd = dp.dp_belong_cd AND bd.bd_payment_no = dp.dp_no 
  //     LEFT JOIN currency AS cu ON
  //       cu.cu_belong_cd = dp.dp_belong_cd AND cu.cu_cd = dp.dp_type 
  //     WHERE bd_shipment_date IS NOT NULL AND bd_invoice_no IS NULL AND bd_bill_no LIKE :BILLNO ';
  //     // $sqlstr = '
  //     //     SELECT bd.*,b.*,dp.*,
  //     //     sr_sales_price,
  //     //     IF(sd.sd_customer_order_no IS NULL, s.s_customer_order_no, sd.sd_customer_order_no) AS order_no,
  //     //     u.u_name AS u_name,
  //     //     cu.cu_name,
  //     //   CONCAT(bd.bd_bill_no, "-", sd.sd_statement_sub_no) AS sdnumber,
  //     //     IF(s.s_stay_cd IS NULL, "", cp3.CP_POST_NAME) AS destplace,
  //     //     IF(s.s_stay_cd IS NULL, IF(s.s_delivery_cd IS NULL, cp1.CP_ADDRESS_NO, cp2.CP_ADDRESS_NO),cp3.CP_ADDRESS_NO) AS dest_zipcd,
  //     //   IF(s.s_stay_cd IS NULL, IF(s.s_delivery_cd IS NULL, cp1.CP_ADDRESS_01, cp2.CP_ADDRESS_01),cp3.CP_ADDRESS_01) AS dest_address_01,
  //     //   IF(s.s_stay_cd IS NULL, IF(s.s_delivery_cd IS NULL, cp1.CP_ADDRESS_02, cp2.CP_ADDRESS_02),cp3.CP_ADDRESS_02) AS dest_address_02,
  //     //       IF(s.s_stay_cd IS NULL, IF(s.s_delivery_cd IS NULL, cp1.CP_POST_NAME, cp2.CP_POST_NAME),cp3.CP_POST_NAME) AS dest_name,
  //     //     IF(s.s_stay_cd IS NULL, IF(s.s_delivery_cd IS NULL, cp1.CP_POST_NAME, ""), "") AS dest_post,
  //     //   IF(sd.sd_customer_p_name IS NULL, p.p_name, sd.sd_customer_p_name) AS prod_name
  //     //       FROM billdetails AS bd 
  //     //       LEFT JOIN bill AS b ON b.b_belong_cd = bd.bd_belong_cd 
  //     //       AND b.b_customer_cd = bd.bd_customer_cd 
  //     //       AND b.b_bill_no = bd.bd_bill_no 
  //     //   LEFT JOIN statementdetails AS sd ON sd.sd_belong_cd = bd.bd_belong_cd
  //     //       AND sd.sd_e_estimate_no = bd.bd_estimate_no
  //     //       AND sd.sd_estimate_sub_no = bd.bd_ed_details_no
  //     //       AND sd.sd_statement_sub_no = bd.bd_st_details_no
  //     //               AND sd.sd_shipment_sub_no = bd.bd_shipment_div
  //     //   LEFT JOIN statement AS s ON sd.sd_belong_cd = s.s_belong_cd
  //     //       AND sd.sd_e_estimate_no = s.s_estimate_no
  //     //       AND sd.sd_statement_sub_no = s.s_serial_no
  //     //   LEFT JOIN estimatedetails AS ed ON ed.ed_belong_cd = sd.sd_belong_cd
  //     //       AND ed.ed_estimate_no = sd.sd_e_estimate_no
  //     //       AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no
  //     //   LEFT JOIN estimate AS e ON e.e_belong_cd = sd.sd_belong_cd
  //     //       AND e.e_estimate_no = sd.sd_e_estimate_no
  //     //   LEFT JOIN product AS p ON
  //     //     p.p_belong_cd = sd.sd_belong_cd AND  p.p_cd = sd.sd_p_cd
  //     //   LEFT JOIN unit AS u ON u.u_belong_cd = p.p_belong_cd  
  //     //     AND  u.u_cd = p.p_unit_tran
  //     //   LEFT JOIN customer AS c1 ON c1.c_customer_cd = s.s_customer_cd 
  //     //   LEFT JOIN customerpost AS cp1 ON cp1.cp_customer_cd = s.s_customer_cd 
  //     //     AND cp1.cp_post_cd = s.s_customer_post_cd
  //     //   LEFT JOIN customerpost AS cp2 ON cp2.cp_customer_cd = s.s_customer_cd 
  //     //     AND cp2.cp_post_cd = s.s_delivery_cd
  //     //   LEFT JOIN customerpost AS cp3 ON cp3.cp_customer_cd = s.s_customer_cd 
  //     //     AND cp3.cp_post_cd = s.s_stay_cd
  //     //   LEFT JOIN customercharge AS cc ON cc.cc_customer_cd = s.s_customer_cd 
  //     //     AND cc.cc_post_cd = s.s_customer_post_cd AND cc.cc_charge_cd = s.s_customer_charge_cd
  //     //   LEFT JOIN housecompany AS h ON h.H_COMPANY_CD = bd.bd_belong_cd 
  //     //   LEFT JOIN sumreceive AS sr ON sr.sr_belong_cd = h.H_COMPANY_CD 
  //     //     AND sr.sr_month = h.H_ACCONTING_MONTH      
  //     //   LEFT JOIN deposit AS dp ON
  //     //     bd.bd_belong_cd = dp.dp_belong_cd AND bd.bd_payment_no = dp.dp_no 
  //     //   LEFT JOIN currency AS cu ON
  //     //     cu.cu_belong_cd = dp.dp_belong_cd AND cu.cu_cd = dp.dp_type 
  //     //   WHERE bd_shipment_date IS NOT NULL AND bd_invoice_no IS NULL AND 
  //     //     bd_customer_cd = :CUSTOMERCD AND bd_bill_no LIKE :BILLNO
  //     // ;';
     
  //     $sth = $dbh->prepare($strSql);
  //     $sth->bindValue(':CUSTOMERCD', $sdat['bd_customer_cd'], PDO::PARAM_STR);
  //     $sth->bindValue(':BILL_NO', $sdat['bd_bill_no'], PDO::PARAM_STR);
  //     $sth->execute();
  //     $results = $sth->fetchAll(PDO::FETCH_ASSOC);

  //     // 入金データ取得
  //     $sth = $dbh->prepare('
  //       SELECT dp.*, cu_name FROM deposit AS dp
  //       LEFT JOIN currency AS cu ON
  //         cu.cu_belong_cd = dp.dp_belong_cd AND cu.cu_cd = dp.dp_type
  //       WHERE dp_del_flg <> 1
  //         AND dp_date > :CLOSEDAY AND dp_date <= :TODAY 
  //       ORDER BY dp_customer_cd ASC, CAST(dp_date AS SIGNED) ASC
  //       ;');
  //     $sth->bindValue(':CLOSEDAY', (int)('20' . substr($sdat['bd_bill_no'], 0, 6)), PDO::PARAM_STR);
  //     $sth->bindValue(':TODAY', (int)(date('Ymd')), PDO::PARAM_STR);
  //     $sth->execute();
  //     $results2 = $sth->fetchAll(PDO::FETCH_ASSOC); 

  //     // エクセルファイル作成　単一伝票用
  //     BookMaker::issueBillFile($results, $results2);

      
  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }

  // /**
  //  * BOM展開結果を確認する
  //  */
  // public static function readCheckbom($option) {
  //   $dbh = self::dbPDO();
  //   try {
  //     $dbh->beginTransaction();
  //     $sth = $dbh->prepare('SET @qty = ?;');
  //     $sth->bindValue(1, $option['qty'], PDO::PARAM_INT);
  //     $sth->execute();
  //     $sth = $dbh->prepare('SET @finishdt = DATE_FORMAT(?, "%Y-%m-%d %h:00:00");');
  //     $sth->bindValue(1, $option['finishdt'], PDO::PARAM_INT);
  //     $sth->execute();
  //     $sth = $dbh->prepare('SET @dayst = (SELECT day_st_hour FROM wbsctrl LIMIT 1);');
  //     $sth->execute();
  //     $sth = $dbh->prepare('SET @dayen = (SELECT day_en_hour FROM wbsctrl LIMIT 1);');
  //     $sth->execute();
  //     $sth = $dbh->prepare('SET max_execution_time = 10000;');
  //     $sth->execute();
  //     $sth = $dbh->prepare('SET @startdt = DATE_FORMAT(?, "%Y-%m-%d %h:00:00");');
  //     $sth->bindValue(1, $option['finishdt'], PDO::PARAM_INT);
  //     $sth->execute();
  //     $sth = $dbh->prepare('
  //     WITH RECURSIVE 
  //     cte AS(
  //             SELECT bom.b_parent_id, bom.b_child_id, bom.b_typeA, bom.b_typeB,
  //                   bom.b_proc_name, (@qty * bom.b_quantity) as b_quantity, 0 AS depth,
  //                   CAST(bom.b_child_id AS CHAR(256)) AS dir,
  //                   bom.b_time_amount, bom.b_time_fix, (@qty) as pcs,
  //                   (@qty * bom.b_time_amount + bom.b_time_fix) as req_time,
  //                   (CASE WHEN bom.b_child_id > 0 THEN NULL ELSE @finishdt END) AS dtfinish,
  //                   (CASE WHEN (bom.b_child_id > 0) THEN NULL
  //                   WHEN (bom.b_child_id = 0) THEN 	@startdt := calcstartdt(@finishdt,  (@qty * bom.b_time_amount + bom.b_time_fix), @dayst, @dayen)
  //                                 ELSE NULL END) AS dtstart
  //                            FROM bom	 WHERE b_parent_id = ?  
  //             UNION ALL
  //             SELECT child.b_parent_id, child.b_child_id, child.b_typeA, child.b_typeB,
  //                   child.b_proc_name, child.b_quantity, cte.depth + 1 AS depth, 
  //                   CONCAT(cte.dir,"/",child.b_child_id) AS dir,
  //                   child.b_time_amount, child.b_time_fix,
  //                   cte.pcs * (SELECT b1.b_quantity from bom b1 where b1.b_child_id = child.b_parent_id) as pcs,
  //                   (cte.pcs * (SELECT b1.b_quantity from bom b1 where b1.b_child_id = child.b_parent_id) * child.b_time_amount + child.b_time_fix) as req_time,
  //                   (CASE WHEN child.b_child_id = 0 THEN @startdt
  //                   ELSE cte.dtstart END) AS dtfinish,
  //                   (CASE WHEN child.b_child_id = 0 
  //                   THEN @startdt := calcstartdt(@startdt, (cte.pcs * (SELECT b1.b_quantity from bom b1 where b1.b_child_id = child.b_parent_id) * child.b_time_amount + child.b_time_fix), @dayst, @dayen)
  //                   ELSE cte.dtstart  END) AS dtstart
  //                   FROM bom as child,cte where cte.b_child_id = child.b_parent_id
  //     )
  //     SELECT cte.* , 
  //           CASE WHEN cte.b_child_id = 0 THEN cte.b_proc_name ELSE pr.p_name END AS p_name,
  //             prp.p_name AS parent_p_name, pr.p_name AS child_p_name FROM cte
  //           LEFT JOIN product AS pr ON cte.b_child_id = pr.p_cd
  //           LEFT JOIN product AS prp ON cte.b_parent_id = prp.p_cd
  //           ORDER BY dir ASC;');
  //     // CASE WHEN pr.p_name IS NULL THEN CONCAT("(",prp.p_name,":製造作業)") ELSE pr.p_name END AS p_name,
  //     // $sth = $dbh->prepare('WITH RECURSIVE cte AS
  //     // (
  //     //   SELECT     b.b_parent_id, b.b_child_id, CAST(@qty AS DECIMAL(10,4)) AS b_quantity, b.b_time_fix, b.b_time_amount,
  //     //              calcstartdt(@finishdt, @qty * b.b_time_amount + b.b_time_fix, @dayst, @dayen) AS dtstart,
  //     //              @finishdt AS dtfinish
  //     //              ,0 AS depth, CAST(b.b_child_id AS CHAR(255)) AS dir
  //     //   FROM       bom AS b
  //     //   WHERE      b_parent_id = ?
  //     //   UNION ALL
  //     //   SELECT     p.b_parent_id, p.b_child_id, ROUND(p.b_quantity * cte.b_quantity, 4) AS b_quantity, p.b_time_fix, p.b_time_amount,
  //     //              calcstartdt(cte.dtstart, p.b_quantity * cte.b_quantity * p.b_time_amount + p.b_time_fix, @dayst, @dayen) AS dtstart,
  //     //              cte.dtstart AS dtfinish
  //     //              ,cte.depth + 1 AS depth, CONCAT(cte.dir,\'/\',p.b_child_id) AS dir
  //     //   FROM       bom p
  //     //   INNER JOIN cte ON p.b_parent_id = cte.b_child_id
  //     // )
  //     // SELECT cte.*, (cte.b_quantity * cte.b_time_amount + cte.b_time_fix) AS req_time,
  //     //   CASE WHEN pr.p_name IS NULL THEN CONCAT(\'(\',prp.p_name,\':製造作業)\') ELSE pr.p_name END AS p_name,
  //     //   prp.p_name AS parent_p_name, pr.p_name AS child_p_name FROM cte
  //     // LEFT JOIN products AS pr ON cte.b_child_id = pr.p_id
  //     // LEFT JOIN products AS prp ON cte.b_parent_id = prp.p_id
  //     // ORDER BY dir ASC;');
  //     $sth->bindValue(1, $option['checkId'], PDO::PARAM_INT);
  //     // $sth->bindValue(:製造作業, , PDO::PARAM_INT);
  //     $sth->execute(); 
  //     $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
  //     $dbh->commit();
  //     // error_log($sth->queryString, "3", "C:/Apache24/htdocs/wbs/log/log_sono.log");
  //     echo $result;
  //   } catch (Exception $e) {
  //     $dbh->rollBack();
  //     throw $e;
  //   }
  //   return;
  // }

  /**
   * 指定製品についてのBOM展開結果の内、材料にあたる項目(製造工程の指定されていないBOM)を取得する
   */
  public static function searchMaterialsbom($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      $sth = $dbh->prepare('SET @qty = ?;');
      $sth->bindValue(1, $sdat['qty'], PDO::PARAM_INT);
      $sth->execute();
      $sth = $dbh->prepare('SET @finishdt = DATE_FORMAT(?, \'%Y-%m-%d %h:00:00\');');
      $sth->bindValue(1, $sdat['finishdt'], PDO::PARAM_INT);
      $sth->execute();
      $sth = $dbh->prepare('SET @dayst = (SELECT day_st_hour FROM wbsctrl LIMIT 1);');
      $sth->execute();
      $sth = $dbh->prepare('SET @dayen = (SELECT day_en_hour FROM wbsctrl LIMIT 1);');
      $sth->execute();
      $sth = $dbh->prepare('SET max_execution_time = 10000;');
      $sth->execute();
      $sth = $dbh->prepare('WITH RECURSIVE cte AS
      (
        SELECT     b.b_parent_id, b.b_child_id, CAST(ROUND(b.b_quantity * @qty, 4) AS DECIMAL(10,4)) AS b_quantity, b.b_time_fix, b.b_time_amount,
                   calcstartdt(@finishdt, @qty * b.b_time_amount + b.b_time_fix, @dayst, @dayen) AS dtstart,
                   @finishdt AS dtfinish
                   ,0 AS depth, CAST(b.b_child_id AS CHAR) AS dir
                   ,(SELECT COUNT(*) FROM bom AS bb1 WHERE bb1.b_parent_id = b.b_child_id AND bb1.b_child_id = 0) AS proccnt
        FROM       bom AS b
        WHERE      b_parent_id = ?
        UNION ALL
        SELECT     p.b_parent_id, p.b_child_id, ROUND(p.b_quantity * cte.b_quantity, 4) AS b_quantity, p.b_time_fix, p.b_time_amount,
                   calcstartdt(cte.dtstart, p.b_quantity * cte.b_quantity * p.b_time_amount + p.b_time_fix, @dayst, @dayen) AS dtstart,
                   cte.dtstart AS dtfinish
                   ,cte.depth + 1 AS depth, CONCAT(cte.dir,\'/\',p.b_child_id) AS dir
                   ,(SELECT COUNT(*) FROM bom AS bb2 WHERE bb2.b_parent_id = p.b_child_id AND bb2.b_child_id = 0) AS proccnt
        FROM       bom p
        INNER JOIN cte ON p.b_parent_id = cte.b_child_id
      )
      SELECT cte.*, (cte.b_quantity * cte.b_time_amount + cte.b_time_fix) AS req_time,
        CASE WHEN pr.p_name IS NULL THEN CONCAT(\'(\',prp.p_name,\':製造作業)\') ELSE pr.p_name END AS p_name,
        prp.p_name AS parent_p_name, pr.p_name AS child_p_name FROM cte
      LEFT JOIN product AS pr ON cte.b_child_id = pr.p_cd
      LEFT JOIN product AS prp ON cte.b_parent_id = prp.p_cd
      WHERE depth < 1 AND b_child_id <> 0 AND proccnt = 0
      ORDER BY dir ASC;');
      $sth->bindValue(1, $sdat['checkId'], PDO::PARAM_INT);
      $sth->execute();
      $resp['results'] = $sth->fetchAll(PDO::FETCH_ASSOC);
      $dbh->commit();
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
    }
    echo json_encode($resp);
  }


  /**
   * 在庫数確認
   */
  public static function readCurrentstock($sdat) {
    $dbh = self::dbPDO();
    try {
      $strYM = '';
      // 検索ベース 在庫マスタに、当月分確定前の入庫数量、出庫数量を加算して在庫数量とする
      $strSql = 'SELECT *, (sr_quantity + sumin + sumout) AS sr_quantity FROM storage AS s
      LEFT JOIN
      (SELECT *, IF(SUM(stc_qty_trans) > 0, SUM(stc_qty_trans), 0) AS sumin FROM stock
      WHERE
          stc_arrange_type = "110"
              AND stc_report_no LIKE "U%"
              AND stc_month = :YYMM
              AND stc_type_01 = "0"
      GROUP BY stc_product_cd, stc_sub_01, stc_sub_02, stc_sub_03, stc_sub_04, stc_sub_05, stc_sub_06, stc_sub_08, stc_sub_09) AS temp1 ON s.sr_p_cd = temp1.stc_product_cd
          AND s.sr_sub_cd LIKE CONCAT(LPAD(TRUNCATE(temp1.stc_sub_01 * 10, 0), 5, "0"),
              LPAD(TRUNCATE(temp1.stc_sub_02 * 10, 0), 5, "0"),
              LPAD(temp1.stc_sub_03, 5, " "),
              LPAD(TRUNCATE(temp1.stc_sub_04 * 10, 0), 5, "0"),
              LPAD(TRUNCATE(temp1.stc_sub_05 * 10, 0), 5, "0"),
              LPAD(temp1.stc_sub_06, 5, " "),
              LPAD(TRUNCATE(temp1.stc_sub_08 * 10, 0), 10, " "),
              LPAD(TRUNCATE(temp1.stc_sub_09 * 10, 0), 10, " "), "%") 
      LEFT JOIN
      (SELECT *, IF(SUM(stc_qty_trans) > 0, SUM(stc_qty_trans), 0) AS sumout FROM stock
      WHERE
          stc_arrange_type = "510"
              AND stc_report_no LIKE "U%"
              AND stc_month = :YYMM2
              AND stc_type_01 = "0"
      GROUP BY stc_product_cd, stc_sub_01, stc_sub_02, stc_sub_03, stc_sub_04, stc_sub_05, stc_sub_06, stc_sub_08, stc_sub_09) AS temp2 ON s.sr_p_cd = temp2.stc_product_cd
          AND s.sr_sub_cd LIKE CONCAT(LPAD(TRUNCATE(temp2.stc_sub_01 * 10, 0), 5, "0"),
              LPAD(TRUNCATE(temp2.stc_sub_02 * 10, 0), 5, "0"),
              LPAD(temp2.stc_sub_03, 5, " "),
              LPAD(TRUNCATE(temp2.stc_sub_04 * 10, 0), 5, "0"),
              LPAD(TRUNCATE(temp2.stc_sub_05 * 10, 0), 5, "0"),
              LPAD(temp2.stc_sub_06, 5, " "),
              LPAD(TRUNCATE(temp2.stc_sub_08 * 10, 0), 10, " "),
              LPAD(TRUNCATE(temp2.stc_sub_09 * 10, 0), 10, " "), "%") ';
      
      // 棚卸確定年月を取得。予定入荷数量取得用
      $sth = $dbh->prepare('SELECT H_ACCONTING_MONTH FROM housecompany;');
      $sth->execute();
      $resultYM = $sth->fetchAll(PDO::FETCH_ASSOC);
      // 年月を受払明細用に整形
      $strYM = substr($resultYM[0]['H_ACCONTING_MONTH'], 2);
      $strYM = $strYM + 1;
      $strYM = (String)$strYM;

      if (self::checkNotSet($sdat) === false) {
        // 製品CD指定
        // 品名マスタに存在する＝品名CDかどうかチェックする
        $sth = $dbh->prepare('
        SELECT * FROM product
        WHERE p_cd = :PCD 
        ;');
        $sth->bindValue(':PCD', $sdat, PDO::PARAM_STR);
        $sth->execute();
        $resultP = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (count($resultP) > 0 ) {
          $strSql .= ' WHERE sr_p_cd = :PCD;';
        } else {
          // 品名CDでなければ、渡されたデータを強制的にクリアする
          $sdat = '';
        }        
      }

      $sth = $dbh->prepare($strSql);
      $sth->bindValue(':YYMM', $strYM, PDO::PARAM_STR);
      $sth->bindValue(':YYMM2', $strYM, PDO::PARAM_STR);
      if (self::checkNotSet($sdat) === false) {
        $sth->bindValue(':PCD', $sdat, PDO::PARAM_STR);
      }
      $sth->execute();
      $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
      echo $result;
    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 在庫データ表示ダイアログ　予定セット stockplan使用なので注意
   * 在庫引当の扱いを考慮
   */
  public static function readExpectStock($sdat) {
    $dbh = self::dbPDO();
    try {
      // 複数個レコードがある場合があるため、INで連結して検索する
      $strSql = '';
      if (self::checkNotSet($sdat) === false) {
        for($i = 0; $i < count($sdat); $i++) {
          $strNo = $i + 1;
          if ($i === 0) {
            $strSql = ':PCD' . $strNo;
          } else {
            $strSql .= ', :PCD' . $strNo;
          }
        }
      }
      $sth = $dbh->prepare('
      SELECT *, (sr_quantity + sumin) AS sr_quantity,
		p_name AS productname,
      IF (sin.sp_update_at > sout.sp_update_at, sin.sp_update_at, sout.sp_update_at) AS updateat,
      IF (stockplus > 0, stockplus, 0) AS stockplus,
      IF (stockminus > 0, stockminus, 0) AS stockminus
      FROM storage AS s
      LEFT JOIN
      (SELECT *, SUM(stc_qty_trans) AS sumin FROM stock
      WHERE
          stc_arrange_type = "110"
              AND stc_report_no LIKE "U%"
              AND stc_month = :YYMM
              AND stc_type_01 = "0"
      GROUP BY stc_product_cd, stc_sub_01, stc_sub_02, stc_sub_03, stc_sub_04, stc_sub_05, stc_sub_06, stc_sub_07, stc_sub_08, stc_sub_09) AS temp1 ON s.sr_p_cd = temp1.stc_product_cd
          AND s.sr_sub_cd LIKE CONCAT(LPAD(TRUNCATE(temp1.stc_sub_01 * 10, 0), 5, "0"),
              LPAD(TRUNCATE(temp1.stc_sub_02 * 10, 0), 5, "0"),
              LPAD(temp1.stc_sub_03, 5, " "),
              LPAD(TRUNCATE(temp1.stc_sub_04 * 10, 0), 5, "0"),
              LPAD(TRUNCATE(temp1.stc_sub_05 * 10, 0), 5, "0"),
              LPAD(temp1.stc_sub_06, 5, " "),
              LPAD(TRUNCATE(temp1.stc_sub_08 * 10, 0), 10, " "),
              LPAD(TRUNCATE(temp1.stc_sub_09 * 10, 0), 10, " "), "%") 
	    LEFT JOIN (SELECT *,SUM(sp_qty_trans) AS stockplus FROM stockplan
      WHERE (sp_arrange_type = "210" OR sp_arrange_type = "110")  AND sp_month = :YYMM2
              AND sp_type_01 = "0" GROUP BY sp_product_cd,sp_sub_01,sp_sub_03,sp_sub_04,sp_sub_05,sp_sub_06,sp_sub_08,sp_sub_09) AS sin
      ON s.sr_p_cd = sin.sp_product_cd AND s.sr_sub_cd LIKE CONCAT(
      LPAD(TRUNCATE(sin.sp_sub_01 * 10, 0), 5, "0"),
      LPAD(TRUNCATE(sin.sp_sub_02 * 10, 0), 5, "0"),
      LPAD(sin.sp_sub_03, 5, " "),
      LPAD(TRUNCATE(sin.sp_sub_04 * 10, 0), 5, "0"),
      LPAD(TRUNCATE(sin.sp_sub_05 * 10, 0), 5, "0"),
      LPAD(sin.sp_sub_06, 5, " "),
      LPAD(TRUNCATE(sin.sp_sub_08 * 10, 0), 10, " "),
      LPAD(TRUNCATE(sin.sp_sub_09 * 10, 0), 10, " "), "%")
      LEFT JOIN (SELECT *, SUM(sp_qty_trans) AS stockminus FROM stockplan
      WHERE (sp_arrange_type ="510" OR sp_arrange_type = "610")  AND sp_product_cd NOT LIKE "26%" GROUP BY sp_product_cd,sp_sub_01,sp_sub_03,sp_sub_04,sp_sub_05,sp_sub_06,sp_sub_08,sp_sub_09) AS sout
      ON s.sr_p_cd = sout.sp_product_cd AND s.sr_sub_cd LIKE CONCAT(
      LPAD(TRUNCATE(sout.sp_sub_01 * 10, 0), 5, "0"),
      LPAD(TRUNCATE(sout.sp_sub_02 * 10, 0), 5, "0"),
      LPAD(sout.sp_sub_03, 5, " "),
      LPAD(TRUNCATE(sout.sp_sub_04 * 10, 0), 5, "0"),
      LPAD(TRUNCATE(sout.sp_sub_05 * 10, 0), 5, "0"),
      LPAD(sout.sp_sub_06, 5, " "),
      LPAD(TRUNCATE(sout.sp_sub_08 * 10, 0), 10, " "),
      LPAD(TRUNCATE(sout.sp_sub_09 * 10, 0), 10, " "), "%")
      LEFT JOIN product AS p ON s.sr_p_cd = p.p_cd 
      WHERE sr_p_cd IN (' . $strSql .
      ');');
      
      // 棚卸確定年月を取得。予定入荷数量取得用
      $sth = $dbh->prepare('SELECT H_ACCONTING_MONTH FROM housecompany;');
      $sth->execute();
      $resultYM = $sth->fetchAll(PDO::FETCH_ASSOC);
      // 年月を受払明細用に整形
      $strYM = substr($resultYM[0]['H_ACCONTING_MONTH'], 2);
      $strYM = $strYM + 1;
      $strYM = (String)$strYM;

      $sth->bindValue(':YYMM', $strYM, PDO::PARAM_STR);
      $sth->bindValue(':YYMM2', $strYM, PDO::PARAM_STR);
      if (self::checkNotSet($sdat) === false) {
        for ($i = 0; $i < count($sdat); $i++) {
          $strNo = $i + 1;
          $sth->bindValue(':PCD' . $strNo, $sdat, PDO::PARAM_STR);
        }
      }
      $sth->execute();
      $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
      echo $result;
    } catch (Exception $e) {
      throw $e;
    }
  }

  /***
   * 受注と納品データの共通処理用
   * 連想配列から検索し、値のみを文字列で返す
   */
  private static function arrayFilterReturnValue($ar, $searchArray) {
    $arFilter = array_intersect_key($ar, array_flip($searchArray));
    return array_values($arFilter)[0];
  }

  /**
   * 在庫引当用データ取得
   * 00レコード:在庫テーブルデータ
   * 01以降レコード:引当データとする
   */
  public static function readAssignStock($sdat, $mode = 'ED') {
    
    $dbh = self::dbPDO();
    try {
      // 該当受注番号取得し、データ表示
      $estimateNo = '';
      $estimateNo = self::arrayFilterReturnValue($sdat, ['ed_estimate_no', 'sd_e_estimate_no']);

      $sth = $dbh->prepare('
            SELECT 
            "" AS stc_month,
            "" AS stc_yearmonth,
            "" AS ed_estimate_no,
            stp.sp_arrange_type AS stc_arrange_type,
            pay.py_name AS stc_arrange_name,
            stp.sp_report_no AS stc_report_no,
            stp.sp_sub_no_01 AS stc_sub_no_01,
            stp.sp_sub_no_02 AS stc_sub_no_02, 
            stp.sp_update_cnt AS stc_update_cnt,
            stp.sp_report_date AS stc_report_date,
            stp.sp_target_id AS stc_target_id,
            c.C_CUSTOMER_NAME AS stc_target_name,
            stp.sp_place_cd AS stc_place_cd,
            wh.w_name AS stc_place_name,
            stp.sp_customer_post_cd AS stc_customer_post_cd,
            cp.CP_POST_NAME AS stc_customer_post_name,
            stp.sp_product_cd AS stc_product_cd,
            CONCAT(SUBSTRING_INDEX(p.p_name, "_", 1),
                    " ",
                    IF(ar.ar_name = "なし" OR ar.ar_name IS NULL,
                        "",
                        ar.ar_name)) AS stc_product_name,
            "" AS stc_product_supple,
            stp.sp_qty_trans AS stc_qty_trans,
            stp.sp_unit_tran AS stc_unit_tran,
            stp.sp_price_trans AS stc_price_trans,
            stp.sp_cost_eva_qty AS stc_cost_eva_qty,
            stp.sp_inventory_type AS stc_inventory_type,
            stp.sp_recv_type AS stc_recv_type,
            stp.sp_expence_type AS stc_expence_type,
            stp.sp_cost_type AS stc_cost_type,
            stp.sp_unit_price AS stc_unit_price,
            stp.sp_type_01 AS stc_type_01,
            stp.sp_type_02 AS stc_type_02,
            stp.sp_type_03 AS stc_type_03,
            stp.sp_type_04 AS stc_type_04,
            stp.sp_type_05 AS stc_type_05,
            stp.sp_update_at AS stc_update_at,
            stp.sp_update_time AS stc_update_time,
            stp.sp_update_cd AS stc_update_cd,
            u.user_name AS stc_update_name,
            IF(ed.ed_p_cd IS NULL, stp.sp_product_cd, ed.ed_p_cd) AS productcd,
            p.p_name,
            p.p_type,
            p.p_name AS productname,
            stp.sp_sub_01 AS sub01,
            stp.sp_sub_02 AS sub02,
            stp.sp_sub_03 AS sub03,
            stp.sp_sub_04 AS sub04,
            stp.sp_sub_05 AS sub05,
            stp.sp_sub_06 AS sub06,
            stp.sp_sub_07 AS sub07,
            stp.sp_sub_08 AS sub08,
            stp.sp_sub_09 AS sub09,
            stp.sp_sub_10 AS sub10,
            stp.sp_sub_11 AS sub11,
            stp.sp_sub_12 AS sub12,
            stp.sp_sub_13 AS sub13,
            ed.ed_sub_num_03 AS wireno,
            IF(ed.ed_unit_tran IS NULL, stp.sp_unit_tran, ed.ed_unit_tran) AS unittran2,
            ed.ed_customer_p_name AS customerpname,
            ar.ar_name
        FROM
            stockplan AS stp
                LEFT JOIN
            user AS u ON stp.sp_update_cd = u.user_id
                AND stp.sp_update_cd = u.user_cd
                LEFT JOIN
            estimatedetails AS ed ON stp.sp_belong_cd = ed.ed_belong_cd
                AND stp.sp_report_no = ed.ed_estimate_no
                AND stp.sp_sub_no_01 = ed.ed_estimate_sub_no
                AND stp.sp_sub_no_02 = ed.ed_shipment_sub_no
                LEFT JOIN
            estimate AS e ON stp.sp_belong_cd = e.e_belong_cd
                AND stp.sp_report_no = e.e_estimate_no
                LEFT JOIN
            payment AS pay ON stp.sp_arrange_type = pay.py_cd
                LEFT JOIN
            warehouse AS wh ON stp.sp_place_cd = wh.w_cd
                LEFT JOIN
            product AS p ON p.p_belong_cd = "001" AND  stp.sp_product_cd = p.p_cd
                LEFT JOIN
            arrangement AS ar ON ed.ed_belong_cd = ar.ar_belong_cd
                AND ed.ed_parrangement_cd = ar.ar_sub_cd
                LEFT JOIN
            customer AS c ON e.e_customer_cd = c.c_customer_cd
                LEFT JOIN
            customerpost AS cp ON e.e_customer_cd = cp.cp_customer_cd
                AND e.e_customer_cd = cp.cp_customer_id
                AND e.e_customer_post_cd = cp.CP_POST_CD
        WHERE stp.sp_type_01 = "0" AND 
            stp.sp_arrange_type = "510" AND sp_target_id = :CUSTOMERCD AND stc_report_no = :REPORTNO  AND sp_product_cd NOT LIKE "26%" 
      ;');

      $sth->bindValue(':CUSTOMERCD', $sdat[0]['e_customer_cd'], PDO::PARAM_STR);
      $sth->bindValue(':REPORTNO', $estimateNo, PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      echo json_encode($result);

      // // 在庫数表示数するときは、在庫テーブル作成の元データを取得する必要有り
      // $sth = $dbh->prepare('
      // SELECT *, p_name AS  sas_p_name, par.ar_name AS sas_parrangement_name, "" AS sas_p_supple
      //  FROM shippingassign
      // LEFT JOIN product AS p ON sas_belong_cd = p.p_belong_cd AND sas_p_cd = p.p_cd
      // LEFT JOIN warehouse AS wh ON sas_belong_cd = wh.w_belong_cd AND sas_location = wh.w_cd
      // LEFT JOIN arrangement AS par ON sas_parrangement_cd = par.ar_sub_cd
      // WHERE sas_belong_cd = :BELONGCD AND sas_estimate_no = :ESTNO
      // ;');
      // $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      // $sth->bindValue(':ESTNO', $estimateNo, PDO::PARAM_STR);
      // $sth->execute();
      // $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      // // 受注の場合は、品名補足印字内容を作成する。
      // foreach($result as $rec) {
      //   $sth = $dbh->prepare('
      //   SELECT 
      //     ed_p_cd,
      //     ed_sub_01 AS sub01, ed_sub_02 AS sub02, ed_sub_03 AS sub03, ed_sub_04 AS sub04, ed_sub_05 AS sub05, ed_sub_06 AS sub06,
      //     ed_sub_07 AS sub07, ed_sub_08 AS sub08, ed_sub_09 AS sub09, ed_sub_10 AS sub10, ed_sub_11 AS sub11, ed_sub_12 AS sub12,
      //     ed_sub_13 AS sub13,
      //     ed_sub_num_03 AS wireno,
      //     ar.ar_name
      //   FROM estimatedetails
      //   LEFT JOIN arrangement AS ar ON ed_parrangement_cd = ar.ar_sub_cd
      //   WHERE ed_estimate_no = :ESTNO AND ed_estimate_sub_no = :SUBNO
      //   ;');
      //   $sth->bindValue(':ESTNO', $rec['sas_estimate_no'], PDO::PARAM_STR);
      //   $sth->bindValue(':ESTNO', $rec['sas_estimate_sub_no'], PDO::PARAM_STR);
      //   $sth->execute();
      //   $rsltEst = $sth->fetchAll(PDO::FETCH_ASSOC);

      //   foreach($rsltEst as $record) {
      //     $ar = BookMaker::makeArrayProductSpec($record);
      //     $record['sas_p_supple'] = $ar[1] . ' ' . $ar[2];
      //   }
      // }
      // echo json_encode($result);
      
      // // 基本情報取得　複数画面用
      // $strEstNo = '';
      // $strEstSubNo = '';
      // $strShipNo = '';
      // $strPCD = '';
      // $strSPEC = '';
      // $strPSubject = '';
      
      // // 受注番号
      // $strEstNo = self::arrayFilterReturnValue($sdat, ['ed_estimate_no', 'sd_e_estimate_no']);
      // // 受注枝番
      // $strEstSubNo = self::arrayFilterReturnValue($sdat, ['ed_estimate_sub_no', 'sd_estimate_sub_no']);
      // // // 出荷枝番
      // // $strShipNo = self::arrayFilterReturnValue($sdat, ['ed_shipment_sub_no', 'sd_shipment_sub_no']);
      // // // 製品CD
      // // $strPCD = self::arrayFilterReturnValue($sdat, ['ed_p_cd', 'sd_p_cd']);

      //  // スペック取得
      // $sth = $dbh->prepare('
      //   SELECT * FROM estimatedetails
      //   WHERE ed_belong_cd = :BELONGCD AND 
      //   ed_estimate_no = :ESTNO AND 
      //   ed_estimate_sub_no = :ESTSUBNO 
      // ;');
      // $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      // $sth->bindValue(':ESTNO', $strEstNo, PDO::PARAM_STR);
      // $sth->bindValue(':ESTSUBNO', $strEstSubNo, PDO::PARAM_STR);
      // $sth->execute();
      // $resultSP = $sth->fetchAll(PDO::FETCH_ASSOC);

      // if (count($resultSP) <= 0) {
      //   // あり得ないためエラー処理
      //   throw new Exception('データ取得に失敗しました');
      // }

      // // // ロット番号含まないスペック文字列 
      // // $strSPEC = self::storageSetPadding($resultSP, true);

      // // 現在庫テーブル取得 temp_assignstock
      // self::createStorageTable($dbh, $resultSP[0]);

      // // 引当テーブルと現在庫テーブルを連結して、引き当てデータと現在庫データを表示する。
      // $sth = $dbh->prepare('
      //   SELECT wcd, wname,pcd, estimateno, estsubno, 
      //   serialno, statementno, shipsubno, lotno, updateat, 
      //   SUM(qty) AS qty, shipnum, instocknum, SUM(assignqty) AS assignqty, unitname, 
      //   subcd, type_subject, parrangement_cd, sas_type_01 FROM (
      //   SELECT wcd, wname,pcd, estimateno, estsubno, 
      //   serialno, "0000" AS statementno, shipsubno, lotno, updateat, 
      //   qty, shipnum, instocknum, assignqty, unitname, 
      //   subcd, type_subject, parrangement_cd, 0 AS sas_type_01
      //   FROM temp_assignstock AS temp
      //   UNION ALL
      //   (SELECT 
      //   sas_location AS wcd, w_name AS wname, sas_p_cd AS pcd, sas_estimate_no AS estimateno, sas_estimate_sub_no AS estsubno, 
      //   "01" AS serialno, sas_statement_sub_no AS statementno, sas_shipment_sub_no AS shipsubno, sas_lot_no AS lotno, sas_update_at AS updateat,
      //   sas_quantity AS  qty, 0 AS shipnum, 0 AS instocknum, sas_quantity AS assignqty, sas_unit_tran AS unitname,
      //   sas_sub_cd AS subcd,
      //   sas_type_subject AS type_subject,
      //   sas_parrangement_cd AS parrangement_cd,
      //   sas_type_01
      //   FROM shippingassign
      //   LEFT JOIN warehouse ON w_cd = sas_location
      //   WHERE sas_statement_sub_no = "0000" AND (sas_type_01 = "0" OR sas_type_01 = "") AND sas_estimate_no = :ESTNO AND sas_estimate_sub_no = :ESTSUBNO)) AS t1
      //   GROUP BY wcd, pcd, estimateno, estsubno, 
      //   /*serialno, statementno, shipsubno,*/ lotno, updateat, unitname, subcd, type_subject, parrangement_cd
      //  /*WHERE sas_statement_sub_no = "0000" AND (sas_type_01 = "0" OR sas_type_01 = "") AND sas_estimate_no = :ESTNO AND sas_estimate_sub_no = :ESTSUBNO)*/
      // ;');
      // $sth->bindValue(':ESTNO', $resultSP[0]['ed_estimate_no'], PDO::PARAM_STR);
      // $sth->bindValue(':ESTSUBNO', $resultSP[0]['ed_estimate_sub_no'], PDO::PARAM_STR);
      // $sth->execute();
      // $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      // echo json_encode($result);
    } catch (exception $e) {
      throw $e;
    }
  }


  /**
   * 
   * 現在庫データをテンポラリテーブル作成&データ更新
   * 調査するレコードの見積データから、該当の在庫データを抽出する
   */
  private static function createStorageTable($dbh, $item) {
    $strSubCD = '';
    $rsltStock1 = [];
    $rsltStock2 = [];
    try {
      // 規格文字列作成 ロット番号を除く
      $strSubCD = self::storageSetPadding($item, $dbh, true);
            
      // temporarytable作成
      $sth = $dbh->prepare('drop temporary table if exists temp_assignstock;');
      $sth = $dbh->prepare('
        CREATE TEMPORARY TABLE temp_assignstock
        (
          `wcd` varchar(3) NOT NULL,
          `wname` varchar(40),
          `pcd` varchar(30) NOT NULL,
          `estimateno` varchar(11) DEFAULT "",
          `estsubno` varchar(3) DEFAULT "000",
          `serialno` varchar(2) DEFAULT "01",
          `shipsubno` varchar(2) DEFAULT "00",
          `lotno` char(20) DEFAULT "",
          `updateat` varchar(8) NOT NULL,
          `qty` decimal(17,3) DEFAULT "0.000",
          `shipnum` decimal(17,3) NOT NULL DEFAULT "0.000",
          `instocknum` decimal(17,3) NOT NULL DEFAULT "0.000",
          `assignqty` decimal(17,3) NOT NULL DEFAULT "0.000",
          `unitname` varchar(20),
          `subcd` varchar(160) NOT NULL,
          `type_subject` char(2) DEFAULT "",
          `parrangement_cd` char(3) DEFAULT "" ,
          `remarks` char(30) DEFAULT "", 
          PRIMARY KEY (`wcd`,`pcd`, `shipsubno`, `subcd`, `serialno`, `type_subject`, `parrangement_cd`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
      ;');
      $sth->execute();

      // 棚卸済みの在庫データをテンポラリに追加
      $sth = $dbh->prepare('
      INSERT INTO temp_assignstock
        (wcd, wname, pcd, estimateno, estsubno, serialno, shipsubno, lotno, updateat, qty, shipnum, instocknum, assignqty, unitname, subcd, type_subject, parrangement_cd, remarks)
        SELECT sr_w_cd,
        w.w_name ,
        sr_p_cd,
        "00000000000",
        "000",
        "00",
        "00",
        sr_sub_14,
        sr_update_at,
        sr_quantity,
        0,
        0,
        0,
        sr_unit_cd,
        sr_sub_cd,
        sr_type_subject,
        sr_parrangement_cd,
        sr_remarks
        FROM storage AS sr
        LEFT JOIN warehouse AS w ON w.w_cd = sr.sr_w_cd
        LEFT JOIN product AS p ON p.p_cd = sr.sr_p_cd
        WHERE sr_p_cd = :PCD AND sr_sub_cd LIKE :SUBCD 
      ;');
      $sth->bindValue(':PCD', $item['ed_p_cd'], PDO::PARAM_STR);
      $sth->bindValue(':SUBCD', $strSubCD . '%', PDO::PARAM_STR);  // SQLはstorageに合わせているため、ロット番号含むため。 
      $sth->execute();

      // 在庫テーブルからの入出庫を換算
      $sth = $dbh->prepare('
      SELECT stc_place_cd,
        w_name,
        p_name,
        stc_product_cd,
        estno,
        estsubno,
        serialno,
        shipno,
        stc_type_04,
        stc_update_at,
        SUM(inqty) AS inqty,
        SUM(outqty) AS outqty,
        stc_unit_tran,
        subcd,
        stc_type_subject,
        stc_parrangement_cd,
        SUM(inqty) - SUM(outqty) AS remain FROM (
      SELECT stc_place_cd,
        w_name,
        p_name,
        stc_product_cd,
        "00000000000" AS estno,
        "000" AS estsubno,
        "00" AS serialno,
        "00" AS shipno,
        stc_type_04,
        stc_update_at,
        0 AS inqty,
        SUM(stc_qty_trans) AS outqty,
        stc_unit_tran,
        CONCAT(LPAD(TRUNCATE(stc_sub_01 * 10, 0), 5, "0"),
          LPAD(TRUNCATE(stc_sub_02 * 10, 0), 5, "0"),
          RPAD(stc_sub_03, 5, " "),
          LPAD(TRUNCATE(stc_sub_04 * 10, 0), 5, "0"),
          LPAD(TRUNCATE(stc_sub_05 * 10, 0), 5, "0"),
          RPAD(stc_sub_06, 5, " "),
          IF(stc_sub_07 IS NULL, RPAD("", 15, " "), RPAD(stc_sub_07, 15, " ")),
          RPAD(TRUNCATE(stc_sub_08 * 10, 0), 30, " "),
          RPAD(TRUNCATE(stc_sub_09 * 10, 0), 30, " "), 
          RPAD("", 15, " "),
          RPAD("", 15, " "),
          RPAD(stc_sub_12, 5, " "),
          RPAD(stc_sub_13, 5, " ")) AS subcd,
        RPAD(stc_type_04, 15, " ") AS lotno,
        stc_type_subject,
        stc_parrangement_cd
      FROM stock
      LEFT JOIN warehouse AS w ON w.w_cd = stc_place_cd
      LEFT JOIN product AS p ON stc_product_cd = p_cd
      WHERE (stc_arrange_type="610" OR stc_arrange_type="810") AND stc_type_01="0" 
          AND stc_product_cd = :PCD
          AND CONCAT(LPAD(TRUNCATE(stc_sub_01 * 10, 0), 5, "0"),
          LPAD(TRUNCATE(stc_sub_02 * 10, 0), 5, "0"),
          RPAD(stc_sub_03, 5, " "),
          LPAD(TRUNCATE(stc_sub_04 * 10, 0), 5, "0"),
          LPAD(TRUNCATE(stc_sub_05 * 10, 0), 5, "0"),
          RPAD(stc_sub_06, 5, " "),
          IF(stc_sub_07 IS NULL, RPAD("", 15, " "), RPAD(stc_sub_07, 15, " ")),
          RPAD(TRUNCATE(stc_sub_08 * 10, 0), 30, " "),
          RPAD(TRUNCATE(stc_sub_09 * 10, 0), 30, " "), 
          RPAD("", 15, " "),
          RPAD("", 15, " "),
          RPAD(stc_sub_12, 5, " "),
          RPAD(stc_sub_13, 5, " ")) LIKE :SUBCD 
          AND stc_parrangement_cd = :PARCD 
      GROUP BY stc_place_cd, stc_product_cd, stc_sub_01, stc_sub_02, stc_sub_03, stc_sub_04, stc_sub_05, stc_sub_06, stc_sub_07, stc_sub_08, stc_sub_09, stc_sub_10, stc_sub_11, stc_sub_12, stc_sub_13, lotno, 
      stc_unit_tran, stc_type_subject, stc_parrangement_cd
      UNION ALL
      SELECT stc_place_cd,
        w_name,
        p_name,
        stc_product_cd,
        "00000000000" AS estno,
        "000" AS estsubno,
        "00" AS serialno,
        "00" AS shipno,
        stc_type_04,
        stc_update_at,
        SUM(stc_qty_trans) AS inqty,
        0 AS outqty,
        stc_unit_tran,
        CONCAT(LPAD(TRUNCATE(stc_sub_01 * 10, 0), 5, "0"),
          LPAD(TRUNCATE(stc_sub_02 * 10, 0), 5, "0"),
          RPAD(stc_sub_03, 5, " "),
          LPAD(TRUNCATE(stc_sub_04 * 10, 0), 5, "0"),
          LPAD(TRUNCATE(stc_sub_05 * 10, 0), 5, "0"),
          RPAD(stc_sub_06, 5, " "),
          IF(stc_sub_07 IS NULL, RPAD("", 15, " "), RPAD(stc_sub_07, 15, " ")),
          RPAD(TRUNCATE(stc_sub_08 * 10, 0), 30, " "),
          RPAD(TRUNCATE(stc_sub_09 * 10, 0), 30, " "), 
          RPAD("", 15, " "),
          RPAD("", 15, " "),
          RPAD(stc_sub_12, 5, " "),
          RPAD(stc_sub_13, 5, " ")) AS subcd,
        RPAD(stc_type_04, 15, " ") AS lotno, 
        stc_type_subject,
        stc_parrangement_cd
      FROM stock
      LEFT JOIN warehouse AS w ON w.w_cd = stc_place_cd
      LEFT JOIN product AS p ON stc_product_cd = p_cd
      WHERE stc_arrange_type="410" AND stc_type_01="0" 
          AND stc_product_cd = :PCD2
          AND CONCAT(LPAD(TRUNCATE(stc_sub_01 * 10, 0), 5, "0"),
          LPAD(TRUNCATE(stc_sub_02 * 10, 0), 5, "0"),
          RPAD(stc_sub_03, 5, " "),
          LPAD(TRUNCATE(stc_sub_04 * 10, 0), 5, "0"),
          LPAD(TRUNCATE(stc_sub_05 * 10, 0), 5, "0"),
          RPAD(stc_sub_06, 5, " "),
          IF(stc_sub_07 IS NULL, RPAD("", 15, " "), RPAD(stc_sub_07, 15, " ")),
          RPAD(TRUNCATE(stc_sub_08 * 10, 0), 30, " "),
          RPAD(TRUNCATE(stc_sub_09 * 10, 0), 30, " "), 
          RPAD("", 15, " "),
          RPAD("", 15, " "),
          RPAD(stc_sub_12, 5, " "),
          RPAD(stc_sub_13, 5, " ")) LIKE :SUBCD2
          AND stc_parrangement_cd = :PARCD2 
        GROUP BY stc_place_cd, stc_product_cd, stc_sub_01, stc_sub_02, stc_sub_03, stc_sub_04, stc_sub_05, stc_sub_06, stc_sub_07, stc_sub_08, stc_sub_09, stc_sub_10, stc_sub_11, stc_sub_12,
        stc_sub_13, lotno, stc_unit_tran, stc_type_subject, stc_parrangement_cd
        ) AS t1 
        GROUP BY stc_place_cd, stc_product_cd, subcd, stc_type_subject, stc_parrangement_cd, stc_unit_tran
      ');
      $sth->bindValue(':PCD', $item['ed_p_cd'], PDO::PARAM_STR);
      $sth->bindValue(':SUBCD', $strSubCD . '%', PDO::PARAM_STR);  // SQLはstorageに合わせているため、ロット番号含むため。 
      $sth->bindValue(':PARCD', $item['ed_parrangement_cd'], PDO::PARAM_STR);   // 加工内容は製品のみ保持するが、一気に抽出するためLIKE抽出。
      $sth->bindValue(':PCD2', $item['ed_p_cd'], PDO::PARAM_STR);
      $sth->bindValue(':SUBCD2', $strSubCD . '%', PDO::PARAM_STR);  // SQLはstorageに合わせているため、ロット番号を含むためLIKE抽出。
      $sth->bindValue(':PARCD2', $item['ed_parrangement_cd'], PDO::PARAM_STR);  // 加工内容は製品のみ保持するが、一気に抽出するため。
      $sth->execute();
      $rsltStock1 = $sth->fetchAll(PDO::FETCH_ASSOC);
      
      // 最新の在庫データをテンポラリテーブルに追加する
      if (count($rsltStock1) > 0) {
        foreach ($rsltStock1 as $rec) {
          $sth = $dbh->prepare('
          SELECT * FROM temp_assignstock
          WHERE wcd = :WCD AND pcd = :PCD AND subcd = :SUBCD AND unitname = :UNITCD AND type_subject = :TYPESUBJECT AND parrangement_cd = :PARCD AND lotno = :LOTNO
          ;');
          $sth->bindValue(':WCD', $rec['stc_place_cd'], PDO::PARAM_STR);
          $sth->bindValue(':PCD', $rec['stc_product_cd'], PDO::PARAM_STR);
          $sth->bindValue(':SUBCD', $rec['subcd'], PDO::PARAM_STR);
          $sth->bindValue(':UNITCD', $rec['stc_unit_tran'], PDO::PARAM_STR);
          $sth->bindValue(':TYPESUBJECT', $rec['stc_type_subject'], PDO::PARAM_STR);
          $sth->bindValue(':PARCD', $rec['stc_parrangement_cd'], PDO::PARAM_STR);
          $sth->bindValue(':LOTNO', $rec['stc_type_04'], PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($result) > 0) {
            // データがあれば更新
            $sth = $dbh->prepare('
            UPDATE temp_assgignstock
            SET qty = qty + :OQTY
            WHERE wcd = :WCD 
            AND pcd = :PCD 
            AND shipsubno = "00" 
            AND subcd = :SUBCD 
            AND unitname = :UNITCD 
            AND type_subject = :TYPESUB
            AND parrangement_cd = :PARCD
            AND lotno = :LOTNO
            ;');
            $sth->bindValue(':OQTY', $rec['remain'], PDO::PARAM_INT);
            $sth->bindValue(':WCD', $rec['stc_place_cd'], PDO::PARAM_STR);
            $sth->bindValue(':PCD', $rec['stc_product_cd'], PDO::PARAM_STR);
            $sth->bindValue(':SUBCD', $rec['subcd'] . $rec['lotno'], PDO::PARAM_STR);
            $sth->bindValue(':UNITCD', $rec['stc_unit_tran'], PDO::PARAM_STR);
            $sth->bindValue(':TYPESUB', $rec['stc_type_subject'], PDO::PARAM_STR);
            $sth->bindValue(':PARCD', $rec['stc_parrangement_cd'], PDO::PARAM_STR);
            $sth->bindValue(':LOTNO', $rec['stc_type_04'], PDO::PARAM_STR);
            $sth->execute();
          } else {
            // データがなければ追加
            $sth = $dbh->prepare('
            INSERT INTO temp_assignstock
            (wcd, wname, pcd, shipsubno, lotno, updateat, qty, shipnum, instocknum, assignqty, unitname, subcd, type_subject, parrangement_cd, remarks) 
            VALUES
            (:WCD, :WNAME, :PCD, "00", :LOTNO, 
            :UPDATEAT, :QTY, 0 /*:SHIPQTY*/, 0 /*:INSTOCKNUM*/, 0 /*:ASSIGNQTY */, :UNITCD,
             :SUBCD, :TYPESUB, :RPARCD, "");
            ');
            $sth->bindValue(':WCD', $rec['stc_place_cd'], PDO::PARAM_STR);
            $sth->bindValue(':WNAME', $rec['w_name'], PDO::PARAM_STR);
            $sth->bindValue(':PCD', $rec['stc_product_cd'], PDO::PARAM_STR);
            $sth->bindValue(':LOTNO', $rec['stc_type_04'], PDO::PARAM_STR);
            $sth->bindValue(':UPDATEAT', $rec['stc_update_at'], PDO::PARAM_STR);
            $sth->bindValue(':QTY', $rec['remain'], PDO::PARAM_STR);
            $sth->bindValue(':UNITCD', $rec['stc_unit_tran'], PDO::PARAM_STR);
            $sth->bindValue(':SUBCD', $rec['subcd'], PDO::PARAM_STR);
            $sth->bindValue(':TYPESUB', $rec['stc_type_subject'], PDO::PARAM_STR);
            $sth->bindValue(':RPARCD', $rec['stc_parrangement_cd'], PDO::PARAM_STR);
            $sth->execute();
          }
        }        
      }

      // 入荷済みの仕入品があれば加算(受注紐づけなし)
      $sth = $dbh->prepare('
      SELECT stc_place_cd,
        w_name,
        p_name,
        stc_product_cd,
        "00000000000" AS estno,
          "000" AS estsubno,
          "00" AS serialno,
          "00" AS shipno,
          stc_type_04,
          stc_update_at,
          SUM(stc_qty_trans) AS inqty,
          0 AS outqty,
          stc_unit_tran,
          CONCAT(LPAD(TRUNCATE(stc_sub_01 * 10, 0), 5, "0"),
          LPAD(TRUNCATE(stc_sub_02 * 10, 0), 5, "0"),
          RPAD(stc_sub_03, 5, " "),
          LPAD(TRUNCATE(stc_sub_04 * 10, 0), 5, "0"),
          LPAD(TRUNCATE(stc_sub_05 * 10, 0), 5, "0"),
          RPAD(stc_sub_06, 5, " "),
          IF(stc_sub_07 IS NULL, RPAD("", 15, " "), RPAD(stc_sub_07, 15, " ")),
          RPAD(TRUNCATE(stc_sub_08 * 10, 0), 30, " "),
          RPAD(TRUNCATE(stc_sub_09 * 10, 0), 30, " "), 
          RPAD("", 15, " "),
          RPAD("", 15, " "),
          RPAD(stc_sub_12, 5, " "),
          RPAD(stc_sub_13, 5, " "),
          RPAD(stc_type_04, 15, " ")) AS subcd,
              stc_type_subject,
              stc_parrangement_cd
      FROM stock
      LEFT JOIN warehouse AS w ON w.w_cd = stc_place_cd
      LEFT JOIN product AS p ON stc_product_cd = p_cd
      LEFT JOIN morderestimate AS moed ON moed.moed_order_no = stc_report_no AND moed.moed_sub_no = stc_sub_no_01 AND moed.moed_accept_sub_no = stc_sub_no_02
      WHERE stc_arrange_type="110" AND stc_type_01="0" AND moed_refer_no = "" 
          AND stc_product_cd = :PCD
          AND CONCAT(LPAD(TRUNCATE(stc_sub_01 * 10, 0), 5, "0"),
          LPAD(TRUNCATE(stc_sub_02 * 10, 0), 5, "0"),
          RPAD(stc_sub_03, 5, " "),
          LPAD(TRUNCATE(stc_sub_04 * 10, 0), 5, "0"),
          LPAD(TRUNCATE(stc_sub_05 * 10, 0), 5, "0"),
          RPAD(stc_sub_06, 5, " "),
          IF(stc_sub_07 IS NULL, RPAD("", 15, " "), RPAD(stc_sub_07, 15, " ")),
          RPAD(TRUNCATE(stc_sub_08 * 10, 0), 30, " "),
          RPAD(TRUNCATE(stc_sub_09 * 10, 0), 30, " "), 
          RPAD("", 15, " "),
          RPAD("", 15, " "),
          RPAD(stc_sub_12, 5, " "),
          RPAD(stc_sub_13, 5, " ")) LIKE :SUBCD 
          AND stc_parrangement_cd = :PARCD 
              /*,
          RPAD(stc_type_04, 15, " ")*/        
      GROUP BY stc_place_cd, stc_product_cd, stc_sub_01, stc_sub_02, stc_sub_03, stc_sub_04, stc_sub_05, stc_sub_06, stc_sub_07, stc_sub_08, stc_sub_09, stc_sub_10, stc_sub_11, stc_sub_12,
      stc_sub_13, stc_type_04, stc_type_subject, stc_parrangement_cd
      ;');
      $sth->bindValue(':PCD', $item['ed_p_cd'], PDO::PARAM_STR);
      $sth->bindValue(':SUBCD', $strSubCD . '%', PDO::PARAM_STR);  // SQLはstorageに合わせているため、ロット番号含むため。 
      $sth->bindValue(':PARCD', $item['ed_parrangement_cd'], PDO::PARAM_STR);   // 加工内容は製品のみ保持するが、一気に抽出するためLIKE抽出。
      $sth->execute();
      $rsltStock2 = $sth->fetchAll(PDO::FETCH_ASSOC);
      // 最新の在庫データをテンポラリテーブルに追加する
      if (count($rsltStock2) > 0) {
        foreach ($rsltStock1 as $rec) {
          $sth = $dbh->prepare('
          SELECT * FROM temp_assignstock
          WHERE wcd = :WCD AND pcd = :PCD AND subcd = :SUBCD AND unitname = :UNITCD AND type_subject = :TYPESUBJECT AND parrangement_cd = :PARCD AND lotno = :LOTNO
          ;');
          $sth->bindValue(':WCD', $rec['stc_place_cd'], PDO::PARAM_STR);
          $sth->bindValue(':PCD', $rec['stc_product_cd'], PDO::PARAM_STR);
          $sth->bindValue(':SUBCD', $rec['subcd'], PDO::PARAM_STR);
          $sth->bindValue(':UNITCD', $rec['stc_unit_tran'], PDO::PARAM_STR);
          $sth->bindValue(':TYPESUBJECT', $rec['stc_type_subject'], PDO::PARAM_STR);
          $sth->bindValue(':PARCD', $rec['stc_parrangement_cd'], PDO::PARAM_STR);
          $sth->bindValue(':LOTNO', $rec['stc_type_04'], PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($result) > 0) {
            // データがあれば更新
            $sth = $dbh->prepare('
            UPDATE temp_assgignstock
            SET qty = qty + :OQTY
            WHERE wcd = :WCD 
            AND pcd = :PCD 
            AND shipsubno = "00" 
            AND subcd = :SUBCD 
            AND unitname = :UNITCD 
            AND type_subject = :TYPESUB
            AND parrangement_cd = :PARCD
            AND lotno = :LOTNO
            ;');
            $sth->bindValue(':OQTY', $rec['remain'], PDO::PARAM_INT);
            $sth->bindValue(':WCD', $rec['stc_place_cd'], PDO::PARAM_STR);
            $sth->bindValue(':PCD', $rec['stc_product_cd'], PDO::PARAM_STR);
            $sth->bindValue(':SUBCD', $rec['subcd'] . $rec['lotno'], PDO::PARAM_STR);
            $sth->bindValue(':UNITCD', $rec['stc_unit_tran'], PDO::PARAM_STR);
            $sth->bindValue(':TYPESUB', $rec['stc_type_subject'], PDO::PARAM_STR);
            $sth->bindValue(':PARCD', $rec['stc_parrangement_cd'], PDO::PARAM_STR);
            $sth->bindValue(':LOTNO', $rec['stc_type_04'], PDO::PARAM_STR);
            $sth->execute();
          } else {
            // データがなければ追加
            $sth = $dbh->prepare('
            INSERT INTO temp_assignstock
            (wcd, wname, pcd, shipsubno, lotno, updateat, qty, shipnum, instocknum, assignqty, unitname, subcd, type_subject, parrangement_cd, remarks) 
            VALUES
            (:WCD, :WNAME, :PCD, "00", :LOTNO, 
            :UPDATEAT, :QTY, 0 /*:SHIPQTY*/, 0 /*:INSTOCKNUM*/, 0 /*:ASSIGNQTY */, :UNITCD,
              :SUBCD, :TYPESUB, :RPARCD, "");
            ');
            $sth->bindValue(':WCD', $rec['stc_place_cd'], PDO::PARAM_STR);
            $sth->bindValue(':WNAME', $rec['w_name'], PDO::PARAM_STR);
            $sth->bindValue(':PCD', $rec['stc_product_cd'], PDO::PARAM_STR);
            $sth->bindValue(':LOTNO', $rec['stc_type_04'], PDO::PARAM_STR);
            $sth->bindValue(':UPDATEAT', $rec['stc_update_at'], PDO::PARAM_STR);
            $sth->bindValue(':QTY', $rec['remain'], PDO::PARAM_STR);
            $sth->bindValue(':UNITCD', $rec['stc_unit_tran'], PDO::PARAM_STR);
            $sth->bindValue(':SUBCD', $rec['subcd'], PDO::PARAM_STR);
            $sth->bindValue(':TYPESUB', $rec['stc_type_subject'], PDO::PARAM_STR);
            $sth->bindValue(':RPARCD', $rec['stc_parrangement_cd'], PDO::PARAM_STR);
            $sth->execute();
          }
        }        
      }

      // 出荷引当済みをテーブルに加算する
      // 該当見積番号以外で、引当済みかつ未出荷のレコード
      $sth = $dbh->prepare('
      SELECT shippingassign.*, w_name, p_name, SUM(sas_quantity) AS shipqty 
      FROM shippingassign
      LEFT JOIN warehouse AS w ON w.w_cd = sas_location
      LEFT JOIN product AS p ON sas_p_cd = p.p_cd
      WHERE sas_p_cd = :PCD AND 
      sas_sub_cd = :SUBCD AND 
      sas_unit_tran = :UNITCD AND 
      sas_parrangement_cd = :PARCD AND 
      CONCAT(sas_estimate_no, sas_estimate_sub_no) <> :ESTINFO AND 
      sas_type_01 <> "1"
      GROUP BY sas_p_cd, sas_location, sas_lot_no, sas_unit_tran, sas_parrangement_cd, sas_type_subject 
      ;');
      $sth->bindValue(':PCD', $item['ed_p_cd'], PDO::PARAM_STR);
      $sth->bindValue(':SUBCD', $strSubCD,  PDO::PARAM_STR);
      $sth->bindValue(':UNITCD', $item['ed_unit_tran'],  PDO::PARAM_STR);
      $sth->bindValue(':PARCD', $item['ed_parrangement_cd'],  PDO::PARAM_STR);
      $sth->bindValue(':ESTINFO', $item['ed_estimate_no'] . $item['ed_estimate_sub_no'],  PDO::PARAM_STR);
      $sth->execute();
      $rsltSas = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($rsltSas) > 0) {
        // 引当済みあったら
        foreach ($rsltSas as $rec) {
          $sth = $dbh->prepare('
          SELECT * FROM temp_assignstock
          WHERE wcd = :WCD AND pcd = :PCD AND subcd = :SUBCD AND unitname = :UNITCD AND type_subject = :TYPESUBJECT AND parrangement_cd = :PARCD
          ;');
          $sth->bindValue(':WCD', $rec['sas_location'], PDO::PARAM_STR);
          $sth->bindValue(':PCD', $rec['sas_p_cd'], PDO::PARAM_STR);
          $sth->bindValue(':SUBCD', $strSubCD, PDO::PARAM_STR);
          $sth->bindValue(':UNITCD', $rec['sas_unit_tran'], PDO::PARAM_STR);
          $sth->bindValue(':TYPESUBJECT', $rec['sas_type_subject'], PDO::PARAM_STR);
          $sth->bindValue(':PARCD', $rec['sas_parrangement_cd'], PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);
          if (count($result) > 0) {
            // データがあれば更新
            $sth = $dbh->prepare('
            UPDATE temp_assgignstock
            SET assignqty = :OQTY
            WHERE wcd = :WCD 
            AND pcd = :PCD 
            AND shipsubno = "00" 
            AND subcd = :SUBCD 
            AND unitname = :UNITCD 
            AND type_subject = :TYPESUB
            AND parrangement_cd = :PARCD
            ;');
            $sth->bindValue(':OQTY', $rec['sas_quantity'], PDO::PARAM_INT);
            $sth->bindValue(':WCD', $rec['sas_location'], PDO::PARAM_STR);
            $sth->bindValue(':PCD', $rec['sas_p_cd'], PDO::PARAM_STR);
            $sth->bindValue(':SUBCD', $strSubCD . $rec['lotno'], PDO::PARAM_STR);
            $sth->bindValue(':UNITCD', $rec['stc_unit_tran'], PDO::PARAM_STR);
            $sth->bindValue(':TYPESUB', $rec['stc_type_subject'], PDO::PARAM_STR);
            $sth->bindValue(':PARCD', $rec['stc_parrangement_cd'], PDO::PARAM_STR);
            $sth->execute();
          } else {
            // データがなければ追加 ただしこの場合は、マイナス在庫になるため、竹中金網では不正データとなる。
            $sth = $dbh->prepare('
            INSERT INTO temp_assignstock
            (wcd, wname, pcd, shipsubno, lotno, updateat, qty, shipnum, instocknum, assignqty, unitname, subcd, type_subject, parrangement_cd) 
            VALUES
            (:WCD, :WNAME, :PCD, "00", :LOTNO, 
            :UPDATEAT, 0, 0 /*:SHIPQTY*/, 0 /*:INSTOCKNUM*/, :ASSIGNQTY, :UNITCD,
             :SUBCD, :TYPESUB, :RPARCD);
            ');
            $sth->bindValue(':WCD', $rec['stc_place_cd'], PDO::PARAM_STR);
            $sth->bindValue(':WNAME', $rec['w_name'], PDO::PARAM_STR);
            $sth->bindValue(':PCD', $rec['stc_product_cd'], PDO::PARAM_STR);
            $sth->bindValue(':LOTNO', $rec['lotno'], PDO::PARAM_STR);
            $sth->bindValue(':UPDATEAT', $rec['stc_update_at'], PDO::PARAM_STR);
            $sth->bindValue(':ASSIGNQTY', $rec['sas_quantity'], PDO::PARAM_STR);
            $sth->bindValue(':UNITCD', $rec['stc_unit_tran'], PDO::PARAM_STR);
            $sth->bindValue(':SUBCD', $rec['subcd'], PDO::PARAM_STR);
            $sth->bindValue(':TYPESUB', $rec['stc_type_subject'], PDO::PARAM_STR);
            $sth->bindValue(':RPARCD', $rec['stc_parrangement_cd'], PDO::PARAM_STR);
            $sth->execute();
          }
        }
      }
    } catch (exception $e) {
      throw $e;
    }
  }

  // /************************************************************************************************
  //  * 在庫引当読込
  //  */
  // public static function readAssignstock($dat) {
  //   $dbh = self::dbPDO();
  //   try {
  //     // 基本情報取得　複数画面用
  //     $strEstNo = '';
  //     $strEstSubNo = '';
  //     $strShipNo = '';
  //     $strPCD = '';
  //     $strSPEC = '';
  //     $strPSubject = '';
  //     foreach ($dat as $key => $value) {
  //       if ($strEstNo !== '' && $strEstSubNo !== ''  && $strShipNo !== '' && $strPCD !== '') {
  //         break;
  //       }
  //       if (strpos($key, 'estimate_no') !== false) {
  //         // 受注番号
  //         $strEstNo = $value;
  //       }
  //       if (strpos($key, 'estimate_sub_no') !== false) {
  //         // 受注番号枝番
  //         $strEstSubNo = $value;
  //       }
  //       if (strpos($key, 'shipment_sub_no') !== false) {
  //         // 出荷枝番
  //         $strShipNo = $value;
  //       }
  //       if (strpos($key, 'p_cd') !== false) {
  //         // 製品CD取得
  //         $strPCD = $value;
  //       }
  //     }
  //     // スペック取得
  //     $sth = $dbh->prepare('
  //     SELECT * FROM estimatedetails
  //     WHERE ed_belong_cd = :BELONGCD AND 
  //     ed_estimate_no = :ESTNO AND 
  //     ed_estimate_sub_no = :ESTSUBNO AND 
  //     ed_shipment_sub_no = :SHIPNO
  //     ;');
  //     $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
  //     $sth->bindValue(':ESTNO', $strEstNo, PDO::PARAM_STR);
  //     $sth->bindValue(':ESTSUBNO', $strEstSubNo, PDO::PARAM_STR);
  //     $sth->bindValue(':SHIPNO', $strShipNo, PDO::PARAM_STR);
  //     $sth->execute();
  //     $resultSP = $sth->fetchAll(PDO::FETCH_ASSOC);
  //     if (count($resultSP) > 0) {
  //       $strSPEC = self::storageSetPadding($resultSP, $dbh, true);
  //     }
  //     // shippingassignデータとstorageデータ読込。
  //     $sth= $dbh->prepare('
  //     SELECT *,
  //       :ESTNO AS estimateno,
  //       :ESTSUBNO AS estimatesubno,
  //       :SHIPNO AS shipmentno,
  //       :SPEC AS spec
  //     FROM ((SELECT 
  //       p.p_cd AS productcd,
  //       LEFT(sas.sas_sub_cd, 100) AS subcd,
  //       sas.sas_location AS placecd,
  //       w.w_name AS placename,
  //       sas.sas_lot_no AS lotno,
  //       sas.sas_update_at AS deliverydate,
  //       sas.sas_quantity AS stockqty,
  //       p.p_unit_tran AS stockunit,
  //       sas.sas_shipment_sub_no AS shipno,
  //       sas.sas_quantity AS assignqty 
  //       FROM shippingassign AS sas
  //       LEFT JOIN warehouse AS w ON w.w_cd = sas.sas_location
  //       LEFT JOIN product AS p ON p.p_cd = sas.sas_p_cd)
  //     UNION 
  //     (SELECT 
  //       p.p_cd AS productcd,
  //       (CONCAT(LPAD(TRUNCATE(sr.sr_sub_01 * 10, 0), 5, "0"),
  //         LPAD(TRUNCATE(sr.sr_sub_02 * 10, 0), 5, "0"),
  //         RPAD(sr.sr_sub_03, 5, " "),
  //         LPAD(TRUNCATE(sr.sr_sub_04 * 10, 0), 5, "0"),
  //         LPAD(TRUNCATE(sr.sr_sub_05 * 10, 0), 5, "0"),
  //         RPAD(sr.sr_sub_06, 5, " "),
  //         RPAD(sr.sr_sub_07, 10, " "),
  //         LPAD(TRUNCATE(sr.sr_sub_08 * 10, 0), 10, " "),
  //         LPAD(TRUNCATE(sr.sr_sub_09 * 10, 0), 10, " "), 
  //         RPAD(sr.sr_sub_10, 15, " "),
  //         RPAD(sr.sr_sub_11, 15, " "),
  //         RPAD(sr.sr_sub_12, 5, " "),
  //         RPAD(sr.sr_sub_13, 5, " "))) AS subcd,
  //       sr.sr_w_cd AS placecd,
  //       w.w_name AS placename,
  //       sr.sr_sub_14 AS lotno,
  //       sr.sr_transfer_date AS deliverydate,
  //       sr.sr_quantity AS stockqty,
  //       p.p_unit_tran AS stockunit,
  //       "" AS shipno,
  //       0 AS assignqty 
  //       FROM storage AS sr
  //       LEFT JOIN warehouse AS w ON w.w_cd = sr.sr_w_cd
  //       LEFT JOIN product AS p ON p.p_cd = sr.sr_p_cd
  //       )) AS temp
  //       WHERE productcd = :PCD AND subcd = :SPEC2      
  //     ;');
  //     $sth->bindValue(':ESTNO', $strEstNo, PDO::PARAM_STR);
  //     $sth->bindValue(':ESTSUBNO', $strEstSubNo, PDO::PARAM_STR);
  //     $sth->bindValue(':SHIPNO', $strShipNo, PDO::PARAM_STR);
  //     $sth->bindValue(':SPEC', $strSPEC, PDO::PARAM_STR);
  //     $sth->bindValue(':PCD', $strPCD, PDO::PARAM_STR);
  //     $sth->bindValue(':SPEC2', $strSPEC, PDO::PARAM_STR);
  //     $sth->execute();
  //     $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
  //     echo $result;
  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }


  /** 
   * 在庫移動
   */
  public static function readTransferstock($dat) {
    $dbh = self::dbPDO();
    try {
      $sth= $dbh->prepare('
      SELECT * FROM storage
      ;');
      $sth->execute();
      $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
      echo $result;
    } catch (Exception $e) {
      throw $e;
    }
  }


  /**
   * 加工内容詳細データ読込
   */
 public static function readSettingProc($sdat) {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('
      SELECT * FROM prodplansproc
      WHERE ppr_prod_plan_no = :PRODPLANNO
      ;');
      $sth->bindValue(':PRODPLANNO', $sdat[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();

      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      echo json_encode($result);
    } catch (Exception $e) {
      throw $e;
    }
  }


  // 製造リーフ発行　未使用
  public static function issueLeaflist($sdatheader, $sdatdetail) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      for ($i = 0; $i < count($sdatdetail); $i++) {
        $sth = $dbh->prepare('SELECT l_leaf_no FROM leaflist
        WHERE l_belong_cd = :BELONGCD AND l_prod_plan_no = :PRODPLANNO AND l_prod_plan_sub_no = :SUBNO AND l_process_cd = :PROCCD;');
        $sth->bindValue(':BELONGCD', $sdatdetail['pd_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':PRODPLANNO', $sdatdetail['pd_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $sdatdetail['pd_prod_plan_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCCD', $sdatdetail['pd_process_cd'], PDO::PARAM_STR);
        $sth->execute();
        $no = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (count($no) > 0 ) {
          // 既存
          $dbh->rollBack();
          $resp['msg'] = '指定した明細の製造リーフは既に登録されています。';
          $resp['succeed'] = false;
          echo json_encode($resp);
          return false;
        } else {
          // 新規
          for ($i = 0; $i < count($sdatdetail); $i++) {
            $sth = $dbh->prepare('
            INSERT INTO `leaflist`
            (`l_belong_cd`,
            `l_leaf_no`,
            `l_prod_plan_no`,
            `l_prod_plan_sub_no`,
            `l_process_cd`,
            `l_prod_fin_plan_date`,
            `l_estimate_no`,
            `l_estimate_sub_no`,
            `l_desired_delivery_date`,
            `l_p_cd`,
            `l_ed_sub_01`,
            `l_ed_sub_02`,
            `l_ed_sub_04`,
            `l_ed_sub_05`,
            `l_ed_sub_06`,
            `l_ed_sub_08`,
            `l_ed_sub_10`,
            `l_ed_sub_09`,
            `l_ed_sub_11`,
            `l_estimate_quantity`,
            `l_pd_start_plan_date`,
            `l_pd_start_plan_time`,
            `l_pd_finish_plan_date`,
            `l_pd_finish_plan_time`,
            `l_pd_plan_interval`,
            `l_pd_start_date`,
            `l_pd_start_time`,
            `l_pd_finish_date`,
            `l_pd_finish_time`,
            `l_pd_abort_num`,
            `l_pd_real_interval`,
            `l_pd_real_quantity`,
            `l_worker_member_id`,
            `l_equipment_member_id`)
            VALUES
            (:l_belong_cd,
              :l_leaf_no,
              :l_prod_plan_no,
              :l_prod_plan_sub_no,
              :l_process_cd,
              :l_prod_fin_plan_date,
              :l_estimate_no,
              :l_estimate_sub_no,
              :l_desired_delivery_date,
              :l_p_cd,
              :l_ed_sub_01,
              :l_ed_sub_02,
              :l_ed_sub_04,
              :l_ed_sub_05,
              :l_ed_sub_06,
              :l_ed_sub_08,
              :l_ed_sub_10,
              :l_ed_sub_09,
              :l_ed_sub_11,
              :l_estimate_quantity,
              :l_pd_start_plan_date,
              :l_pd_start_plan_time,
              :l_pd_finish_plan_date,
              :l_pd_finish_plan_time,
              :l_pd_plan_interval,
              :l_pd_start_date,
              :l_pd_start_time,
              :l_pd_finish_date,
              :l_pd_finish_time,
              :l_pd_abort_num,
              :l_pd_real_interval,
              :l_pd_real_quantity,
              :l_worker_member_id,
              :l_equipment_member_id);
            ');
            // リーフ連番作成
            $leafNo = 'R' . substr($sdatdetail['l_estimate_no'], 2, 8) . sprintf('%03d', $i);
            $sth->bindValue(':l_belong_cd,', $sdatdetail['pd_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':l_leaf_no', $leafNo, PDO::PARAM_STR);
            $sth->bindValue(':l_prod_plan_no', $sdatdetail['pd_prod_plan_no'], PDO::PARAM_STR);
            $sth->bindValue(':l_prod_plan_sub_no', $sdatdetail['pd_prod_plan_sub_no'], PDO::PARAM_STR);
            $sth->bindValue(':l_process_cd', $sdatdetail['pd_process_cd'], PDO::PARAM_STR);
            $sth->bindValue(':l_prod_fin_plan_date', $sdatdetail['pd_finish_plan_date'], PDO::PARAM_STR);
            $sth->bindValue(':l_estimate_no', $sdatdetail['pd_e_estimate_no'], PDO::PARAM_STR);
            $sth->bindValue(':l_estimate_sub_no', $sdatdetail['pd_e_estimate_sub_no'], PDO::PARAM_STR);
            $sth->bindValue(':l_desired_delivery_date', $sdatdetail['pd_e_desired_delivery_date'], PDO::PARAM_STR);
            $sth->bindValue(':l_p_cd', $sdatdetail['pd_p_cd'], PDO::PARAM_STR);
            $sth->bindValue(':l_ed_sub_01', $sdatdetail['pd_ed_sub_01'], PDO::PARAM_STR);
            $sth->bindValue(':l_ed_sub_02', $sdatdetail['pd_ed_sub_02'], PDO::PARAM_STR);
            $sth->bindValue(':l_ed_sub_04', $sdatdetail['pd_ed_sub_04'], PDO::PARAM_STR);
            $sth->bindValue(':l_ed_sub_05', $sdatdetail['pd_ed_sub_05'], PDO::PARAM_STR);
            $sth->bindValue(':l_ed_sub_06', $sdatdetail['pd_ed_sub_06'], PDO::PARAM_STR);
            $sth->bindValue(':l_ed_sub_08', $sdatdetail['pd_ed_sub_08'], PDO::PARAM_STR);
            $sth->bindValue(':l_ed_sub_10', $sdatdetail['pd_ed_sub_10'], PDO::PARAM_STR);
            $sth->bindValue(':l_ed_sub_09', $sdatdetail['pd_ed_sub_09'], PDO::PARAM_STR);
            $sth->bindValue(':l_ed_sub_11', $sdatdetail['pd_ed_sub_11'], PDO::PARAM_STR);
            $sth->bindValue(':l_estimate_quantity', $sdatdetail['pd_ed_quantity'], PDO::PARAM_STR);
            $sth->bindValue(':l_pd_start_plan_date', 0, PDO::PARAM_STR);
            $sth->bindValue(':l_pd_start_plan_time', 0, PDO::PARAM_STR);
            $sth->bindValue(':l_pd_finish_plan_date', 0, PDO::PARAM_STR);
            $sth->bindValue(':l_pd_finish_plan_time', 0, PDO::PARAM_STR);
            $sth->bindValue(':l_pd_plan_interval', 0, PDO::PARAM_STR);
            $sth->bindValue(':l_pd_start_date', 0, PDO::PARAM_STR);
            $sth->bindValue(':l_pd_start_time', 0, PDO::PARAM_STR);
            $sth->bindValue(':l_pd_finish_date', 0, PDO::PARAM_STR);
            $sth->bindValue(':l_pd_finish_time', 0, PDO::PARAM_STR);
            $sth->bindValue(':l_pd_abort_num', 0, PDO::PARAM_STR);
            $sth->bindValue(':l_pd_real_interval', 0, PDO::PARAM_STR);
            $sth->bindValue(':l_pd_real_quantity', 0, PDO::PARAM_STR);
            $sth->bindValue(':l_worker_member_id', 0, PDO::PARAM_STR);
            $sth->bindValue(':l_equipment_member_id', 0, PDO::PARAM_STR);
          } 
          $sth->execute();
          // 製造指図　フラグ更新
          $sth = $dbh->prepare('
          UPDATE prodplans 
          SET pd_leaf_create_date = :CREATEDATE, pd_leaf_no = :LEAFNO
          WHERE pd_belong_cd = :BELONGCD AND pd_prod_plan_no = :PRODPLANNO AND pd_prod_plan_sub_no = :SUBNO AND pd_process_cd = :PROCCD;');
          $sth->bindValue(':CREATEDATE', self::currentDate(), PDO::PARAM_STR);
          $sth->bindValue(':LEAFNO', $leafNo, PDO::PARAM_STR);
          $sth->bindValue(':BELONGCD', $sdatdetail['pd_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':PRODPLANNO', $sdatdetail['pd_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', $sdatdetail['pd_prod_plan_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':PROCCD', $sdatdetail['pd_process_cd'], PDO::PARAM_STR);
          $sth->execute();
          // 見積書　フラグ更新
          $sth = $dbh->prepare('
          UPDATE estimatedetails 
          SET ed_prod_plan_sign = :FLG, ed_prod_plan_date = :ISSUEDATE
          WHERE ed_belong_cd = :BELONGCD AND ed_estimate_no = :PRODPLANNO AND ed_estimate_sub_no = :SUBNO;');
          $sth->bindValue(':FLG', '1', PDO::PARAM_STR);
          $sth->bindValue(':ISSUEDATE', self::currentDate(), PDO::PARAM_STR);
          $sth->bindValue(':BELONGCD', $sdatdetail['pd_belong_cd'], PDO::PARAM_STR);
          $sth->bindValue(':PRODPLANNO', $sdatdetail['pd_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':SUBNO', $sdatdetail['pd_prod_plan_sub_no'], PDO::PARAM_STR);
          $sth->bindValue(':PROCCD', $sdatdetail['pd_process_cd'], PDO::PARAM_STR);
          $sth->execute();
        }     
      }
      $dbh->commit();
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
      return false;
    }
    echo json_encode($resp);
    return true;
  }


  // 製造明細の情報を使用して、製造リーフを発行する
  public static function issueProdLeaf($datHeader, $datDetails) {
    $resp = array('succeed' => true, 'msg' => '');
    $prodData = [];
    $statusLeafProd = 0;

    $columns = self::getColumnDefs('leafprod');
    self::markAsHeaderPK($columns, 'l_belong_cd');
    self::markAsHeaderPK($columns, 'l_leaf_no');
    
    $dbh = self::dbPDO();
    
    try {
      // リーフ発行済みのレコードが1つでもある場合は、クライアント側で確認メッセージ表示

      $prodData = array_merge($datDetails, $datHeader);

      // リーフ作成
      foreach ($prodData as $record) {
        $statusLeafProd = self::statusCreateLeafProdRecord($record, $dbh);
        self::createLeafProd($record, $statusLeafProd, $dbh);

      }

      // // リーフ発行済みかどうかは上位で判断し、エラー処理
      // // 指定製造指示番号のデータを取得
      // $sth = $dbh->prepare('
      // SELECT * FROM prodplans
      // WHERE pd_belong_cd = :BELONGCD AND 
      // pd_prod_plan_no = :PLANNO AND 
      // pd_prod_plan_sub_no = :SUBNO /*AND
      // pd_process_cd = :PROCCD*/
      // ;');
      // $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
      // $sth->bindValue(':PLANNO', $sdat[0]['pd_prod_plan_no'], PDO::PARAM_STR);
      // $sth->bindValue(':SUBNO', '000', PDO::PARAM_STR);
      // // $sth->bindValue(':PROCCD', $sdat[0]['pd_process_cd'], PDO::PARAM_STR);
      // $sth->execute();
      // $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      // // 当然あるはずだが一応
      // if (count($result) === 0) {
      //   $resp['succeed'] = false;
      //   $resp['msg'] = 'データ取得に失敗しました。';
      //   echo json_encode($resp);
      // }
      // // 各工程ごとにリーフ発行
      // $dbh->beginTransaction();
      // // リーフ番号の最大値取得
      // $seq = substr(self::currentDate(), 2) . '001'; // 連番default値
      // $sth = $dbh->prepare('
      // SELECT MAX(SUBSTR(l_leaf_no, 2, 9)) AS maxno FROM leafprod
      // WHERE l_leaf_no LIKE :NUM
      // ;');
      // $sth->bindValue(':NUM', 'L' . substr(self::currentDate(),2) . '%', PDO::PARAM_STR);
      // $sth->execute();
      // $rslt = $sth->fetchAll(PDO::FETCH_ASSOC);
      // if ($rslt[0]['maxno'] !== null) {
      //   $seq = $rslt[0]['maxno'];
      //   $seq = $seq + 1;
      // }
      // foreach ($result as $rec) {  
      //   // リーフ番号連番取得
      //   if ($leafNo === '') {
      //     $leafNo = 'L' . $seq;
      //   } else {
      //     $leafNo = 'L' . (substr($leafNo, 1) + 1);
      //   }      
      //   $arData = array(
      //     'l_belong_cd'           =>      $_SESSION['companycd'],
      //     'l_leaf_no'             =>      $leafNo,
      //     'l_prod_plan_no'        =>      $rec['pd_prod_plan_no'],
      //     'l_process_cd'          =>      $rec['pd_process_cd'],
      //     // 'l_manufacture_cd'      =>      $rec[''] 
      //     // 'l_equip_num'            =
      //     // 'l_worker_num'
      //     'l_pd_fin_plan_date'    =>      $rec['pd_finish_plan_date_h'],
      //     // 'l_estimate_no_01'      =>      $rec['pd_finish_plan_date_h'],
      //     // 'l_estimate_no_02'      =>      $rec['pd_finish_plan_date_h'],
      //     // 'l_estimate_no_03'      =>      $rec['pd_finish_plan_date_h'],
      //     'l_p_cd'                =>      $rec['pd_p_cd'],
      //     'l_ed_sub_01'           =>      $rec['pd_ed_sub_01'],
      //     'l_ed_sub_12'           =>      $rec['pd_ed_sub_12'],
      //     'l_ed_sub_02'           =>      $rec['pd_ed_sub_02'],
      //     'l_ed_sub_13'           =>      $rec['pd_ed_sub_13'],
      //     'l_ed_sub_04'           =>      $rec['pd_ed_sub_04'],
      //     'l_ed_sub_05'           =>      $rec['pd_ed_sub_05'],
      //     'l_ed_sub_06'           =>      $rec['pd_ed_sub_06'],
      //     'l_product_sign'        =>      '0',
      //     'l_pd_start_plan_date'  =>      $rec['pd_start_plan_date'],
      //     'l_pd_start_plan_time'  =>      $rec['pd_start_plan_time'],
      //     'l_pd_finish_plan_date' =>      $rec['pd_finish_plan_date'],
      //     'l_pd_finish_plan_time' =>      $rec['pd_finish_plan_time'],
      //     'l_pd_plan_interval'    =>      $rec['pd_plan_interval'],
      //     'l_pd_start_date'       =>      '',
      //     'l_pd_start_time'       =>      '',
      //     'l_pd_finish_date'      =>      '',
      //     'l_pd_finish_time'      =>      '',
      //     'l_pd_abort_num'        =>      0,
      //     'l_pd_real_interval'    =>      $rec['pd_interval'],
      //     'l_pd_real_quantity'    =>      $rec['pd_prod_qty'],
      //     'l_worker_member_id'    =>      '',
      //     'l_equipment_member_id' =>      '',       // '20000' . $rec['pd_process_cd'],    // 工程もしくは設備にするかによって変更　社員マスタの桁数を鑑みて6桁+1桁で7桁で設定することとする
      //     'l_remarks'             =>      '',
      //   );
      //   $sth = $dbh->prepare(self::makeInsertSQL('leafprod', $columns));
      //   self::bindInsertKeys($sth, $columns, $arData);
      //   $sth->execute();
        
      //   $leafNo = $arData['l_leaf_no'];

      //   // リーフに割り当て可能な設備と作業者を判断        

      //   // リーフ発行フラグ変更
      //   // 製造指図　フラグ更新
      //   $sth = $dbh->prepare('
      //   UPDATE prodplans 
      //   SET pd_leaf_create_date = :CREATEDATE, 
      //   pd_leaf_no = :LEAFNO,
      //   pd_update_at = :UPDATEAT,
      //   pd_update_cd = :UPDATECD
      //   WHERE pd_belong_cd = :BELONGCD AND 
      //   pd_prod_plan_no = :PRODPLANNO AND 
      //   pd_process_cd = :PROCCD;');
      //   $sth->bindValue(':CREATEDATE', self::currentDate(), PDO::PARAM_STR);
      //   $sth->bindValue(':LEAFNO', $leafNo, PDO::PARAM_STR);
      //   $sth->bindValue(':UPDATEAT', self::currentDate(), PDO::PARAM_STR);
      //   $sth->bindValue(':UPDATECD', $_SESSION['usercd'], PDO::PARAM_STR);
      //   $sth->bindValue(':BELONGCD', $arData['l_belong_cd'], PDO::PARAM_STR);
      //   $sth->bindValue(':PRODPLANNO', $arData['l_prod_plan_no'], PDO::PARAM_STR);
      //   $sth->bindValue(':PROCCD', $arData['l_process_cd'], PDO::PARAM_STR);
      //   $sth->execute();

      //   // 金網指図　フラグ更新
      //   $sth = $dbh->prepare('
      //   UPDATE prodplandetailsw 
      //   SET pw_leaf_create_date = :CREATEDATE, pw_leaf_no = :LEAFNO
      //   WHERE pw_belong_cd = :BELONGCD AND 
      //   pw_prod_plan_no = :PRODPLANNO AND 
      //   pw_process_cd = :PROCCD       
      //   ;');
      //   $sth->bindValue(':CREATEDATE', self::currentDate(), PDO::PARAM_STR);
      //   $sth->bindValue(':LEAFNO', $leafNo, PDO::PARAM_STR);
      //   $sth->bindValue(':BELONGCD', $arData['l_belong_cd'], PDO::PARAM_STR);
      //   $sth->bindValue(':PRODPLANNO', $arData['l_prod_plan_no'], PDO::PARAM_STR);
      //   $sth->bindValue(':PROCCD', $arData['l_process_cd'], PDO::PARAM_STR);
      //   $sth->execute();
      // }
      // // 見積明細は、製造指示日付は、製作指示書出力で更新

      // $dbh->commit();
      // echo json_encode($resp);
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }


    // 金網前のデータ　ここから↓
    // $resp = array('succeed' => true, 'msg' => '');
    // $dbh = self::dbPDO();
    // try {
    //   $dbh->beginTransaction();

    //   $sth = $dbh->prepare('SELECT COUNT(*) AS cnt FROM leafprod
    //     WHERE l_ppd_prodplan_id = :l_ppd_prodplan_id
    //       AND l_ppd_row = :l_ppd_row');
    //   $sth->bindValue(':l_ppd_prodplan_id', $sdat['ppd_prodplan_id'], PDO::PARAM_INT);
    //   $sth->bindValue(':l_ppd_row', $sdat['ppd_row'], PDO::PARAM_INT);
    //   $sth->execute();
    //   $data = $sth->fetchAll(PDO::FETCH_ASSOC);
    //   if ($data[0]['cnt'] !== 0) {
    //     $dbh->rollBack();
    //     $resp['msg'] = '指定した明細の製造リーフは既に登録されています。';
    //     $resp['succeed'] = false;
    //     echo json_encode($resp);
    //     return false;
    //   }

    //   // BOM展開情報を取得 製造リーフ作成用
    //   $sth = $dbh->prepare('ANALYZE TABLE `leafprod`;');
    //   $sth->execute();
    //   $sth = $dbh->prepare('SET @nextid = (SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = \'leafprod\' AND table_schema = DATABASE());');
    //   $sth->execute();
    //   $sth = $dbh->prepare('SET @qty = :qty;');
    //   $sth->bindValue(':qty', $sdat['ppd_quantity'], PDO::PARAM_INT);
    //   $sth->execute();
    //   $sth = $dbh->prepare('SET @finishdt = DATE_FORMAT(:finishdt, "%Y-%m-%d %h:00:00");');
    //   $sth->bindValue(':finishdt', $sdat['ppd_finish_plan'], PDO::PARAM_INT);
    //   $sth->execute();
    //   $sth = $dbh->prepare('SET @dayst = (SELECT day_st_hour FROM wbsctrl LIMIT 1);');
    //   $sth->execute();
    //   $sth = $dbh->prepare('SET @dayen = (SELECT day_en_hour FROM wbsctrl LIMIT 1);');
    //   $sth->execute();
    //   $sth = $dbh->prepare('SET max_execution_time = 1000;');
    //   $sth->execute();
    //   $sth = $dbh->prepare('SET @startdt = DATE_FORMAT(:finishdt, "%Y-%m-%d %h:00:00");');
    //   $sth->bindValue(':finishdt', $sdat['ppd_finish_plan'], PDO::PARAM_INT);
    //   $sth->execute();

    //   $sth = $dbh->prepare('WITH RECURSIVE cte AS
    //   (
    //     SELECT     b.b_parent_id, b.b_child_id,  b.b_typeA,  b.b_typeB,
    //                  b.b_proc_name,
    //                 b.b_time_fix, b.b_time_amount,
    //                 CAST((@qty) AS DECIMAL(10,4)) as b_quantity, 
    //                 (@qty * b.b_time_amount + b.b_time_fix) as req_time,
    //                 (CASE WHEN b.b_child_id > 0 THEN NULL ELSE @finishdt END) AS dtfinish,
    //                 (CASE WHEN (b.b_child_id > 0) THEN NULL
    //                 WHEN (b.b_child_id = 0) THEN 	@startdt := calcstartdt(@finishdt,  (@qty * b.b_time_amount + b.b_time_fix), @dayst, @dayen)
    //                             ELSE NULL END) AS dtstart
    //                ,0 AS depth, CAST(b.b_child_id  AS CHAR(256)) AS dir
    //                ,0 AS parent_leaf_id
    //                ,@nextid AS l_id
    //     FROM       bom AS b
    //     WHERE      b_parent_id = :b_parent_id
    //     UNION ALL
    //     SELECT     p.b_parent_id, p.b_child_id, p.b_typeA, p.b_typeB,
    //                 p.b_proc_name, 
    //                 p.b_time_fix, p.b_time_amount,
    //                 ROUND(cte.b_quantity * (SELECT b1.b_quantity from bom b1 where b1.b_child_id = p.b_parent_id), 4) AS b_quantity,
    //                 (cte.b_quantity * (SELECT b1.b_quantity from bom b1 where b1.b_child_id = p.b_parent_id) * p.b_time_amount + p.b_time_fix) as req_time,
    //                 (CASE WHEN p.b_child_id = 0 THEN @startdt
    //                 ELSE cte.dtstart END) AS dtfinish,
    //                 (CASE WHEN p.b_child_id = 0 
    //                 THEN @startdt := calcstartdt(@startdt, (cte.b_quantity * (SELECT b1.b_quantity from bom b1 where b1.b_child_id = p.b_parent_id) * p.b_time_amount + p.b_time_fix), @dayst, @dayen)
    //                 ELSE cte.dtstart  END) AS dtstart
    //                ,cte.depth + 1 AS depth, CONCAT(cte.dir, "/", p.b_child_id) AS dir
    //                ,cte.l_id AS parent_leaf_id
    //                ,CASE WHEN p.b_child_id = 0 THEN @nextid:=@nextid + 1 ELSE @nextid:=@nextid END AS l_id
    //     FROM       bom p
    //     INNER JOIN cte ON p.b_parent_id = cte.b_child_id  AND EXISTS (SELECT * FROM bom WHERE p.b_typeB = b_child_id)
    //   )
    //   SELECT cte.*,
    //     CASE WHEN cte.b_child_id = 0 THEN cte.b_proc_name ELSE pr.p_name END AS p_name,
    //     prp.p_name AS parent_p_name, pr.p_name AS child_p_name FROM cte
    //   LEFT JOIN product AS pr ON cte.b_child_id = pr.p_cd
    //   LEFT JOIN product AS prp ON cte.b_parent_id = prp.p_cd
    //   WHERE cte.b_child_id = 0  AND IF(EXISTS(SELECT * FROM cte WHERE b_typeA = 1), (cte.dir NOT LIKE CONCAT("%", (SELECT b_parent_id FROM cte WHERE b_typeA = 1 LIMIT 1), "%")), cte.b_parent_id IS NOT NULL) 
    //   ORDER BY l_id ASC');           
    //   $sth->bindValue(':b_parent_id', $sdat['ppd_products_id'], PDO::PARAM_INT);
    //   $sth->execute();
    //   $bomresults = $sth->fetchAll(PDO::FETCH_ASSOC);

    //   // 展開結果の内、b_child_idが0の行(製造作業)について製造リーフを登録する。
    //   $isFirstRow = true;
    //   $rootId = 0;
    //   $parentIdOffset = 0;
    //   $factoryDate = null;
    //   foreach ($bomresults as $proc) {
    //     $sth = $dbh->prepare(
    //       'INSERT INTO leafprod (
    //         `l_ppd_prodplan_id`,
    //         `l_ppd_row`,
    //         `l_summary`,
    //         `l_p_id`,
    //         `l_amount`,
    //         `l_required_time`,
    //         `l_start_plan`,
    //         `l_worker_member_id`,
    //         `l_equipment_member_id`,
    //         `l_projects_id`,
    //         `l_divide_id`,
    //         `l_parent_id`,
    //         `l_result_time`,
    //         `l_start_date`,
    //         `l_finish_date`,
    //         `l_products_good_no`,
    //         `l_products_bad_no`,
    //         `l_prod_comp_sign` 
    //       ) VALUES (
    //         :l_ppd_prodplan_id,
    //         :l_ppd_row,
    //         :l_summary,
    //         :l_p_id,
    //         :l_amount,
    //         :l_required_time,
    //         :l_start_plan,
    //         NULL,
    //         NULL,
    //         :l_projects_id,
    //         0,
    //         :l_parent_id,
    //         0,
    //         NULL,
    //         NULL,
    //         0,
    //         0,
    //         0
    //       )'
    //     );
    //     $sth->bindValue(':l_ppd_prodplan_id', $sdat['ppd_prodplan_id'], PDO::PARAM_INT);
    //     $sth->bindValue(':l_ppd_row', $sdat['ppd_row'], PDO::PARAM_INT);
    //     $sth->bindValue(':l_summary', '', PDO::PARAM_STR);
    //     $sth->bindValue(':l_p_id', $proc['b_parent_id'], PDO::PARAM_INT);
    //     $sth->bindValue(':l_amount', $proc['b_quantity'], PDO::PARAM_INT);
    //     $sth->bindValue(':l_required_time', $proc['req_time'], PDO::PARAM_INT);
    //     // self::bindNullableDte(':l_start_plan', null/* $proc['dtstart'] */, $sth);
    //     self::bindNullableDte(':l_start_plan', $proc['dtstart'], $sth);
    //     $sth->bindValue(':l_projects_id', $sdat['pp_projects_id'], PDO::PARAM_INT);
    //     $sth->bindValue(':l_parent_id', $proc['parent_leaf_id'], PDO::PARAM_INT);
    //     $sth->execute();

    //     // 分割元IDの初期値を登録したリーフと同じ値とする
    //     $lid = $dbh->lastInsertId();
    //     if ($isFirstRow) {
    //       $rootId = $lid;
    //       $parentIdOffset = $lid;
    //       $factoryDate = new DateTime($proc['dtstart']);
    //     }
    //     $sth = $dbh->prepare('UPDATE leafprod SET
    //         `l_divide_id` = :l_divide_id
    //       WHERE `l_id` = :l_id');
    //     $sth->bindValue(':l_divide_id', $lid, PDO::PARAM_INT);
    //     $sth->bindValue(':l_id', $lid, PDO::PARAM_INT);
    //     $sth->execute();
    //     $isFirstRow = false;
    //   } 
    // 金網前のデータ　ここまで↑
      // 当初のフローは下記↓
      // --------------------------------------------------------------------------------
      // 親リーフから順にl_parent_idによる再帰処理をSQLで行い、
      // リーフの配置日時・担当者・設備を確定させていく。
      // bom_assignable_toから担当者及び設備の候補を取得する。
      // ※担当者または設備の候補が未指定の場合、全ての行を配置可能として扱う。
      // (1)親リーフの開始予定日時を取得する。
      //    ※l_parent_id=0のリーフ(展開開始地点)については、
      //      既にそのl_start_planに入っているデータを使用する。
      // (2)roles.id=1(担当者)の該当メンバーをSELECTして、それぞれループ処理を行う。
      // (3)担当者IDを仮定した場合のroles.id=2(設備)の全メンバーについて、
      //    配置可能日時を計算して、格納していく。
      // (4)最も最初の指定完了日時に近くなる担当者と設備の組み合わせを取得して、
      //    指定リーフへのUPDATE文を実行する。
      //    完了日時が同じとなる場合、
      //    担当者分+設備分のbas_rankの和が最も小さくなる行に配置する。
      // --------------------------------------------------------------------------------
      
      // ---------一旦コメントアウト↓ sono20190610
      // $sth = $dbh->prepare('SELECT
      //   l_start_plan AS dtstart
      //   FROM leafprod WHERE l_id = :l_id');
      // $sth->bindValue(':l_id', $rootId, PDO::PARAM_INT);
      // $sth->execute();
      // $lfplace = $sth->fetchAll(PDO::FETCH_ASSOC)[0];
      // $sth = $dbh->prepare('SELECT day_en_hour FROM wbsctrl LIMIT 1;');
      // $sth->execute();
      // $dayen = $sth->fetchAll(PDO::FETCH_ASSOC)[0]['day_en_hour'];
      // $placedate = new DateTime($sdat['ppd_finish_plan']);
      // $placedate->setTime($dayen, 0 ,0, 0);
      // self::moveLeafToNearestPlaceableDate($dbh, $rootId, $placedate->format('Y-m-d H:i:s')/* $factoryDate->format('Y-m-d H:i:s') *//* $lfplace['dtstart'] */);
      // ----------↑ここまで

      // 一旦登録 //　leafprodテーブルの参照を再確認
      // $dbh->commit();
      // self::scheduleLeafProd($sdat);
            
      // 登録完了(コミットを実行)
    //   $dbh->commit();
    //   // $resp['msg'] = '製作指示の登録が完了しました。';
    // } catch (Exception $e) {
    //   $dbh->rollBack();
    //   $resp['msg'] = self::getDBErrorMsg($dbh);
    //   $resp['succeed'] = false;
    //   // sono追加
    //   // error_log($sth->queryString, "3", "C:/Apache24/htdocs/wbs/log/log_sonoerror.log");
    //   echo json_encode($resp);
    //   return false;
    // }
    // echo json_encode($resp);
    // return true;
  }


  /***
   * 製造リーフは作成済みか。該当製造指示Noで、1つでもレコードがあれば、作成済みとみなす。
   */
  private static function statusCreateLeafProd($dat, $dbh) {
    $statusFlg = 0;
    try {
      foreach ($dat as $record) {
        $statusFlg = self::statusLeafProdRecord($record, $dbh);
      }

      return $statusFlg;

    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 製造リーフレコードが作成ずみかどうか。対象は1レコード。
   */
  private static function statusCreateLeafProdRecord($datRecord, $dbh) {
    $statusFlg = 0;
    
    try {
      $sth = $dbh->prepare('
      SELECT pd_leaf_no FROM prodplans
      WHERE pd_prod_plan_no = :PRODPLANNO
      AND pd_prod_plan_sub_no = :SUBNO
      AND pd_process_cd = :PROCCD
      ;');
      $sth->bindValue(':PRODPLANNO', $record['pd_prod_plan_no'], PDO::PARAM_STR);
      $sth->bindValue(':SUBNO', $record['pd_prod_plan_sub_no'], PDO::PARAM_STR);
      $sth->bindValue(':PROCCD', $record['pd_process_cd'], PDO::PARAM_STR);
      $sth->execute();
      $rsltProdplans = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (!self::checkNotSet($rsltProdplans[0]['pd_leaf_no'])) {
        $statusFlg = 1;     
        $sth = $dbh->prepare('
        SELECT * FROM leafprod
        WHERE l_leaf_no = :LEAFNO
        ;');
        $sth->bindValue(':LEAFNO', $rsltProdplans[0]['pd_leaf_no'], PDO::PARAM_STR);
        $sth->execute();

        $rsltLeaf = $sth->fetchAll(PDO::FETCH_ASSOC);
        
        if (!self::checkNotSet($rsltLeaf[0]['l_pd_start_date'])) {
          $statusFlg = 2;
        }
      }

      return $statusFlg;

    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 製造リーフ発行
   */
  private static function createLeafProd($datRecord, $statusLeafProd, $dbh) {

    $columns = self::getColumnDefs('leafprod');
    self::markAsHeaderPK($columns, 'l_belong_cd');
    self::markAsHeaderPK($columns, 'l_leaf_no');

    $currentDate = self::currentDate();
    $datInsertData = [];

    try {
      $datRecord['l_belong_cd'] = $_SESSION['companycd'];

      //INSERT用のデータを作る必要あり。
      $datInsertData[] = '';




      

      if ($statusLeafProd === 0) {
        // リーフ発行していない=INSERT

        // 最大値取得
        $sth = $dbh->prepare('
        SELECT MAX(l_leaf_no) AS maxno FROM leafprod
        WHERE l_leaf_no LIKE :LEAFNO
        ;');
        $sth->bindValue(':LEAFNO', 'L' . $currentDate . '%' , PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (self::checkNotSet($result[0]['maxno'])) {
          // 最大値がない場合
          $datRecord['l_leaf_no'] = 'L' . $currentDate . '001';
        } else {
          $tempNum = sprintf('%03d', (int)substr($result[0]['maxno'], -3) + 1);
          $datRecord['l_leaf_no'] = 'L' . $currentDate . $tempNum;
        }


        $sth = $dbh->prepare(self::makeInsertSQL('leafprod', $columns));
        self::bindInsertKeys($sth, $columns, $datRecord);
        $sth->execute();

        // prodplansテーブルのリーフIDを更新する
        $sth = $dbh->prepare('
        UPDATE prodplans
        SET pd_leaf_no = :LEAFNO
        WHERE pd_prod_plan_no = :PRODPLANNO
        AND pd_prod_plan_sub_no = :SUBNO
        AND pd_process_cd = :PROCESSCD
        ;');
        $sth->bindValue(':LEAFNO', $datRecord['l_leaf_no'], PDO::PARAM_STR);
        $sth->bindValue(':PRODPLANNO', $datRecord['l_prod_plan_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $datRecord['l_leaf_no'], PDO::PARAM_STR);
        $sth->bindValue(':PROCESSCD', $datRecord['l_process_cd'], PDO::PARAM_STR);

      } else if ($statusLeafProd === 1) {

        // リーフ発行済みだが、製造は未。
        $sth = $dbh->prepare('
        SELECT * FROM leafprod
        WHERE l_leaf_no = :LEAFNO
        ;');
        $sth->bindValue(':LEAFNO', $datRecord['l_leaf_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (!self::checkNotSet($result[0]['l_divide_id']) ) {
          // 分割されていた場合。分割済みリーフについては、製造予定時間の更新は行わない
          $sth = $dbh->prepare('
          SELECT * FROM leafprod
          WHERE l_prod_plan_no = :PRODPLANNO
          AND l_process_cd = :PROCESSCD
          ;');
          $sth->bindValue(':PRODPLANNO', $result[0]['l_prod_plan_no'], PDO::PARAM_STR);
          $sth->bindValue(':PROCESSCD', $result[0]['l_process_cd'], PDO::PARAM_STR);
          $sth->execute();
          $result = $sth->fetchAll(PDO::FETCH_ASSOC);

          foreach($result as $record) {
            $datRecord['l_leaf_no'] = $record['l_leaf_no'];
            $datRecord['l_pd_plan_interval'] = $record['l_pd_plan_interval'];
            $datRecord['l_divide_id'] = $record['l_divide_id'];
            $datRecord['l_pd_plan_quantity'] = $record['l_pd_plan_quantity'];

            $sth = $dbh->prepare(self::makeUpdateSQL('leafprod'), $columns);
            self::bindUpdateKeys($sth, $columns, $datRecord);
            $sth->execute();
          }

        } else {
          // 分割なし
          $sth = $dbh->prepare(self::makeUpdateSQL('leafprod'), $columns);
          self::bindUpdateKeys($sth, $columns, $datRecord);
          $sth->execute();
        }

      } else {
        // 製造開始済み

        $sth = $dbh->prepare('
        SELECT * FROM leafprod
        WHERE l_leaf_no = :LEAFNO
        ;');
        $sth->bindValue(':LEAFNO', $datRecord['l_leaf_no'], PDO::PARAM_STR);
        $sth->execute();

        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        // 製造予定や、見積データ関連のみ更新可
        $result[0]['l_fin_plan_date'] = $datRecord['l_fin_plan_date'];
        $result[0]['l_pd_start_plan_date'] = $datRecord['l_pd_start_plan_date'];
        $result[0]['l_pd_start_plan_time'] = $datRecord['l_pd_start_plan_time'];
        $result[0]['l_pd_finish_plan_date'] = $datRecord['l_pd_finish_plan_date'];
        $result[0]['l_pd_finish_plan_time'] = $datRecord['l_pd_finish_plan_time'];
        $result[0]['l_pd_plan_interval'] = $datRecord['l_pd_plan_interval'];

        $sth = $dbh->prepare(self::makeUpdateSQL('leafprod'), $columns);
        self::bindUpdateKeys($sth, $columns, $result[0]);
        $sth->execute();
      }

      return;
    } catch (Exception $e) {
      throw $e;
    }
  }




  /**
   * 割り当て可能なメンバをスケジュールテーブルに登録する
   * 自動配置を使用しない場合にこのfunctionを使用
   * 正常に完了したらtrueを返す
   * 10/26　sono
   */
  public static function deployMembers($leafData, $dbh) {
    // bom_assignable_toから配置可能なメンバを取得してleaf_assignable_toに登録
    $memberEq = [];
    $memberP = [];
    try {
      // リーフ番号のデータが既に登録されていたらupdate、でなければinsert
      $sth = $dbh->prepare('
      SELECT * FROM bom_assignable_to
      WHERE b_parent_id = :PARENTCD AND 
      process_cd = :PROCCD
      ;');
      $sth->bindValue(':PARENTCD', '0', PDO::PARAM_STR);
      $sth->bindValue(':PROCCD', $leafData['l_process_cd'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      if (count($result) > 0) {
        // 該当するデータがない場合、配置可能データを持てないので、ハイライト不可　現状配置不可。どこかに配置したい場合は、要望データの登録が必要となる
        return false;
      }
      $memberEq = array_unique($result['members_id']);
      $memberP =  array_unique($result['members_id_02']);
      // 設備
      foreach ($memberEq as $rec) {
        $sth = $dbh->prepare('
        SELECT * FROM leaf_assignable_to
        WHERE leafs_id = :LEAFNO AND 
        members_id = :MEMBERID
        ');
        $sth->bindValue(':LEAFNO', $leafData['l_leaf_no'], PDO::PARAM_STR);
        $sth->bindValue(':MEMBERID', $rec['members_id'], PDO::PARAM_STR);
        $sth->execute();
        $rsltLA = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (count($rsltLA) > 0) {
          // あったら無視
        } else {
          $sth = $dbh->prepare('
          INSERT INTO leaf_assignable_to 
          members_id VALUES :MEMBERSID
          ');
          $sth->bindValue(':MEMBERSID', $rec['members_id'], PDO::PARAM_STR);
          $sth->execute();
          
        }
      }
      // 作業者
      foreach ($memberP as $rec) {
        $sth = $dbh->prepare('
        SELECT * FROM leaf_assignable_to
        WHERE leafs_id = :LEAFNO AND 
        members_id = :MEMBERID
        ');
        $sth->bindValue(':LEAFNO', $leafData['l_leaf_no'], PDO::PARAM_STR);
        $sth->bindValue(':MEMBERID', $rec['members_id_02'], PDO::PARAM_STR);
        $sth->execute();
        $rsltLA = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (count($rsltLA) > 0) {
          // あったら無視
        } else {
          $sth = $dbh->prepare('
          INSERT INTO leaf_assignable_to 
          members_id VALUES :MEMBERSID
          ');
          $sth->bindValue(':MEMBERSID', $rec['members_id_02'], PDO::PARAM_STR);
          $sth->execute();          
        }
      }
      return true;
    } catch (Exception $e) {
      return false;
    }
  }



  /****
   * 製造リーフ配置
   * 担当者と設備のスケジュール、優先順位にリーフ自動配置
   */
  public static function deployLeaf($lfData) {
    /***
     * １製造工程取得。理論上の最適スケジュールでデータを保持する。完成品から作業時間を決定していく。
     * ２会社カレンダーの定時を取得。納期は会社カレンダーから考慮すべきなので。
     * ３工程に対して、設備と担当者が割当られていない場合、設備割当なしはエラーとして未割当とする。
     * 　担当者未割当の場合は、優先順位はID順とし、全製造メンバーを割当対象とする。
     * ４担当社員の勤務日＆勤務時間を取得。優先順位順に並べる
     * ５最短スケジュールをもとに、その時間帯に空いている人間を探す。
     * 　データ入力日の翌日から該当工程に至るまでの時間を求め、その時間までに配置できなかった場合は、未割当として配置終了。
     * 　理論上の最適スケジュールを持って、該当時間に空いている担当者且つ設備があるか探していく。探す時間単位は１時間とする。
     * 　（30分単位での抽出は現状対応しない。対応するなら処理追加が必要。）
     * ６データ入力日の翌日までにデータが配置できなかった場合は、配置を全て取消＆未割当とする。
     * */
    // include 'ChromePhp.php';
    $freeleaf = array();
    $cnt  = 0;
    $startDT = date("Y-m-d 00:00:00");
    $resp = array('succeed' => true, 'msg' => '');

    try {
      $dbh = self::dbPDO();

      // 設定が自動配置かどうか確認      
      $sth = $dbh->prepare('SELECT WARN_DISP AS dispSW FROM ctrltable LIMIT 1');
      $sth->execute();
      $data = $sth->fetchAll(PDO::FETCH_ASSOC);
      if ($data[0]['dispSW'] === 0) {
        // 自動配置しない
        return true;
      }

      
      // 製造完了予定日が空なら配置しない
      if (is_Null($lfData['ppd_finish_plan']) || ($lfData['ppd_finish_plan'] === 'undefined')) {
        $resp['msg'] = '製造完了予定日が空の為、リーフは未割当にしました。';
        throw new Exception('完了予定日未入力');
      } else {  
        // defaultの日付
        $startDT = new DateTime($lfData['ppd_finish_plan']);
      }

      // 該当製作指示IDの製作指示データを丸ごと取得
      $sth = $dbh->prepare('SELECT * FROM leafprod WHERE l_prod_plan_no = :ppdId ORDER BY l_leaf_no;'); 
      $sth->bindValue(':ppdId', $lfData['l_prod_plan_no'], PDO::PARAM_INT);
      $sth->execute();
      $leafData = $sth->fetchAll(PDO::FETCH_ASSOC);
      if (count($leafData) === 0) {
        $resp['msg'] = 'リーフ配置に失敗しました。';
        throw new Exception('リーフデータ取得失敗');
      }
      
      // 会社カレンダーの定時を取得 　作業者によって定時が異なる場合は再考慮
      $sth = $dbh->prepare('SELECT * FROM wbsctrl LIMIT 1;');
      $sth->execute();
      $corpTime = $sth->fetchAll(PDO::FETCH_ASSOC);

      $dbh->beginTransaction();
      // リーフ毎に配置用データを取得＆UPDATE
      // リーフ自動配置を行う場合、下記部分を変更する必要あり。leaf_assignable_toを経る必要あり
      foreach($leafData as $id => $rec) {
        // 所要時間が0の場合はリーフ作成しない
        if ($rec['l_required_time'] === 0) {
          continue;
        }
        // 作業担当者取得 社員(roles_idが1)
        $sth = $dbh->prepare('SELECT
          *
        FROM
          members AS me
          LEFT JOIN bom_assignable_to AS ba ON me.id = ba.members_id
        WHERE
          me.roles_id = 1
          AND ba.b_parent_id = :parentId
        ORDER BY
        ba.bas_rank, me.id;');
        $sth->bindValue(':parentId', $rec['l_p_id'], PDO::PARAM_INT);
        $sth->execute();
        $memScd = $sth->fetchAll(PDO::FETCH_ASSOC);

        // 担当設備を取得。設定がない場合は配置キャンセル
        $sth = $dbh->prepare('SELECT * FROM members AS me
        LEFT JOIN bom_assignable_to AS ba  ON me.id = ba.members_id
        WHERE me.roles_id = 2 AND ba.b_parent_id = :parentId
        ORDER BY ba.bas_rank;');
        $sth->bindvalue(':parentId', $rec['l_p_id'], PDO::PARAM_INT);
        $sth->execute();
        $bldScd = $sth->fetchAll(PDO::FETCH_ASSOC);
        if (count($bldScd) === 0) {
          // 該当設備がなし
          $resp['msg'] = '設定されている設備がないため配置できませんでした';
          continue;
        }

        // リーフ配置
        foreach ($bldScd as $memId => $memRec){
          // 担当者と設備の両方が空いている箇所を抽出
          foreach ($memScd as $memSchId => $memSchRec) { 
            
            $sth = $dbh->prepare('SELECT count(*) AS cnt FROM leafProd WHERE l_equipment_member_id=:equipmember OR l_worker_member_id=:workermember;');
            $sth->bindValue(':equipmember', $memRec['id'], PDO::PARAM_INT);
            $sth->bindValue(':workermember', $memSchRec['id'], PDO::PARAM_INT);
            $sth->execute();
            $beforeDB = $sth->fetchAll(PDO::FETCH_ASSOC);
            
            $sth = $dbh->prepare('SELECT
              a.l_leaf_no, 
              a.l_prod_plan_no,
              :staffId1 AS free_worker_id,
              :equipmentId1 AS free_equip_id, 
              a.freeEndDate,
              a.freeStartDate,
              calctimeLeft(a.l_start_plan, a.freeStartDate, :dayst1, :dayen1, :staffId2, :equipmentId2) AS leaveTime
            FROM
              (
                SELECT
                  b.l_leaf_no,
                  b.l_prod_plan_no,
                  b.l_p_cd,
                  b.l_estimate_quantity,
                  b.l_pd_real_interval,
                  CONCAT(str_to_date( b.l_pd_start_date, "%Y-%M-%d"), " ", str_to_date( b.l_pd_start_date, "%H:%i:%s")) AS start_plan,
                  b.l_worker_member_id,
                  b.l_equipment_member_id,
                  -- b.l_divide_id,
                  -- b.l_parent_id,
                  b.endDate,
                  b.freeEndDate,
                  IF ((b.l_start_plan <= :startDate1) , b.l_start_plan, LAG(endDate, 1) OVER w)  AS freeStartDate
                FROM
                  ( SELECT
                      *,
                      calcfinishdt_prod(CONCAT(str_to_date( b.l_pd_start_date, "%Y-%M-%d"), " ", str_to_date( b.l_pd_start_date, "%H:%i:%s")), l_required_time, :dayst2, :dayen2, :staffId3, :equipmentId3) AS endDate,
                      CONCAT(str_to_date( b.l_pd_start_date, "%Y-%M-%d"), " ", str_to_date( b.l_pd_start_date, "%H:%i:%s")) AS freeEndDate
                    FROM
                      leafprod
                  ) AS b
                WHERE
                  (  b.l_equipment_member_id = :equipmentId4
                      OR b.l_worker_member_id = :staffId4
                  )
                  AND (
                    ( endDate BETWEEN :startDate2
                      AND :endDate2
                    )
                    OR ( CONCAT(str_to_date( b.l_pd_start_date, "%Y-%M-%d"), " ", str_to_date( b.l_pd_start_date, "%H:%i:%s")) BETWEEN :startDate3
                      AND :endDate3
                    )
                  ) WINDOW w AS (
                    ORDER BY
                      b.l_start_plan ASC
                  )
              ) AS a WHERE TIMEDIFF(freeEndDate,freeStartDate) > :requiredTime ORDER BY freeEndDate DESC;');
            $sth->bindValue(':staffId1', $memSchRec['id'], PDO::PARAM_INT);
            $sth->bindValue(':equipmentId1', $memRec['id'], PDO::PARAM_INT);
            $sth->bindValue(':dayst1', $corpTime[0]['day_st_hour'], PDO::PARAM_INT);
            $sth->bindValue(':dayen1', $corpTime[0]['day_en_hour'], PDO::PARAM_INT);
            $sth->bindValue(':staffId2', $memSchRec['id'], PDO::PARAM_INT);
            $sth->bindValue(':equipmentId2', $memRec['id'], PDO::PARAM_INT);
            $sth->bindValue(':startDate1', date("Y-m-d", strtotime('+1 day', time())), PDO::PARAM_STR);
            $sth->bindValue(':dayst2', $corpTime[0]['day_st_hour'], PDO::PARAM_INT);
            $sth->bindValue(':dayen2', $corpTime[0]['day_en_hour'], PDO::PARAM_INT);
            $sth->bindValue(':staffId3', $memSchRec['id'], PDO::PARAM_INT);
            $sth->bindValue(':equipmentId3', $memRec['id'], PDO::PARAM_INT);
            $sth->bindValue(':equipmentId4', $memRec['id'], PDO::PARAM_INT);
            $sth->bindValue(':staffId4', $memSchRec['id'], PDO::PARAM_INT);
            $sth->bindValue(':startDate2', date("Y-m-d", strtotime('+1 day', time())), PDO::PARAM_STR);
            $sth->bindValue(':endDate2', $startDT->format('Y-m-d'), PDO::PARAM_STR);
            $sth->bindValue(':startDate3', date("Y-m-d", strtotime('+1 day', time())), PDO::PARAM_STR);
            $sth->bindValue(':endDate3', $startDT->format('Y-m-d'), PDO::PARAM_STR);
            $sth->bindValue(':requiredTime', $rec['l_required_time'], PDO::PARAM_STR);
            $sth->execute();
            $result = $sth->fetchAll(PDO::FETCH_ASSOC);

            if (count($result) === 0) {
              // 担当者と担当設備の該当期間内のスケジュールが全くなかった場合 workerIdとequipmentIDのデータを保持させる。
              // データ比較用に仮レコードを作成
              $sth = $dbh->prepare('SELECT 
                0 AS l_leaf_no,
                0 AS l_prod_plan_no,
                :staffId1 AS free_worker_id,
                :equipmentId1 AS free_equip_id, 
                :endDate1 AS freeEndDate,
                :startDate1 AS freeStartDate,
                calctimeLeft(:endDate2,:startDate2, :dayst, :dayen, :staffId2, :equipmentId2) AS leaveTime
              FROM
                leafprod
                LIMIT 1;');
              $sth->bindValue(':staffId1', $memSchRec['id'], PDO::PARAM_INT);
              $sth->bindValue(':equipmentId1', $memRec['id'], PDO::PARAM_INT);
              $sth->bindValue(':endDate1', $startDT->format('Y-m-d 00:00:00'), PDO::PARAM_STR);
              $sth->bindValue(':startDate1', date("Y-m-d H:i:s", strtotime('+1 day', time())), PDO::PARAM_STR);
              $sth->bindValue(':endDate2', $startDT->format('Y-m-d'), PDO::PARAM_STR);
              $sth->bindValue(':startDate2', date("Y-m-d H:i:s", strtotime('+1 day', time())), PDO::PARAM_STR);
              $sth->bindValue(':dayst', $corpTime[0]['day_st_hour'], PDO::PARAM_INT);
              $sth->bindValue(':dayen', $corpTime[0]['day_en_hour'], PDO::PARAM_INT);
              $sth->bindValue(':staffId2', $memSchRec['id'], PDO::PARAM_INT);
              $sth->bindValue(':equipmentId2', $memRec['id'], PDO::PARAM_INT);
              $sth->execute();
              $result = $sth->fetchAll(PDO::FETCH_ASSOC);
            }
                          
            // 配列の追加
            foreach($result as $key => $key) {
              $freeleaf[$cnt]['l_leaf_no'] = $key['l_leaf_no'];
              $freeleaf[$cnt]['l_prod_plan_no'] = $key['l_prod_plan_no'];
              $freeleaf[$cnt]['free_worker_id'] = $key['free_worker_id'];
              $freeleaf[$cnt]['free_equip_id'] = $key['free_equip_id'];
              $freeleaf[$cnt]['freeEndDate'] = $key['freeEndDate'];
              $freeleaf[$cnt]['freeStartDate'] = $key['freeStartDate'];
              $freeleaf[$cnt]['leaveTime'] = $key['leaveTime'];
              if (count($result) > 1) {
                $cnt++;
              }
            }
            $cnt = count($freeleaf);
          }
        }
        
        // 最短スケジュール取得
        usort($freeleaf, function($a, $b) {
          // 降順ソート
          if ($a['freeStartDate'] == $b['freeStartDate']) {
            return 0;
          }
          return ($a['freeStartDate'] < $b['freeStartDate']) ? 1 : -1;
        });

        // データ調整
        // 全く該当データがなかった時は配置をせずに終了
        if ($freeleaf[0]['leaveTime'] === 0 || count($freeleaf) === 0) {
          $resp['msg'] = 'リーフは未割当です。リーフの配置をお願いします。';
          $resp['succeed'] = true;
          echo json_encode($resp);
          return  true;
        } else {
          // 配置できる期間があった場合、開始時間を計算
          $tmpDate = new DateTime($freeleaf[0]['freeEndDate']);
          $startDT = $tmpDate->modify('-' . $rec['l_required_time'] . ' minute');
          // update

          $sth = $dbh->prepare('UPDATE leafprod SET
          l_pd_start_plan_date = :l_pd_start_plan_date,
          l_pd_start_plan_time = :l_pd_start_plan_time,
          l_worker_member_id = :l_worker_member_id,
          l_equipment_member_id = :l_equipment_member_id
          WHERE l_leaf_no = :l_leaf_no');
          $sth->bindValue(':l_pd_start_plan_date', $startDT->format('Y-m-d H:i:s'), PDO::PARAM_STR);
          $sth->bindValue(':l_pd_start_plan_time', $startDT->format('Y-m-d H:i:s'), PDO::PARAM_STR);
          $sth->bindValue(':l_worker_member_id', $freeleaf[0]['free_worker_id'], PDO::PARAM_INT);
          $sth->bindValue(':l_equipment_member_id', $freeleaf[0]['free_equip_id'], PDO::PARAM_INT);
          $sth->bindValue(':l_id', $rec['l_id'], PDO::PARAM_INT);
          $sth->execute();
        }


        // 親リーフのl_divide_idをキーとして持つリーフを取得して、(3),(4)の処理を実行する。
        // 処理したリーフのl_idを変数に保持していき、
        // 新規発行する全てのリーフの配置が確定した時点で処理完了とする。
        // $sth = $dbh->prepare('SELECT l_id FROM leafprod 
        //   WHERE l_parent_id = :l_parent_id');
        // $sth->bindValue(':l_parent_id', $lfplace['l_divide_id'], PDO::PARAM_INT);
        // $sth->execute();
        // $childLeafs = $sth->fetchAll(PDO::FETCH_ASSOC);
        // foreach ($childLeafs as $lf) {
        //   error_log($lf['l_id'] . ' : ' . $confirmedPlan['start_plan']->format('Y-m-d H:i:s'));
        //   self::moveLeafToNearestPlaceableDate($dbh, $lf['l_id'], $confirmedPlan['start_plan']->format('Y-m-d H:i:s'));
        // }
        
      }
    

      // 登録完了(コミットを実行)
      $dbh->commit();
      // $resp['msg'] = '製造リーフ2の登録が完了しました。';
    } catch (Exception $e) {
      $dbh->rollBack();
      // $resp['msg'] = self::getDBErrorMsg($dbh);
      $resp['msg'] = 'リーフを発行しました。配置は行えませんでした。';
      $resp['succeed'] = false;
      echo json_encode($resp);
      return true;        
    }
    echo json_encode($resp);
    return true;
  }

  // private static function moveLeafToPlaceable($dbh, $sdatdetail, $leafId) {
  //   try {
  //     // BOMに該当の製品のデータがない場合は、自動配置なしモードと判定する
  //     $sth = $dbh->prepare('SELECT * FROM BOM WHERE b_parent_id = :PRODUCTCD;');
  //     $sth->bindValue(':PRODUCTCD', $sdatdetail, PDO::PARAM_STR);
  //     $sth->execute();
  //     $no = $sth->fetchAll(PDO::FETCH_ASSOC);
  //     if (count($no) > 0) {
  //       return false;
  //     }
  //     // 配置なしモード
  //     // BOM_assignable_toで各工程の設備と作業員を取得
  //     $sth = $dbh->prepare('SELECT member_id_01, member_id_02, bas_rank FROM BOM_assignable_to 
  //     LEFT JOIN members AS equipment ON equipment.id = bom_assignable_to.members_id_01 
  //     LEFT JOIN members AS staff ON staff.id = bom_assignable_to.members_id_02 
  //     WHERE b_parent_id = :PRODUCTCD AND process_cd = :PROCCD;');
  //     $sth->bindValue(':PRODUCTCD', $sdatdetail, PDO::PARAM_INT);
  //     $sth->bindValue(':PROCCD', $sdatdetail, PDO::PARAM_INT);
  //     $sth->execute();
  //     $placebleList = $sth->fetchAll(PDO::FETCH_ASSOC);

  //     // 製造リーフに担当者と設備をセット
  //     $sth = $dbh->prepare('
  //     UPDATE leafprod SET
  //     l_worker_member_id = :STAFF,
  //     l_equipment_member_id = :EQUIPMENT
  //     WHERE l_leaf_no = :LEAFNO
  //     ');
  //     $sth->bindValue(':STAFF', $placebleList[0]['member_id_02'], PDO::PARAM_INT);
  //     $sth->bindValue(':EQUIPMENT', $placebleList[0]['member_id_01'], PDO::PARAM_INT);
  //     $sth->bindValue(':LEAFNO', $leafId, PDO::PARAM_INT);
  //     $sth->execute();
  //   } catch (exception $e) {
  //     return false;
  //   }
  // }



  /**
   * 指定したリーフを配置可能な担当者・設備・日時に移動する
   * @day_st, @day_enを設定の上で、トランザクションは外部で行っておく。
   */
  private static function moveLeafToNearestPlaceableDate($dbh, $placeLeafId, $parentStartdt) {
    try {
      // (1)親リーフをSELECTして、開始予定日時等を取得する。
      $sth = $dbh->prepare('SELECT * FROM leafprod WHERE l_leaf_no = :l_leaf_no');
      $sth->bindValue(':l_leaf_no', $placeLeafId, PDO::PARAM_INT);
      $sth->execute();
      $lfplace = $sth->fetchAll(PDO::FETCH_ASSOC)[0];

      // bom_assignable_toから担当者及び設備の候補を取得する。
      $sth = $dbh->prepare('SELECT bom_assignable_to.*, members.*
        FROM bom_assignable_to
        LEFT JOIN members ON members.id = bom_assignable_to.members_id
        WHERE b_parent_id = :b_parent_id');
      $sth->bindValue(':b_parent_id', $lfplace['l_p_id'], PDO::PARAM_INT);
      $sth->execute();
      $basAll = $sth->fetchAll(PDO::FETCH_ASSOC);
      
      // ※担当者または設備の候補が未指定の場合、全ての行を配置可能として扱う。
      $basStaffs = array_filter($basAll, function ($elem) {
        if ($elem['roles_id'] === 1) {
          return true;
        }
        return false;
      });

      if (count($basStaffs) === 0) {
        $sth = $dbh->prepare('SELECT members.id AS members_id, 1 AS bas_rank
        FROM members
        WHERE members.roles_id = 1');
        $sth->execute();
        $basStaffs = $sth->fetchAll(PDO::FETCH_ASSOC);
      }

      $basEquipments = array_filter($basAll, function ($elem) {
        if ($elem['roles_id'] === 2) {
          return true;
        }
        return false;
      });

      if (count($basEquipments) === 0) {
        $sth = $dbh->prepare('SELECT members.id AS members_id, 1 AS bas_rank
        FROM members
        WHERE members.roles_id = 2');
        $sth->execute();
        $basEquipments = $sth->fetchAll(PDO::FETCH_ASSOC);
      }
      // (2)roles.id=1(担当者)の該当メンバーをSELECTして、それぞれループ処理を行う。
      // (3)担当者IDを仮定した場合のroles.id=2(設備)の全メンバーについて、
      //    配置可能日時を計算して、格納していく。
      $plans = array();
      foreach ($basStaffs as $staff) {
        foreach ($basEquipments as $equipment) {
          // 配置可能開始日時を確認
          $sth = $dbh->prepare('SELECT
            calcstartdt_prod(:finishplan, l1.l_required_time, @dayst, @dayen, :staffid, :equipmentid) AS startdt
          FROM leafprod AS l1 WHERE l1.l_id = :l_id');
          $sth->bindValue(':l_id', $lfplace['l_id'], PDO::PARAM_INT);
          $sth->bindValue(':finishplan', $parentStartdt, PDO::PARAM_STR);
          $sth->bindValue(':staffid', $staff['members_id'], PDO::PARAM_INT);
          $sth->bindValue(':equipmentid', $equipment['members_id'], PDO::PARAM_INT);
          $sth->execute();
          $startdt = new DateTime($sth->fetchAll(PDO::FETCH_ASSOC)[0]['startdt']);
          $isPlaced = false;
          // 配置可能な日時が見つかるまでループ処理
          while (!$isPlaced) {
            $sth = $dbh->prepare('SELECT
              cbt_date
            FROM calbdt
            LEFT JOIN leafprod AS l1 ON l1.l_id = :l_id
            WHERE cbt_date = :cbtdt
              AND checkleafduplicate(cbt_date, l1.l_required_time, @dayst, @dayen, :staffid, :equipmentid) = 0
            ORDER BY cbt_date DESC
            LIMIT 1');
            $sth->bindValue(':l_id', $lfplace['l_id'], PDO::PARAM_INT);
            $sth->bindValue(':cbtdt', $startdt->format('Y-m-d H:i:s'), PDO::PARAM_STR);
            $sth->bindValue(':staffid', $staff['members_id'], PDO::PARAM_INT);
            $sth->bindValue(':equipmentid', $equipment['members_id'], PDO::PARAM_INT);
            $sth->execute();
            $results = $sth->fetchAll(PDO::FETCH_ASSOC);
      
            if (count($results) > 0) {
              // 確認結果を配列に追加
              $plans[] = array(
                'staff' => $staff['members_id'],
                'equipment' => $equipment['members_id'],
                'rank' => $staff['bas_rank'] + $equipment['bas_rank'],
                'start_plan' => new DateTime($results[0]['cbt_date']),
              );
              $isPlaced = true;
            } else {
              $startdt->sub(new DateInterval('PT1H'));
            }
          }
        }
      }
      usort($plans, function ($a, $b) {
        if ($a['rank'] === $b['rank']) {
          return 0;
        }
        return ($a['rank'] < $b['rank']) ? -1 : 1;
      });
      // (4)最も最初の指定完了日時に近くなる担当者と設備の組み合わせを取得して、
      //    指定リーフへの開始日時UPDATE文を実行する。
      $confirmedPlan = $plans[0];
      for ($i=1; $i < count($plans); $i++) { 
        if ($plans[$i]['start_plan'] > $confirmedPlan['start_plan']) {
          $confirmedPlan = $plans[$i];
        }
      }
      $sth = $dbh->prepare('UPDATE leafprod SET
        l_start_plan = :l_start_plan,
        l_worker_member_id = :l_worker_member_id,
        l_equipment_member_id = :l_equipment_member_id
        WHERE l_id = :l_id');
      $sth->bindValue(':l_start_plan', $confirmedPlan['start_plan']->format('Y-m-d H:i:s'), PDO::PARAM_STR);
      $sth->bindValue(':l_worker_member_id', $confirmedPlan['staff'], PDO::PARAM_INT);
      $sth->bindValue(':l_equipment_member_id', $confirmedPlan['equipment'], PDO::PARAM_INT);
      $sth->bindValue(':l_id', $lfplace['l_id'], PDO::PARAM_INT);
      $sth->execute();
      // 親リーフのl_divide_idをキーとして持つリーフを取得して、(3),(4)の処理を実行する。
      // 処理したリーフのl_idを変数に保持していき、
      // 新規発行する全てのリーフの配置が確定した時点で処理完了とする。
      $sth = $dbh->prepare('SELECT l_id FROM leafprod
        WHERE l_parent_id = :l_parent_id');
      $sth->bindValue(':l_parent_id', $lfplace['l_divide_id'], PDO::PARAM_INT);
      $sth->execute();
      $childLeafs = $sth->fetchAll(PDO::FETCH_ASSOC);
      foreach ($childLeafs as $lf) {
        error_log($lf['l_id'] . ' : ' . $confirmedPlan['start_plan']->format('Y-m-d H:i:s'));
        self::moveLeafToNearestPlaceableDate($dbh, $lf['l_id'], $confirmedPlan['start_plan']->format('Y-m-d H:i:s'));
      }
    }
     catch (Exception $e) {
        return false;
     }
  }


  // 出荷明細の情報を使用して、出荷リーフを発行する
  public static function issueShipLeaf($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();
      // 登録済みリーフの有無を調べる
      $sth = $dbh->prepare('SELECT COUNT(*) AS cnt FROM leafship
        WHERE l_spd_shipplan_id = :l_spd_shipplan_id
          AND l_spd_row = :l_spd_row');
      $sth->bindValue(':l_spd_shipplan_id', $sdat['spd_shipplan_id'], PDO::PARAM_INT);
      $sth->bindValue(':l_spd_row', $sdat['spd_row'], PDO::PARAM_INT);
      $sth->execute();
      $data = $sth->fetchAll(PDO::FETCH_ASSOC);
      if ($data[0]['cnt'] !== 0) {
        $dbh->rollBack();
        $resp['msg'] = '指定した明細の出荷リーフは既に登録されています。';
        $resp['succeed'] = false;
        echo json_encode($resp);
        return false;
      }
      // 新規登録
      $sth = $dbh->prepare('INSERT INTO leafship (
        l_spd_shipplan_id,
        l_spd_row,
        l_summary,
        l_start_plan,
        l_required_time,
        l_amount,
        l_warehouses_id
      ) VALUES (
        :l_spd_shipplan_id,
        :l_spd_row,
        :l_summary,
        :l_start_plan,
        :l_required_time,
        :l_amount,
        :l_warehouses_id
      )');
      $sth->bindValue(':l_spd_shipplan_id', $sdat['spd_shipplan_id'], PDO::PARAM_INT);
      $sth->bindValue(':l_spd_row', $sdat['spd_row'], PDO::PARAM_INT);
      $sth->bindValue(':l_summary', $sdat['spd_remarks'], PDO::PARAM_STR);
      self::bindNullableDte(':l_start_plan', null, $sth);
      $sth->bindValue(':l_required_time', 60, PDO::PARAM_INT);
      $sth->bindValue(':l_amount', $sdat['spd_quantity'], PDO::PARAM_INT);
      $sth->bindValue(':l_warehouses_id', -1, PDO::PARAM_INT); //$sdat['spd_warehouse_id']
      $sth->execute();
      // 分割元IDの初期値を登録したリーフと同じ値とする
      $lid = $dbh->lastInsertId();
      $sth = $dbh->prepare('UPDATE leafship
        SET `l_divide_id` = :l_divide_id
        WHERE `l_id` = :l_id');
      $sth->bindValue(':l_divide_id', $lid, PDO::PARAM_INT);
      $sth->bindValue(':l_id', $lid, PDO::PARAM_INT);
      $sth->execute();
      $dbh->commit();
      $resp['msg'] = '出荷リーフの登録が完了しました。';
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
    }
    echo json_encode($resp);
    return true;
  }

  /***
   * 出荷引継ぎデータ取得
   */
  public static function searchED($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    $strSql = '';
    // 事前に枝番文字列を再連結
    $arr = explode(',', $sdat['ed_estimate_sub_no']);
    // 枝番部分のSQL文作成
    for ($i = 0; $i < count($arr); $i++) {
      if ($i === (count($arr) - 1)) {
        $strSql .= ':SUBNO' . ($i + 1);
      } else {
        $strSql .= ':SUBNO' . ($i + 1) . ',';
      }
    }
    
    try {
      $dbh->beginTransaction();
      // 締日、入金予定日取得は別途行う
      $sth = $dbh->prepare('
      SELECT e.*, ed.*, p.p_name, u.u_name, t.t_rate,
        par.ar_name AS ed_parrangement_name,
        t_rate AS sd_tax_rate,    
        TRIM(CAST(substring(CAST(e_remarks AS BINARY), 31) AS char)) AS e_remark_01,
        IF((ed.ed_quantity - ed.ed_qty_delivery) = 0, 0, (ed.ed_quantity - ed.ed_qty_delivery)) AS remain_qty,
        C_STATEMENT_RECIPE_SIGN AS s_print
        FROM estimatedetails AS ed
        LEFT JOIN estimate AS e ON e.e_belong_cd = ed.ed_belong_cd AND e.e_estimate_no = ed.ed_estimate_no
        LEFT JOIN product AS p ON p.p_belong_cd = ed.ed_belong_cd AND p.p_cd = ed.ed_p_cd 
        LEFT JOIN customer AS c ON c.c_customer_cd = e.e_customer_cd  
        LEFT JOIN tax AS t ON t.t_belong_cd = p.p_belong_cd AND t.t_cd = p.p_tax_rate_cd
        LEFT JOIN statement AS s ON ed.ed_belong_cd = s.s_belong_cd AND ed.ed_estimate_no = s.s_estimate_no AND ed.ed_shipment_sub_no = s.s_serial_no 
        LEFT JOIN unit AS u ON u.u_cd = p.p_unit_tran
        LEFT JOIN arrangement AS par ON ed.ed_belong_cd = par.ar_belong_cd AND  ed.ed_parrangement_cd = par.ar_sub_cd
      WHERE ed.ed_belong_cd = :BELONGCD 
        AND ed.ed_estimate_no = :ESTIMATENO 
        AND ed.ed_estimate_sub_no IN ( ' . $strSql .
        ' ) ORDER BY ed.ed_estimate_no, ed.ed_estimate_sub_no
      ;');
      $sth->bindValue(':BELONGCD', $sdat['e_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue(':ESTIMATENO', $sdat['e_estimate_no'], PDO::PARAM_STR);
      for ($i = 0; $i < count($arr); $i++) {
        $sth->bindValue(':SUBNO' . ($i + 1), $arr[$i], PDO::PARAM_STR);
      }
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      // 請求締日と入金予定日算出
      foreach ($result as &$record) {
        $record['ed_payment_close_date'] = self::getCustomerClosingDay('paymentday',$record['e_customer_cd'], $record['ed_desired_delivery_date'], $dbh);
        $record['ed_bill_close_date'] = self::getCustomerClosingDay('finalday',$record['e_customer_cd'], $record['ed_desired_delivery_date'], $dbh);
      } 
      
      $resp['result'] = $result;
      // $result = json_encode($sth->fetchAll(PDO::FETCH_ASSOC));
      echo json_encode($resp);
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
    // echo json_encode($resp);
  }

  /***
   * 複数条件での見積書データ検索
   */
  public static function searchEDMCond($dat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    $searchItem = '';
    $i = 0;
    try {
      // 検索条件は4つに限定しています…変わるときは変えてください
      foreach ($dat as $key) {
        if ($i === 0) {
          $searchItem = '(' . $key[$i][0] . ',' . $key[$i][1] . ',' . $key[$i][2] . ',' . $key[$i][3] .')';
        } else {
          $searchItem = $searchItem . ',(' . $key[$i][0] . ',' . $key[$i][1] . ',' . $key[$i][2] . ',' . $key[$i][3] . ')';
        }
        $i = $i + 1;
      } 

      $dbh->beginTransaction();
      $sth = $dbh->prepare('SELECT e.*, ed.*, p.*
      FROM estimatedetails AS ed
      LEFT JOIN estimate AS e ON e.e_belong_cd = ed.ed_belong_cd AND e.e_estimate_no = ed.ed_estimate_no
      LEFT JOIN product AS p ON p.p_belong_cd = ed.ed_belong_cd AND p.p_cd = ed.ed_p_cd 
      WHERE (ed.ed_belong_cd,ed.ed_estimate_no,ed.ed_estimate_sub_no,ed.ed_shipment_sub_no) IN :SERCHITEM
      ORDER BY ed.ed_belong_cd, ed.ed_estimate_no, ed.ed_estimate_sub_no, ed.ed_shipment_sub_no; 
      ');
      $sth->bindValue(':SERCHITEM', $searchItem, PDO::PARAM_STR);
      $sth->execute();
      $resp['results'] = $sth->fetchAll(PDO::FETCH_ASSOC);
      $dbh->commit();
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
    }
    echo json_encode($resp);
  }

  /**
   * 納品データ検索ダイアログ
   * 請求書データ登録＆削除機能付加
   * 納品済みかつ　見積DB請求対象かつ　納品DBで未請求のデータを検索
   * 中のSQLを修正する場合はmakeBillFileの請求書作成SQLも修正すること。
   */
  public static function searchStatementData($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    // 請求No
    $billNo = '';
    // 請求番号の連番部分
    $seqNo = 1;
    // 客先CD
    $customercd = '';
    // 請求番号変更フラグ
    $flg = 0;
    $billStr = '';
    try {
      $dbh->beginTransaction();
      // bill,billdetailsのデータ定義取得
      $columnsH = self::getColumnDefs('bill');
      $columnsD = self::getColumnDefs('billdetails');
      // 必要なデータをセット
      $belongCd = $_SESSION['companycd'];
      $updateAt = self::currentDate();
      $updateCD = $_SESSION['usercd'];

      if (self::checkNotSet($sdat['closeDate']) === false) {
        // '/'除く
        $sdat['closeDate'] = self::paddingDate($sdat['closeDate']);
        // // 請求番号の日付部分 yymmdd
        // $billStr = substr($sdat['closeDate'], 2, 6);
        // // 指定した締め日の請求書がすでに作成されている場合、請求番号の最大値を取得
        // $sth = $dbh->prepare('
        //   SELECT MAX(b_bill_no) AS maxno FROM bill
        //   WHERE b_bill_no LIKE :BILLNO
        // ;');
        // $sth->bindValue(':BILLNO', substr($sdat['closeDate'], 2, 6) . '%');
        // $sth->execute();
        // $no = $sth->fetchAll(PDO::FETCH_ASSOC);
        // if (self::checkNotSet($no[0]['maxno']) === true) {
        //   $seqNo = 1;
        // } else {
        //   $seqNo = (int)(substr($no[0]['maxno'], 6, 3) + 1);
        // }
        // 請求書をすでに発行しているデータは対象外とする。
        $strSql = 'SELECT 
            bd2.maxbillno,
            s.s_customer_cd AS b_customer_cd,
            b1.lastbillno AS b_before_bill_no, 
            b1.b_bill AS b_before_bill,
            0 AS b_final_sign,
            sd.sd_bill_close_date AS b_final_date,  
            0 AS b_receive,
              sd1.salesprice AS b_sales_price,
              sd1.salesprice*(CAST(t.t_rate AS SIGNED)/100) AS b_tax,
              0 AS b_tax_adjust,
            (sd1.salesprice + sd1.salesprice*(CAST(t.t_rate AS SIGNED)/100)) AS b_bill,
            "0" AS bd_dell_sign,
            s.s_customer_cd AS bd_customer_cd,
            sd.sd_e_estimate_no AS bd_estimate_no,
            sd.sd_statement_sub_no AS bd_st_details_no,
            sd.sd_estimate_sub_no AS bd_ed_details_no,
            sd.sd_shipment_sub_no AS bd_shipment_div,
            "00" AS bd_payment_div,
            s.s_customer_post_cd AS bd_customer_post_cd,
            s.s_customer_charge_cd AS bd_customer_charge_cd,
            s.s_salesman_cd AS bd_salesman_cd,
            s.s_estimate_date AS bd_order_date,
            s.s_desired_delivery_date AS bd_desired_delivery_date,
            p.p_name AS bd_product_name,
            sd.sd_p_name_supple AS bd_prod_summary,
            sd.sd_estimate_quantity AS bd_ed_quantity,
            sd.sd_unit_price AS bd_unit_price,
            sd.sd_price AS bd_price,
            sd.sd_cost AS bd_cost,
            IF(sd.sd_desired_delivery_date IS NULL, s.s_desired_delivery_date, sd.sd_desired_delivery_date) AS bd_dt_desired_delivery_date,
            IF(sd.sd_customer_order_no IS NULL, s.s_customer_order_no, sd.sd_customer_order_no) AS bd_dt_customer_order_no,
            sd.sd_customer_p_name AS bd_dt_customer_p_name,
            IF(sd.sd_delivery_cd IS NULL, s.s_delivery_cd, sd.sd_delivery_cd) AS bd_delivery_cd,
            sd.sd_prod_fin_date AS bd_prod_fin_date,
            sd.sd_shipment_date AS bd_shipment_date,
            sd.sd_qty_delivery AS bd_qty_delivery,
            sd.sd_delivery_price AS bd_delivery_price,
            sd.sd_tax AS bd_tax,
            sd.sd_deliv_create_date AS bd_deliv_create_date,
            sd.sd_bill_close_date AS bd_bill_close_date,
            (CAST(sd.sd_delivery_price AS SIGNED) + CAST(sd.sd_tax AS SIGNED)) AS bd_bill_price, 
            sd.sd_payment_close_date AS bd_payment_close_date,
            0 AS bd_payment_money,
            0 AS bd_payment_tax,
            0 AS bd_payment_sign,
            0 AS bd_payment_no,
            sd.sd_remarks AS bd_remarks
            FROM statementdetails AS sd
            LEFT JOIN statement AS s ON sd.sd_belong_cd = s.s_belong_cd
                AND sd.sd_e_estimate_no = s.s_estimate_no
                AND sd.sd_statement_sub_no = s.s_serial_no
            LEFT JOIN estimatedetails AS ed ON ed.ed_belong_cd = sd.sd_belong_cd
                AND ed.ed_estimate_no = sd.sd_e_estimate_no
                AND ed.ed_estimate_sub_no = sd.sd_estimate_sub_no
            LEFT JOIN estimate AS e ON e.e_belong_cd = sd.sd_belong_cd
                AND e.e_estimate_no = sd.sd_e_estimate_no
            LEFT JOIN product AS p ON p.p_belong_cd = sd.sd_belong_cd 
                AND  p.p_cd = sd.sd_p_cd
            LEFT JOIN tax AS t ON t.t_belong_cd = p.p_belong_cd 
                AND t.t_cd = p.p_tax_rate_cd
            LEFT JOIN  customer AS c ON c.C_CUSTOMER_CD = s.s_customer_cd 
            LEFT JOIN (SELECT *, MAX(b1.b_bill_no) AS lastbillno FROM bill AS b1 GROUP BY b1.b_belong_cd, b1.b_customer_cd) AS b1  ON 
                  b1.b_belong_cd = s.s_belong_cd AND b1.b_customer_cd = s.s_customer_cd
            LEFT JOIN ( SELECT *,  max(bd_bill_no) AS maxbillno, CAST(substr(max(bd_bill_no), 7, 9) AS SIGNED)
              FROM  billdetails
              WHERE bd_bill_no LIKE CONCAT(substr(bd_bill_close_date, 3,7), "%" )
              GROUP BY bd_bill_close_date) AS bd2 
			      ON bd2.bd_bill_close_date = sd.sd_bill_close_date
            LEFT JOIN (SELECT *,SUM(sd_delivery_price) AS salesprice FROM statementdetails AS sd1
              LEFT JOIN statement AS s1 ON sd1.sd_belong_cd = s1.s_belong_cd
                AND sd1.sd_e_estimate_no = s1.s_estimate_no
                AND sd1.sd_statement_sub_no = s1.s_serial_no
              GROUP BY s1.s_customer_cd ) AS sd1 ON 
                      sd1.s_belong_cd = s.s_belong_cd AND sd1.s_customer_cd = s.s_customer_cd ';
        // WHERE句作成 客先CDがない場合は抜く
        $strSql .= ' WHERE sd.sd_bill_create_date IS NULL AND sd.sd_deliv_create_date IS NOT NULL AND
                    sd.sd_shipment_date IS NOT NULL AND (CAST(sd.sd_bill_close_date AS SIGNED) <= :CLOSEDATE)';
        if ($sdat['customercd'] != null || $sdat['customercd'] != '') {
          $strSql .= ' AND s.s_customer_cd = :CUSTOMERCD ';
        }
        if ($sdat['customerpost'] != null || $sdat['customerpost'] != '') {
          $strSql .= ' AND s.s_customer_post_cd = :POSTCD ';
        }
        $strSql .= 'ORDER BY sd.sd_bill_close_date, s.s_customer_cd, sd.sd_deliv_create_date, s.s_estimate_no, s.s_serial_no,sd.sd_estimate_sub_no;';
        
        $sth = $dbh->prepare($strSql);
        $sth->bindValue(':CLOSEDATE', $sdat['closeDate'], PDO::PARAM_STR);
        if ($sdat['customercd'] != null || $sdat['customercd'] != '') {
          $sth->bindValue(':CUSTOMERCD', $sdat['customercd'], PDO::PARAM_STR);
        }
        if ($sdat['customerpost'] != null || $sdat['customerpost'] != '') {
          $sth->bindValue(':POSTCD', $sdat['customerpost'], PDO::PARAM_STR);
        }
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {
          // 該当レコードがあったらデータinsert
          foreach ($result as $record) {
            $flg = 0;
            // 必要なデータを付加
            $record['b_belong_cd'] = $belongCd;
            $record['b_update_at'] = $updateAt;
            $record['b_update_cd'] = $updateCD;
            $record['bd_belong_cd'] = $record['b_belong_cd'];
            $record['bd_update_at'] = $record['b_update_at'];
            $record['bd_update_cd'] = $record['b_update_cd'];
            if ($record['maxbillno'] == null && ($billStr == null || $billStr === '')) {
              $billStr = substr($record['b_final_date'], 2, 6);
              $seqNo = 1;
              $flg = 1;
            } else if ($billStr !== substr($record['b_final_date'], 2, 6)){
              $billStr = substr($record['b_final_date'], 2, 6);
              $seqNo = (int)substr($record['maxbillno'], 7, 3) + 1;
              $flg = 1;
            } 
            if ($customercd === '') {
              // 初回
              $billNo = $billStr . sprintf('%03d', $seqNo);
              $record['b_bill_no'] = $billNo;
              $record['bd_bill_no'] = $billNo;
              $customercd = $record['bd_customer_cd'];
              // ヘッダ
              $sth = $dbh->prepare(self::makeInsertSQL('bill', $columnsH));
              self::bindInsertKeys($sth, $columnsH, $record);
              $sth->execute();
            } else if ($customercd === $record['bd_customer_cd']) {
              // 請求番号調整
              $billNo = $billStr . sprintf('%03d', $seqNo);
              $record['b_bill_no'] = $billNo;
              $record['bd_bill_no'] = $billNo;
              if ($flg === 1) {
                // 請求締め日が都度の場合のみヘッダ挿入
                $sth = $dbh->prepare(self::makeInsertSQL('bill', $columnsH));
                self::bindInsertKeys($sth, $columnsH, $record);
                $sth->execute();
              }
            } else {
              // 請求書番号は、客先CD→納品番号の早い順に付与
              if ($flg === 0) {
                // 請求締日が同じで異なる客先の場合のみ連番インクリメント
                $seqNo += 1;
              }
              $billNo = $billStr . sprintf('%03d', $seqNo);
              $invoiceNo = $billStr . sprintf('%04d', $seqNo);
              $record['b_bill_no'] = $billNo;
              $record['bd_bill_no'] = $billNo;
              $bd_invoice_no = 'S' . $invoiceNo;
              $customercd = $record['bd_customer_cd'];
              // ヘッダ
              $sth = $dbh->prepare(self::makeInsertSQL('bill', $columnsH));
              self::bindInsertKeys($sth, $columnsH, $record);
              $sth->execute();
            }
            // 明細
            $sth = $dbh->prepare(self::makeInsertSQL('billdetails', $columnsD));
            self::bindInsertKeys($sth, $columnsD, $record);
            $sth->execute();
          
            // 前回請求データのフラグ更新
            $sth = $dbh->prepare('
            UPDATE bill
            SET b_final_sign = 1
            WHERE b_belong_cd = :BELONGCD AND b_customer_cd = :CCD AND b_bill_no = :BILLNO
            ;');
            $sth->bindValue(':BELONGCD', $record['b_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':CCD', $record['b_customer_cd'], PDO::PARAM_STR);
            $sth->bindValue(':BILLNO', $record['b_before_bill_no'], PDO::PARAM_STR);
          }
          // 登録処理したデータを再取得して帳票出力するため
          $dbh->commit();
        }
      }
      if (self::checkNotSet($sdat['deletebillno']) === false) {
        // 存在確認
        $sth = $dbh->prepare('
        SELECT * FROM billdetails 
        WHERE bd_belong_cd = :BELONGCD 
        AND bd_bill_no = :BILLNO
        ;');
        $sth->bindValue(':BELONGCD', $belongCd, PDO::PARAM_STR);
        $sth->bindValue(':BILLNO', $sdat['deletebillno'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {
          // 入金済みデータは削除不可
          if ($result['bd_payment_sign'] >= 1) {
            $dbh->rollBack();
            $resp['msg'] = '該当のデータはすでに入金されているため、削除できません。';
            $resp['succeed'] = false;
            echo json_encode($resp);
            return false;
          }
          // 請求書発行済みのデータならば見積書データのフラグをもとに戻す
          if (self::checkNotSet($result['bd_invoice_no']) === false) {
            // 納品書データのフラグクリア
            $sth = $dbh->prepare('
            UPDATE statementdetails AS sd
            SET sd_bill_create_date = :BDATE
            WHERE sd.sd_belong_cd = :BELONGCD AND
                  sd.sd_e_estimate_no = :ESTNO AND
                  sd.sd_statement_sub_no = :SDNO AND
                  sd.sd_estimate_sub_no = :ESTUBNO AND
                  sd.sd_shipment_sub_no = :SHIPNO
            ;');
            $sth->bindValue(':BDATE', 'NULL', PDO::PARAM_STR);
            $sth->bindValue(':BELONGCD', $belongCd, PDO::PARAM_STR);
            $sth->bindValue(':ESTNO', $result['bd_estimate_no'], PDO::PARAM_STR);
            $sth->bindValue(':ESTUBNO', $result['bd_ed_details_no'], PDO::PARAM_STR);
            $sth->bindValue(':SHIPNO', $result['bd_shipment_div'], PDO::PARAM_STR);
            $sth->execute();
            // 見積書データ
            $sth = $dbh->prepare('
            SELECT * FROM estimatedetails AS ed
            WHERE ed.ed_belong_cd = :BELONGCD AND
                  ed.ed_estimate_no = :ESTNO AND
                  ed.ed_estimate_sub_no = :ESTUBNO AND
                  ed.ed_shipment_sub_no = :SHIPNO
            ;');
            $sth->bindValue(':BELONGCD', $belongCd, PDO::PARAM_STR);
            $sth->bindValue(':ESTNO', $result['bd_estimate_no'], PDO::PARAM_STR);
            $sth->bindValue(':ESTUBNO', $result['bd_ed_details_no'], PDO::PARAM_STR);
            $sth->bindValue(':SHIPNO', $result['bd_shipment_div'], PDO::PARAM_STR);
            $sth->execute();
            $exData = $sth->fetchAll(PDO::FETCH_ASSOC);
            // 見積書データの請求データをクリア
            // ed_bill_price
            // ed_bill_sign
            // ed_bill_create_date
            $price = $exData['bd_price'] - $result['ed_bill_price'];
            $sign = self::setStatusSign('bill', (int)$exData['ed_price'], (int)$exData['ed_delivery_price'], (int)$price);
            $date = NULL;
            $sth = $dbh->prepare('
            UPDATE estimatedetails
            SET ed_bill_price = :PRICE AND
                ed_bill_sign = :SIGN AND
                ed_bill_create_date = :DATE
            WHERE ed.ed_belong_cd = :BELONGCD AND
                  ed.ed_estimate_no = :ESTNO AND
                  ed.ed_estimate_sub_no = :ESTUBNO AND
                  ed.ed_shipment_sub_no = :SHIPNO
            ');
            $sth->bindValue(':PRICE', $price, PDO::PARAM_STR);
            $sth->bindValue(':SIGN', $sign, PDO::PARAM_STR);
            $sth->bindValue(':DATE', $date, PDO::PARAM_STR);
            $sth->bindValue(':BELONGCD', $belongCd, PDO::PARAM_STR);
            $sth->bindValue(':ESTNO', $result['bd_estimate_no'], PDO::PARAM_STR);
            $sth->bindValue(':ESTUBNO', $result['bd_ed_details_no'], PDO::PARAM_STR);
            $sth->bindValue(':SHIPNO', $result['bd_shipment_div'], PDO::PARAM_STR);
            $sth->execute();
          }
          $sth = $dbh->prepare('
          DELETE FROM bill  
          WHERE b_belong_cd = :BELONGCD AND b_bill_no = :BILLNO
          ;');
          $sth->bindValue(':BELONGCD', $belongCd, PDO::PARAM_STR);
          $sth->bindValue(':BILLNO', $sdat['deletebillno'], PDO::PARAM_STR);
          $sth->execute(); 
           
          $sth = $dbh->prepare('
          UPDATE billdetails 
          SET bd_dell_sign = :DEL
          WHERE bd_belong_cd = :BELONGCD AND
                bd_bill_no = :BILLNO
          ;');
          $sth->bindValue(':DEL', '1', PDO::PARAM_STR);
          $sth->bindValue(':BELONGCD', $belongCd, PDO::PARAM_STR);
          $sth->bindValue(':BILLNO', $sdat['deletebillno'], PDO::PARAM_STR);
          $sth->execute();
          $dbh->commit();
          $resp['msg'] = '請求データ削除が完了しました。';
          $resp['succeed'] = true;
        }
      }

      echo json_encode($resp);
      // SELECT H1.*, DT.*, 
      //           E.ED_ORDER_SIGN,E.ED_END_SIGN, E.ED_STATEMENT_SIGN, E.ED_BILL_SIGN, E.ED_RECEIPT_MONEY_SIGN, EH.E_ORDER_DATE, 
      //           C.*,CP.CP_POST_NAME, CC.CC_CHARGE_NAME,U1.USER_NAME, NCP.CP_POST_NAME AS NAME_POST, 
      //           NS.S_CUSTOMER_CHARGE_ID, NU.USER_NAME AS NAME_USER, NCC.CC_CHARGE_NAME AS NAME_CC
      //     FROM statement As H1 JOIN statementdetails AS DT ON H1.S_STATEMENT_NO = DT.SD_STATEMENT_NO 
      //       LEFT JOIN estimatedetails  AS E  ON DT.SD_CUSTOMER_ID      = E.ED_CUSTOMER_ID      AND DT.SD_CUSTOMER_CD   = E.ED_CUSTOMER_CD 
      //                                       AND DT.SD_CUSTOMER_POST_ID = E.ED_CUSTOMER_POST_ID AND DT.SD_ESTIMATE_DATE = E.ED_ESTIMATE_DATE 
      //                                       AND DT.SD_SALESMAN_ID      = E.ED_SALESMAN_ID      AND DT.SD_SALESMAN_CD   = E.ED_SALESMAN_CD 
      //                                       AND DT.SD_ESTIMATE_SEQ_NO   = E.ED_ESTIMATE_SEQ_NO AND DT.SD_ESTIMATE_VER  = E.ED_ESTIMATE_VER 
      //                                       AND DT.SD_ESTIMATE_DETAILS_NO = E.ED_ESTIMATE_DETAILS_NO 
      //       LEFT JOIN estimate        AS EH  ON DT.SD_CUSTOMER_ID      = EH.E_CUSTOMER_ID      AND DT.SD_CUSTOMER_CD   = EH.E_CUSTOMER_CD 
      //                                       AND DT.SD_CUSTOMER_POST_ID = EH.E_CUSTOMER_POST_ID AND DT.SD_ESTIMATE_DATE = EH.E_ESTIMATE_DATE 
      //                                       AND DT.SD_SALESMAN_ID      = EH.E_SALESMAN_ID      AND DT.SD_SALESMAN_CD   = EH.E_SALESMAN_CD 
      //                                       AND DT.SD_ESTIMATE_SEQ_NO  = EH.E_ESTIMATE_SEQ_NO  AND DT.SD_ESTIMATE_VER  = EH.E_ESTIMATE_VER 
      //            JOIN customer          AS C ON H1.S_CUSTOMER_ID = C.C_CUSTOMER_ID              AND H1.S_CUSTOMER_CD = C.C_CUSTOMER_CD 
      //       LEFT JOIN customerpost     AS CP ON H1.S_CUSTOMER_ID = CP.CP_CUSTOMER_ID 
      //                                       AND H1.S_CUSTOMER_CD = CP.CP_CUSTOMER_CD  AND H1.S_CUSTOMER_POST_ID = CP.CP_POST_CD 
      //       LEFT JOIN customercharge AS CC   ON H1.S_CUSTOMER_ID = CC.CC_CUSTOMER_ID  AND H1.S_CUSTOMER_CD = CC.CC_CUSTOMER_CD 
      //                                       AND H1.S_CUSTOMER_POST_ID = CC.CC_POST_CD AND H1.S_CUSTOMER_CHARGE_ID = CC.CC_CHARGE_CD 
      //       LEFT JOIN user AS U1             ON H1.S_SALESMAN_ID = U1.USER_ID         AND H1.S_SALESMAN_CD = U1.USER_CD 
      //       LEFT JOIN customerpost AS NCP    ON DT.SD_CUSTOMER_ID = NCP.CP_CUSTOMER_ID
      //                                       AND DT.SD_CUSTOMER_CD = NCP.CP_CUSTOMER_CD AND DT.SD_CUSTOMER_POST_ID = NCP.CP_POST_CD
      //       LEFT JOIN statement AS NS        ON DT.SD_STATEMENT_NO = NS.S_STATEMENT_NO
      //       LEFT JOIN user AS NU             ON DT.SD_SALESMAN_ID = NU.USER_ID AND DT.SD_SALESMAN_CD = NU.USER_CD
      //       LEFT JOIN customercharge AS NCC  ON DT.SD_CUSTOMER_ID = NCC.CC_CUSTOMER_ID  AND DT.SD_CUSTOMER_CD = NCC.CC_CUSTOMER_CD
      //                                       AND DT.SD_CUSTOMER_POST_ID = NCC.CC_POST_CD AND NS.S_CUSTOMER_CHARGE_ID = NCC.CC_CHARGE_CD
      //     WHERE  E.ED_STATEMENT_SIGN = \'1\' AND E.ED_BILL_SIGN <> \'2\' AND DT.SD_BILL_SIGN = \'0\'
      //       AND H1.S_CUSTOMER_CD collate utf8_unicode_ci = :customercd
      //       AND H1.S_CUSTOMER_POST_ID collate utf8_unicode_ci = :customerpost
      //       AND DT.SD_STATEMENT_DATE >= :datefrom
      //       AND DT.SD_STATEMENT_DATE <= :dateto
      //     ORDER BY DT.SD_STATEMENT_DATE,DT.SD_CUSTOMER_ID,DT.SD_CUSTOMER_CD,DT.SD_CUSTOMER_POST_ID,DT.SD_ESTIMATE_DATE, DT.SD_SALESMAN_ID , DT.SD_SALESMAN_CD,
      //       DT.SD_ESTIMATE_SEQ_NO, DT.SD_ESTIMATE_VER, DT.SD_ESTIMATE_DETAILS_NO, DT.SD_ESTIMATE_DETAILS_NO
      // $sth->bindValue(':customercd', $sdat['customercd'], PDO::PARAM_STR);
      // $sth->bindValue(':customerpost', $sdat['customerpost'], PDO::PARAM_STR);
      // $sth->bindValue(':datefrom', $sdat['datefrom'], PDO::PARAM_STR);
      // $sth->bindValue(':dateto', $sdat['dateto'], PDO::PARAM_STR);
      // $sth->execute();
      // error_log($sth->queryString, "3", "C:/Apache24/htdocs/wbs/log/log_sono.txt");
      // $resp['results'] = $sth->fetchAll(PDO::FETCH_ASSOC);
      // $dbh->commit();
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }

  /*************************************************************************************************************
   * 請求書出力用データ取得　2023/4/26修正　※都度客先の入金データ検索期間は、前回請求～今回請求までとする。
   * $sdat: closeDate:客先締日, customercd:客先CD, billtypeusual:通常出力, billtyperyoki:リョーキ用出力
   */
  public static function makeBillFileData($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    $rsltCus = [];
    $results = [];
    $arCustomerCD = [];
    $strSQL = '';
    try {
      // 請求書発行の各フラグは、請求データ登録時にupdate済み
      // closedate：指定締日,customeroutputdate：決算用締日を文字列yyyymmddに変換
      $sdat['closeDate'] = self::paddingDate($sdat['closeDate']);

      // 該当する客先のデータを取得
      $strSQL = '
        SELECT 
            b1.b_customer_cd AS bd_customer_cd,
            b1.b_final_date AS thisclose,
            IF(b2.b_final_date IS NULL, (CAST(:CLOSEDATE1 AS DATE) - INTERVAL 1 MONTH)+0, b2.b_final_date) AS beforeclose,
            MAX(bd2.bd_payment_close_date) AS beforepaymentclose,
            b1.b_before_bill_no AS beforebillno,
            IF(c.C_FINALDAY IS NULL, "xx", c.C_FINALDAY) AS finalday
        FROM
            bill AS b1
        LEFT JOIN
            billdetails AS bd ON b1.b_customer_cd = bd.bd_customer_cd AND b1.b_bill_no = bd.bd_bill_no
        LEFT JOIN
            bill AS b2 ON b1.b_customer_cd = b2.b_customer_cd AND b1.b_before_bill_no = b2.b_bill_no
        LEFT JOIN 
            billdetails AS bd2 ON b1.b_customer_cd = bd2.bd_customer_cd AND b1.b_before_bill_no = bd2.bd_bill_no
        LEFT JOIN 
            customer AS c ON b1.b_customer_cd = c.C_CUSTOMER_CD
        WHERE
            b1.b_final_date = :CLOSEDATE2
      ';
      if (!self::checkNotSet($sdat['customercd'])) {
        // 客先指定
        $strSQL .= ' AND b1.b_customer_cd = :CUSCD GROUP BY b1.b_customer_cd;';
      } else {
        $strSQL .= ' GROUP BY b1.b_customer_cd ORDER BY b1.b_customer_cd;'; 
      }
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CLOSEDATE1', $sdat['closeDate'], PDO::PARAM_STR);
      $sth->bindValue(':CLOSEDATE2', $sdat['closeDate'], PDO::PARAM_STR);
      if (!self::checkNotSet($sdat['customercd'])) {
        $sth->bindValue(':CUSCD', $sdat['customercd'], PDO::PARAM_STR);
      }
      $sth->execute();
      $rsltCus = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($rsltCus) <= 0) {
        $resp['msg'] = '該当する客先がありませんでした。';
        $resp['succeed'] = false;
        return;
      }

      // 客先毎にデータ取得
      foreach ($rsltCus as $rec) {
        array_push($arCustomerCD, $rec['bd_customer_cd']);
        // 前回請求があったら、入金データ抽出対象とする
        if (!self::checkNotSet($rec['beforebillno'])) {
          // 2023/4/26 都度客先の入金データの検索条件の開始日付（前回請求締日～今回請求締日）を追加
          $thisClose = substr($rec['thisclose'], 0, 4) . "/" . substr($rec['thisclose'], 4, 2) . "/" . substr($rec['thisclose'], 6, 2);
          $thisClose = new DateTime($thisClose);
          if ($rec['finalday'] == "xx") {
            $beforeMDate = $rec['beforeclose'];
          } else if (substr($rec['thisclose'], 0, 6) == substr($rec['beforeclose'], 0, 6)) {
            // 入金データの開始年月（前回請求締日を取得）2023/07/04
            $beforeMDate = $rec['beforeclose'];
          } else if ((int)substr($rec['thisclose'], 6, 2) >= 28) {
            // 入金データの開始年月(指定日の前月末日を取得)
            $thisClose->modify('first day of last month');
            $beforeMDate = $thisClose->format('Ymt');
          } else {
            // 入金データの開始年月(指定日から1ヵ月前を取得)
            self::MonthShifter($thisClose, -1);
            $beforeMDate = $thisClose->format('Ymd');
          }
        } 

        $strSQL = '
          SELECT bd.bd_bill_no,
          bd.bd_customer_cd,
          bd.bd_customer_post_cd,
          bd.bd_customer_charge_cd,
          c.C_CUSTOMER_NAME AS companyname,
          IF(bd.bd_customer_post_cd <> "", cp.CP_ADDRESS_NO, c.C_ADDRESS_NO) AS addressno,
          IF(bd.bd_customer_post_cd <> "", cp.CP_ADDRESS_01, c.C_ADDRESS_01) AS address1,
          IF(bd.bd_customer_post_cd <> "", cp.CP_ADDRESS_02, c.C_ADDRESS_02) AS address2,
          cp.CP_POST_NAME AS postname, 
          cc.CC_CHARGE_NAME AS chargename,
          delv.CP_POST_NAME AS deliveryname,
          bd.bd_bill_close_date,
          bd.bd_payment_close_date,
          b.b_before_bill,
          b.b_before_bill_no,
          b.b_receive,
          0 AS adjust_price,
          b.b_sales_price,
          b.b_tax,
          b.b_bill,
          bd.bd_st_details_no,
          bd.bd_desired_delivery_date, 
          bd.bd_shipment_date,
          bd.bd_estimate_no,
          bd.bd_ed_details_no,
          bd.bd_shipment_div,
          bd.bd_payment_div,
          bd.bd_product_name,
          bd.bd_prod_summary,
          bd.bd_qty_delivery,
          bd.bd_unit_tran,
          bd.bd_unit_price,
          bd.bd_delivery_price,
          bd.bd_tax,
          bd.bd_dt_customer_order_no,
          bd.bd_delivery_cd,
          bd.bd_detail_remarks,
          CAST(bd.bd_bill_close_date AS  Date) AS writedate,
          ar.ar_name,
          s.s_customer_order_no,
          s.s_tc_short_name,
          s.s_title,
          s.s_remarks
          FROM billdetails AS bd
          LEFT JOIN bill AS b ON b.b_customer_cd = bd.bd_customer_cd  AND b.b_bill_no = bd.bd_bill_no
          LEFT JOIN customer c ON c.c_customer_cd = bd.bd_customer_cd
          LEFT JOIN customerpost AS cp ON cp.CP_CUSTOMER_CD = bd.bd_customer_cd AND cp.CP_POST_CD = bd.bd_customer_post_cd
          LEFT JOIN customerpost AS delv ON delv.CP_CUSTOMER_CD = bd.bd_customer_cd AND delv.CP_POST_CD = bd.bd_delivery_cd
          LEFT JOIN customercharge AS cc ON cc.CC_CUSTOMER_CD = bd.bd_customer_cd AND cc.CC_POST_CD = bd.bd_customer_post_cd AND cc.CC_CHARGE_CD = bd.bd_customer_charge_cd
          LEFT JOIN arrangement AS ar ON ar.ar_sub_cd = bd_parrangement_cd
          LEFT JOIN statement AS s ON s.s_estimate_no = bd_estimate_no AND s.s_serial_no = bd_st_details_no
          WHERE bd.bd_customer_cd = :CUSTOMERCD AND b.b_final_date = :CLOSEDATE AND bd_dell_sign = "0"
          UNION ALL
        ( SELECT 
          dp_no AS bd_bill_no,
          dp_customer_cd AS bd_customer_cd,
          "" AS bd_customer_post_cd,
          "" AS bd_customer_charge_cd,
          c.C_CUSTOMER_NAME AS companyname,
          c.C_ADDRESS_NO AS addressno,
          c.C_ADDRESS_01 AS address1,
          c.C_ADDRESS_02 AS address2,
          "" AS postname, 
          "" AS chargename,
          "" AS deliveryname,
          "" AS bd_bill_close_date,
          "" AS bd_payment_close_date,
          "" AS b_before_bill,
          "" AS b_before_bill_no,
          "" AS b_receive,
          0 AS adjust_price,
          "" AS b_sales_price,
          "" AS b_tax,
          "" AS b_bill,
          IF(dp_type = "Z1" OR dp_type = "Z2", concat("52", RIGHT(dp_type,1)) , concat("55", dp_type))  AS `bd_st_details_no`,
          dp_date,
          dp_date AS bd_shipment_date,
          dp_no,
          dp_sub_no AS bd_ed_details_no,
          "" AS bd_shipment_div,
          "" AS bd_payment_div,
          py2.py_name,
          dp.dp_memo AS bd_prod_summary,
          "" AS bd_qty_delivery,
          "" AS bd_unit_tran,
          0 AS bd_unit_price,
          dp_price,
          "" AS bd_tax,
          "" AS bd_dt_customer_order_no,
          "" AS bd_delivery_cd,
          dp_full_date AS bd_detail_remarks,
          "" AS writedate,
          "" AS ar_name,
          "" AS s_customer_order_no,
          "" AS s_tc_short_name,
          "" AS s_title,
          "" AS s_remarks
          FROM deposit AS dp
          LEFT JOIN payment AS py2 ON py2.py_cd = IF(dp_type = "Z1" OR dp_type = "Z2", concat("52", RIGHT(dp_type,1)) , concat("55", dp_type))
          LEFT JOIN customer c ON c.c_customer_cd = dp.dp_customer_cd
          WHERE dp_customer_cd = :CUSTOMERCD2 AND dp_del_flg <> "1" AND ';
        // 2023/03/14 入金データの検索条件の開始日付（前回請求締日～今回請求締日）
        // 2023/04/26 都度客先の条件を追加し、前回請求締日の日付を含める必要がある。
        if (!self::checkNotSet($rec['beforebillno'])) {
          if ($rec['finalday'] == "xx") {
            $strSQL .= ' (CAST(dp_date AS DATE) >= CAST(:FROMDATE AS DATE) AND  CAST(dp_date  AS DATE) <= CAST(:TODATE AS DATE))) ';
          } else {
            $strSQL .= ' (CAST(dp_date AS DATE) > CAST(:FROMDATE AS DATE) AND  CAST(dp_date  AS DATE) <= CAST(:TODATE AS DATE))) ';
          }
        } else {            
          $strSQL .= ' CAST(dp_date AS DATE) <= CAST(:TODATE AS DATE))';
        }       
        $strSQL .= ' ORDER BY  bd_customer_cd, bd_shipment_date, bd_estimate_no, bd_ed_details_no';
        $sth = $dbh->prepare($strSQL);

        $sth->bindValue(':CUSTOMERCD', $rec['bd_customer_cd'], PDO::PARAM_STR);
        $sth->bindValue(':CLOSEDATE', $rec['thisclose'], PDO::PARAM_STR);
        $sth->bindValue(':CUSTOMERCD2', $rec['bd_customer_cd'], PDO::PARAM_STR);
        // 2023/03/14 入金データの検索条件の開始日付（前回請求締日～今回請求締日）
        if (!self::checkNotSet($rec['beforebillno'])) {
          $sth->bindValue(':FROMDATE', $beforeMDate, PDO::PARAM_STR);
        }
        $sth->bindValue(':TODATE', $rec['thisclose'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        // 先に明細行に検索期間の入金データが含まれるかチェックする
        $paymentFlg = false;
        foreach($result as $rsltCheck) {
          if (substr($rsltCheck['bd_bill_no'], 0, 1) === 'N') {
            $paymentFlg = true;
            break;
          }
        }

        // 入金データで対象外のデータを集計する。
        $delPrice = 0;
        foreach($result as $rsltRec) {
          // 指定期間経過した入金データは、請求書に掲載しないため、前回請求額を調整する。
          if ($paymentFlg === false && substr($beforeMDate, 2, 6) > substr($rsltRec['b_before_bill_no'], 0, 6)) {
            // 分割入金のケースで、掲載or不掲載が分かれるものに関して精査する。
            if ((int)$rsltRec['b_before_bill'] === (int)$rsltRec['b_receive']) {
              $delPrice = (int)$rsltRec['b_before_bill'];
            } else {
              $delPrice = (int)$rsltRec['b_receive'];
            }
          }
          $rsltRec['b_before_bill'] = (int)$rsltRec['b_before_bill'] - $delPrice;
          array_push($results, $rsltRec);
        }

        // 2023/03/22 修正前バックアップ↓
        // // 以下の処理で前回請求締日～指定期間外までの入金データを明細に追加する
        // $addPaymentFlg = false;
        // if ($paymentFlg === true && $payment !== $lastMoney) {
        //   $addPaymentFlg = true;
        // }
        // if ($addPaymentFlg === true) {
        //   $sth = $dbh->prepare('
        //   SELECT 
        //   dp_no AS bd_bill_no,
        //   dp_customer_cd AS bd_customer_cd,
        //   "" AS bd_customer_post_cd,
        //   "" AS bd_customer_charge_cd,
        //   c.C_CUSTOMER_NAME AS companyname,
        //   c.C_ADDRESS_NO AS addressno,
        //   c.C_ADDRESS_01 AS address1,
        //   c.C_ADDRESS_02 AS address2,
        //   "" AS postname, 
        //   "" AS chargename,
        //   "" AS deliveryname,
        //   "" AS bd_bill_close_date,
        //   "" AS bd_payment_close_date,
        //   "" AS b_before_bill,
        //   "" AS b_before_bill_no,
        //   "" AS b_receive,
        //   0 AS adjust_price,
        //   "" AS b_sales_price,
        //   "" AS b_tax,
        //   "" AS b_bill,
        //   IF(dp_type = "Z1" OR dp_type = "Z2", concat("52", RIGHT(dp_type,1)) , concat("55", dp_type))  AS `bd_st_details_no`,
        //   dp_date,
        //   dp_date AS bd_shipment_date,
        //   dp_no AS bd_estimate_no,
        //   dp_sub_no AS bd_ed_details_no,
        //   "" AS bd_shipment_div,
        //   "" AS bd_payment_div,
        //   py2.py_name AS bd_product_name,
        //   "" AS bd_prod_summary,
        //   "" AS bd_qty_delivery,
        //   "" AS bd_unit_tran,
        //   0 AS bd_unit_price,
        //   dp_price AS bd_delivery_price,
        //   "" AS bd_tax,
        //   "" AS bd_dt_customer_order_no,
        //   "" AS bd_delivery_cd,
        //   dp_full_date AS bd_detail_remarks,
        //   "" AS writedate,
        //   "" AS ar_name,
        //   "" AS s_customer_order_no,
        //   "" AS s_tc_short_name,
        //   "" AS s_title,
        //   "" AS s_remarks
        //   FROM deposit AS dp
        //   LEFT JOIN payment AS py2 ON py2.py_cd = IF(dp_type = "Z1" OR dp_type = "Z2", concat("52", RIGHT(dp_type,1)) , concat("55", dp_type))
        //   LEFT JOIN customer c ON c.c_customer_cd = dp.dp_customer_cd
        //   WHERE dp_customer_cd = :CUSTOMERCD 
        //     AND dp_date > :FDATE 
        //     AND dp_date <= :TDATE
        //   ;');
        //   $sth->bindValue(':CUSTOMERCD', $rec['bd_customer_cd'], PDO::PARAM_STR);
        //   $sth->bindValue(':FDATE', $rec['beforeclose'], PDO::PARAM_STR);
        //   $sth->bindValue(':TDATE', $beforeMDate, PDO::PARAM_STR);
        //   $sth->execute();
        //   $rsltDepsit = $sth->fetchAll(PDO::FETCH_ASSOC);
          
        //   if (count($rsltDepsit) > 0) {

        //     foreach($rsltDepsit as $depsit) {
        //       // // 指定期間経過した入金データは、請求書に掲載しないため、前回請求額を調整する。
        //       // if ($paymentFlg === false && substr($beforeMDate, 2, 6) > substr($rsltRec['b_before_bill_no'], 0, 6)) {
        //       //   // 分割入金のケースで、掲載or不掲載が分かれるものに関して精査する。
        //       //   if ((int)$rsltRec['b_before_bill'] === (int)$rsltRec['b_receive']) {
        //       //     $delPrice = (int)$rsltRec['b_before_bill'];
        //       //   } else {
        //       //     $delPrice = (int)$rsltRec['b_receive'];
        //       //   }
        //       // }
        //       $depsit['bd_unit_price'] = "0.000";
        //       array_push($results, $depsit);
        //     }
        //   }
        // }
      }

      // 請求データの更新
      $dbh->beginTransaction();
      foreach ($results as $rec) {
        if (strpos($rec['bd_bill_no'], 'N') !== false) {
          // 入金データは無視する
          continue;
        }
        $sth = $dbh->prepare('
        UPDATE billdetails SET
        bd_invoice_no = CONCAT("S",bd_bill_no)
        WHERE bd_bill_close_date = :CLOSEDATE AND 
        bd_invoice_no = "" AND 
        bd_belong_cd = :BELONGCD AND 
        bd_bill_no = :BILLNO AND 
        bd_dell_sign = "0" AND 
        bd_customer_cd = :CUSTOMERCD AND 
        bd_estimate_no = :ESTNO AND 
        bd_st_details_no = :STNO AND 
        bd_ed_details_no = :ESTSUB AND 
        bd_shipment_div = :SHIPNO AND 
        bd_payment_div = "00" 
        ;');
        $sth->bindValue(':CLOSEDATE', $sdat['closeDate'], PDO::PARAM_STR);
        $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':BILLNO', $rec['bd_bill_no'], PDO::PARAM_STR);
        $sth->bindValue(':CUSTOMERCD', $rec['bd_customer_cd'], PDO::PARAM_STR);
        $sth->bindValue(':ESTNO', $rec['bd_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':STNO', $rec['bd_st_details_no'], PDO::PARAM_STR);
        $sth->bindValue(':ESTSUB', $rec['bd_ed_details_no'], PDO::PARAM_STR);
        $sth->bindValue(':SHIPNO', $rec['bd_shipment_div'], PDO::PARAM_STR);
        $sth->execute();
      }
      $dbh->commit();

      // エクセルファイル作成 複数シート
      BookMaker::createBillFile($arCustomerCD, $results, $deposit);      
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      // print_r($e);
    }
  }


  /**********************************************************************************************
   * 特殊請求書　ドットプリンター用出力
   */
  public static function makeBillDedicatedFileData($sdat) {
    $resp = array('succeed' => true, 'msg' => '');
    $dbh = self::dbPDO();
    $resultCus = [];
    $results = [];
    $depositData = [];
    $str = '';
    $str2 = '';
    $cnt = 0;
    $i = 1;   // コンテキスト
    
    $DESCRIBABLE_MONTH = 2; // 記載可能な入金データの検索開始日付。←ヵ月以前のデータは不掲載
    try {
      // 請求書発行の各フラグは、請求データ登録時にupdate済み
      // closedate,customeroutputdateを文字列yyyymmddに変換
      $sdat['closeDate'] = self::paddingDate($sdat['closeDate']);
      $sdat['customeroutputdate'] = self::paddingDate($sdat['customeroutputdate']);

      if (self::checkNotSet($sdat['customeroutputdate']) === false) {
        $sdat['closeDate'] = $sdat['customeroutputdate'];
      }
      
      $ryokiInfo = self::getRyokiInfo($dbh);

      // 該当する客先のデータを取得
      $strSQL = '
        SELECT  DISTINCT
            b1.b_customer_cd AS bd_customer_cd,
            b1.b_final_date AS thisclose,
            IF(b2.b_final_date IS NULL, (CAST(:CLOSEDATE1 AS DATE) - INTERVAL 1 MONTH)+0, b2.b_final_date) AS beforeclose,
            bd2.bd_payment_close_date AS beforepaymentclose,
            b1.b_before_bill_no AS beforebillno
        FROM
            bill AS b1
              LEFT JOIN
            billdetails AS bd ON b1.b_customer_cd = bd.bd_customer_cd
              AND b1.b_bill_no = bd.bd_bill_no
              LEFT JOIN
            bill AS b2 ON b1.b_customer_cd = b2.b_customer_cd
              AND b1.b_before_bill_no = b2.b_bill_no
              LEFT JOIN 
            billdetails AS bd2 ON b1.b_customer_cd = bd2.bd_customer_cd
              AND b1.b_before_bill_no = bd2.bd_bill_no
        WHERE
            b1.b_final_sign = "0" AND b1.b_final_date = :CLOSEDATE2 AND b1.b_customer_cd IN (
      ';

      foreach($ryokiInfo as $rec) {
        $cnt++;
        $strSQL .= ' :CUSCD' . (String)$cnt . ',';
      }
      $strSQL = substr($strSQL, 0, -1) . ')';

      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CLOSEDATE1', $sdat['closeDate'], PDO::PARAM_STR);
      $sth->bindValue(':CLOSEDATE2', $sdat['closeDate'], PDO::PARAM_STR);

      $cnt = 0;
      foreach($ryokiInfo as $rec) {
        $cnt++;
        $sth->bindValue(':CUSCD' . (String)$cnt, $rec['C_CUSTOMER_CD'], PDO::PARAM_STR);
      }
      $sth->execute();
      $rsltCus = $sth->fetchAll(PDO::FETCH_ASSOC);

      foreach ($rsltCus as $rec) {
        // 請求データ取得
        $strSql = '
        SELECT
        *,
        s.s_customer_order_no AS hdcustomerorderno,
        s.s_remarks AS hdremarks,
        delv.cp_POST_NAME AS s_delivery_name,
        cshipper.cp_POST_NAME AS s_shipper_name,
        cshipper.cp_ADDRESS_NO AS s_CP_ADDRESS_NO,
        cshipper.cp_ADDRESS_01 AS s_CP_ADDRESS_01,
        cshipper.cp_ADDRESS_02 AS s_CP_ADDRESS_02,
        cshipper.cp_TEL AS s_CP_TEL,
        cstay.cp_POST_NAME AS s_stay_name,
        t.t_rate AS bd_tax_rate,
        sd.sd_p_cd AS bd_p_cd,
        IF(bd_payment_sign > 1, bd_payment_close_date, "") AS bd_payment_date,
        p.p_name AS productname,
        ed.ed_sub_01 AS sub01,
        ed.ed_sub_02 AS sub02,
        ed.ed_sub_03 AS sub03,
        ed.ed_sub_04 AS sub04,
        ed.ed_sub_05 AS sub05,
        ed.ed_sub_06 AS sub06,
        ed.ed_sub_07 AS sub07,
        ed.ed_sub_08 AS sub08,
        ed.ed_sub_09 AS sub09,
        ed.ed_sub_10 AS sub10,
        ed.ed_sub_11 AS sub11,
        ed.ed_sub_12 AS sub12,
        ed.ed_sub_13 AS sub13,
        ed.ed_sub_num_03 AS wireno,
        ar_name,
        ed.ed_customer_p_name AS customerpname
        FROM billdetails AS bd 
        LEFT JOIN bill AS b ON 
          b.b_belong_cd = bd.bd_belong_cd AND 
          b.b_customer_cd = bd.bd_customer_cd AND
          b.b_bill_no = bd.bd_bill_no
        LEFT JOIN statementdetails AS sd ON
          bd.bd_belong_cd = sd.sd_belong_cd AND
          bd.bd_estimate_no = sd.sd_e_estimate_no AND
          bd.bd_st_details_no = sd.sd_statement_sub_no AND 
          bd.bd_ed_details_no = sd.sd_estimate_sub_no AND 
          bd.bd_shipment_div = sd.sd_shipment_sub_no
        LEFT JOIN statement AS s ON bd.bd_belong_cd = s.s_belong_cd AND
          bd.bd_estimate_no = s.s_estimate_no AND
          bd.bd_st_details_no = s.s_serial_no
        LEFT JOIN customer AS c ON c.c_customer_cd = b.b_customer_cd
        LEFT JOIN product AS p ON p.p_cd = sd.sd_p_cd
        LEFT JOIN tax AS t ON t.t_cd = p.p_tax_rate_cd
        LEFT JOIN customerpost AS cp ON cp.CP_CUSTOMER_CD = bd.bd_customer_cd AND cp.CP_POST_CD = bd.bd_customer_post_cd
        LEFT JOIN customerpost AS delv ON delv.CP_CUSTOMER_CD = bd.bd_customer_cd AND delv.CP_POST_CD = bd.bd_delivery_cd
        LEFT JOIN customerpost cshipper ON cshipper.CP_CUSTOMER_CD = s.s_customer_cd AND cshipper.CP_POST_CD = s.s_shipper_cd
        LEFT JOIN customerpost cstay ON cstay.CP_CUSTOMER_CD = s.s_customer_cd AND cstay.CP_POST_CD = s.s_stay_cd      
        LEFT JOIN estimatedetails as ed ON
          bd.bd_belong_cd = ed.ed_belong_cd AND
          bd.bd_estimate_no = ed.ed_estimate_no AND
          bd.bd_ed_details_no = ed.ed_estimate_sub_no
        LEFT JOIN estimate AS e ON e.e_belong_cd = ed.ed_belong_cd AND e.e_estimate_no = ed.ed_estimate_no
        LEFT JOIN arrangement AS ar ON ar.ar_sub_cd = ed_parrangement_cd
        LEFT JOIN user as us ON bd.bd_salesman_cd = us.USER_CD
        LEFT JOIN (
          SELECT *, COUNT(*) AS samecnt
          FROM estimatedetails
          GROUP BY ed_belong_cd, ed_estimate_no
        ) AS edcount ON ed.ed_belong_cd = edcount.ed_belong_cd AND ed.ed_estimate_no = edcount.ed_estimate_no
        WHERE 
        bd.bd_customer_cd = :CUSTOMERCD AND b.b_final_date = :CLOSEDATE AND
          b.b_final_sign = "0" AND bd_dell_sign = "0"
        ORDER BY  bd_shipment_date, bd_estimate_no, bd_ed_details_no';
        $sth = $dbh->prepare($strSql);

        $sth->bindValue(':CUSTOMERCD', $rec['bd_customer_cd'], PDO::PARAM_STR);
        $sth->bindValue(':CLOSEDATE', $rec['thisclose'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        foreach($result as $rsltRec) {
          array_push($results, $rsltRec);
        }

        // 自社情報取得
        $sth = $dbh->prepare('
        SELECT * FROM housecompany;');
        $sth->execute();
        $house = $sth->fetchAll(PDO::FETCH_ASSOC);

        // 対象入金番号取得
        $strSql = '
        SELECT DISTINCT bd_payment_no FROM billdetails AS bd
        LEFT JOIN bill AS b ON b.b_bill_no = bd.bd_bill_no
        WHERE b.b_final_date = :CLOSEDATE AND
        b.b_final_sign = "0" AND
        bd.bd_customer_cd = :CUSTOMERCD';
        $sth = $dbh->prepare($strSql);
        $sth->bindValue(':CLOSEDATE', $rec['thisclose'], PDO::PARAM_STR);
        $sth->bindValue(':CUSTOMERCD', $rec['bd_customer_cd'], PDO::PARAM_STR);
        $sth->execute();
        $resultsNo = $sth->fetchAll(PDO::FETCH_ASSOC);

        // 入金明細取得
        $cnt = 0;
        $str2 = '';
        foreach($resultsNo as $recDeposit) {
          $cnt++;
          $str2 .= ':PAYMENTNO' . (String)$cnt . ',';
        }
        $str2 = substr($str2, 0, -1);

        $strSQL = '
          SELECT *, cu.cu_name AS cuname FROM deposit AS dp
          LEFT JOIN currency AS cu ON cu.cu_cd = dp.dp_type
          WHERE dp_no IN (' . $str2 .
          ') ORDER BY dp_customer_cd, dp_no, dp_sub_no
        ;';
        $sth = $dbh->prepare($strSQL);

        $cnt = 0;
        foreach($resultsNo as $recDeposit) {
          $cnt++;
          $sth->bindValue(':PAYMENTNO' . (String)$cnt, $recDeposit['bd_payment_no'], PDO::PARAM_STR);
        }
        $sth->execute();
        $deposit = $sth->fetchAll(PDO::FETCH_ASSOC);
        
        foreach($deposit as $rsltRec) {
          array_push($depositData, $rsltRec);
        }
      }
     
      // エクセルファイル作成
      BookMaker::createBillFileForDedicated($results, $house, $depositData);

    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
    }
  }


  // 列定義を取得して返す
  private static function getColumnDefs($tbl) {
    $dbh = self::dbPDO();
    $sth = $dbh->prepare('SHOW COLUMNS FROM ' . $tbl);
    $sth->execute();
    $result = [];
    while ($data = $sth->fetch(PDO::FETCH_ASSOC)) {
      $result[] = (object) [
        'field' => $data['Field'],
        'type' => $data['Type'],
        'nullable' => $data['Null'],
        'pk' => $data['Key'],
        'extra' => $data['Extra'],
        'default' => $data['Default'],
      ];
    }
    return $result;
  }
  
  // ヘッダとして指定する
  private static function markAsHeaderPK($columns, $field) {
    foreach ($columns as $key => $key) {
      if ($columns[$key]->field === $field) {
        $columns[$key]->isHeaderPK = true;
        break;
      }
    }
  }

  // 更新対象列から外す
  private static function removeFromColumns($columns, $field) {
    foreach ($columns as $key => $key) {
      if ($columns[$key]->field === $field) {
        $offset = array_search($key, array_keys($columns), true);
        array_splice($columns, $offset, 1);
        break;
      }
    }
    return $columns;
  }

  // ヘッダーの値及び前回値を各明細行に代入する
  private static function setHeaderValueToDetails($datHeader, $datdetail, $fieldH, $fieldD) {
    foreach ($datdetail as $key => $key) {
      $datdetail[$key][$fieldD] = $datHeader[0][$fieldH];
      $datdetail[$key][$fieldD . '_PREVVAL'] = $datHeader[0][$fieldH . '_PREVVAL'];
    }
    return $datdetail;
  }

  // 削除対象として指定された行であるかを確認する
  private static function checkDeleteRowRequired($keyArray) {
    if (array_key_exists('isDeleted', (array)$keyArray)) {
      if ($keyArray['isDeleted'] === 'true' || $keyArray['isDeleted'] === true) {
        return true;
      }
    }
    return false;
  }

  private static function checkDeleteRowSD($record, $dbh) {
    $sth = $dbh->prepare('
    SELECT count(*) AS cnt FROM statementdetails
    WHERE sd_e_estimate_no = :ESTNO 
      AND sd_statement_sub_no = :SUBNO 
      AND sd_estimate_sub_no = :EDSUBNO
      AND sd_shipment_sub_no = :SHIPSUBNO
    ;');
    $sth->bindValue(':ESTNO', $record['sd_e_estimate_no'], PDO::PARAM_STR);
    $sth->bindValue(':SUBNO', $record['sd_statement_sub_no'], PDO::PARAM_STR);
    $sth->bindValue(':EDSUBNO', $record['sd_estimate_sub_no'], PDO::PARAM_STR);
    $sth->bindValue(':SHIPSUBNO', $record['sd_shipment_sub_no'], PDO::PARAM_STR);
    $sth->execute();
  }

  // ストアドプロシージャにより注文番号を採番して取得する
  private static function getOrderNoDispSQL($dbh, $kind, $custcd, $datest) {
    $sth = $dbh->prepare('SELECT getordernodisp(:kind, :custcd, :datest) AS ORDER_NUM');
    $sth->bindValue(':kind', $kind, PDO::PARAM_STR);
    $sth->bindValue(':custcd', $custcd, PDO::PARAM_STR);
    $sth->bindValue(':datest', $datest, PDO::PARAM_STR);
    $sth->execute();
    $result = $sth->fetchAll(PDO::FETCH_ASSOC);
    if (count($result) <= 0) {
      throw new Exception('Cannot execute stored function (getordernodisp)');
    }
    return $result[0]['ORDER_NUM'];
  }

  // 返答用のエラーメッセージを返す
  private static function getDBErrorMsg($e) {
    return 'データ登録時にエラーが発生しました。(' . self::getErrorInfoStr($e) . ')';
  }

  // データベース操作時のエラー情報を取得する
  private static function getErrorInfoStr($e) {
    switch ($e->errorInfo[0]) {
      case '22001':
        return 'データ長さ不一致';
      case '22003':
        return 'データ範囲超過';
      case '22007':
        return '日付指定不正';
      case '22023':
        return 'パラメータ誤り';
      case '22026':
        return '文字列長さ不一致';
      case '23000':
        return '整合性制約違反';
      case '25000':
        return 'トランザクション不正';
      default:
        return 'その他のエラー';
    }
  }

  /**
   * 請求明細について、消費税を含めた合計を計算して返す
   * @param array $headerItem 計算対象の請求書ヘッダ
   * @param array $items 計算対象の請求明細
   * @param string $sumway 消費税合算区分(C_INVOICE_TAX_SUM)
   * @param string $taxcalcway 税計算区分
   * @param float $taxrate 税率(0.00～1.00)
   * @return object 計算結果を格納したオブジェクト
   */
  private static function calcTaxSum($headerItem, $items, $sumway, $taxcalcway, $taxrate) {
    $tmpSum = 0;
    $tmpTax = 0;
    $gros = 0;
    $headerItem['B_BILL'] = 0;
    $headerItem['B_TAX'] = 0;
    switch ((string)$sumway) {
      case '0': //0:請求書単位
        // 請求書小計
        foreach ($items as $item) {
          if ($item['BD_MONEY']) {
            $tmpSum = $tmpSum + $item['BD_MONEY'];
          }
        }
        $headerItem['B_BILL'] = $tmpSum;
        // 消費税計算
        $headerItem['B_TAX'] = self::getTax($taxcalcway, $tmpSum, $taxrate);
        // 小計+消費税
        $gros = $headerItem['B_BILL'] + $headerItem['B_TAX'];
        break;
      case '1': //1:納品書合計
        $headerItem['B_BILL'] = 0;
        $headerItem['B_TAX'] = 0;
        foreach ($items as $item) {
          $item['isTaxCalced'] = false;
        }
        foreach ($items as $item) {
          if (self::checkNotSet($item['BD_STATEMENT_NO']) === true) {
            break;
          }
          if ($item['isTaxCalced'] === true) {
            continue;
          }
          foreach ($items as $item2) {
            if ($item2['isTaxCalced'] === true) {
              continue;
            }
            // 足しこみ
            if ($item2['BD_STATEMENT_NO'] === $item['BD_STATEMENT_NO']) {
              $tmpSum = $tmpSum + $item2['BD_MONEY'];
              $item2['isTaxCalced'] = true;
            }
          }
          // 納品毎小計
          $headerItem['B_BILL'] = $headerItem['B_BILL'] + $tmpSum;
          // 消費税計算
          $tmpTax = self::getTax($taxcalcway, $tmpSum, $taxrate);
          $headerItem['B_TAX'] = $headerItem['B_TAX'] + $tmpTax;
          $tmpSum = 0;
        }
        // 小計+消費税
        $gros = $headerItem['B_BILL'] + $headerItem['B_TAX'];
        break;
      case '2': //2:見積書合計
        // 配列を見積番号順にソートしておく
        foreach ($items as $key => $key) {
          $items[$key]['ESTIMATE_NO'] = $items[$key]['BD_CUSTOMER_CD'] +
            $items[$key]['BD_CUSTOMER_POST_ID'] +
            $items[$key]['BD_ESTIMATE_DATE'] +
            $items[$key]['BD_SALESMAN_CD'] +
            $items[$key]['BD_ESTIMATE_SEQ_NO'] +
            $items[$key]['BD_ESTIMATE_VER'];
        }
        usort($items, function ($a, $b) {
          if (strcmp($a['ESTIMATE_NO'], $b['ESTIMATE_NO']) === 0) {
            return 0;
          }
          return strcmp($a['ESTIMATE_NO'], $b['ESTIMATE_NO']) < 0 ? -1 : 1;
        });
        // 合計を取得
        $tmpEstimateNo = '';
        $headerItem['B_BILL'] = 0;
        $headerItem['B_TAX'] = 0;
        $tmpEstimateNo = null;
        $nextEstimateNo = '';
        foreach ($items as $item) {
          // 見積番号の最後の行=次行の見積番号と異なる
          if ($tmpEstimateNo === null) {
            $tmpEstimateNo = $item['ESTIMATE_NO'];
          }
          if ($tmpEstimateNo !== $nextEstimateNo) {
            // 見積毎小計
            $headerItem['B_BILL'] = $headerItem['B_BILL'] + $tmpSum;
            // 消費税計算
            $tmpTax = self::getTax($taxcalcway, $tmpSum, $taxrate);
            $headerItem['B_TAX'] = $headerItem['B_TAX'] + $tmpTax;
            $tmpSum = 0;
          }
          // 足しこみ
          $tmpSum = $tmpSum + $item['BD_MONEY'];
          $tmpEstimateNo = $item['ESTIMATE_NO'];
        }
        // 最終行(見積番号の最後の行=次行の見積番号と異なる)
        // 見積毎小計
        $headerItem['B_BILL'] = $headerItem['B_BILL'] + $tmpSum;
        // 消費税計算
        $tmpTax = self::getTax($taxcalcway, $tmpSum, $taxrate);
        $headerItem['B_TAX'] = $headerItem['B_TAX'] + $tmpTax;
        $tmpSum = 0;
        // 小計+消費税
        $gros = $headerItem['B_BILL'] + $headerItem['B_TAX'];
        break;
      case '3': //3:免税→無税と同様に処理
      case '4': //4:無税
        // '請求書小計
        foreach ($items as $item) {
          if (!self::checkNotSet($item['BD_MONEY'])) {
            $tmpSum = $tmpSum + $item['BD_MONEY'];
          }
        }
        $headerItem['B_BILL'] = $tmpSum;
        $headerItem['B_TAX'] = 0;
        // 小計+消費税
        $gros = $headerItem['B_BILL'] + $headerItem['B_TAX'];
        break;
      case '5': //5:明細見積単位→3+税
      case '6': //6:明細請求書単位→3+税
      case '7': //7:明細納品書(伝票)単位→3+税
        // 小計
        foreach ($items as $item) {
          if (!self::checkNotSet($item['BD_MONEY'])) {
            $tmpSum = $tmpSum + $item['BD_MONEY'];
            $headerItem['B_TAX'] = $headerItem['B_TAX'] + self::getTax($taxcalcway, $item['BD_MONEY'], $taxrate);
          }
        }
        $headerItem['B_BILL'] = $tmpSum;
        // 小計+消費税(0)
        $gros = $headerItem['B_BILL'];
        break;
    }
    return (object) [ 'header' => $headerItem, 'details' => $items, 'gros' => $gros, ];
  }

  /**
   * 消費税計算を行う
   * @param string $calcway 計算区分
   * @param int $calcsum 税計算対象の金額
   * @param float $taxrate 税率(0.00～1.00)
   * @return int 消費税額
   */
  private static function getTax($calcway, $calcsum, $taxrate) {
    switch ((string)$calcway) {
      case '0': //切捨て
        return floor($calcsum * $taxrate);
      case '1': //四捨五入
        return round($calcsum * $taxrate, 0);
      case '2': //切上げ
        return ceil($calcsum * $taxrate);
      default:
        //throw new Exception('calcway is invalid');
        error_log('calcway is invalid');
        return 0;
    }
  }

  /**
   * 自社マスタから、現在消費税率を小数として取得する
   * @param PDO dbh 使用中のPDO
   * @return float 税率(0.00～1.00)
   */
  private static function getTaxRate($dbh) {
    $sth = $dbh->prepare('SELECT * FROM housecompany');
    $sth->execute();
    $result = $sth->fetchAll(PDO::FETCH_ASSOC);
    if (count($result) <= 0) {
      throw new Exception('H_TAXRATE_CURRENT is not set');
    }
    return $result[0]['H_TAXRATE_CURRENT'] / 100.0;
  }

  /**
   * 指定項目値についてクライアントが値を設定しているかを確認する
   * @param string value 確認対象の値
   * @return boolean 値が設定されていない場合にtrue
   */
  private static function checkNotSet($key) {
    return !isset($key) || $key === '';
  }

  /**
   * 現在日の文字列を返す
   */
  public static function currentDate() {
    return (new DateTime('Now', new DateTimeZone('Asia/Tokyo')))->format('Ymd');
  }

    /**
   * 現在時刻の文字列を返す
   */
  public static function currentTime() {
    return (new DateTime('Now', new DateTimeZone('Asia/Tokyo')))->format('Hi');
  }


  public static function currentSecond() {
    $dateObj = DateTime::createFromFormat('0.u00 U', microtime());
    $dateObj->setTimeZone(new DateTimeZone('Asia/Tokyo'));
    return $dateObj->format('YmdHisu');
  }

  /**
   * 年月日から/を除く
   */
  private static function paddingDate($dat) {
    $strDate = $dat;
    // カレンダー選択の場合を考慮　年は4桁でないと登録処理を通らないため除外
    if (strpos($dat,'/')) {
      $arr = explode('/', $dat);
      if (mb_strlen($arr[1]) < 2) {
        // month
        $arr[1] = sprintf('%02d', $arr[1]);
      }
      if (mb_strlen($arr[2]) < 2) {
        // date
        $arr[2] = sprintf('%02d', $arr[2]);
      }
      $strDate = $arr[0] . $arr[1] . $arr[2];
    }
    return $strDate;
  }


  // 製造指示の存在確認　存在するもののレコード取得
  public static function existProdplan($dat) {
    $result = array();
    $dbh = self::dbPDO();
    try {
      $j = 0;
      for ($i = 0; $i < count($dat); $i++) {
        $sth = $dbh->prepare('SELECT *,
        SUBSTR(pd.pd_disp_order, 3, 1) AS pd_group_order,
        IF(ed.ed_sub_03 IS NULL OR ed.ed_sub_03="", "", "P") AS pd_ed_sub_03_str 
        FROM prodplans AS pd 
        LEFT JOIN estimatedetails AS ed ON ed.ed_belong_cd = pd.pd_belong_cd AND ed.ed_estimate_no  = pd.pd_e_estimate_no AND ed.ed_estimate_sub_no = pd.pd_e_estimate_sub_no 
        LEFT JOIN estimate AS e ON e.e_belong_cd = pd.pd_belong_cd AND e.e_estimate_no = pd.pd_e_estimate_no
        LEFT JOIN warehouse AS w ON w.w_cd = pd.pd_place_cd
        LEFT JOIN projects AS pj ON pj.id = pd.pd_proj_cd
        LEFT JOIN arrangement AS ar ON ar.ar_belong_cd = pd.pd_belong_cd AND ar.ar_cd = pd.pd_ar_cd 
        LEFT JOIN manufacture AS mn ON mn.mn_belong_cd = pd.pd_belong_cd AND mn.mn_cd = pd.pd_mn_cd
        LEFT JOIN product AS p ON p.p_belong_cd = pd.pd_belong_cd AND p.p_cd = pd.pd_p_cd
        WHERE pd_e_estimate_no = :ESTNO
        ;');
        // AND pd_e_estimate_sub_no = :SUBNO 編集の場合は指示番号のみでデータ取得し表示すべき
        $sth->bindValue(':ESTNO', $dat[$i]['ed_estimate_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = array_merge($result, $sth->fetchAll(PDO::FETCH_ASSOC));
        $j += 1;
      }
      echo json_encode($result);
    } catch (Exception $e) {
      throw $e;
    }
  }

  // 金網製造指示の存在確認　存在するもののレコード取得
  public static function existProdplansWire($dat) {
    $result = array();
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('
      SELECT * FROM prodplandetailsw AS pw
      WHERE pw.pw_belong_cd = :BELONGCD AND pw.pw_prod_plan_no = :PLANNO 
      ;');
      $sth->bindValue(':BELONGCD', $dat['pw_belong_cd'], PDO::PARAM_STR);
      $sth->bindValue(':PLANNO', $dat['pw_prod_plan_no'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      echo json_encode($result);
    } catch (Exception $e) {
      throw $e;
    }
  }

  /**
   * 該当見積データが納品書データに存在するか
   */
  public static function existStatement($sdat) {
    $result = array();
    $dbh = self::dbPDO();
    try {
      for ($i = 0; $i < count($sdat); $i++) {
        $sth = $dbh->prepare('
        SELECT 
            s.*,
            sd.*,
            ed.*,
            ed.ed_type_02 AS s_delivery_timing,
            sd.sd_bill_close_date AS s_bill_close_date,
            sd.sd_payment_close_date AS s_payment_plan_date
        FROM
            statementdetails AS sd
                LEFT JOIN
            statementdetails AS sdm ON sdm.sd_belong_cd = sd.sd_belong_cd
                AND sdm.sd_e_estimate_no = sd.sd_e_estimate_no
                AND sdm.sd_estimate_sub_no = sd.sd_estimate_sub_no
                AND sdm.sd_shipment_sub_no = sd.sd_shipment_sub_no
                AND CAST(sd.sd_statement_sub_no AS SIGNED) < CAST(sdm.sd_statement_sub_no AS SIGNED)
                LEFT JOIN
            statement AS s ON sd.sd_belong_cd = s.s_belong_cd
                AND sd.sd_e_estimate_no = s.s_estimate_no
                AND sd.sd_statement_sub_no = s.s_serial_no
                LEFT JOIN
            estimatedetails AS ed ON sd.sd_belong_cd = ed.ed_belong_cd
                AND sd.sd_e_estimate_no = ed.ed_estimate_no
                AND sd.sd_estimate_sub_no = ed.ed_estimate_sub_no
                WHERE
                sdm.sd_statement_sub_no IS NULL
                AND sd.sd_p_cd IS NOT NULL
                AND ed_belong_cd = :BELONG AND
                ed_estimate_no = :ESTNO AND
                ed_estimate_sub_no = :SUBNO AND
                ed_shipment_sub_no = :SHIPNO AND
                ed_delivery_sign = :DELIVFLG AND
                ed_type_03 = :ESTSIGN
        ;');
        $sth->bindValue(':BELONG', $_SESSION['companycd'], PDO::PARAM_STR);
        $sth->bindValue(':ESTNO', $sdat[$i]['ed_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $sdat[$i]['ed_estimate_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':SHIPNO', $sdat[$i]['ed_shipment_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':DELIVFLG', '2', PDO::PARAM_STR);
        $sth->bindValue(':ESTSIGN', '0', PDO::PARAM_STR);
        $sth->execute();
        $result = array_merge($result, $sth->fetchAll(PDO::FETCH_ASSOC));
      }
      echo json_encode($result);
    } catch (Exception $e) {
      throw $e;
    }
  }

  // 納品書連番取得
  public static function ajaxGetStatementSerialNo($dat) {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('SELECT MAX(s_serial_no) FROM statement 
      WHERE s_estimate_no = :ESTNNO
      ;');
      $sth->bindValue(':ESTNNO', $dat, PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      echo json_encode($result);
    } catch (Exception $e) {
      $dbh->rollBack();
    }
  }

  /**
   * リョーキさんの情報取得
   * 竹中金網専用
   */
  private static function getRyokiInfo($dbh) {
    try {
      $sth = $dbh->prepare('
      SELECT * FROM customer 
      WHERE c_customer_name LIKE :NAME
      ;');
      $sth->bindValue(':NAME', '%リョーキ%', PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      return $result;
    } catch (Exception $e) { 
      throw $e;
    }
  }

  /**
   * ステータスの数値セット　更新は上位で行う。
   * statement:$prevData:受注数, $currData:納品数, $afterData:出荷数
   * shipment:$prevData:受注数, $currData:出荷数, $afterData:使用しない
   * bill:$prevData:受注額, $currData:納品額, $afterData:請求額
   */
  private static function setStatusSign($process, $prevData, $currData, $afterData) {
    $flg = 0;
    // null変換並びに数値変換
    if (self::checkNotSet($prevData) === true) { 
      $prevData = 0;
    } else {
      $prevData = (int)$prevData;
    }
    if (self::checkNotSet($currData) === true) { 
      $currData = 0;
    } else {
      $currData = (int)$currData;
    }
    if (self::checkNotSet($afterData) === true) { 
      $afterData = 0;
    } else {
      $afterData = (int)$afterData;
    }
    switch ($process) {
      case 'statement':
        // $prevData:受注数, $currData:納品数, $afterData:出荷数
        // ０：未　　納品数＜出荷数
        // １：部分　納品数＝出荷数
        // 　　　　　and 出荷数＜受注数
        // ２：完了　納品数＝受注数 (納品数＝出荷数も追加)
        if ($prevData === $currData && $prevData === $afterData) {
          $flg = 2;
        } else if ($currData === $afterData && $afterData < $prevData) {
          $flg = 1; 
        } else if ($currData < $afterData) {
          $flg = 0;
        }
        return $flg;
      break;  
      case 'shipment':
        // $prevData:受注数, $currData:出荷数, $afterData:使用しない
        // ０：未　　出荷数＝0
        // １：部分　出荷数＜受注数
        // ２：完了　出荷数＝受注数
        if ($prevData === $currData) {
          $flg = 2;
        } else if ($currData < $prevData) {
          $flg = 1; 
        } else if ($currData === 0) {
          $flg = 0;
        }
        return $flg;
      break;
      case 'bill':
        // 請求書データのみ金額なので注意
        // $prevData:受注額, $currData:納品額, $afterData:請求額
        // ０：未　　請求額≠納品額
        // １：部分　請求額＝納品額
        // 　　　　　and 納品額≠受注額
        // ２：完了　請求額＝受注額
        if ($prevData === $afterData) {
          $flg = 2;
        } else if ( $afterData === $currData && $currData !== $prevData) {
          $flg = 1; 
        } else if ($currData !== $afterData) {
          $flg = 0;
        }
        return $flg;
      break;
    }
  }

  function mb_str_pad($input, $pad_length, $pad_string=" ", $pad_style=STR_PAD_RIGHT, $encoding="UTF-8") {
    $mb_pad_length = strlen($input) - mb_strlen($input, $encoding) + $pad_length;
    return str_pad($input, $mb_pad_length, $pad_string, $pad_style);
  }


  private static function sqlDateToStr($inStr) {
    // 年月日の各パーツを分割する
    preg_match( "/([0-9]*)-([0-9]*)-([0-9]*)/", $inStr, $data );
    if ( count($data) !== 4 ) {
      return $inStr;
    } 
    // 先頭0埋めでYYYYMMDD形式の日付文字列に変換する
    $outStr = sprintf( '%04.4d%02.2d%02.2d', $data[1], $data[2], $data[3] );
    return $outStr;
  }

  
  /**
   * 支払日・入金日・請求日の算出
   */
  private static function getPaymentDay($pay1, $pay2, $pay3, $pay4) {
    if (self::checkNotSet($pay1) === false) {
      return self::sqlDateToStr($pay1);
    } else if (self::checkNotSet($pay2) === false) {
      return self::sqlDateToStr($pay2);
    } else if (self::checkNotSet($pay3) === false)  {
      return self::sqlDateToStr($pay3);
    } else {
      return self::sqlDateToStr($pay4);
    }
  }

  /**
   * 請求日、支払日、入金日取得
   * $daytype: 請求日、支払日・入金日のどの日を取得するのか
   * $customercd: 客先CD
   * $keyDate: 起点となる日(納品日など)
   * $dbh: DB接続 
   */
  private static function getCustomerClosingDay($daytype, $customerCd, $keyDate, $dbh) { 
    $strDate = '';
    try {
      $sth = $dbh->prepare('
      SELECT *,
	      IF (C_INVOICE_SIGN = "0" OR C_INVOICE_SIGN = "" OR C_INVOICE_SIGN IS NULL OR  C_FINALDAY = "99" OR C_FINALDAY = "" OR C_FINALDAY IS NULL, :KEYDATE, "") AS finday1,
        IF (C_INVOICE_SIGN > 0, IF(C_FINALDAY IS NULL OR C_FINALDAY = "" OR C_FINALDAY >= 31, LAST_DAY(:KEYDATE1 ), ""), "") AS finday2,
        IF (C_INVOICE_SIGN > 0, IF(C_FINALDAY < SUBSTRING(:KEYDATE2, 7, 2), DATE_ADD(DATE_FORMAT(:KEYDATE3, CONCAT("%Y-%m-", C_FINALDAY) ),INTERVAL (C_INVOICE_SIGN + 1) MONTH), ""), "") AS finday3,
        IF (C_INVOICE_SIGN > 0, IF(C_FINALDAY >= SUBSTRING(:KEYDATE4, 7, 2), DATE_ADD(DATE_FORMAT(:KEYDATE5, CONCAT("%Y-%m-", C_FINALDAY)) ,INTERVAL C_INVOICE_SIGN MONTH), ""), "") AS finday4,
        IF (C_RECEPTION_PAYMENT_SIGN = "0" OR C_RECEPTION_PAYMENT_SIGN = "" OR C_RECEPTION_PAYMENT_SIGN IS NULL OR  C_RECEPTION_PAYMENT_DAY = "99" OR C_RECEPTION_PAYMENT_DAY = "" OR C_RECEPTION_PAYMENT_DAY IS NULL, :KEYDATE6, "") AS pday1,
        IF (C_RECEPTION_PAYMENT_SIGN > 0, IF(C_RECEPTION_PAYMENT_DAY IS NULL OR C_RECEPTION_PAYMENT_DAY = "" OR C_RECEPTION_PAYMENT_DAY >= 31, LAST_DAY( :KEYDATE7), ""), "") AS pday2,
        IF (C_RECEPTION_PAYMENT_SIGN > 0, IF(C_RECEPTION_PAYMENT_DAY < SUBSTRING( :KEYDATE8, 7, 2), DATE_ADD(DATE_FORMAT( :KEYDATE9, CONCAT("%Y-%m-", C_RECEPTION_PAYMENT_DAY) ),INTERVAL C_RECEPTION_PAYMENT_SIGN MONTH), ""), "") AS pday3,
        IF (C_RECEPTION_PAYMENT_SIGN > 0, IF(C_RECEPTION_PAYMENT_DAY >= SUBSTRING( :KEYDATE10, 7, 2), DATE_ADD(DATE_FORMAT( :KEYDATE11, CONCAT("%Y-%m-", C_RECEPTION_PAYMENT_DAY)) ,INTERVAL C_RECEPTION_PAYMENT_SIGN MONTH), ""), "") AS pday4
      FROM customer
      WHERE trim(C_CUSTOMER_ID) = :CUSCD1 AND 
      C_CUSTOMER_CD = :CUSCD2 
      ;');
      $sth->bindValue(':KEYDATE', $keyDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE1', $keyDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE2', $keyDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE3', $keyDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE4', $keyDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE5', $keyDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE6', $keyDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE7', $keyDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE8', $keyDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE9', $keyDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE10', $keyDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE11', $keyDate, PDO::PARAM_STR);
      $sth->bindValue(':CUSCD1', $customerCd, PDO::PARAM_STR);
      $sth->bindValue(':CUSCD2', $customerCd, PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($result) > 0) {
        switch ($daytype) {
          case 'finalday':
            // 請求日
            $strDate = self::getPaymentDay($result[0]['finday1'], $result[0]['finday2'], $result[0]['finday3'], $result[0]['finday4']);
            break;
          case 'paymentday':
            // 支払・入金日
            $strDate = self::getPaymentDay($result[0]['pday1'], $result[0]['pday2'], $result[0]['pday3'], $result[0]['pday4']);
            break;
          default:
            $strDate = '';
        }
      }
      return $strDate;
    } catch (Exception $e) {
      throw $e;
    }
  }

  /***
   * 該当客先の今月の締日取得
   * issueDate:yyyymmddの文字列
   * 99は即日。空白、NULL、31は末日。締日より前は、締日の月。締め日より後は、締日の月+1
   */
  private static function getCustomerFinalDay($issueDate, $customerCD, $dbh) {
    $dbh = self::dbPDO();
    $strDate = '';
    try {
      $sth = $dbh->prepare('
      SELECT 
      IF (C_FINALDAY = "99", DATE_FORMAT(:KEYDATE, "%Y-%m-%d"), "") AS finday1,
      IF (C_FINALDAY IS NULL OR C_FINALDAY = "" OR C_FINALDAY >= 31, LAST_DAY(:KEYDATE1), "") AS finday2,
      IF (C_FINALDAY < SUBSTRING(:KEYDATE2, 7, 2), DATE_ADD(DATE_FORMAT(:KEYDATE3, CONCAT("%Y-%m-", C_FINALDAY) ),INTERVAL 1 MONTH), "") AS finday3,
      IF (C_FINALDAY >= SUBSTRING(:KEYDATE4, 7, 2), CONCAT("%Y-%m-", C_FINALDAY), "") AS finday4
       FROM customer
      WHERE C_CUSTOMER_CD = :CUSTCD 
      ;');
      $sth->bindValue(':KEYDATE', $issueDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE1', $issueDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE2', $issueDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE3', $issueDate, PDO::PARAM_STR);
      $sth->bindValue(':KEYDATE4', $issueDate, PDO::PARAM_STR);
      $sth->bindValue(':CUSTCD', $customerCD, PDO::PARAM_STR);
      $sth->execute();
      $arData = $sth->fetchAll(PDO::PARAM_STR);
      if (count($arData) === 0) {
        // マスタになければクリティカルエラー
        throw new Exception('客先コードがマスタに登録されてません。');
      }
      $strDate = self::getPaymentDay($arData[0]['finday1'], $arData[0]['finday2'], $arData[0]['finday3'], $arData[0]['finday4']);
      return $strDate;
    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 入庫日で支払月をチェック
   * 客先によって異なるハズだが、支払処理で支払日は変更可なので、支払予定日として登録
   */
  private static function getMOPaymentDate($arrivalDate, $myDay) {
    $date = new DateTime(substr($arrivalDate, 0 , 4) . '-' . substr($arrivalDate, 4 , 2) . '-' .  $myDay);
    $date->modify('+1 months');
    $planDate = $date->format('Ymd');
    return $planDate;
    // // DBで計算した日付の月に支払日を合成
    // $planDate = substr($DBCalcDate, 0, 6) . $myDay;
    // if ($arrivalDate > $planDate) {
    //   // 支払予定日が入庫日より前だったら翌月に回す
    //   $date = new DateTime(substr($planDate, 0 , 4) . '-' . substr($planDate, 4 , 2) . '-' . substr($planDate, 6 , 2));
    //   $date->modify('+1 months');
    //   $planDate = $date->format('Ymd');
    // }
    // return $planDate;
  }

  // // 製造計画の採番 
  // // $sdat：新規レコードデータ
  // public static function getProdplanNo($dat) {
  //   $result = array();
  //   $dbh = self::dbPDO();
  //   try {
  //     $sth = $dbh->prepare('SELECT * FROM prodplans
  //     WHERE pd_belong_cd = :BELONGCD AND pd_prod_plan_no LIKE :PLANNO 
  //     ;');
  //     $sth->bindValue(':BELONGCD', $dat[0]['ed_estimate_no'], PDO::PARAM_STR);
  //     $sth->bindValue(':PLANNO', $dat[0]['ed_estimate_sub_no'], PDO::PARAM_STR);
  //     $sth->execute();
  //     $result = $sth->fetchAll(PDO::FETCH_ASSOC);
  //     echo json_encode($result);
  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }

  
  /**
   * 発注番号の連番取得
   * 削除レコードが加味されるよう、あえて履歴テーブルから最新番号取得
   */
  public static function ajaxGetMoedSerialNo() {
    $dbh = self::dbPDO();
    try {
      $str = self::currentDate();
      $sth = $dbh->prepare('
      SELECT MAX(substr(moed_order_no, 2, 10)) AS maxno FROM t_morderestimate
      WHERE moed_order_no LIKE :ORDERNO
      ;');
      $sth->bindValue(':ORDERNO', 'H' . substr($str, 2, 6) . '%', PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      echo json_encode($result);
    } catch (Exception $e) {
      $dbh->rollback();
    }
  }



  public static function readMasterBR() {
    $dbh = self::dbPDO();
    try {
      $sth = $dbh->prepare('SELECT * FROM product WHERE p_type_04 = "1";');
      $sth->execute();
    } catch (Exception $e) {
      $dbh->rollback();
    }
  }

  /**
   * 引数が空もしくは0だったら0を返し、0より大きい場合は数値を戻す
   */
  public static function setNumData($str) {
    try {
      
      if (self::checkNotSet($str) === true) {
        return 0;
      } else {
        return (int)$str;
      }
    } catch (Exception $e) {
      return 0;
    }
  }

  
  /**
   * 現品票再発行 2023/6/22：在庫品の現品票発行を利用のため、使用しない
   */
  // public static function reissueQR($sdat) {
  //   $dbh = self::dbPDO();
  //   $str = '';
  //   try {
  //     for ($i = 0; $i < count($sdat); $i++) {
  //       if ($i === 0) {
  //         continue;
  //       } 
  //       if ($str === '' ) {
  //         $str = '(' . $sdat['str' . ($i - 1)]  . ')';
  //       } else {
  //         $str .= ',(' . $sdat['str' . ($i - 1)]  . ')';
  //       }
  //     }

  //     $strSql = '
  //     SELECT *,
  //       cp.cp_post_name AS moed_maker_name,
  //       0 AS qrid
  //     FROM morderestimate AS moed
  //     LEFT JOIN customerpost AS cp 
  //       ON moed.moed_manufacture_cd = cp.CP_POST_CD AND moed.moed_customer_cd = cp.cp_customer_cd
  //     WHERE (moed_order_no, moed_sub_no, moed_accept_sub_no) IN ';
  //     $strSql .= '(' . $str . ')';
  //     $strSql .= 'ORDER BY moed_order_no, moed_sub_no, moed_accept_sub_no;';
  //     $sth = $dbh->prepare($strSql);
  //     $sth->execute();
  //     $result = $sth->fetchAll(PDO::FETCH_ASSOC);
  //     // QRデータ登録
  //     // QRIDにずれがないようにするために、リファレンス渡しで行う。注意。
  //     if (!self::insertQR($result, 'morder', $dbh)['result']) {
  //       // throw new Exception('データ登録失敗');
  //     }
  //     //現品票発行済みサイン「1」を登録
  //     $sth = $dbh->prepare('
  //     UPDATE morderestimate SET moed_type_05 = \'1\' WHERE (moed_order_no, moed_sub_no, moed_accept_sub_no) IN  (' . $str .')');
  //     $sth->execute();
  //     BookMaker::createMATLIDSheet($result);

  //   } catch (Exception $e) {
  //     // $dbh->rollback();
  //     throw $e;
  //   }
  // }


  /***
   * 在庫テーブルのアップデート
   * 現在debug用
   */
  // public static function updateStorageTable($sdat) {
  //   // $dbh = self::dbPDO();
  //   // try {
  //   //   $columnsT = self::getColumnDefs('storage');      
  //   //   self::markAsHeaderPK($columnsT, 'sr_w_cd');
  //   //   self::markAsHeaderPK($columnsT, 'sr_p_cd');
  //   //   self::markAsHeaderPK($columnsT, 'sr_sub_cd');
  //   //   self::markAsHeaderPK($columnsT, 'sr_type_subject');
  //   //   self::markAsHeaderPK($columnsT, 'sr_parrangement_cd');
      
  //   //   $dbh->beginTransaction();

  //   //   $sth = $dbh->prepare('SELECT * FROM product;');
  //   //   $sth->execute();
  //   //   $arr = $sth->fetchAll(PDO::FETCH_ASSOC);
      
  //   //   $sth = $dbh->prepare('SELECT * FROM warehouse;');
  //   //   $sth->execute();
  //   //   $arr2 = $sth->fetchAll(PDO::FETCH_ASSOC);


  //   //   // 製品マスタ、在庫マスタ登録分回
  //   //   foreach ($arr as $rec) {
  //   //     if ($rec['p_cd'] == '') {
  //   //       continue;
  //   //     }
  //   //     foreach ($arr2 as $rec2) {
  //   //       $record['sr_belong_cd'] = '001';
  //   //       $record['sr_cd'] = '0000';
  //   //       $record['sr_w_cd'] = $rec2['w_cd'];
  //   //       $record['sr_p_cd'] = $rec['p_cd'];
  //   //       if ($rec['p_type_subject'] === '1') {
  //   //         $record['sr_sub_01'] = $sdat[0]['ed_sub_01'];
  //   //         $record['sr_sub_02'] = $sdat[0]['ed_sub_02'];
  //   //         $record['sr_sub_03'] = $sdat[0]['ed_sub_03'];
  //   //         $record['sr_sub_04'] = $sdat[0]['ed_sub_04'];
  //   //         $record['sr_sub_05'] = $sdat[0]['ed_sub_05'];
  //   //         $record['sr_sub_06'] = $sdat[0]['ed_sub_06'];
  //   //         $record['sr_sub_07'] = '';
  //   //         $record['sr_sub_08'] = $sdat[0]['ed_sub_08'];
  //   //         $record['sr_sub_09'] = $sdat[0]['ed_sub_09'];
  //   //         $record['sr_sub_10'] = $sdat[0]['ed_sub_10'];
  //   //         $record['sr_sub_11'] = $sdat[0]['ed_sub_11'];
  //   //         $record['sr_sub_12'] = $sdat[0]['ed_sub_12'];
  //   //         $record['sr_sub_13'] = $sdat[0]['ed_sub_13'];
  //   //         $record['sr_sub_14'] = $sdat[0]['ed_lot_no'];
  //   //         $record['sr_sub_cd'] = self::storageSetPadding($sdat[0], true);
  //   //       } else if ($rec['p_type_subject'] === '4') {
  //   //         $sdat[0]['ed_sub_10'] = self::testrandom(15);
  //   //         $sdat[0]['ed_sub_11'] = self::testrandom(15);
  //   //         $sdat[0]['ed_sub_12'] = self::testrandom(5);
  //   //         $sdat[0]['ed_sub_13'] = self::testrandom(5);
  //   //         $sdat[0]['ed_sub_14'] = self::testrandom(20);
  //   //         $record['sr_sub_cd'] = self::teststorageSetPadding($sdat[0], true);
  //   //       } else {
  //   //         $sdat[0]['ed_sub_10'] = self::testrandom(15);
  //   //         $sdat[0]['ed_sub_11'] = self::testrandom(15);
  //   //         $sdat[0]['ed_sub_12'] = self::testrandom(5);
  //   //         $sdat[0]['ed_sub_13'] = self::testrandom(5);
  //   //         $sdat[0]['ed_sub_14'] = self::testrandom(20);
  //   //         $record['sr_sub_cd'] = self::teststorageSetPadding($sdat[0], true);
  //   //       }
  //   //       $record['sr_transfer_date'] = self::currentDate();
  //   //       $record['sr_prev_quantity'] = 0;
  //   //       $record['sr_prev_quantity_eval'] = 0;
  //   //       $record['sr_prev_price_eval'] = 0;
  //   //       $record['sr_quantity'] = 10;
  //   //       $record['sr_unit_cd'] = $rec['p_type_subject'] === null ? '本' : '枚';
  //   //       $record['sr_price_eval'] = 0;
  //   //       $record['sr_dimension'] = 0;
  //   //       $record['sr_weight'] = 0;
  //   //       $record['sr_fix_price_eval'] = 0;
  //   //       $record['sr_remarks'] = '';
  //   //       $record['sr_type_subject'] = $rec['p_type_subject'] === null ? '1' : $rec['p_type_subject'];
  //   //       $record['sr_parrangement_cd'] = $record['sr_type_subject'] === '1' ? '001' : '000';
  //   //       $record['sr_update_at'] = self::currentDate();
  //   //       $record['sr_update_cd'] = '999999';

  //   //       // 存在してたらパス　実際ではupdateする
  //   //       $sth = $dbh->prepare('
  //   //       SELECT * FROM storage WHERE sr_w_cd = :WCD AND sr_p_cd = :PCD AND sr_sub_cd = :SUBCD AND sr_type_subject = :TYPEC AND 
  //   //       sr_parrangement_cd = :ARCD;');
  //   //       $sth->bindValue(':WCD', $record['sr_w_cd'], PDO::PARAM_STR);
  //   //       $sth->bindValue(':PCD', $record['sr_p_cd'], PDO::PARAM_STR);
  //   //       $sth->bindValue(':SUBCD', self::storageSetPadding($sdat, true), PDO::PARAM_STR);
  //   //       $sth->bindValue(':TYPEC', $record['sr_type_subject'], PDO::PARAM_STR);
  //   //       $sth->bindValue(':ARCD', $record['sr_parrangement_cd'], PDO::PARAM_STR);
  //   //       $sth->execute();
  //   //       $result = $sth->fetchAll(PDO::FETCH_ASSOC);

  //   //       if (count($result) > 0) {
  //   //         continue;
  //   //       }
  //   //       $sth = $dbh->prepare(self::makeInsertSQL('storage', $columnsT));
  //   //       self::bindInsertKeys($sth, $columnsT, $record);
  //   //       $sth->execute();
  //   //     }   
  //   //   }  
      

  //   //   $dbh->commit(); 
    
  //     // foreach ($sdat as $rec) {
  //     //   if ($rec['ed_ar_cd'] == '') {
  //     //     continue;
  //     //   }
  //     //   $record['sr_belong_cd'] = '001';
  //     //   $record['sr_cd'] = '0000';
  //     //   $record['sr_w_cd'] = $rec['ed_warehouse_cd'];
  //     //   $record['sr_p_cd'] = $rec['ed_p_cd'];
  //     //   $record['sr_sub_cd'] = self::storageSetPadding($sdat, true);
  //     //   $record['sr_transfer_date'] = self::currentDate();
  //     //   $record['sr_prev_quantity'] = 0;
  //     //   $record['sr_prev_quantity_eval'] = 0;
  //     //   $record['sr_prev_price_eval'] = 0;
  //     //   $record['sr_quantity'] = $rec['ed_quantity'];
  //     //   $record['sr_unit_cd'] = 0;
  //     //   $record['sr_price_eval'] = 0;
  //     //   $record['sr_dimension'] = 0;
  //     //   $record['sr_weight'] = 0;
  //     //   $record['sr_fix_price_eval'] = 0;
  //     //   $record['sr_remarks'] = '';
  //     //   $record['sr_type_subject'] = '';
  //     //   $record['sr_parrangement_cd'] = '';
  //     //   $record['sr_update_at'] = self::currentDate();
  //     //   $record['sr_update_cd'] = '999999';

  //     //   // 存在してたらパス　実際ではupdateする
  //     //   $sth = $dbh->prepare('
  //     //   SELECT * FROM storage WHERE sr_w_cd = :WCD AND sr_p_cd = :PCD AND sr_sub_cd = :SUBCD
  //     //   ;');
  //     //   $sth->bindValue(':WCD', $rec['ed_warehouse_cd'], PDO::PARAM_STR);
  //     //   $sth->bindValue(':PCD', $rec['ed_p_cd'], PDO::PARAM_STR);
  //     //   $sth->bindValue(':SUBCD', self::storageSetPadding($sdat, true), PDO::PARAM_STR);
  //     //   $sth->execute();
  //     //   $result = $sth->fetchAll(PDO::FETCH_ASSOC);

  //     //   if (count($result) > 0) {
  //     //     continue;
  //     //   }
  //     //   $sth = $dbh->prepare(self::makeInsertSQL('storage', $columnsT));
  //     //   self::bindInsertKeys($sth, $columnsT, $record);
  //     //   $sth->execute();
  //     //   $dbh->commit();        
  //     // }
  //   // } catch (Exception $e) {
  //   //   $dbh->rollback();
  //   // }
  // }


  /**
   * paddingして文字列形成
   * deletelot:ロットNoを含まない場合=>true
   * 製品用
   */
  public static function storageSetPadding($ar, $deltelot = false) {
    $str = '';
    $num = 0;

    if (array_key_exists('ed_sub_01', $ar)) {
      if (isset($ar['ed_sub_01']) || $ar['ed_sub_01'] !== '') {  // 5桁
        $num = $ar['ed_sub_01'] * 10;
      } 
      $str .= str_pad((String)$num, 5, '0', STR_PAD_LEFT);
  
      $num = 0;
      if (isset($ar['ed_sub_02']) || $ar['ed_sub_02'] !== '') {  // 5桁
        $num = $ar['ed_sub_02'] * 10;
      } 
      $str .= str_pad((String)$num, 5, '0', STR_PAD_LEFT);
  
      $str .= str_pad((String)$ar['ed_sub_03'], 5, ' ', STR_PAD_RIGHT );
      
      $num = 0;
      if (isset($ar['ed_sub_04']) || $ar['ed_sub_04'] !== '') {  // 5桁
        $num = $ar['ed_sub_04'] * 10;
      } 
      $str .= str_pad((String)$num, 5, '0', STR_PAD_LEFT);
      $num = 0;
      if (isset($ar['ed_sub_05']) || $ar['ed_sub_05'] !== '') {  // 5桁
        $num = $ar['ed_sub_05'] * 10;
      } 
      $str .= str_pad((String)$num, 5, '0', STR_PAD_LEFT);
  
      $str .= str_pad((String)$ar['ed_sub_06'], 5, ' ', STR_PAD_RIGHT );
      
      // 受注データはsub07は見積計算番号に使用しているためスペース埋め
      $str .= str_pad('', 15, ' ', STR_PAD_RIGHT );
  
      // 8~10は仕入れ品については文字列が入る可能性があるので、右寄せに変更。スペース埋めとする
      // $num = 0;
      // if (isset($ar['ed_sub_08']) || $ar['ed_sub_08'] !== '') {  // 10桁
      //   $num = $ar['ed_sub_08'] * 10;
      // } 
      $str .= str_pad($ar['ed_sub_08'], 30, ' ', STR_PAD_RIGHT);
      // $num = 0;
      // if (isset($ar['ed_sub_09']) || $ar['ed_sub_09'] !== '') {  // 10桁
      //   $num = $ar['ed_sub_09'] * 10;
      // } 
      $str .= str_pad($ar['ed_sub_09'], 30, ' ', STR_PAD_RIGHT);
  
      // 10,11
      $str .= str_pad('', 15, ' ', STR_PAD_RIGHT );
      $str .= str_pad('', 15, ' ', STR_PAD_RIGHT );
  
      // 12,13は文字列も入るため 小数点含める形で文字列登録になるため、比較時に対応できるか確認の必要あり
      if ($ar['ed_sub_12'] === '0') {
        $str .= str_pad('', 5, ' ', STR_PAD_RIGHT );
      } else {
        $str .= str_pad((String)$ar['ed_sub_12'], 5, ' ', STR_PAD_RIGHT );
      }

      if ($ar['ed_sub_13'] === '0') {
        $str .= str_pad('', 5, ' ', STR_PAD_RIGHT );
      } else {
        $str .= str_pad((String)$ar['ed_sub_13'], 5, ' ', STR_PAD_RIGHT );
      }
  
  
      if (!$deltelot) {
        if ($ar['ed_lot_no'] !== '') {
          $str .= str_pad($ar['ed_lot_no'], 15, ' ', STR_PAD_RIGHT);
        } else {
          $str .= str_pad('', 15, ' ', STR_PAD_RIGHT);
        }
      }
    } else if (array_key_exists('moed_order_no', $ar)) {
      // 発注の場合
      if (isset($ar['moed_sub_01']) || $ar['moed_sub_01'] !== '') {  // 5桁
        $num = $ar['moed_sub_01'] * 10;
      } 
      $str .= str_pad((String)$num, 5, '0', STR_PAD_LEFT);
  
      $num = 0;
      if (isset($ar['moed_sub_02']) || $ar['moed_sub_02'] !== '') {  // 5桁
        $num = $ar['moed_sub_02'] * 10;
      } 
      $str .= str_pad((String)$num, 5, '0', STR_PAD_LEFT);
  
      $str .= str_pad((String)$ar['moed_sub_03'], 5, ' ', STR_PAD_RIGHT );
      
      $num = 0;
      if (isset($ar['moed_sub_04']) || $ar['moed_sub_04'] !== '') {  // 5桁
        $num = $ar['moed_sub_04'] * 10;
      } 
      $str .= str_pad((String)$num, 5, '0', STR_PAD_LEFT);
      $num = 0;
      if (isset($ar['moed_sub_05']) || $ar['moed_sub_05'] !== '') {  // 5桁
        $num = $ar['moed_sub_05'] * 10;
      } 
      $str .= str_pad((String)$num, 5, '0', STR_PAD_LEFT);
  
      $str .= str_pad((String)$ar['moed_sub_06'], 5, ' ', STR_PAD_RIGHT );
      // 7 コイル番号
      $str .= str_pad($ar['moed_sub_07'], 15, ' ', STR_PAD_RIGHT );
  
      // 8~10は仕入れ品については文字列が入る可能性があるので、右寄せに変更。スペース埋めとする
      // $str .= str_pad($ar['moed_sub_08'], 30, ' ', STR_PAD_RIGHT);
      // $str .= str_pad($ar['moed_sub_09'], 30, ' ', STR_PAD_RIGHT);
      $str .= str_pad($ar['moed_sub_08'], 30, ' ', STR_PAD_LEFT);
      $str .= str_pad($ar['moed_sub_09'], 30, ' ', STR_PAD_LEFT);
      // 10,11
      $str .= str_pad('', 15, ' ', STR_PAD_RIGHT );
      $str .= str_pad('', 15, ' ', STR_PAD_RIGHT );
  
      // 12,13
      $str .= str_pad((String)$ar['moed_sub_12'], 5, ' ', STR_PAD_RIGHT );
      $str .= str_pad((String)$ar['moed_sub_13'], 5, ' ', STR_PAD_RIGHT );
  
  
      if (!$deltelot) {
        if ($ar['moed_type_03'] !== '') {
          $str .= str_pad($ar['moed_type_03'], 15, ' ', STR_PAD_RIGHT);
        } else {
          $str .= str_pad('', 15, ' ', STR_PAD_RIGHT);
        }
      }
    } else if (array_key_exists('stc_report_no', $ar)) {
      // 受払実績

      if (isset($ar['stc_sub_01']) || $ar['stc_sub_01'] !== '') {  // 5桁
        $num = $ar['stc_sub_01'] * 10;
      } 
      $str .= str_pad((String)$num, 5, '0', STR_PAD_LEFT);
  
      $num = 0;
      if (isset($ar['stc_sub_02']) || $ar['stc_sub_02'] !== '') {  // 5桁
        $num = $ar['stc_sub_02'] * 10;
      } 
      $str .= str_pad((String)$num, 5, '0', STR_PAD_LEFT);
  
      $str .= str_pad((String)$ar['stc_sub_03'], 5, ' ', STR_PAD_RIGHT );
      
      $num = 0;
      if (isset($ar['stc_sub_04']) || $ar['stc_sub_04'] !== '') {  // 5桁
        $num = $ar['stc_sub_04'] * 10;
      } 
      $str .= str_pad((String)$num, 5, '0', STR_PAD_LEFT);
      $num = 0;
      if (isset($ar['stc_sub_05']) || $ar['stc_sub_05'] !== '') {  // 5桁
        $num = $ar['stc_sub_05'] * 10;
      } 
      $str .= str_pad((String)$num, 5, '0', STR_PAD_LEFT);
  
      $str .= str_pad((String)$ar['stc_sub_06'], 5, ' ', STR_PAD_RIGHT );
      // 7 コイル番号
      $str .= str_pad($ar['stc_sub_07'], 15, ' ', STR_PAD_RIGHT );
  
      // 8~10は仕入れ品については文字列が入る可能性があるので、右寄せに変更。スペース埋めとする
      if ($ar['stc_sub_08'] === 0) {
        $str .= str_pad('', 30, ' ', STR_PAD_RIGHT);
      } else {
        $str .= str_pad($ar['stc_sub_08'], 30, ' ', STR_PAD_RIGHT);
      }
      // $str .= str_pad($ar['stc_sub_08'], 30, ' ', STR_PAD_RIGHT);
      if ($ar['stc_sub_09'] === 0) {
        $str .= str_pad('', 30, ' ', STR_PAD_RIGHT);

      } else {

        $str .= str_pad($ar['stc_sub_09'], 30, ' ', STR_PAD_RIGHT);
      }
  
      // 10,11
      $str .= str_pad('', 15, ' ', STR_PAD_RIGHT );
      $str .= str_pad('', 15, ' ', STR_PAD_RIGHT );
  
      // 12,13
      if ($ar['stc_sub_12'] === 0) {
        $str .= str_pad('', 5, ' ', STR_PAD_RIGHT);
      } else {
        $str .= str_pad($ar['stc_sub_12'], 5, ' ', STR_PAD_RIGHT);
      }

      if ($ar['stc_sub_13'] === 0) {
        $str .= str_pad('', 5, ' ', STR_PAD_RIGHT);
      } else {
        $str .= str_pad($ar['stc_sub_13'], 5, ' ', STR_PAD_RIGHT);
      }
      // $str .= str_pad((String)$ar['stc_sub_12'], 5, ' ', STR_PAD_RIGHT );
      // $str .= str_pad((String)$ar['stc_sub_13'], 5, ' ', STR_PAD_RIGHT );
  
  
      if (!$deltelot) {
        if ($ar['stc_type_04'] !== '') {
          $str .= str_pad($ar['stc_type_04'], 15, ' ', STR_PAD_RIGHT);
        } else {
          $str .= str_pad('', 15, ' ', STR_PAD_RIGHT);
        }
      }
    }
    
    return $str;
  }

  /**
   * マスタ情報を取得
   */
  public static function readDropdownMaster() {
    $dbh = self::dbPDO();
    try {
      $result = array();

      // 単位マスタを取得
      $sth = $dbh->prepare('SELECT * FROM unit ORDER BY cast(u_row_order as signed);');
      $sth->execute();
      $result['unit'] = $sth->fetchAll(PDO::FETCH_ASSOC);

      // 加工内容マスタを取得
      $sth = $dbh->prepare('SELECT ar_sub_cd,ar_name FROM arrangement;');
      $sth->execute();
      $result['arrangement'] = $sth->fetchAll(PDO::FETCH_ASSOC);

      $sth  = $dbh->prepare('
      SELECT py_cd, py_name FROM payment
      WHERE py_cd < 120 OR (py_cd >= 210 AND py_cd < 520) OR (py_cd >= 610 AND py_cd < 630) OR py_cd >= 810
      ;');
      $sth->execute();
      $result['mstpayment'] = $sth->fetchAll(PDO::FETCH_ASSOC);


      // 材質マスタ
      $sth = $dbh->prepare('
      SELECT m_cd, m_name FROM material
      ORDER BY m_cd ASC
      ;');
      $sth->execute();
      $result['mstmaterial'] = $sth->fetchAll(PDO::FETCH_ASSOC);

      // 小分類マスタ
      $sth = $dbh->prepare('
      SELECT CONCAT(prc_cat_01_cd, prc_cat_02_cd, prc_cat_03_cd) AS prc_cat_cd, prc_name FROM productcategory 
      WHERE prc_cd = "3" AND prc_cat_01_cd IN ("01", "02", "03") AND prc_name <> ""
      ;');
      $sth->execute();
      $result['mstpcategory03'] = $sth->fetchAll(PDO::FETCH_ASSOC);


      // 工程コード　加工詳細追加用
      $sth = $dbh->prepare('
      SELECT pc_cd, pc_name FROM process
      WHERE pc_cd >= 30
      ;');
      $sth->execute();
      $result['mstprocess'] = $sth->fetchAll(PDO::FETCH_ASSOC);

      echo json_encode($result);
    } catch(Exception $e) {
      throw $e;
    }
  }

  /**
   * オブジェクト配列の指定キーの値毎に、指定カラムの数値を集計
   */
  private static function arrayAggregation($field, $field2, $sumField, $arr) {
    $groups = [];
    foreach ($arr as $rec) {
      // 枝番が同じレコードの取引数量の和を計算
      if (isset($groups[$rec[$field] . $rec[$field2]])) {
        $groups[$rec[$field] . $rec[$field2]] += $rec[$sumField];
      } else {
        $groups[$rec[$field] . $rec[$field2]] = $rec[$sumField];
      }
    }
    return $groups;
  }


  private static function setNumberData($str) {
    if (self::checkNotSet($str) === true) {
      return 0;
    } else {
      return (float)$str;
    }
  }

  private static function setFloatData($str) {
    if (self::checkNotSet($str) === true) {
      return 0.0;
    } else {
      return (float)$str;
    }
  }

  public static function readUserInfo() {
    $dbh = self::dbPDO();
    try {
      $result = array();
      $sth = $dbh->prepare('
      SELECT USER_CD, pm.* FROM user
      LEFT JOIN permissions AS pm ON pm.PERMISSION_ID = USER_PERMISSION_ID
      WHERE USER_CD = :USERCD
      ;');
      $sth->bindValue(':USERCD', $_SESSION['usercd'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);
      echo json_encode($result);
      return;
    } catch (Exception $e) {
      throw $e;
    }
  }

  /***
   * 一覧画面のデータ表示、非表示を変更
   * sdat:選択データ
   * mode：true→データ表示、false→データ非表示
   * タブの種類（NumberListED, NumberListMODなど）
   */
  public static function updateVisibleFlg($sdat, $mode, $gridname) {
    $resp = array('succeed' => true, 'msg' => '');   
    $result = [];
    $columns = [];
    $flg = 0;

    $dbh = self::dbPDO();
    try {
      $flg = $mode ? 0 : 1;
      $dbh->beginTransaction();
      switch ($gridname) {
        // 番号一覧 見積書
        case 'NumberListED':
          $columns = self::getColumnDefs('estimate');
          foreach ($sdat as $rec) {
            $sth = $dbh->prepare('
            SELECT * FROM estimate 
            WHERE e_belong_cd = :BELONGCD AND e_estimate_no = :ESTNO
            ;');
            $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
            $sth->bindValue(':ESTNO', $rec['e_estimate_no'], PDO::PARAM_STR);
            $sth->execute();
            $result = $sth->fetchAll(PDO::FETCH_ASSOC);
            if (count($result) <= 0) {
              continue;
            }

            $rec['e_type_continue'] = $flg;
            $sth = $dbh->prepare(self::makeUpdateSQL('estimate', $columns));
            self::bindValueToUpdate($sth, $columns, $rec);
            $sth->execute();
          }
          break;
        // 番号一覧 発注書
        case 'NumberListMOD':
          $columns = self::getColumnDefs('morderestimate');
          foreach ($sdat as $rec) {
            $sth = $dbh->prepare('
            SELECT * FROM morderestimate 
            WHERE moed_belong_CD = :BELONGCD AND moed_order_no = :ORDERNO
            ;');
            $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
            $sth->bindValue(':ORDERNO', $rec['moed_order_no'], PDO::PARAM_STR);
            $sth->execute();
            $result = $sth->fetchAll(PDO::FETCH_ASSOC);
            if (count($result) <= 0) {
              continue;
            }    

            $sth = $dbh->prepare('UPDATE morderestimate SET moed_type_continue = :TYPE WHERE moed_belong_CD = :BELONGCD AND moed_order_no = :ORDERNO;');
            $sth->bindValue(':TYPE', $flg, PDO::PARAM_STR);
            $sth->bindValue(':BELONGCD', $rec['moed_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':ORDERNO', $rec['moed_order_no'], PDO::PARAM_STR);
            $sth->execute();
          }
          break;
          
          // 番号一覧 出荷予定
          case 'NumberListSD':
            $columns = self::getColumnDefs('statement');
            foreach ($sdat as $rec) {
              $sth = $dbh->prepare('
              SELECT * FROM statement 
              WHERE s_belong_cd = :BELONGCD AND s_estimate_no = :ESTNO AND s_serial_no = :SERIALNO
              ;');
              $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
              $sth->bindValue(':ESTNO', $rec['s_estimate_no'], PDO::PARAM_STR);
              $sth->bindValue(':SERIALNO', $rec['s_serial_no'], PDO::PARAM_STR);
              $sth->execute();
              $result = $sth->fetchAll(PDO::FETCH_ASSOC);
              if (count($result) <= 0) {
                continue;
              }    
  
              $sth = $dbh->prepare('UPDATE statement SET s_type_continue = :TYPE WHERE s_belong_cd = :BELONGCD AND s_estimate_no = :ESTNO;');
              $sth->bindValue(':TYPE', $flg, PDO::PARAM_STR);
              $sth->bindValue(':BELONGCD', $rec['s_belong_cd'], PDO::PARAM_STR);
              $sth->bindValue(':ESTNO', $rec['s_estimate_no'], PDO::PARAM_STR);
              $sth->execute();
            }
            break;
            // 番号一覧 請求書
        case 'NumberListBD':
          $columns = self::getColumnDefs('bill');
          foreach ($sdat as $rec) {
            $sth = $dbh->prepare('
            SELECT * FROM bill 
            WHERE b_belong_cd = :BELONGCD AND b_customer_cd = :CUSTOMERCD AND b_bill_no = :BILLNO
            ;');
            $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
            $sth->bindValue(':CUSTOMERCD', $rec['b_customer_cd'], PDO::PARAM_STR);
            $sth->bindValue(':BILLNO', $rec['b_bill_no'], PDO::PARAM_STR);
            $sth->execute();
            $result = $sth->fetchAll(PDO::FETCH_ASSOC);
            if (count($result) <= 0) {
              continue;
            }

            $sth = $dbh->prepare('UPDATE bill SET b_type_continue = :TYPE WHERE b_belong_cd = :BELONGCD AND b_bill_no = :BILLNO;');
            $sth->bindValue(':TYPE', $flg, PDO::PARAM_STR);
            $sth->bindValue(':BELONGCD', $rec['b_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':BILLNO', $rec['b_bill_no'], PDO::PARAM_STR);
            $sth->execute();
          }
          break;
        default:
          break;
      }
      $dbh->commit();
      echo json_encode($resp); 
    } catch (Exception $e) {
      $dbh->rollBack();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp); 
      return $e;
    }
  }


  public static function readNumberData($gridName, $mode) {
    $result = [];
    $flg = 0;
    $dbh = self::dbPDO();

    try {
      $flg = $mode ? 0 : 1;

      switch ($gridName) {
        case 'NumberListED':
          $sth = $dbh->prepare('
          SELECT e.*, ed.*, p.*, 
          C_CUSTOMER_NAME AS e_customer_name,
          IF(e.e_remarks = "STONE" OR e.e_remarks = "Takenaka Wire Cloth Co,.Ltd" OR e.e_remarks = "竹中金網 株式会社", e.e_remarks, "") AS e_remarks,
          IF(e.e_remarks <> "STONE" AND e.e_remarks <> "Takenaka Wire Cloth Co,.Ltd" AND e.e_remarks <> "竹中金網 株式会社", e.e_remarks, "") AS e_remarks_1,
          LEFT(ed.ed_sub_07, 1) AS calcno,
          IF(e_desired_delivery_date IS NULL OR e_desired_delivery_date = "", "", e_desired_delivery_date) AS e_desired_delivery_date,
          IF(e.e_estimate_date <> "", "1", "0") AS e_estimate_sign,
          ed.ed_type_02 AS e_delivery_timing,
          ed.ed_type_07 AS ed_type_moed,
          IF(ed.ed_deliv_create_date IS NOT NULL, "1", "0") AS ed_statement_sign,
          p.p_name AS ed_p_name,
          p.p_name AS productname,
          ed.ed_sub_01 AS sub01,
          ed.ed_sub_02 AS sub02,
          ed.ed_sub_03 AS sub03,
          ed.ed_sub_04 AS sub04,
          ed.ed_sub_05 AS sub05,
          ed.ed_sub_06 AS sub06,
          ed.ed_sub_07 AS sub07,
          ed.ed_sub_08 AS sub08,
          ed.ed_sub_09 AS sub09,
          ed.ed_sub_10 AS sub10,
          ed.ed_sub_11 AS sub11,
          ed.ed_sub_12 AS sub12,
          ed.ed_sub_13 AS sub13,
          ed.ed_sub_num_03 AS wireno,
          ar_name,
          ed.ed_customer_p_name AS customerpname,
          IF(ed.ed_sub_num_03 > 0, TRUNCATE(ed.ed_sub_num_03, 0), "") AS pd_ed_wire_no,
          IF(ed.ed_sub_num_03 > 0, TRUNCATE(ed.ed_sub_num_03, 0), "") AS ed_sub_num_03,
          IF (ed.ed_sub_03 = 1, "P", " ") AS ed_sub_03_str,
          edcount.samecnt AS ed_same_no_count,
          CASE WHEN edcount.samecnt = labelissuecount.labelissuecnt THEN \'1\'
          ELSE \'0\' END AS label_issue, 
          cp.CP_POST_NAME AS e_delivery_name
          FROM estimatedetails AS ed
          LEFT JOIN estimate AS e ON e.e_belong_cd = ed.ed_belong_cd AND e.e_estimate_no = ed.ed_estimate_no
          LEFT JOIN product AS p ON p.p_belong_cd = ed.ed_belong_cd AND p.p_cd = ed.ed_p_cd 
          LEFT JOIN CUSTOMER AS C ON e.e_customer_cd = C.C_CUSTOMER_CD
          LEFT JOIN arrangement AS ar ON ar.ar_sub_cd = ed_parrangement_cd
          LEFT JOIN customerpost AS cp ON e.e_customer_cd = cp.CP_CUSTOMER_ID AND e.e_customer_cd = cp.CP_CUSTOMER_CD AND e.e_delivery_cd = cp.CP_POST_CD
          LEFT JOIN (
            SELECT *, COUNT(*) AS samecnt
            FROM estimatedetails
            GROUP BY ed_belong_cd, ed_estimate_no
          ) AS edcount ON ed.ed_belong_cd = edcount.ed_belong_cd AND ed.ed_estimate_no = edcount.ed_estimate_no
          LEFT JOIN (
            SELECT *, COUNT(*) AS labelissuecnt
            FROM estimatedetails
            WHERE ed_type_08 = \'1\'
            GROUP BY ed_belong_cd, ed_estimate_no
          ) AS labelissuecount ON ed.ed_belong_cd = labelissuecount.ed_belong_cd AND ed.ed_estimate_no = labelissuecount.ed_estimate_no
          WHERE e_type_continue = :TYPE
          ORDER BY e.e_estimate_no DESC, ed.ed_estimate_sub_no ASC 
          LIMIT ' . self::setDataLimit() . ';');
          $sth->bindValue(':TYPE', $flg, PDO::PARAM_STR);
          $sth->execute();
          $edList = $sth->fetchAll(PDO::FETCH_ASSOC);

          // 番号一覧の表示するデータを編集
          $result =self::filterNumberListED($edList);
          break;
        case 'NumberListSD':
          $sth = $dbh->prepare('
          SELECT 
                s_belong_cd,
                s_estimate_no,
                s_serial_no,
                s_customer_cd,
                s_customer_post_cd,
                s_customer_charge_cd,
                s_salesman_cd,
                s_estimate_date,
                s_desired_delivery_date,
                s_repeat_estimate_no,
                s_customer_order_no,
                s_shipper_cd,
                s_stay_cd,
                s_delivery_cd,
                s_tc_short_name,
                s_title,
                s_valid_month,
                s_remarks,
                s_packing_num,
                s_shipping_plan_date,
                s_shipping_date,
                s_sales_sign,
                s_print,
                sd_belong_cd,
                sd_e_estimate_no,
                sd_statement_sub_no,
                sd_estimate_sub_no,
                sd_shipment_sub_no,
                sd_p_cd,
                sd_p_name_supple,
                sd_estimate_quantity,
                sd_unit_price,
                sd_price,
                sd_cost,
                sd_desired_delivery_date,
                sd_customer_order_no,
                sd_customer_p_name,
                sd_delivery_cd,
                sd_detail_remarks,
                sd_shipment_date,
                sd_qty_delivery,
                sd_delivery_price,
                sd_tax,
                (sd_tax / sd_delivery_price) * 100 AS sd_tax_rate,
                sd_deliv_create_date,
                sd_bill_create_date,
                sd_remarks,
                sd_location,
                sd_packing_group,
                sd_packing_cd,
                sd_packing_size,
                sd_packing_num,
                sd_unit_tran,
                sd_unit_tran AS sd_unit_tran_02,
                sd_type_subject,
                sd_parrangement_cd,
                sd_p_name,
                sd_packing_content,
                sd.sd_bill_close_date AS s_bill_close_date,
                sd.sd_payment_close_date AS s_payment_plan_date,
                /*ed.ed_type_02 AS s_delivery_timing,
                ed.ed_delivery_sign AS sd_statement_sign,
                ed.ed_ship_status_sign AS sd_ship_sign,
                ed.ed_ar_cd AS sd_ar_cd,*/
                s.s_shipping_plan_date AS s_shipment_plan_date,
                c.c_customer_name AS s_customer_name,
                us.USER_NAME AS s_salesman_name,
                cp1.CP_POST_NAME AS s_shipper_name, 
                cp2.CP_POST_NAME AS s_stay_name, 
                cp3.CP_POST_NAME AS s_delivery_name,
                ed_ship_status_sign,
                ed_delivery_sign,
                ed_bill_sign,
                ed_payment_sign,
                ed.ed_ar_cd AS sd_ar_cd,
                TRIM(CAST(substring(CAST(e_remarks AS BINARY), 1,30) AS char)) AS s_logo, 
                IF(sas.sas_quantity IS NULL, 0, sas.sas_quantity) AS sd_allocate_num
                FROM statementdetails AS sd 
                LEFT JOIN statement AS s ON s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
                LEFT JOIN CUSTOMER AS c ON c.c_customer_cd = s.s_customer_cd
                LEFT JOIN USER AS us ON us.user_cd = s.s_salesman_cd 
                LEFT JOIN CUSTOMERPOST AS cp1 ON s.s_customer_cd = cp1.CP_CUSTOMER_CD AND s.s_stay_cd = cp1.CP_POST_CD
                LEFT JOIN CUSTOMERPOST AS cp2 ON s.s_customer_cd = cp2.CP_CUSTOMER_CD AND s.s_stay_cd = cp2.CP_POST_CD 
                LEFT JOIN CUSTOMERPOST AS cp3 ON s.s_customer_cd = cp3.CP_CUSTOMER_CD AND s.s_delivery_cd = cp3.CP_POST_CD
                LEFT JOIN estimate AS e ON e.e_estimate_no  = sd.sd_e_estimate_no 
                LEFT JOIN estimatedetails AS ed ON sd.sd_e_estimate_no = ed.ed_estimate_no AND sd.sd_estimate_sub_no = ed.ed_estimate_sub_no AND sd.sd_shipment_sub_no = ed.ed_shipment_sub_no
                LEFT JOIN shippingassign AS sas ON sas.sas_estimate_no = sd.sd_e_estimate_no AND sas.sas_statement_sub_no = sd.sd_statement_sub_no AND sas.sas_estimate_sub_no = sd.sd_estimate_sub_no AND sas.sas_shipment_sub_no = sd.sd_shipment_sub_no
                WHERE s.s_type_continue = :TYPE
                GROUP BY s.s_belong_cd, s_estimate_no
                ORDER BY sd_e_estimate_no DESC, sd_statement_sub_no DESC, sd_estimate_sub_no  ASC, sd_shipment_sub_no ASC
          LIMIT ' . self::setDataLimit() . ';');
          $sth->bindValue(':TYPE', $flg, PDO::PARAM_STR);
          $sth->execute();
          $sdList = $sth->fetchAll(PDO::FETCH_ASSOC);

          for ($i = 0; $i < count($sdList); $i++) {
            // idを設定する
            $sdList[$i]['id'] = $i;
            array_push($result, $sdList[$i]);
          }
          break;
        case 'NumberListBD':
          $sth = $dbh->prepare('
            SELECT
                b.*,
                bd.*, 
                s.*,
                sd.*,
                ed.*,
                t.*,
                p.p_name AS bd_product_name, 
                c.C_CUSTOMER_NAME AS b_customer_name, 
                us.USER_NAME AS bd_salesman_name, 
                t.t_rate AS bd_tax_rate,
                sd.sd_p_cd AS bd_p_cd,
                IF(bd_payment_sign >= 1, bd_payment_close_date, "") AS bd_payment_date
            FROM
                billdetails AS bd 
                LEFT JOIN bill AS b ON 
                  b.b_belong_Cd = bd.bd_belong_cd AND 
                  b.b_customer_cd = bd.bd_customer_cd AND
                  b.b_bill_no = bd.bd_bill_no
                LEFT JOIN statementdetails AS sd ON
                  bd.bd_belong_cd = sd.sd_belong_cd AND
                  bd.bd_estimate_no = sd.sd_e_estimate_no AND
                  bd.bd_st_details_no = sd.sd_statement_sub_no AND 
                  bd.bd_ed_details_no = sd.sd_estimate_sub_no AND 
                  bd.bd_shipment_div = sd.sd_shipment_sub_no
                LEFT JOIN statement AS s ON bd.bd_belong_cd = s.s_belong_cd
                    AND bd.bd_estimate_no = s.s_estimate_no
                    AND bd.bd_st_details_no = s.s_serial_no
                LEFT JOIN
                estimatedetails AS ed ON bd.bd_belong_cd = ed.ed_belong_cd
                    AND bd.bd_estimate_no = ed.ed_estimate_no
                    AND bd.bd_ed_details_no = ed.ed_estimate_sub_no
                    LEFT JOIN
                estimate AS e ON bd.bd_belong_cd = e.e_belong_cd
                    AND bd.bd_estimate_no = e.e_estimate_no
                    LEFT JOIN 
                customer AS c ON c.c_customer_cd = b.b_customer_cd
                    LEFT JOIN
                product AS p ON p.p_belong_cd = ed.ed_belong_cd
                    AND p.p_cd = ed.ed_p_cd
                    LEFT JOIN
                tax AS t ON t.t_cd = p.p_tax_rate_cd
                LEFT JOIN
            user AS us ON bd.bd_salesman_cd = us.USER_CD
            WHERE
                bd.bd_dell_sign = "0"
            AND
                b.b_type_continue = :TYPE
            GROUP BY b.b_belong_cd, b.b_bill_no
            ORDER BY bd.bd_bill_no DESC, bd_customer_cd ASC, bd_estimate_no ASC, bd_st_details_no ASC, bd_ed_details_no ASC, bd_shipment_div ASC, bd_payment_div ASC
            LIMIT ' . self::setDataLimit() . ';');
          $sth->bindValue(':TYPE', $flg, PDO::PARAM_STR);
          $sth->execute();
          $bdList = $sth->fetchAll(PDO::FETCH_ASSOC);

          for ($i = 0; $i < count($bdList); $i++) {
            // idを設定する
            $bdList[$i]['id'] = $i;
            array_push($result, $bdList[$i]);
          }
          break;
        case 'NumberListMOD':
          $sth = $dbh->prepare('
          SELECT moed.*,
          CAST(moed_unit_price AS signed) AS moed_unit_price,
          IF((sp_report_no IS NULL OR moed_type_02 = "1") AND moed.moed_product_cd NOT LIKE ("26%"), "1", "0") AS moed_receive_sign,
          IF(moed_accept_date = "", "0", "1") AS moed_accept_sign,
          IF(moed_payment_no = "", "未", moed_payment_no) AS moed_payment_no,
          IF(moed_order_date = "", "0", "1") AS moed_order_sign,
          c.c_customer_name AS moed_customer_name,
          p.p_name AS moed_product_name,
          us.user_name AS moed_salesman_name,
          us2.user_name AS moed_update_name,
          "" AS wireno,
          "" AS customerpname,
          moed_product_name AS productname,
          moed_product_name AS p_name,
          moed_sub_01 AS sub01,
          moed_sub_02 AS sub02,
          moed_sub_03 AS sub03,
          moed_sub_04 AS sub04,
          moed_sub_05 AS sub05,
          moed_sub_06 AS sub06,
          moed_sub_07 AS sub07,
          moed_sub_08 AS sub08,
          moed_sub_09 AS sub09,
          moed_sub_10 AS sub10,
          moed_sub_11 AS sub11,
          moed_sub_12 AS sub12,
          moed_sub_13 AS sub13,
          p.p_type,
          ar_name,
          CASE WHEN moedcount.samecnt = labelissuecount.labelissuecnt THEN \'1\'
          ELSE \'0\' END AS label_issue 
          FROM morderestimate AS moed
          LEFT JOIN customer AS c ON c.C_CUSTOMER_CD = moed.moed_customer_cd
          LEFT JOIN product AS p ON p.p_cd = moed.moed_product_cd
          LEFT JOIN user AS us ON us.user_cd = moed.moed_salesman_cd
          LEFT JOIN user AS us2 ON us2.user_cd = moed.moed_update_cd
          LEFT JOIN arrangement AS ar ON ar.ar_sub_cd = moed.moed_parrangement_cd
          LEFT JOIN stockplan AS sp ON sp.sp_report_no = moed.moed_order_no AND sp.sp_sub_no_01 = moed.moed_sub_no AND sp.sp_sub_no_02 = moed.moed_accept_sub_no
          LEFT JOIN (
            SELECT moed_belong_cd,moed_order_no,COUNT(*) AS samecnt
            FROM morderestimate
            GROUP BY moed_belong_cd, moed_order_no
          ) AS moedcount ON moed.moed_belong_cd = moedcount.moed_belong_cd AND moed.moed_order_no = moedcount.moed_order_no
          LEFT JOIN (
            SELECT moed_belong_cd,moed_order_no,COUNT(*) AS labelissuecnt
            FROM morderestimate
            WHERE moed_type_05 = \'1\'
            GROUP BY moed_belong_cd, moed_order_no
          ) AS labelissuecount ON moed.moed_belong_cd = labelissuecount.moed_belong_cd AND moed.moed_order_no = labelissuecount.moed_order_no
          WHERE CAST(moed_buy_type AS SIGNED) < 3 AND moed_type_continue = :TYPE
          GROUP BY moed.moed_belong_cd, moed.moed_order_no
          ORDER BY moed_order_no DESC, moed_sub_no ASC, moed_accept_sub_no ASC
          LIMIT ' . self::setDataLimit() . ';');
          $sth->bindValue(':TYPE', $flg, PDO::PARAM_STR);
          $sth->execute();
          $moedList = $sth->fetchAll(PDO::FETCH_ASSOC);

          for ($i = 0; $i < count($moedList); $i++) {
            // idを設定する
            $moedList[$i]['id'] = $i;
            array_push($result, $moedList[$i]);
          }
          break;
        case 'NumberListOOD':
          $sth = $dbh->prepare('
            SELECT moed.*,
            IF(moed_accept_date IS NULL OR moed_accept_date = "", "0", "1") AS moed_accept_sign,
            IF(moed_payment_no IS NULL OR moed_payment_no = "", "未", moed_payment_no) AS moed_payment_no,
            IF(moed_sub_num_03 > 0, TRUNCATE(moed_sub_num_03, 0), "") AS moed_sub_num_03,
            IF(moed_order_date <> "", "1", "0") AS moed_order_sign,
            IF(moed_type_02 = "" OR moed_type_02 = "0", "0", moed_type_02) AS moed_receive_sign,
            c.c_customer_name AS moed_customer_name,
            us.user_name AS moed_salesman_name,
            us2.user_name AS moed_update_name,
            "" AS wireno,
            "" AS customerpname,
            moed_product_name AS productname,
            moed_product_name AS p_name,
            moed_sub_01 AS sub01,
            moed_sub_02 AS sub02,
            moed_sub_03 AS sub03,
            moed_sub_04 AS sub04,
            moed_sub_05 AS sub05,
            moed_sub_06 AS sub06,
            moed_sub_07 AS sub07,
            moed_sub_08 AS sub08,
            moed_sub_09 AS sub09,
            moed_sub_10 AS sub10,
            moed_sub_11 AS sub11,
            moed_sub_12 AS sub12,
            moed_sub_13 AS sub13,
            p.p_type,
            ar.ar_name
            FROM morderestimate AS moed
            LEFT JOIN customer AS c ON c.C_CUSTOMER_CD = moed.moed_customer_cd
            LEFT JOIN product AS p ON p.p_cd = moed.moed_product_cd
            LEFT JOIN unit AS u ON u.u_cd = p.p_unit_tran
            LEFT JOIN unit AS u2 ON u2.u_cd = p.p_unit_eval
            LEFT JOIN user AS us ON us.user_cd = moed.moed_salesman_cd
            LEFT JOIN user AS us2 ON us2.user_cd = moed.moed_update_cd
            LEFT JOIN arrangement AS ar ON ar.ar_sub_cd = moed.moed_parrangement_cd
            WHERE CAST(moed_buy_type AS SIGNED) >= 3 AND moed.moed_type_continue = :TYPE
            GROUP BY moed.moed_belong_cd, moed.moed_order_no
            ORDER BY moed_order_no DESC, moed_sub_no ASC, moed_accept_sub_no ASC
            LIMIT ' . self::setDataLimit() . ';');
          $sth->bindValue(':TYPE', $flg, PDO::PARAM_STR);
          $sth->execute();
          $moedList = $sth->fetchAll(PDO::FETCH_ASSOC);

          for ($i = 0; $i < count($moedList); $i++) {
            // idを設定する
            $moedList[$i]['id'] = $i;
            array_push($result, $moedList[$i]);
          }
          break;
        default:
          $tablename = 'estimate';
          // $str = 'SELECT * FROM statement WHERE e_type_continue = :TYPE;';
          break;
      }
      echo json_encode($result);
      // return;
    } catch (Exception $e) {
      return $e;
    }

  }
  
  /**
   * 請求書再発行 
  **/
  public static function reissueBillFile($sdat) {
    $dbh = self::dbPDO();
    $results = [];
    $customernum = [$sdat['b_customer_cd']];
    $deposit = [];
    $DESCRIBABLE_MONTH = 3; // 記載可能な入金データの検索開始日付。←ヵ月以前のデータは不掲載
    $beforeDepositDate = '';
    $beforeMDate = '';
    $beforeDepositDateUsual = '';

    try {
      // 請求データ取得      
      // 該当客先、前回締日、今回締日、前回請求番号取得
      $sth = $dbh->prepare('
        SELECT  
            b1.b_bill_no,
            b1.b_customer_cd AS bd_customer_cd,
            b1.b_final_date AS thisclose,
            IF(b2.b_final_date IS NULL, (CAST(b1.b_final_date AS DATE) - INTERVAL 1 MONTH)+0, b2.b_final_date) AS beforeclose,
            MAX(bd2.bd_payment_close_date) AS beforepaymentclose,
            b1.b_before_bill_no AS beforebillno
        FROM
            bill AS b1
            LEFT JOIN
        bill AS b2 ON b1.b_customer_cd = b2.b_customer_cd
            AND b1.b_before_bill_no = b2.b_bill_no
            LEFT JOIN 
        billdetails AS bd2 ON b1.b_customer_cd = bd2.bd_customer_cd
            AND b1.b_before_bill_no = bd2.bd_bill_no
        WHERE
          b1.b_customer_cd = :CUSCD AND b1.b_bill_no = :BILLNO 
      ;');
      $sth->bindValue(':CUSCD', $sdat['b_customer_cd'], PDO::PARAM_STR);
      $sth->bindValue(':BILLNO', $sdat['bd_bill_no'], PDO::PARAM_STR);
      $sth->execute();
      $resultsCUS = $sth->fetchAll(PDO::FETCH_ASSOC);
     
      // 請求データ取得
      if (self::checkNotSet($sdat['customeroutputdate']) === true) {

        // 入金データの検索条件の開始日付
        // 今回請求締日
        $thisClose = substr($resultsCUS[0]['thisclose'], 0, 4) . "/" . substr($resultsCUS[0]['thisclose'], 4, 2) . "/" . substr($resultsCUS[0]['thisclose'], 6, 2);
        $thisClose = new DateTime($thisClose);

        // 前回請求があったら、該当入金データの入金日を確認
        if (!self::checkNotSet($resultsCUS[0]['beforebillno'])) {
          // 前回請求が存在する場合が入金データ取得範囲変更の対象
          // $sth = $dbh->prepare('
          // SELECT MAX(dp_date) as issuedate FROM deposit
          // WHERE dp_no IN (SELECT bd_payment_no FROM billdetails WHERE bd_bill_no = :BILLNO)
          // ;');
          // $sth->bindValue(':BILLNO', $resultsCUS[0]['beforebillno'], PDO::PARAM_STR);
          // 2023/01/24 前回請求が存在する場合、前回締日以降の入金データを抽出してから最初の入金日を入金データ取得範囲対象
          $sth = $dbh->prepare('
          SELECT dp_date as issuedate FROM deposit 
          WHERE dp_date > :BEFOREDATE AND dp_customer_cd = :CUSCD ORDER BY dp_date asc LIMIT 1
          ;');
          $sth->bindValue(':BEFOREDATE', $resultsCUS[0]['beforeclose'], PDO::PARAM_STR);
          $sth->bindValue(':CUSCD', $resultsCUS[0]['bd_customer_cd'], PDO::PARAM_STR);
          $sth->execute();
          $rsltDeposit = $sth->fetchAll(PDO::FETCH_ASSOC);

          if (count($rsltDeposit) > 0) {
            if ($rsltDeposit[0]['issuedate'] <= $resultsCUS[0]['beforeclose']) {
              // 都度請求
              $beforeDepositDate = $rsltDeposit[0]['issuedate'];
              self::MonthShifter($thisClose, ($DESCRIBABLE_MONTH - 1) * (-1));
              // 入金データの開始年月
              $beforeMDate = $thisClose->format('Ymd');

            } else {
              // 通常請求
              $beforeDepositDateUsual = $rsltDeposit[0]['issuedate'];
              self::MonthShifter($thisClose, $DESCRIBABLE_MONTH * (-1));
              // 入金データの開始年月
              $beforeMDate = $thisClose->format('Ymd');
            }
          } elseif (count($rsltDeposit) == 0 && $resultsCUS[0]['beforeclose'] > $resultsCUS[0]['beforepaymentclose']) {
            if ($resultsCUS[0]['beforepaymentclose'] <= $resultsCUS[0]['beforeclose']) {
              // 都度請求
              $beforeDepositDate = $resultsCUS[0]['beforepaymentclose'];
              self::MonthShifter($thisClose, ($DESCRIBABLE_MONTH - 1) * (-1));
              // 入金データの開始年月
              $beforeMDate = $thisClose->format('Ymd');

            } else {
              // 通常請求
              $beforeDepositDateUsual = $resultsCUS[0]['beforepaymentclose'];
              self::MonthShifter($thisClose, $DESCRIBABLE_MONTH * (-1));
              // 入金データの開始年月
              $beforeMDate = $thisClose->format('Ymd');
            }           
          }
        } 

        $strSQL = '
          SELECT bd.bd_bill_no,
          bd.bd_customer_cd,
          bd.bd_customer_post_cd,
          bd.bd_customer_charge_cd,
          c.C_CUSTOMER_NAME AS companyname,
          IF(bd.bd_customer_post_cd <> "", cp.CP_ADDRESS_NO, c.C_ADDRESS_NO) AS addressno,
          IF(bd.bd_customer_post_cd <> "", cp.CP_ADDRESS_01, c.C_ADDRESS_01) AS address1,
          IF(bd.bd_customer_post_cd <> "", cp.CP_ADDRESS_02, c.C_ADDRESS_02) AS address2,
          cp.CP_POST_NAME AS postname, 
          cc.CC_CHARGE_NAME AS chargename,
          delv.CP_POST_NAME AS deliveryname,
          bd.bd_bill_close_date,
          bd.bd_payment_close_date,
          b.b_before_bill,
          b.b_before_bill_no,
          b.b_receive,
          0 AS adjust_price,
          b.b_sales_price,
          b.b_tax,
          b.b_bill,
          bd.bd_st_details_no,
          bd.bd_desired_delivery_date, 
          bd.bd_shipment_date,
          bd.bd_estimate_no,
          bd.bd_ed_details_no,
          bd.bd_shipment_div,
          bd.bd_payment_div,
          bd.bd_product_name,
          bd.bd_prod_summary,
          bd.bd_qty_delivery,
          bd.bd_unit_tran,
          bd.bd_unit_price,
          bd.bd_delivery_price,
          bd.bd_tax,
          bd.bd_dt_customer_order_no,
          bd.bd_delivery_cd,
          bd.bd_detail_remarks,
          CAST(bd.bd_bill_close_date AS  Date) AS writedate,
          ar.ar_name,
          s.s_customer_order_no,
          s.s_tc_short_name,
          s.s_title,
          s.s_remarks
          FROM billdetails AS bd
          LEFT JOIN bill AS b ON b.b_customer_cd = bd.bd_customer_cd  AND b.b_bill_no = bd.bd_bill_no
          LEFT JOIN customer c ON c.c_customer_cd = bd.bd_customer_cd
          LEFT JOIN customerpost AS cp ON cp.CP_CUSTOMER_CD = bd.bd_customer_cd AND cp.CP_POST_CD = bd.bd_customer_post_cd
          LEFT JOIN customerpost AS delv ON delv.CP_CUSTOMER_CD = bd.bd_customer_cd AND delv.CP_POST_CD = bd.bd_delivery_cd
          LEFT JOIN customercharge AS cc ON cc.CC_CUSTOMER_CD = bd.bd_customer_cd AND cc.CC_POST_CD = bd.bd_customer_post_cd AND cc.CC_CHARGE_CD = bd.bd_customer_charge_cd
          LEFT JOIN arrangement AS ar ON ar.ar_sub_cd = bd_parrangement_cd
          LEFT JOIN statement AS s ON s.s_estimate_no = bd_estimate_no AND s.s_serial_no = bd_st_details_no
          WHERE bd.bd_customer_cd = :CUSTOMERCD AND  bd.bd_bill_no = :BILLNO
          UNION ALL
        ( SELECT 
          dp_no AS bd_bill_no,
          dp_customer_cd AS bd_customer_cd,
          "" AS bd_customer_post_cd,
          "" AS bd_customer_charge_cd,
          c.C_CUSTOMER_NAME AS companyname,
          c.C_ADDRESS_NO AS addressno,
          c.C_ADDRESS_01 AS address1,
          c.C_ADDRESS_02 AS address2,
          "" AS postname, 
          "" AS chargename,
          "" AS deliveryname,
          "" AS bd_bill_close_date,
          "" AS bd_payment_close_date,
          "" AS b_before_bill,
          "" AS b_before_bill_no,
          "" AS b_receive,
          0 AS adjust_price,
          "" AS b_sales_price,
          "" AS b_tax,
          "" AS b_bill,
          IF(dp_type = "Z1" OR dp_type = "Z2", concat("52", RIGHT(dp_type,1)) , concat("55", dp_type))  AS `bd_st_details_no`,
          dp_date,
          dp_date AS bd_shipment_date,
          dp_no,
          dp_sub_no AS bd_ed_details_no,
          "" AS bd_shipment_div,
          "" AS bd_payment_div,
          py2.py_name,
          "" AS bd_prod_summary,
          "" AS bd_qty_delivery,
          "" AS bd_unit_tran,
          0 AS bd_unit_price,
          dp_price,
          "" AS bd_tax,
          "" AS bd_dt_customer_order_no,
          "" AS bd_delivery_cd,
          dp_full_date AS bd_detail_remarks,
          "" AS writedate,
          "" AS ar_name,
          "" AS s_customer_order_no,
          "" AS s_tc_short_name,
          "" AS s_title,
          "" AS s_remarks
          FROM deposit AS dp
          LEFT JOIN payment AS py2 ON py2.py_cd = IF(dp_type = "Z1" OR dp_type = "Z2", concat("52", RIGHT(dp_type,1)) , concat("55", dp_type))
          LEFT JOIN customer c ON c.c_customer_cd = dp.dp_customer_cd
          WHERE dp_customer_cd = :CUSCD AND dp_del_flg <> 1 AND
        ';
        if (self::checkNotSet($resultsCUS[0]['beforebillno']) === false) {
          // 前回請求有り
          if (!self::checkNotSet($beforeDepositDate)  && $beforeDepositDate > $beforeMDate) {
            $strSQL .= ' (CAST(dp_date AS DATE) >= CAST(:FROMDATE AS DATE) AND  CAST(dp_date  AS DATE) <= CAST(:TODATE AS DATE)) ';
            
          } else if (!self::checkNotSet($beforeDepositDateUsual) && $resultsCUS[0]['beforeclose'] <= $beforeMDate && $beforeDepositDateUsual > $beforeMDate) {
            // 前回請求日が指定月以上前だが、入金自体は期間内だった場合
            $strSQL .= ' (CAST(dp_date AS DATE) >= CAST(:FROMDATE AS DATE) AND  CAST(dp_date  AS DATE) <= CAST(:TODATE AS DATE)) ';

          } else {
            $strSQL .= ' (CAST(dp_date AS DATE) > CAST(:FROMDATE AS DATE) AND  CAST(dp_date  AS DATE) <= CAST(:TODATE AS DATE)) ';

          }

        } else {
          $strSQL .= ' CAST(dp_date AS DATE) <= CAST(:TODATE AS DATE)';
        }  
        $strSQL .= ') ORDER BY  bd_customer_cd, bd_shipment_date, bd_estimate_no, bd_ed_details_no;';
        $sth = $dbh->prepare($strSQL);

        $sth->bindValue(':CUSTOMERCD', $resultsCUS[0]['bd_customer_cd'], PDO::PARAM_STR);
        $sth->bindValue(':BILLNO', $resultsCUS[0]['b_bill_no'], PDO::PARAM_STR);
        $sth->bindValue(':CUSCD', $resultsCUS[0]['bd_customer_cd'], PDO::PARAM_STR);
                
        if (self::checkNotSet($resultsCUS[0]['beforebillno']) === false) {
          // 前回請求有り
          if (!self::checkNotSet($beforeDepositDate) && $beforeMDate < $beforeDepositDate) {
            // 都度請求 期間内
            $sth->bindValue(':FROMDATE', $beforeDepositDate, PDO::PARAM_STR);

          } else if (!self::checkNotSet($beforeDepositDateUsual) && $resultsCUS[0]['beforeclose'] <= $beforeMDate && $beforeMDate < $beforeDepositDateUsual) {
            // 通常請求 
            $sth->bindValue(':FROMDATE', $beforeDepositDateUsual, PDO::PARAM_STR);
          
          } else if ($beforeMDate < $resultsCUS[0]['beforeclose']) {
            // 通常請求 期間内
            $sth->bindValue(':FROMDATE', $resultsCUS[0]['beforeclose'], PDO::PARAM_STR);

          } else {
            $sth->bindValue(':FROMDATE', $beforeMDate, PDO::PARAM_STR);
          }
        }    

        $sth->bindValue(':TODATE', $resultsCUS[0]['thisclose'], PDO::PARAM_STR);
        $sth->execute();
        $results = $sth->fetchAll(PDO::FETCH_ASSOC);

        // 入金データで対象外のデータを集計する。
        $delPrice = 0;    
        $eventDate = '';
        $eventFlg = false;
        // 前回請求日が、指定月以前だった場合のみ精査する必要がある。
        if (!self::checkNotSet($resultsCUS[0]['beforeclose']) && $resultsCUS[0]['beforeclose'] <= $beforeMDate) {
          
          if (!self::checkNotSet($beforeDepositDate)) {
            // 都度請求のみ条件が前回請求日より前の日になる
            $eventDate = $beforeDepositDate;
            $eventFlg = true;
          } else {
            $eventDate = $resultsCUS[0]['beforeclose'];
          }

          $strSQLDeposit = 'SELECT * FROM deposit WHERE dp_del_flg = "0" AND dp_customer_cd = :CUSCD ';
          if ($eventFlg) {
            $strSQLDeposit .= ' AND (:BEFORECLOSE <= dp_date AND dp_date <= :UPPLIMDATE);';
          } else {
            $strSQLDeposit .= ' AND (:BEFORECLOSE < dp_date AND dp_date <= :UPPLIMDATE);';
          }

          $sth = $dbh->prepare($strSQLDeposit);
          $sth->bindValue(':BEFORECLOSE', $eventDate, PDO::PARAM_STR);
          $sth->bindValue(':UPPLIMDATE', $beforeMDate, PDO::PARAM_STR);
          $sth->bindValue(':CUSCD', $resultsCUS[0]['bd_customer_cd'], PDO::PARAM_STR);
          $sth->execute();

          $resultDpPrice = $sth->fetchAll(PDO::FETCH_ASSOC);

          foreach($resultDpPrice as $record) {
            $delPrice += intval($record['dp_price']);
          }
        }

        for ($i = 0; $i < count($results); $i++) {   
          // 指定期間経過した入金データは、請求書に掲載しないため、前回請求額を調整する。
          // 分割入金のケースで、掲載or不掲載が分かれるものに関して精査する。

          $results[$i]['b_before_bill'] = $results[$i]['b_before_bill'] - $delPrice;
        }
      }

      // エクセルファイル作成 複数シート
      BookMaker::createBillFile($customernum, $results, $deposit);      
    } catch (Exception $e) {
      throw $e;
    }
  }

  /***
   * 前回繰越金額&&前回請求締から今月請求締までの入金データ確認用　※2022/4/25 都度客先の請求データ抽出
   * 「金種：9(手形手数料)」追加による修正、前受け金のデータ抽出対応
   */
  public static function createCheckBillSheet($sdat) {
    $dbh = self::dbPDO();
    $results = [];
    $strToday = '';

    try {
      $dbh->beginTransaction();

      $sth = $dbh->prepare('
      CREATE OR REPLACE VIEW VIEWCHECKBILLDATA
      AS 
      SELECT 
        IF(C_FINALDAY IS NULL, "xx", C_FINALDAY) AS closedate, 
        b_customer_cd, 
        C_CUSTOMER_NAME, 
        b_before_bill_no AS beforebillno, 
        b_before_bill AS beforeprice, 
        b_receive AS receive, 
        b_bill AS carriedprice, 
        b_sales_price AS billprice, 
        b_tax AS billtax, 
        b_bill_no, 
        IF(b_before_bill <> b_receive,"有","無") AS billstatus, 
        b_final_date 
      FROM bill 
      LEFT JOIN customer ON C_CUSTOMER_CD = b_customer_cd 
      ;');
      $sth->execute();

      // 前回請求に対する入金額とそれに付随する繰越金額
      $strSQL = '
      SELECT 
        cbd.closedate,
        cbd.b_customer_cd, 
        cbd.C_CUSTOMER_NAME,
        cbd.beforebillno, 
        cbd.beforeprice,
        IF(temp1.price1 IS NOT NULL, temp1.price1, 0) AS sumprice1,
        IF(temp1.price2 IS NOT NULL, temp1.price2, 0) AS sumprice2,
        IF(temp1.price3 IS NOT NULL, temp1.price3, 0) AS sumprice3,
        IF(temp1.price4 IS NOT NULL, temp1.price4, 0) AS sumprice4,
        IF(temp1.price5 IS NOT NULL, temp1.price5, 0) AS sumprice5,
        IF(temp1.price6 IS NOT NULL, temp1.price6, 0) AS sumprice6,
        IF(temp1.price8 IS NOT NULL, temp1.price8, 0) AS sumprice8,
        IF(temp1.priceZ1 IS NOT NULL, temp1.priceZ1, 0) AS sumpriceZ1,
        IF(temp1.price9 IS NOT NULL, temp1.price9, 0) + IF(temp1.priceZ2 IS NOT NULL, temp1.priceZ2, 0) AS sumpriceZ2,
        cbd.beforeprice - (IF(temp1.price1 IS NOT NULL, temp1.price1, 0) + 
          IF(temp1.price2 IS NOT NULL, temp1.price2, 0) +
          IF(temp1.price3 IS NOT NULL, temp1.price3, 0) +
          IF(temp1.price4 IS NOT NULL, temp1.price4, 0) +
          IF(temp1.price5 IS NOT NULL, temp1.price5, 0) +
          IF(temp1.price6 IS NOT NULL, temp1.price6, 0) +
          IF(temp1.price8 IS NOT NULL, temp1.price8, 0) +
          IF(temp1.price9 IS NOT NULL, temp1.price9, 0) +
          IF(temp1.priceZ1 IS NOT NULL, temp1.priceZ1, 0) +
          IF(temp1.priceZ2 IS NOT NULL, temp1.priceZ2, 0)) AS carriedprice,
        cbd.billprice,
        cbd.billtax,
        cbd.beforeprice - (IF(temp1.price1 IS NOT NULL, temp1.price1, 0) + 
          IF(temp1.price2 IS NOT NULL, temp1.price2, 0) +
          IF(temp1.price3 IS NOT NULL, temp1.price3, 0) +
          IF(temp1.price4 IS NOT NULL, temp1.price4, 0) +
          IF(temp1.price5 IS NOT NULL, temp1.price5, 0) +
          IF(temp1.price6 IS NOT NULL, temp1.price6, 0) +
          IF(temp1.price8 IS NOT NULL, temp1.price8, 0) +
          IF(temp1.price9 IS NOT NULL, temp1.price9, 0) +
          IF(temp1.priceZ1 IS NOT NULL, temp1.priceZ1, 0) +
          IF(temp1.priceZ2 IS NOT NULL, temp1.priceZ2, 0)) + cbd.billprice + cbd.billtax AS thisbillprice,
        cbd.billstatus, 
        cbd.b_final_date 
      FROM viewcheckbilldata AS cbd
      LEFT JOIN (SELECT 
                  dp_date,
                  dp_customer_cd,
                  dp_no,
                  dp_del_flg,
                  SUM(CASE d.dp_type WHEN "1" THEN dp_price ELSE 0 END) AS price1,   /* 現金 */
                  SUM(CASE d.dp_type WHEN "2" THEN dp_price ELSE 0 END) AS price2,   /* 小切手 */
                  SUM(CASE d.dp_type WHEN "3" THEN dp_price ELSE 0 END) AS price3,   /* 銀行振込 */      
                  SUM(CASE d.dp_type WHEN "4" THEN dp_price ELSE 0 END) AS price4,   /* 手形 */       
                  SUM(CASE d.dp_type WHEN "5" THEN dp_price ELSE 0 END) AS price5,   /* 相殺 */       
                  SUM(CASE d.dp_type WHEN "6" THEN dp_price ELSE 0 END) AS price6,   /* 値引 */       
                  SUM(CASE d.dp_type WHEN "8" THEN dp_price ELSE 0 END) AS price8,   /* 電子記録債券 */         
                  SUM(CASE d.dp_type WHEN "9" THEN dp_price ELSE 0 END) AS price9,   /* 手形手数料 */         
                  SUM(CASE d.dp_type WHEN "Z1" THEN dp_price ELSE 0 END) AS priceZ1, /* 調整額 */       
                  SUM(CASE d.dp_type WHEN "Z2" THEN dp_price ELSE 0 END) AS priceZ2  /* 振込手数料 */
                FROM deposit AS d
                INNER JOIN (SELECT * FROM bill  WHERE b_final_date = :CLOSEDATE GROUP by b_bill_no) AS b ON d.dp_customer_cd = b.b_customer_cd 
                LEFT JOIN viewcheckbilldata AS cbd1 ON b.b_bill_no = cbd1.b_bill_no 
                WHERE d.dp_del_flg = 0 AND d.dp_date <= concat("20",left(b.b_bill_no, 6)) AND                 
                (CASE WHEN CONCAT("20", LEFT(b.b_before_bill_no, 6)) < (SELECT bd_payment_close_date FROM billdetails WHERE bd_bill_no = b.b_before_bill_no group by bd_bill_no) 
                  THEN d.dp_date > (select concat("20", left(bd_bill_no, 6)) from billdetails where bd_bill_no = b.b_before_bill_no group by bd_bill_no)
                  WHEN CONCAT("20", LEFT(b.b_before_bill_no, 6)) >= (SELECT bd_payment_close_date FROM billdetails WHERE bd_bill_no = b.b_before_bill_no group by bd_bill_no) 
                  THEN d.dp_date >= (select bd_payment_close_date from billdetails where bd_bill_no = b.b_before_bill_no group by bd_bill_no)
                  ELSE d.dp_date >= :LASTDATE
                END)
                GROUP BY dp_customer_cd
                ORDER BY dp_no) AS temp1 ON temp1.dp_customer_cd = cbd.b_customer_cd
      WHERE cbd.b_final_date = :CLOSEDATE1 ';
      if ($sdat['closeDay'] === '31') {
        $strSQL .= 'union 
        SELECT 
          cbd3.closedate, 
          cbd3.b_customer_cd, 
          cbd3.C_CUSTOMER_NAME, 
          cbd3.beforebillno, 
          cbd3.beforeprice, 
          IF(temp3.price1 IS NOT NULL, temp3.price1, 0) AS sumprice1, 
          IF(temp3.price2 IS NOT NULL, temp3.price2, 0) AS sumprice2, 
          IF(temp3.price3 IS NOT NULL, temp3.price3, 0) AS sumprice3, 
          IF(temp3.price4 IS NOT NULL, temp3.price4, 0) AS sumprice4, 
          IF(temp3.price5 IS NOT NULL, temp3.price5, 0) AS sumprice5, 
          IF(temp3.price6 IS NOT NULL, temp3.price6, 0) AS sumprice6, 
          IF(temp3.price8 IS NOT NULL, temp3.price8, 0) AS sumprice8, 
          IF(temp3.priceZ1 IS NOT NULL, temp3.priceZ1, 0) AS sumpriceZ1, 
          IF(temp3.price9 IS NOT NULL, temp3.price9, 0) + IF(temp3.priceZ2 IS NOT NULL, temp3.priceZ2, 0) AS sumpriceZ2, 
          0 - (IF(temp3.price1 IS NOT NULL, temp3.price1, 0) + 
          IF(temp3.price2 IS NOT NULL, temp3.price2, 0) +
          IF(temp3.price3 IS NOT NULL, temp3.price3, 0) +
          IF(temp3.price4 IS NOT NULL, temp3.price4, 0) +
          IF(temp3.price5 IS NOT NULL, temp3.price5, 0) +
          IF(temp3.price6 IS NOT NULL, temp3.price6, 0) +
          IF(temp3.price8 IS NOT NULL, temp3.price8, 0) +
          IF(temp3.price9 IS NOT NULL, temp3.price9, 0) +
          IF(temp3.priceZ1 IS NOT NULL, temp3.priceZ1, 0) +
          IF(temp3.priceZ2 IS NOT NULL, temp3.priceZ2, 0)) AS carriedprice, 
          cbd3.billprice, 
          cbd3.billtax, 
          0 - (IF(temp3.price1 IS NOT NULL, temp3.price1, 0) + 
          IF(temp3.price2 IS NOT NULL, temp3.price2, 0) +
          IF(temp3.price3 IS NOT NULL, temp3.price3, 0) +
          IF(temp3.price4 IS NOT NULL, temp3.price4, 0) +
          IF(temp3.price5 IS NOT NULL, temp3.price5, 0) +
          IF(temp3.price6 IS NOT NULL, temp3.price6, 0) +
          IF(temp3.price8 IS NOT NULL, temp3.price8, 0) +
          IF(temp3.price9 IS NOT NULL, temp3.price9, 0) +
          IF(temp3.priceZ1 IS NOT NULL, temp3.priceZ1, 0) +
          IF(temp3.priceZ2 IS NOT NULL, temp3.priceZ2, 0)) + cbd3.billprice + cbd3.billtax AS thisbillprice, 
          cbd3.billstatus, 
          cbd3.b_final_date 
        FROM viewcheckbilldata AS cbd3 
        LEFT JOIN (SELECT *	
                  FROM viewcheckbilldata AS cbd4 
                  INNER JOIN (SELECT 
                                bill.b_bill_no AS billNo, 
                                d.*, 
                                SUM(CASE d.dp_type WHEN "1" THEN dp_price ELSE 0 END) AS price1, 
                                SUM(CASE d.dp_type WHEN "2" THEN dp_price ELSE 0 END) AS price2, 
                                SUM(CASE d.dp_type WHEN "3" THEN dp_price ELSE 0 END) AS price3,
                                SUM(CASE d.dp_type WHEN "4" THEN dp_price ELSE 0 END) AS price4, 
                                SUM(CASE d.dp_type WHEN "5" THEN dp_price ELSE 0 END) AS price5, 
                                SUM(CASE d.dp_type WHEN "6" THEN dp_price ELSE 0 END) AS price6, 
                                SUM(CASE d.dp_type WHEN "8" THEN dp_price ELSE 0 END) AS price8, 
                                SUM(CASE d.dp_type WHEN "9" THEN dp_price ELSE 0 END) AS price9, 
                                SUM(CASE d.dp_type WHEN "Z1" THEN dp_price ELSE 0 END) AS priceZ1, 
                                SUM(CASE d.dp_type WHEN "Z2" THEN dp_price ELSE 0 END) AS priceZ2 
                              FROM bill 
                              LEFT JOIN (SELECT bd_bill_no, bd_payment_no FROM billdetails GROUP BY bd_bill_no, bd_payment_no) AS bd ON bill.b_bill_no = bd.bd_bill_no 
                              LEFT JOIN deposit AS d ON bd_payment_no = dp_no 
                              WHERE b_final_date like :CLOSEL1 AND (b_final_date <> :CLOSE1501 and b_final_date <> :CLOSE2001 and b_final_date <> :CLOSE2501 and b_final_date <> :CLOSE3101) 
                              GROUP by bd_payment_no
                            ) AS b3 ON cbd4.b_bill_no = b3.billNo 
                  ) AS temp3 ON temp3.b_bill_no = cbd3.b_bill_no 
          WHERE cbd3.b_final_date like :CLOSEL2 AND (cbd3.b_final_date <> :CLOSE1502 and cbd3.b_final_date <> :CLOSE2002 and cbd3.b_final_date <> :CLOSE2502 and cbd3.b_final_date <> :CLOSE3102) ';
      }
      $strSQL .= 'union 
      SELECT 
        cbd2.closedate, 
        cbd2.b_customer_cd, 
        cbd2.C_CUSTOMER_NAME, 
        temp2.b_bill_no AS beforebillno, 
        temp2.b_bill AS beforeprice, 
        IF(temp2.price1 IS NOT NULL, temp2.price1, 0) AS sumprice1, 
        IF(temp2.price2 IS NOT NULL, temp2.price2, 0) AS sumprice2, 
        IF(temp2.price3 IS NOT NULL, temp2.price3, 0) AS sumprice3, 
        IF(temp2.price4 IS NOT NULL, temp2.price4, 0) AS sumprice4, 
        IF(temp2.price5 IS NOT NULL, temp2.price5, 0) AS sumprice5, 
        IF(temp2.price6 IS NOT NULL, temp2.price6, 0) AS sumprice6, 
        IF(temp2.price8 IS NOT NULL, temp2.price8, 0) AS sumprice8, 
        IF(temp2.priceZ1 IS NOT NULL, temp2.priceZ1, 0) AS sumpriceZ1, 
        IF(temp2.price9 IS NOT NULL, temp2.price9, 0) + IF(temp2.priceZ2 IS NOT NULL, temp2.priceZ2, 0) AS sumpriceZ2, 
        temp2.b_bill - (IF(temp2.price1 IS NOT NULL, temp2.price1, 0) + 
        	IF(temp2.price2 IS NOT NULL, temp2.price2, 0) +
          IF(temp2.price3 IS NOT NULL, temp2.price3, 0) +
          IF(temp2.price4 IS NOT NULL, temp2.price4, 0) +
          IF(temp2.price5 IS NOT NULL, temp2.price5, 0) +
          IF(temp2.price6 IS NOT NULL, temp2.price6, 0) +
          IF(temp2.price8 IS NOT NULL, temp2.price8, 0) +
          IF(temp2.price9 IS NOT NULL, temp2.price9, 0) +
          IF(temp2.priceZ1 IS NOT NULL, temp2.priceZ1, 0) +
          IF(temp2.priceZ2 IS NOT NULL, temp2.priceZ2, 0)) AS carriedprice,
        0 AS billprice, 
        0 AS billtax, 
        temp2.b_bill - (IF(temp2.price1 IS NOT NULL, temp2.price1, 0) + 
        	IF(temp2.price2 IS NOT NULL, temp2.price2, 0) +
          IF(temp2.price3 IS NOT NULL, temp2.price3, 0) +
          IF(temp2.price4 IS NOT NULL, temp2.price4, 0) +
          IF(temp2.price5 IS NOT NULL, temp2.price5, 0) +
          IF(temp2.price6 IS NOT NULL, temp2.price6, 0) +
          IF(temp2.price8 IS NOT NULL, temp2.price8, 0) +
          IF(temp2.price9 IS NOT NULL, temp2.price9, 0) +
          IF(temp2.priceZ1 IS NOT NULL, temp2.priceZ1, 0) +
          IF(temp2.priceZ2 IS NOT NULL, temp2.priceZ2, 0)) AS thisbillprice, 
        cbd2.billstatus, 
        cbd2.b_final_date 
      FROM viewcheckbilldata AS cbd2 
      LEFT JOIN (SELECT 
                  b.b_bill_no, 
                  b.b_bill, 
                  MAX(d.dp_date) AS dp_date, 
                  dp_customer_cd, 
                  dp_no, 
                  dp_del_flg, 
                  SUM(CASE d.dp_type WHEN "1" THEN dp_price ELSE 0 END) AS price1,   /* 現金 */
                  SUM(CASE d.dp_type WHEN "2" THEN dp_price ELSE 0 END) AS price2,   /* 小切手 */
                  SUM(CASE d.dp_type WHEN "3" THEN dp_price ELSE 0 END) AS price3,   /* 銀行振込 */      
                  SUM(CASE d.dp_type WHEN "4" THEN dp_price ELSE 0 END) AS price4,   /* 手形 */       
                  SUM(CASE d.dp_type WHEN "5" THEN dp_price ELSE 0 END) AS price5,   /* 相殺 */       
                  SUM(CASE d.dp_type WHEN "6" THEN dp_price ELSE 0 END) AS price6,   /* 値引 */       
                  SUM(CASE d.dp_type WHEN "8" THEN dp_price ELSE 0 END) AS price8,   /* 電子記録債券 */         
                  SUM(CASE d.dp_type WHEN "9" THEN dp_price ELSE 0 END) AS price9,   /* 手形手数料 */         
                  SUM(CASE d.dp_type WHEN "Z1" THEN dp_price ELSE 0 END) AS priceZ1, /* 調整額 */       
                  SUM(CASE d.dp_type WHEN "Z2" THEN dp_price ELSE 0 END) AS priceZ2  /* 振込手数料 */
			          FROM deposit AS d 
			          INNER JOIN (SELECT * 
                            FROM bill 
                            LEFT JOIN customer ON b_customer_cd = C_CUSTOMER_CD ';
                            if ($sdat['closeDay'] === '31') {
                              $strSQL .= ' WHERE b_final_date < :CLOSEDATE2 AND b_final_sign = "0" AND (C_FINALDAY = :FINALDAY OR C_FINALDAY is null)  ';
                            } else {
                              $strSQL .= ' WHERE b_final_date < :CLOSEDATE2 AND b_final_sign = "0" AND C_FINALDAY = :FINALDAY ';
                            }
                            $strSQL .= ' GROUP by b_customer_cd) AS b ON d.dp_customer_cd = b.b_customer_cd 
			          WHERE d.dp_del_flg = 0 AND d.dp_date > concat("20",left(b.b_bill_no, 6)) AND d.dp_date <= :CLOSEDATE3 
			          GROUP BY dp_customer_cd 
                ORDER BY dp_no) AS temp2 ON temp2.dp_customer_cd = cbd2.b_customer_cd AND temp2.b_bill_no = cbd2.b_bill_no
      WHERE temp2.dp_date >= :LASTDATE1 AND temp2.dp_date <= :CLOSEDATE4 
      ORDER BY b_customer_cd
      ;';
      $sth = $dbh->prepare($strSQL);
      $sth->bindValue(':CLOSEDATE', $sdat['closeDateT'], PDO::PARAM_STR);
      $sth->bindValue(':LASTDATE', $sdat['closeDateF'], PDO::PARAM_STR);
      $sth->bindValue(':CLOSEDATE1', $sdat['closeDateT'], PDO::PARAM_STR);
      $sth->bindValue(':CLOSEDATE2', $sdat['closeDateT'], PDO::PARAM_STR);
      if ($sdat['closeDay'] === '31') {
        $sth->bindValue(':CLOSEL1', $sdat['closeDateL'], PDO::PARAM_STR);
        $sth->bindValue(':CLOSE1501', $sdat['close15'], PDO::PARAM_STR);
        $sth->bindValue(':CLOSE2001', $sdat['close20'], PDO::PARAM_STR);
        $sth->bindValue(':CLOSE2501', $sdat['close25'], PDO::PARAM_STR);
        $sth->bindValue(':CLOSE3101', $sdat['close31'], PDO::PARAM_STR);
        $sth->bindValue(':CLOSEL2', $sdat['closeDateL'], PDO::PARAM_STR);
        $sth->bindValue(':CLOSE1502', $sdat['close15'], PDO::PARAM_STR);
        $sth->bindValue(':CLOSE2002', $sdat['close20'], PDO::PARAM_STR);
        $sth->bindValue(':CLOSE2502', $sdat['close25'], PDO::PARAM_STR);
        $sth->bindValue(':CLOSE3102', $sdat['close31'], PDO::PARAM_STR);
      }
      $sth->bindValue(':FINALDAY', $sdat['closeDay'], PDO::PARAM_STR);
      $sth->bindValue(':CLOSEDATE3', $sdat['closeDateT'], PDO::PARAM_STR);
      $sth->bindValue(':LASTDATE1', $sdat['closeDateF'], PDO::PARAM_STR);
      $sth->bindValue(':CLOSEDATE4', $sdat['closeDateT'], PDO::PARAM_STR);
      $sth->execute();
      $result = $sth->fetchAll(PDO::FETCH_ASSOC);

      // エクセルファイル作成 
      BookMaker::createCheckBillSheet($result);      
    } catch (Exception $e) {
      throw $e;
    }
  }

  // /***
  //  * 請求書発行前確認シート
  //  */
  // public static function createCheckStatementSheet() {
  //   $dbh = self::dbPDO();
  //   $results = [];
  //   $strToday = '';
  //   try {

  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }


  /**
   * 出荷予定データのうち、請求締日が違っている場合があるため、確認用
   * 現時点でデータ量1100行ほどなのでどのように対応するか、。
   */
  public static function checkStatementList() {
    $dbh = self::dbPDO();
    try {
      $dbh->beginTransaction();

      // 未請求一覧　
      $sth = $dbh->prepare('
        SELECT
        s.s_customer_cd, 
          c.C_CUSTOMER_NAME,
          CONCAT(LEFT(s_shipping_date, 4), "/", substring(s_shipping_date, 5, 2), "/", RIGHT(s_shipping_date, 2)) AS shipmentdate,
          CONCAT(LEFT(sd.sd_bill_close_date, 4), "/", substring(sd.sd_bill_close_date, 5, 2), "/", RIGHT(sd.sd_bill_close_date, 2)) AS closedate,
          sd.sd_e_estimate_no,
          SUM(sd_delivery_price) + SUM(sd_tax) AS sum
        FROM statementdetails AS sd
        LEFT JOIN statement AS s ON s.s_estimate_no = sd.sd_e_estimate_no AND s.s_serial_no = sd.sd_statement_sub_no
        LEFT JOIN customer AS c ON c.C_CUSTOMER_CD = s.s_customer_cd
        WHERE 
        sd.sd_shipment_date <> "" AND sd.sd_bill_create_date = ""
        GROUP BY sd_e_estimate_no
	      ORDER BY s_customer_cd, sd_shipment_date, sd_bill_close_date, sd_e_estimate_no
      ;');
      $sth->execute();

      // エクセルファイル作成 

    } catch (Exception $e) {
      throw $e;
    }
  }

  /***
   * 文字列右側に、指定文字列埋めを行う。
   */
  private static function mbPadding($value, $length, $str) {
    $str = '';

    if (!$value) {
      return $str;
    }

    // 指定文字列の長さを取得
    $targetLen = mb_strlen($value);
    if ($targetLen >  $length) {
      return $str;
    }
    $str = $value;
    while ($targetLen < $length) {
      // 指定文字数までスペース埋め
      $str .= '　';
      $targetLen = mb_strlen($str);
    }

    return $str;
  }

  // 製造完了
  public static function completeProd($sdat) {
    $resp = array('succeed' => false, 'msg' => 'すでに製造完了しています。');
    $dbh = self::dbPDO();
    $columnsSTC = self::getColumnDefs('stock');    
    $dbh->beginTransaction();
    try {
      foreach ($sdat as $record) {
        // 既存のデータを取得
        $sth = $dbh->prepare('SELECT * 
          FROM stock 
          WHERE stc_arrange_type = :ARRANGE_TYPE
          AND stc_report_no = :REPORT_NO
          AND stc_sub_no_01 = :SUB_NO_01
          AND stc_sub_no_02 = :SUB_NO_02
        ;');
        $sth->bindValue(':ARRANGE_TYPE', '210', PDO::PARAM_STR);
        $sth->bindValue(':REPORT_NO', $record['ed_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUB_NO_01', $record['ed_estimate_sub_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUB_NO_02', $record['ed_shipment_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        // 該当データが無い場合、新規登録
        if (count($result) === 0) {
          // 新規登録用のデータを作成
          $stockData = [];
          $stockData['stc_belong_cd'] = $_SESSION['companycd'];
          $stockData['stc_month'] = (new DateTime('Now', new DateTimeZone('Asia/Tokyo')))->format('ym');
          $stockData['stc_arrange_type'] = '210';
          $stockData['stc_report_no'] = $record['ed_estimate_no'];
          $stockData['stc_sub_no_01'] = $record['ed_estimate_sub_no'];
          $stockData['stc_sub_no_02'] = $record['ed_shipment_sub_no'];
          $stockData['stc_sub_no_03'] = '000';
          $stockData['stc_sub_no_04'] = '000';
          $stockData['stc_update_cnt'] = 0;
          $stockData['stc_report_date'] = self::currentDate();
          $stockData['stc_pjcd'] = '';
          $stockData['stc_target_id'] = $record['ed_estimate_no'];
          $stockData['stc_place_cd'] = $record['ed_warehouse_cd'];
          $stockData['stc_customer_post_cd'] = $record['e_customer_post_cd'];
          $stockData['stc_product_cd'] = $record['ed_p_cd'];
          $stockData['stc_sub_01'] = (float)$record['ed_sub_01'];
          $stockData['stc_sub_02'] = (float)$record['ed_sub_02'];
          $stockData['stc_sub_12'] = $record['ed_sub_12'];
          $stockData['stc_sub_13'] = $record['ed_sub_13'];
          $stockData['stc_sub_03'] = $record['ed_sub_03'];
          $stockData['stc_sub_04'] = (float)$record['ed_sub_04'];
          $stockData['stc_sub_05'] = (float)$record['ed_sub_05'];
          $stockData['stc_sub_06'] = $record['ed_sub_06'];
          $stockData['stc_sub_07'] = $record['ed_sub_07'];
          $stockData['stc_sub_08'] = (float)$record['ed_sub_08'];
          $stockData['stc_sub_10'] = $record['ed_sub_10'];
          $stockData['stc_sub_09'] = (float)$record['ed_sub_09'];
          $stockData['stc_sub_11'] = $record['ed_sub_11'];
          $stockData['stc_qty_trans'] = $record['ed_quantity'];
          $stockData['stc_price_trans'] = $record['ed_price'];
          $stockData['stc_price_tax'] = 0;
          $stockData['stc_inventory_type'] = '1';
          $stockData['stc_recv_type'] = '0';
          $stockData['stc_pay_type'] = '0';
          $stockData['stc_expence_type'] = '0';
          $stockData['stc_cost_type'] = '1';
          $stockData['stc_cost_eva_qty'] = $record['ed_quantity'];
          $stockData['stc_unit_price'] = $record['ed_cost'];
          $stockData['stc_type_01'] = '0';
          $stockData['stc_type_02'] = null;
          $stockData['stc_type_03'] = null;
          $stockData['stc_type_04'] = $record['ed_estimate_no'] . $record['ed_estimate_sub_no'];
          $stockData['stc_type_05'] = '0';
          $stockData['stc_update_at'] = self::currentDate();
          $stockData['stc_update_time'] = (new DateTime('Now', new DateTimeZone('Asia/Tokyo')))->format('Hi');
          $stockData['stc_update_cd'] = $_SESSION['usercd'];
          $stockData['stc_unit_tran'] = $record['ed_unit_tran'];
          $stockData['stc_type_subject'] = $record['ed_type_subject'];
          $stockData['stc_parrangement_cd'] = $record['ed_parrangement_cd'];
          $stockData['stc_maker_cd'] = '';

          // 登録
          $sth = $dbh->prepare(self::makeInsertSQL('stock', $columnsSTC));
          self::bindInsertKeys($sth, $columnsSTC, $stockData);
          $sth->execute();

          // 在庫に入庫
          self::updateProductRecord ($record, 0, $dbh);
          
          $resp['msg'] = 'ステータスを製造完了に更新しました。';
        }
      }          
      $dbh->commit();
      echo json_encode($resp);
    } catch (Exception $e) {
      $dbh->rollback();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }

  // 発注引継取消
  public static function cancelOrderTakeover($sdat) {
    $resp = array('succeed' => false, 'msg' => '発注引継を取り消しました。');
    $dbh = self::dbPDO();
    $columnsSTC = self::getColumnDefs('stock');    
    $dbh->beginTransaction();
    try {
      foreach ($sdat as $record) {

        $sth = $dbh->prepare('SELECT DISTINCT moed_order_no
          FROM morderestimate 
          WHERE moed_belong_cd = :BELONG_CD
          AND moed_refer_no = :ESTIMATE_NO
        ;');
        $sth->bindValue(':BELONG_CD', $record['moed_belong_cd'], PDO::PARAM_STR);
        $sth->bindValue(':ESTIMATE_NO', $record['moed_refer_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        foreach ($result as $moedRecord) {
          if ($record['moed_order_no'] === $moedRecord['moed_order_no']) {
            // ed_type_07に「0」に更新する
            $sth = $dbh->prepare('UPDATE estimatedetails
              SET ed_type_07 = "0" 
              WHERE ed_belong_cd = :BELONG_CD
              AND ed_estimate_no = :ESTIMATE_NO
            ;');
            $sth->bindValue(':BELONG_CD', $record['moed_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':ESTIMATE_NO', $record['moed_refer_no'], PDO::PARAM_STR);
            $sth->execute();

            // チェックされた発注データを削除
            $sth = $dbh->prepare('DELETE
              FROM morderestimate
              WHERE moed_belong_cd = :BELONG_CD
              AND moed_order_no = :ESTIMATE_NO
            ;');
            $sth->bindValue(':BELONG_CD', $record['moed_belong_cd'], PDO::PARAM_STR);
            $sth->bindValue(':ESTIMATE_NO', $record['moed_order_no'], PDO::PARAM_STR);
            $sth->execute();
          }
        }
      }          
      $dbh->commit();
      echo json_encode($resp);
    } catch (Exception $e) {
      $dbh->rollback();
      $resp['msg'] = self::getDBErrorMsg($e);
      $resp['succeed'] = false;
      echo json_encode($resp);
    }
  }
  

  private static function MonthShifter ($date,$months) {
    $init = clone $date;
    $modifier = $months.' months';
    $back_modifier =- $months . ' months';
   
    $date->modify($modifier);
    $back_to_init = clone $date;
    $back_to_init->modify($back_modifier);
   
    while ($init->format('m') != $back_to_init->format('m')) {
      $date->modify('-1 day');
      $back_to_init = clone $date;
      $back_to_init->modify($back_modifier);   
    }
  }

  /**
   * 見積書　番号一覧の編集 2022/12/14 仕様追加
   */
  private static function filterNumberListED ($edList) {
    $result = [];

    // 前回の受注No
    $prevEstimateNo = "";
    // バッファーフラグ
    $bufferFlg = 0;
    for ($i = 0; $i < count($edList); $i++) {
      $data = $edList[$i];
      // 線径×目合 寸法を設定する
      $productSpec = BookMaker::makeArrayProductSpec($data);
      $data['sd_p_name_supple_01'] = $productSpec[1];
      $data['sd_p_name_supple_02'] = $productSpec[2];
      // 返却値の配列の数
      $resultCount = count($result);

      // 品名CDの先頭が26のデータは除外する
      if (substr($data['ed_p_cd'], 0, 2) !== '26') {
        $data['id'] = $i;
        // 枝番001のデータが「式 or 一式」のとき
        if ($data['ed_estimate_sub_no'] === '001' && ($data['ed_unit_tran'] === '式' || $data['ed_unit_tran'] === '一式')) {
          $bufferFlg = 1;
          // 枝番[001]一式データ保持
          $bufferEstimateData = $data;
          // 受注Noを保持しておく
          $prevEstimateNo = $data['e_estimate_no'];
          continue;
        }

        // バッファーデータの受注Noと同じ受注Noで枝番[002]以降のとき
        if ($bufferEstimateData['e_estimate_no'] === $data['e_estimate_no'] && $data['ed_estimate_sub_no'] === '002') {
          $bufferEstimateData['ed_unit_tran'] = $data['ed_unit_tran'];
          $bufferEstimateData['ed_quantity'] = $data['ed_quantity'];
          continue;
        } elseif ($bufferEstimateData['e_estimate_no'] === $data['e_estimate_no']) {
          $bufferEstimateData['ed_quantity'] += $data['ed_quantity'];
          continue;
        } elseif ($bufferEstimateData['e_estimate_no'] !== $data['e_estimate_no'] && $bufferFlg === 1) {
          array_push($result, $bufferEstimateData);
          // バッファーフラグ初期化
          $bufferFlg = 0;
        }

        // 最初のデータは配列に追加して終了
        if ($resultCount === 0) {
          array_push($result, $data);
          // 受注Noを保持しておく
          $prevEstimateNo = $data['e_estimate_no'];
          continue;
        }

        // 返却する配列の最後の要素番号
        $lastIndex = $resultCount - 1;
        // 重複しないデータである　かつ　受注Noが同じ　かつ　品名CDが同じ　かつ　線形目合が同じ場合
        // 受注数を加算し、寸法に「寸法切り」に設定して終了
        if ($data['e_estimate_no'] === $result[$lastIndex]['e_estimate_no'] && $data['ed_p_cd'] === $result[$lastIndex]['ed_p_cd'] && $data['sd_p_name_supple_01'] === $result[$lastIndex]['sd_p_name_supple_01']) {
          $result[$lastIndex]['ed_quantity'] += $data['ed_quantity'];
          $result[$lastIndex]['sd_p_name_supple_02'] = '寸法切り';
          continue;
        }

        // 前回と同じ受注Noの場合はハイフンを設定する。
        if ($prevEstimateNo === $data['e_estimate_no']) {
          $data['e_estimate_no'] = '-';
        }

        // 同一データではない場合は配列に追加
        array_push($result, $data);

        // 受注Noを保持しておく
        if ($data['e_estimate_no'] !== '-') {
          $prevEstimateNo = $data['e_estimate_no'];
        }
      }
    }

    return $result;
  }

  /***
   * 見積明細データのフラグ更新
   * datarecordは0:見積No、1:見積枝番、2:出荷枝番。
   */
  private static function updateEstimateFlg($mode, $status = 0, $dataRecord, $dbh) {
    $strSET = '';

    $issuedate = self::currentDate();
    $columnsH = self::getColumnDefs('t_estimatedetails');
    self::markAsHeaderPK($columnsH, 'ed_belong_cd');
    self::markAsHeaderPK($columnsH, 'ed_estimate_no');
    self::markAsHeaderPK($columnsH, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsH, 'ed_shipment_sub_no');
    
    if ($mode === 'PLODPLAN_INSERT') {
      // 製造指示作成
      $strSET = ' ed_prod_plan_sign = :PSTATUS , ed_prod_plan_date = :ISSUEDATE , ed_update_cnt = ed_update_cnt + 1 ';
    }

    // 元データ取得       
    $sth = $dbh->prepare('
    SELECT * FROM estimatedetails
    WHERE ed_belong_cd = :BELONGCD 
    AND ed_estimate_no = :ESTNO 
    AND ed_estimate_sub_no = :SUBNO 
    AND ed_shipment_sub_no = :SHIPNO
    ;');
    $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
    $sth->bindValue(':ESTNO', $dataRecord[0], PDO::PARAM_STR);
    $sth->bindValue(':SUBNO', $dataRecord[1], PDO::PARAM_STR);
    $sth->bindValue(':SHIPNO', $dataRecord[2], PDO::PARAM_STR);
    $sth->execute();
    $result = $sth->fetchAll(PDO::FETCH_ASSOC);
    
    // データ更新
    $strSQL = 'UPDATE estimatedetails SET ' . $strSET . ' WHERE ed_belong_cd = :BELONGCD AND ed_estimate_no = :ESTNO AND ed_estimate_sub_no = :SUBNO AND ed_shipment_sub_no = :SHIPNO;';

    $sth = $dbh->prepare($strSQL);
    $sth->bindValue(':PSTATUS', $status, PDO::PARAM_STR);
    $sth->bindValue(':ISSUEDATE', $issuedate, PDO::PARAM_STR);
    $sth->bindValue(':BELONGCD', $_SESSION['companycd'], PDO::PARAM_STR);
    $sth->bindValue(':ESTNO', $dataRecord[0], PDO::PARAM_STR);
    $sth->bindValue(':SUBNO', $dataRecord[1], PDO::PARAM_STR);
    $sth->bindValue(':SHIPNO', $dataRecord[2], PDO::PARAM_STR);
    $sth->execute();

    // 受注履歴テーブル
    $result[0]['ed_update_cnt'] += 1;
    $sth = $dbh->prepare(self::makeInsertSQL('t_estimatedetails', $columnsH));
    self::bindInsertKeys($sth, $columnsH, $result[0]);
    $sth->execute();

    return;
  }


  /***
   * 小数点以下に数値がなければ切り捨て
   */
  public static function convertStrRoundDownToNumber($orgNumber) {
    $arTarget = [];
    $strDecimal = '';
    $result = '';
    try {
      // 整数と小数点以下を分割
      $arTarget = explode('.', $orgNumber);

      if (count($arTarget) > 1) {
        // 小数点があったら
        $strDecimal = self::getDecimalValue($arTarget[1]);
      } else {
        return $orgNumber;
      }

      if ($strDecimal === '' && (Int)$arTarget[0] <= 0 ) {
        return $arTarget[0];
      } else if ($strDecimal === '' && (Int)$arTarget[0] > 0 ) {
        return $arTarget[0];
      } else {
        return $arTarget[0] . '.' . $strDecimal;
      }

    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 小数点以下の値を取得
   */
  private static function getDecimalValue($target) {
    try {
      // 何桁目までデータがあるか確認
      $arSplitData = str_split($target);
      $maxLength = 0;   // 小数点第何位までか

      for ($i = 0; $i < count($arSplitData); $i++) {
        if ($arSplitData[$i] > 0) {
          $maxLength = $i + 1;
        }
      }
      
      return substr($target, 0, $maxLength);

    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 製造完了ステータス更新
   * 出荷予定テーブルと見積テーブル
   */
  private static function updateStatusCompleteProduction($dat, $dbh) {
    $updateData = [];

    $columnsD = self::getColumnDefs('statementdetails');    
    $columnsE = self::getColumnDefs('estimate');
    $columnsTE = self::getColumnDefs('t_estimate');
    $columnsED = self::getColumnDefs('estimatedetails');
    $columnsTED = self::getColumnDefs('t_estimatedetails');

    self::markAsHeaderPK($columnsD, 'sd_belong_cd');
    self::markAsHeaderPK($columnsD, 'sd_e_estimate_no');
    self::markAsHeaderPK($columnsD, 'sd_statement_sub_no');
    self::markAsHeaderPK($columnsD, 'sd_estimate_sub_no');
    self::markAsHeaderPK($columnsE, 'e_belong_cd');
    self::markAsHeaderPK($columnsE, 'e_estimate_no');
    self::markAsHeaderPK($columnsTE, 'e_belong_cd');
    self::markAsHeaderPK($columnsTE, 'e_estimate_no');
    self::markAsHeaderPK($columnsTE, 'e_update_cnt');
    self::markAsHeaderPK($columnsED, 'ed_belong_cd');
    self::markAsHeaderPK($columnsED, 'ed_estimate_no');
    self::markAsHeaderPK($columnsED, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsED, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsTED, 'ed_belong_cd');
    self::markAsHeaderPK($columnsTED, 'ed_estimate_no');
    self::markAsHeaderPK($columnsTED, 'ed_estimate_sub_no');
    self::markAsHeaderPK($columnsTED, 'ed_shipment_sub_no');
    self::markAsHeaderPK($columnsTED, 'ed_update_cnt');

    try {
      foreach($dat as $record) {
        // statementdetails
        $sth = $dbh->prepare('
        SELECT * FROM statementdetails
        WHERE sd_e_estimate_no = :ESTNO
        AND sd_estimate_sub_no = :ESTSUBNO
        ;');
        $sth->bindValue(':ESTNO', $record['pd_e_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':ESTSUBNO', $record['pd_e_estimate_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($result) > 0) {
          $result['sd_update_cnt'] += 1;
          $result['sd_update_at'] = self::currentDate();
          $result['sd_update_cd'] = $_SESSION['usercd'];
          $result['sd_prod_fin_date'] = $record['pd_finish_date'];

          $sth = $dbh->prepare(self::makeUpdateSQL('shippingassign', $columnsD));
          self::bindValueToUpdate($sth, $columnsD, $result);
          $sth->execute();
        }

        // estimatedetails
        $sth = $dbh->prepare('
        SELECT * FROM estimatedetails
        WHERE 
        ed_estimate_no = :ESTNO AND 
        ed_estimate_sub_no = :SUBNO
        ;');
        $sth->bindValue(':ESTNO', $record['pd_e_estimate_no'], PDO::PARAM_STR);
        $sth->bindValue(':SUBNO', $record['pd_e_estimate_sub_no'], PDO::PARAM_STR);
        $sth->execute();
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
        
        if (count($result) > 0) {
          $result['ed_update_cnt'] += 1;
          $result['ed_prod_plan_sign'] = '2';
          $result['ed_prod_fin_date'] = $record['pd_finish_date'];
          $result['ed_update_at'] = self::currentDate();
          $result['ed_update_cd'] = $_SESSION['usercd'];

          // 受注明細更新
          $sth = $dbh->prepare(self::makeUpdateSQL('estimatedetails',  $columnsED));
          self::bindValueToUpdate($sth,  $columnsED, $record);
          $sth->execute();
          // 受注履歴更新
          $sth = $dbh->prepare(self::makeInsertSQL('t_estimatedetails',  $columnsTED));
          self::bindInsertKeys($sth,  $columnsTED, $record);
          $sth->execute();

        }
      }
      
      
    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * storageテーブルに入庫データ登録・取消
   * 入庫・取消
   * deleteflg:　1:取消
   * mode: 0:材料発注、1:受注品外注
   */
  // ※2023/3/6　入庫報告で在庫登録に変更して実行されないため、以下コメントアウト
  // private static function morderUpdateStorage ($record, $deleteFlg, $dbh) {
  //   // 受注の外注発注の場合、他カラムデータが変更された場合、在庫がずれてしまう可能性があるため、固定値とする
  //   $WCD = '000';
  //   $TYPE_SUBJECT = '1';


  //   $updRecord = [];
  //   $columnsH = self::getColumnDefs('storage');
  //   self::markAsHeaderPK($columnsH, 'sr_w_cd');
  //   self::markAsHeaderPK($columnsH, 'sr_p_cd');
  //   self::markAsHeaderPK($columnsH, 'sr_sub_cd');
  //   self::markAsHeaderPK($columnsH, 'sr_unit_cd');
  //   self::markAsHeaderPK($columnsH, 'sr_type_subject');
  //   self::markAsHeaderPK($columnsH, 'sr_parrangement_cd');

  //   try {
  //     // 取消の時は、前回登録値を渡してもらう
  //     $updRecord['sr_belong_cd'] = $_SESSION['companycd'];
  //     $updRecord['sr_cd'] = '0000'; // 現在未使用
  //     $updRecord['sr_w_cd'] = self::checkNotSet($record['moed_warehouse_cd']) ? '000' : $record['moed_warehouse_cd'];
  //     $updRecord['sr_p_cd'] = $record['moed_product_cd'];
  //     $updRecord['sr_sub_cd'] = self::storageSetPadding($record);
  //     $updRecord['sr_sub_01'] = self::checkNotSet($record['moed_sub_01']) ? 0 : $record['moed_sub_01'];
  //     $updRecord['sr_sub_02'] = self::checkNotSet($record['moed_sub_02']) ? 0 : $record['moed_sub_02'];
  //     $updRecord['sr_sub_03'] = $record['moed_sub_03'];
  //     $updRecord['sr_sub_04'] = self::checkNotSet($record['moed_sub_04']) ? 0 : $record['moed_sub_04'];
  //     $updRecord['sr_sub_05'] = self::checkNotSet($record['moed_sub_05']) ? 0 : $record['moed_sub_05'];
  //     $updRecord['sr_sub_06'] = $record['moed_sub_06'];
  //     $updRecord['sr_sub_07'] = $record['moed_sub_07'];
  //     $updRecord['sr_sub_08'] = $record['moed_sub_08'];
  //     $updRecord['sr_sub_09'] = $record['moed_sub_09'];
  //     $updRecord['sr_sub_10'] = $record['moed_sub_10'];
  //     $updRecord['sr_sub_11'] = $record['moed_sub_11'];
  //     $updRecord['sr_sub_12'] = $record['moed_sub_12'];
  //     $updRecord['sr_sub_13'] = $record['moed_sub_13'];
  //     $updRecord['sr_sub_14'] = $record['moed_type_03'];
  //     $updRecord['sr_transfer_date'] = self::checkNotSet($record['moed_accept_date']) ? $record['moed_arrival_plan_date'] : $record['moed_accept_date'];
  //     $updRecord['sr_prev_quantity'] = 0;
  //     $updRecord['sr_prev_quantity_eval'] = 0;
  //     $updRecord['sr_prev_price_eval'] = 0;
  //     $updRecord['sr_quantity'] = abs($record['moed_unit_qty']) > 0 ? $record['moed_unit_qty'] : $record['moed_quantity'];
  //     $updRecord['sr_unit_cd'] = $record['moed_unit_eval'];
  //     $updRecord['sr_price_eval'] = $record['moed_money'];
  //     $updRecord['sr_dimension'] = $record['moed_sub_num_01'];
  //     $updRecord['sr_weight'] = $record['moed_sub_num_02'];
  //     $updRecord['sr_fix_price_eval'] = $record['moed_unit_price'];
  //     $updRecord['sr_remarks'] = $record[''];
  //     $updRecord['sr_update_at'] = self::currentDate();
  //     $updRecord['sr_update_cd'] = $_SESSION['usercd'];
  //     $updRecord['sr_type_subject'] = $record['moed_type_subject'];
  //     $updRecord['sr_parrangement_cd'] = $record['moed_parrangement_cd'];
  //     $updRecord['sr_maker_cd'] = $record['moed_manufacture_cd'];
  //     $updRecord['sr_type_material'] = $record['moed_type_06'];
      
  //     if ($deleteFlg) {
  //       // 材料発注　入庫取消
  //       $sth = $dbh->prepare('
  //       DELETE FROM storage
  //       WHERE sr_w_cd = :WAREHOUSECD
  //       AND sr_p_cd = :PRODUCTCD
  //       AND sr_sub_cd = :PSUPPLE
  //       AND sr_unit_cd = :UNITTRAN
  //       AND sr_type_subject = :SUBJECTCD
  //       AND sr_parrangement_cd = :PARCD 
  //       ;');
  //       $sth->bindValue(':WAREHOUSECD', $updRecord['sr_w_cd'], PDO::PARAM_STR);
  //       $sth->bindValue(':PRODUCTCD', $updRecord['sr_p_cd'], PDO::PARAM_STR);
  //       $sth->bindValue(':PSUPPLE', $updRecord['sr_sub_cd'], PDO::PARAM_STR);
  //       $sth->bindValue(':UNITTRAN', $updRecord['sr_unit_cd'], PDO::PARAM_STR);
  //       $sth->bindValue(':SUBJECTCD', $updRecord['sr_type_subject'], PDO::PARAM_STR);
  //       $sth->bindValue(':PARCD', $updRecord['sr_parrangement_cd'], PDO::PARAM_STR);
  //       $sth->execute();

  //     } else {
  //       // 入庫
  //       $sth = $dbh->prepare(self::makeInsertSQL('storage', $columnsH));
  //       self::bindInsertKeys($sth, $columnsH, $updRecord);
  //       $sth->execute();
  //     }
  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }

  // ※2023/3/6　入庫報告で在庫登録に変更して実行されないため、以下コメントアウト
  // private static function morderEstimateUpdateStorage ($record, $deleteFlg, $dbh) {
  //   // 受注の外注発注の場合、他カラムデータが変更された場合、在庫がずれてしまう可能性があるため、固定値とする
  //   $WCD = '000';
  //   $TYPE_SUBJECT = '1';

  //   $updRecord = [];

  //   $columnsH = self::getColumnDefs('storage');
  //   self::markAsHeaderPK($columnsH, 'sr_w_cd');
  //   self::markAsHeaderPK($columnsH, 'sr_p_cd');
  //   self::markAsHeaderPK($columnsH, 'sr_sub_cd');
  //   self::markAsHeaderPK($columnsH, 'sr_unit_cd');
  //   self::markAsHeaderPK($columnsH, 'sr_type_subject');
  //   self::markAsHeaderPK($columnsH, 'sr_parrangement_cd');

  //   try {
  //     // 受注用に発注したものが他にないか確認
  //     $sth = $dbh->prepare('
  //     SELECT * FROM morderestimate
  //     WHERE moed_order_no <> :ORDERNO
  //     AND moed_refer_no = :REFERNO
  //     AND moed_accept_date IS NULL
  //     ;');
  //     $sth->bindValue(':ORDERNO', $record['moed_order_no'], PDO::PARAM_STR);
  //     $sth->bindValue(':REFERNO', $record['moed_refer_no'], PDO::PARAM_STR);
  //     $sth->execute();
  //     $result = $sth->fetchAll(PDO::FETCH_ASSOC);

  //     if (count($result) > 0) {
  //       // 他にもあったら戻る
  //       return;
  //     }

  //     // 該当受注データを取得
  //     $sth = $dbh->prepare('
  //     SELECT *  FROM estimatedetails
  //     WHERE ed_estimate_no = :ESTNO AND ed_p_cd NOT LIKE "26%"
  //     ;');
  //     $sth->bindValue(':ESTNO', $record['moed_refer_no'], PDO::PARAM_STR);
  //     $sth->execute();
  //     $resultED = $sth->fetchAll(PDO::FETCH_ASSOC);

  //     foreach($resultED as $recEstimate) {
  //       // ロット番号をセット
  //       $recEstimate['ed_lot_no'] = $recEstimate['ed_estimate_no'] . $recEstimate['ed_estimate_sub_no'];

  //       // Default値
  //       $updRecord['sr_belong_cd'] = $_SESSION['companycd'];
  //       $updRecord['sr_cd'] = '0000'; // 現在未使用
  //       $updRecord['sr_w_cd'] = $WCD;
  //       $updRecord['sr_p_cd'] = $recEstimate['ed_p_cd'];
  //       $updRecord['sr_sub_cd'] = self::storageSetPadding($recEstimate);
  //       $updRecord['sr_sub_01'] = self::checkNotSet($recEstimate['ed_sub_01']) ? 0 : $recEstimate['ed_sub_01'];
  //       $updRecord['sr_sub_02'] = self::checkNotSet($recEstimate['ed_sub_02']) ? 0 : $recEstimate['ed_sub_02'];
  //       $updRecord['sr_sub_03'] = $recEstimate['ed_sub_03'];
  //       $updRecord['sr_sub_04'] = self::checkNotSet($recEstimate['ed_sub_04']) ? 0 : $recEstimate['ed_sub_04'];
  //       $updRecord['sr_sub_05'] = self::checkNotSet($recEstimate['ed_sub_05']) ? 0 : $recEstimate['ed_sub_05'];
  //       $updRecord['sr_sub_06'] = $recEstimate['ed_sub_06'];
  //       $updRecord['sr_sub_07'] = $recEstimate['ed_sub_07'];
  //       $updRecord['sr_sub_08'] = $recEstimate['ed_sub_08'];
  //       $updRecord['sr_sub_09'] = $recEstimate['ed_sub_09'];
  //       $updRecord['sr_sub_10'] = $recEstimate['ed_sub_10'];
  //       $updRecord['sr_sub_11'] = $recEstimate['ed_sub_11'];
  //       $updRecord['sr_sub_12'] = $recEstimate['ed_sub_12'];
  //       $updRecord['sr_sub_13'] = $recEstimate['ed_sub_13'];
  //       $updRecord['sr_sub_14'] = $recEstimate['ed_lot_no'];
  //       $updRecord['sr_transfer_date'] = self::checkNotSet($record['moed_accept_date']) ? $record['moed_arrival_plan_date'] : $record['moed_accept_date'];
  //       $updRecord['sr_prev_quantity'] = 0;
  //       $updRecord['sr_prev_quantity_eval'] = 0;
  //       $updRecord['sr_prev_price_eval'] = 0;
  //       $updRecord['sr_quantity'] = $recEstimate['ed_quantity'];
  //       $updRecord['sr_unit_cd'] = $recEstimate['ed_unit_tran'];
  //       $updRecord['sr_price_eval'] = $recEstimate['ed_price'];
  //       $updRecord['sr_dimension'] = $recEstimate['ed_sub_num_01'];
  //       $updRecord['sr_weight'] = $recEstimate['ed_sub_num_02'];
  //       $updRecord['sr_fix_price_eval'] = $recEstimate['ed_cost'];
  //       $updRecord['sr_remarks'] = '受注→外注品';
  //       $updRecord['sr_update_at'] = self::currentDate();
  //       $updRecord['sr_update_cd'] = $_SESSION['usercd'];
  //       $updRecord['sr_type_subject'] = $TYPE_SUBJECT;
  //       $updRecord['sr_parrangement_cd'] = $recEstimate['ed_parrangement_cd'];
  //       $updRecord['sr_maker_cd'] = '';
  //       $updRecord['sr_type_material'] = '';

  //       if ($deleteFlg) {
  //         // 取消
  //         $sth = $dbh->prepare('
  //         DELETE FROM storage
  //         WHERE sr_w_cd = :WAREHOUSECD
  //         AND sr_p_cd = :PRODUCTCD
  //         AND sr_sub_cd = :PSUPPLE
  //         AND sr_unit_cd = :UNITTRAN
  //         AND sr_type_subject = :SUBJECTCD
  //         AND sr_parrangement_cd = :PARCD 
  //         ;');
  //         $sth->bindValue(':WAREHOUSECD', $updRecord['sr_w_cd'], PDO::PARAM_STR);
  //         $sth->bindValue(':PRODUCTCD', $updRecord['sr_p_cd'], PDO::PARAM_STR);
  //         $sth->bindValue(':PSUPPLE', $updRecord['sr_sub_cd'], PDO::PARAM_STR);
  //         $sth->bindValue(':UNITTRAN', $updRecord['sr_unit_cd'], PDO::PARAM_STR);
  //         $sth->bindValue(':SUBJECTCD', $updRecord['sr_type_subject'], PDO::PARAM_STR);
  //         $sth->bindValue(':PARCD', $updRecord['sr_parrangement_cd'], PDO::PARAM_STR);
  //         $sth->execute();
  //       } else {
  //         // 入庫 レコード毎にこの関数が呼ばれるため、重複をはじくようにする。
  //         // ロット番号がキーに含まれているため、同規格でも異なる製品となるため、加算の必要がないため。
  //         $sth = $dbh->prepare('
  //         SELECT * FROM storage
  //         WHERE sr_w_cd = :WAREHOUSECD
  //         AND sr_p_cd = :PRODUCTCD
  //         AND sr_sub_cd = :PSUPPLE
  //         AND sr_unit_cd = :UNITTRAN
  //         AND sr_type_subject = :SUBJECTCD
  //         AND sr_parrangement_cd = :PARCD          
  //         ');
  //         $sth->bindValue(':WAREHOUSECD', $updRecord['sr_w_cd'], PDO::PARAM_STR);
  //         $sth->bindValue(':PRODUCTCD', $updRecord['sr_p_cd'], PDO::PARAM_STR);
  //         $sth->bindValue(':PSUPPLE', $updRecord['sr_sub_cd'], PDO::PARAM_STR);
  //         $sth->bindValue(':UNITTRAN', $updRecord['sr_unit_cd'], PDO::PARAM_STR);
  //         $sth->bindValue(':SUBJECTCD', $updRecord['sr_type_subject'], PDO::PARAM_STR);
  //         $sth->bindValue(':PARCD', $updRecord['sr_parrangement_cd'], PDO::PARAM_STR);
  //         $sth->execute();
  //         $rsltStore = $sth->fetchAll(PDO::FETCH_ASSOC);

  //         if (count($rsltStore) <= 0) {
  //           $sth = $dbh->prepare(self::makeInsertSQL('storage', $columnsH));
  //           self::bindInsertKeys($sth, $columnsH, $updRecord);
  //           $sth->execute();
  //         }
  //       }
  //     }

  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }


  /***
   * 製造完了の在庫に関しては、キャンセルは在庫画面から行ってもらう。
   */
  private static function updateProductRecord ($recEstimate, $deleteFlg, $dbh) {
    // 受注の外注発注の場合、他カラムデータが変更された場合、在庫がずれてしまう可能性があるため、固定値とする
    $WCD = '000';
    $TYPE_SUBJECT = '1';

    $updRecord = [];
    $columnsH = self::getColumnDefs('storage');
    self::markAsHeaderPK($columnsH, 'sr_w_cd');
    self::markAsHeaderPK($columnsH, 'sr_p_cd');
    self::markAsHeaderPK($columnsH, 'sr_sub_cd');
    self::markAsHeaderPK($columnsH, 'sr_unit_cd');
    self::markAsHeaderPK($columnsH, 'sr_type_subject');
    self::markAsHeaderPK($columnsH, 'sr_parrangement_cd');

    try {
      // 品名CDの先頭が26のデータは除外する
      if (substr($recEstimate['ed_p_cd'], 0, 2) === '26') {
        return;
      }
      // ロット番号をセット
      $recEstimate['ed_lot_no'] = $recEstimate['ed_estimate_no'] . $recEstimate['ed_estimate_sub_no'];

      // Default値
      $updRecord['sr_belong_cd'] = $_SESSION['companycd'];
      $updRecord['sr_cd'] = '0000'; // 現在未使用
      $updRecord['sr_w_cd'] = $WCD;
      $updRecord['sr_p_cd'] = $recEstimate['ed_p_cd'];
      $updRecord['sr_sub_cd'] = self::storageSetPadding($recEstimate);
      $updRecord['sr_sub_01'] = self::checkNotSet($recEstimate['ed_sub_01']) ? 0 : $recEstimate['ed_sub_01'];
      $updRecord['sr_sub_02'] = self::checkNotSet($recEstimate['ed_sub_02']) ? 0 : $recEstimate['ed_sub_02'];
      $updRecord['sr_sub_03'] = $recEstimate['ed_sub_03'];
      $updRecord['sr_sub_04'] = self::checkNotSet($recEstimate['ed_sub_04']) ? 0 : $recEstimate['ed_sub_04'];
      $updRecord['sr_sub_05'] = self::checkNotSet($recEstimate['ed_sub_05']) ? 0 : $recEstimate['ed_sub_05'];
      $updRecord['sr_sub_06'] = $recEstimate['ed_sub_06'];
      $updRecord['sr_sub_07'] = $recEstimate['ed_sub_07'];
      $updRecord['sr_sub_08'] = $recEstimate['ed_sub_08'];
      $updRecord['sr_sub_09'] = $recEstimate['ed_sub_09'];
      $updRecord['sr_sub_10'] = $recEstimate['ed_sub_10'];
      $updRecord['sr_sub_11'] = $recEstimate['ed_sub_11'];
      $updRecord['sr_sub_12'] = $recEstimate['ed_sub_12'];
      $updRecord['sr_sub_13'] = $recEstimate['ed_sub_13'];
      $updRecord['sr_sub_14'] = $recEstimate['ed_lot_no'];
      $updRecord['sr_transfer_date'] = self::checkNotSet($record['moed_accept_date']) ? $record['moed_arrival_plan_date'] : $record['moed_accept_date'];
      $updRecord['sr_prev_quantity'] = 0;
      $updRecord['sr_prev_quantity_eval'] = 0;
      $updRecord['sr_prev_price_eval'] = 0;
      $updRecord['sr_quantity'] = $recEstimate['ed_quantity'];
      $updRecord['sr_unit_cd'] = $recEstimate['ed_unit_tran'];
      $updRecord['sr_price_eval'] = $recEstimate['ed_price'];
      $updRecord['sr_dimension'] = $recEstimate['ed_sub_num_01'];
      $updRecord['sr_weight'] = $recEstimate['ed_sub_num_02'];
      $updRecord['sr_fix_price_eval'] = $recEstimate['ed_cost'];
      $updRecord['sr_remarks'] = '製造品';
      $updRecord['sr_update_at'] = self::currentDate();
      $updRecord['sr_update_cd'] = $_SESSION['usercd'];
      $updRecord['sr_type_subject'] = $TYPE_SUBJECT;
      $updRecord['sr_parrangement_cd'] = $recEstimate['ed_parrangement_cd'];
      $updRecord['sr_maker_cd'] = '';
      $updRecord['sr_type_material'] = '';

      if ($deleteFlg) {
        // 出庫
        $sth = $dbh->prepare('
        DELETE FROM storage
        WHERE sr_w_cd = :WAREHOUSECD
        AND sr_p_cd = :PRODUCTCD
        AND sr_sub_cd = :PSUPPLE
        AND sr_unit_cd = :UNITTRAN
        AND sr_type_subject = :SUBJECTCD
        AND sr_parrangement_cd = :PARCD 
        ;');
        $sth->bindValue(':WAREHOUSECD', $updRecord['sr_w_cd'], PDO::PARAM_STR);
        $sth->bindValue(':PRODUCTCD', $updRecord['sr_p_cd'], PDO::PARAM_STR);
        $sth->bindValue(':PSUPPLE', $updRecord['sr_sub_cd'], PDO::PARAM_STR);
        $sth->bindValue(':UNITTRAN', $updRecord['sr_unit_cd'], PDO::PARAM_STR);
        $sth->bindValue(':SUBJECTCD', $updRecord['sr_type_subject'], PDO::PARAM_STR);
        $sth->bindValue(':PARCD', $updRecord['sr_parrangement_cd'], PDO::PARAM_STR);
        $sth->execute();
      } else {
        $sth = $dbh->prepare('
        SELECT * FROM storage
        WHERE sr_w_cd = :WAREHOUSECD
        AND sr_p_cd = :PRODUCTCD
        AND sr_sub_cd = :PSUPPLE
        AND sr_unit_cd = :UNITTRAN
        AND sr_type_subject = :SUBJECTCD
        AND sr_parrangement_cd = :PARCD          
        ');
        $sth->bindValue(':WAREHOUSECD', $updRecord['sr_w_cd'], PDO::PARAM_STR);
        $sth->bindValue(':PRODUCTCD', $updRecord['sr_p_cd'], PDO::PARAM_STR);
        $sth->bindValue(':PSUPPLE', $updRecord['sr_sub_cd'], PDO::PARAM_STR);
        $sth->bindValue(':UNITTRAN', $updRecord['sr_unit_cd'], PDO::PARAM_STR);
        $sth->bindValue(':SUBJECTCD', $updRecord['sr_type_subject'], PDO::PARAM_STR);
        $sth->bindValue(':PARCD', $updRecord['sr_parrangement_cd'], PDO::PARAM_STR);
        $sth->execute();
        $rsltStore = $sth->fetchAll(PDO::FETCH_ASSOC);

        if (count($rsltStore) <= 0) {
          $sth = $dbh->prepare(self::makeInsertSQL('storage', $columnsH));
          self::bindInsertKeys($sth, $columnsH, $updRecord);
          $sth->execute();
        }
      }
    } catch (Exception $e) {
      throw $e;
    }
  }


  /***
   * 製造使用品の減少
   */
  private static function decreaseProductStorageRecord ($record, $dbh) {
    try {
      $stringCheckFlg = false;
      // $isFloat = false;
      $psupple = '';
      $psupple = self::storageSetPadding($record);

      if (preg_match('/×/', $record['sub08'])) {
        $stringCheckFlg = true;
      } 
      // else if (preg_match('/./', $record['sub08'])) {
      //   $isFloat = true;
      // }

      $strSQL = '';
      $strSQL = '
      SELECT * FROM storage
        WHERE sr_w_cd = :WAREHOUSECD
        AND sr_p_cd = :PRODUCTCD
        AND sr_sub_01 = :SUB01
        AND sr_sub_02 = :SUB02
        AND sr_sub_03 = :SUB03
        AND sr_sub_04 = :SUB04
        AND sr_sub_05 = :SUB05
        AND sr_sub_06 = :SUB06
      ';
      if (!$stringCheckFlg) {
        $strSQL .= ' AND (sr_sub_08 * 10) = :SUB08 ';
      } else {
        $strSQL .= ' AND sr_sub_08 = :SUB08 ';
      }

      $strSQL .= '
      AND sr_sub_09 = :SUB09
      AND sr_sub_10 = :SUB10
      AND sr_sub_11 = :SUB11
      AND sr_sub_12 = :SUB12
      AND sr_sub_13 = :SUB13
      AND sr_sub_14 = :LOTNO
      AND sr_unit_cd = :UNITTRAN
      AND sr_type_subject = :SUBJECTCD
      AND sr_parrangement_cd = :PARCD
      ';
      $sth = $dbh->prepare($strSQL);

      $sth->bindValue(':WAREHOUSECD', $record['stc_place_cd'], PDO::PARAM_STR);
      $sth->bindValue(':PRODUCTCD', $record['stc_product_cd'], PDO::PARAM_STR);
      $sth->bindValue(':SUB01', $record['sub01'], PDO::PARAM_STR);
      $sth->bindValue(':SUB02', $record['sub02'], PDO::PARAM_STR);
      $sth->bindValue(':SUB03', $record['sub03'], PDO::PARAM_STR);
      $sth->bindValue(':SUB04', $record['sub04'], PDO::PARAM_STR);
      $sth->bindValue(':SUB05', $record['sub05'], PDO::PARAM_STR);
      $sth->bindValue(':SUB06', $record['sub06'], PDO::PARAM_STR);
      if (!$stringCheckFlg) {
        $sth->bindValue(':SUB08', $record['sub08'] * 10, PDO::PARAM_STR);
      } else {
        $sth->bindValue(':SUB08', $record['sub08'], PDO::PARAM_STR);
      }
      $sth->bindValue(':SUB09', $record['sub09'], PDO::PARAM_STR);
      $sth->bindValue(':SUB10', $record['sub10'], PDO::PARAM_STR);
      $sth->bindValue(':SUB11', $record['sub11'], PDO::PARAM_STR);
      $sth->bindValue(':SUB12', $record['sub12'], PDO::PARAM_STR);
      $sth->bindValue(':SUB13', $record['sub13'], PDO::PARAM_STR);
      $sth->bindValue(':LOTNO', $record['stc_type_04'], PDO::PARAM_STR);
      // $sth->bindValue(':PSUPPLE', $psupple, PDO::PARAM_STR);
      $sth->bindValue(':UNITTRAN', $record['stc_unit_tran'], PDO::PARAM_STR);
      $sth->bindValue(':SUBJECTCD', $record['stc_type_subject'], PDO::PARAM_STR);
      $sth->bindValue(':PARCD', $record['stc_parrangement_cd'], PDO::PARAM_STR);
      $sth->execute();
      $rsltStore = $sth->fetchAll(PDO::FETCH_ASSOC);

      if (count($rsltStore) <= 0) {
        return;
      } else {
        $rsltStore[0]['sr_quantity'] = $rsltStore[0]['sr_quantity'] - $record['stc_qty_trans'];

        $sth = $dbh->prepare('
        UPDATE storage
        SET sr_quantity = :QTY, sr_update_at = :UPDATEAT, sr_update_cd = :UPDATECD
        WHERE sr_w_cd = :WAREHOUSECD
        AND sr_p_cd = :PRODUCTCD
        AND sr_sub_cd = :PSUPPLE
        AND sr_unit_cd = :UNITTRAN
        AND sr_type_subject = :SUBJECTCD
        AND sr_parrangement_cd = :PARCD     
        ;');
        $sth->bindValue(':QTY', $rsltStore[0]['sr_quantity'], PDO::PARAM_STR);
        $sth->bindValue(':UPDATEAT', self::currentDate(), PDO::PARAM_STR);
        $sth->bindValue(':UPDATECD', $_SESSION['usercd'], PDO::PARAM_STR);
        $sth->bindValue(':WAREHOUSECD', $record['stc_place_cd'], PDO::PARAM_STR);
        $sth->bindValue(':PRODUCTCD', $record['stc_product_cd'], PDO::PARAM_STR);
        $sth->bindValue(':PSUPPLE', $psupple, PDO::PARAM_STR);
        $sth->bindValue(':UNITTRAN', $record['stc_unit_tran'], PDO::PARAM_STR);
        $sth->bindValue(':SUBJECTCD', $record['stc_type_subject'], PDO::PARAM_STR);
        $sth->bindValue(':PARCD', $record['stc_parrangement_cd'], PDO::PARAM_STR);
        $sth->execute();
      }
    } catch (Exception $e) {
      throw $e;
    }
  }


  // private static function deleteStorageRecord ($record) {
  //   try {
  //     $sth = $dbh->prepare('
  //     DELETE FROM storage
  //     WHERE  sr_w_cd = :WAREHOUSECD
  //     AND sr_p_cd = :PRODUCTCD
  //     AND sr_sub_cd = :PSUPPLE
  //     AND sr_unit_cd = :UNITTRAN
  //     AND sr_type_subject = :SUBJECTCD
  //     AND sr_parrangement_cd = :PARCD    
  //     ;');
  //     $sth->bindValue(':WAREHOUSECD', );
  //     $sth->bindValue(':PRODUCTCD');
  //     $sth->bindValue(':PSUPPLE');
  //     $sth->bindValue(':UNITTRAN');
  //     $sth->bindValue(':SUBJECTCD');
  //     $sth->bindValue(':PARCD');
  //     $sth->execute();
  //     $result = $sth->fetchAll(PDO::FETCH_ASSOC);
  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }

  // /***
  //  * 在庫出荷、材料入庫
  //  * mode:0は追加、1は取消や減少
  //  */
  // private static function updateStorageRecord($record, $mode, $dbh) {
  //   try {
  //       // 在庫追加

  //     } else {

  //     }
  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }


  // /***
  //  * 在庫の移動・数量調整・簿外移動
  //  */
  // private static function transStorageRecord($record, $mode, $dbh) {
  //   try {

  //   } catch (Exception $e) {
  //     throw $e;
  //   }
  // }


}
